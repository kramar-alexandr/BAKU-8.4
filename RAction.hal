//server-only
external inner function roundmode SetRoundModeD(Integer);// Edit ************************** Tuesday, 1 April 2014 17:03:06
external procedure LogProcTime(string,longint);
external inner procedure SDVcCreatePUINConsComp(var record SDVc);
external inner procedure SDVcCreateTransferOfGoods(var record SDVc);
remote inner updating procedure ExchCurrInTr41AccRow(string,longint);
remote inner updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
remote inner updating procedure updateResQtyFromSD (record SDVc,boolean);


/*global
updating function LongInt IVVcRecordCheck(record IVVc IVp,record IVVc IV2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode,updatemode;
  record IVrsVc IVrsr,IV1rsr;
  record INVc INr;
  record LocalMachineVc LMr;
  LongInt sernr;
  integer i,rwcnt;
  row IVVc IVpw;
  longint curtick;
	
	curtick = getcurtick();
  logtext(0,"IVVcRecordCheck");
  
  res = 0;
  
  //SetLangMode(LangRussian,"RUS",0);// Edit ************************** Wednesday, 5 November 2014 13:31:31
 
  res=inner.IVVcRecordCheck(IVp,IV2p,stat,long4);
  if res!=-1 then begin
    insertmode = 1;//Rs_insert
    updatemode = 2;//Rs_update
    if IVp.OKFlag==1 and (stat==insertmode or IV2p.OKFlag==0) then begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVpw);
        IV1rsr.SerNr = 999999999;
        if ReadLastMain(IV1rsr,1,false) then begin
          sernr = IV1rsr.SerNr + 1;
        end else begin
          sernr = 1;
        end;
        if nonblank(IVpw.ArtCode) then begin
          RecordNew(IVrsr);
          IVrsr.SerNr = sernr;
          IVrsr.IVNr = IVp.SerNr;
          IVrsr.TransDate = IVp.TransDate;
          IVrsr.RowNr = i;
          IVrsr.ArtCode = IVpw.ArtCode;
          IVrsr.Spec = IVpw.Spec;
          if IVp.InvType==3 then begin
            IVrsr.Quant = -IVpw.Quant;
            IVrsr.FIFO = -IVpw.FIFO;
            IVrsr.Sum = -IVpw.Sum;
          end else begin
            IVrsr.Quant = IVpw.Quant;
            IVrsr.FIFO = IVpw.FIFO;
            IVrsr.Sum = IVpw.Sum;
          end;
          INr.Code = IVpw.ArtCode;
          if ReadFirstMain(INr,1,true) then begin
            IVrsr.Group = INr.Group;
            IVrsr.DispGroups = INr.DispGroups;
          end;
          IVrsr.MachineName = IVp.MachineName;
          if RecordInsert(IVrsr,true) then begin 
          end;
        end;
      end;
    end;
  end;

  LIVVcRecordCheck:;
  IVVcRecordCheck = res;
	LogProcTime("IVVcRecordCheck",getcurtick()-curtick); 
  RETURN;
END;  */
global
updating function LongInt RebVcRecordCheck(var record RebVc Rebr,record RebVc Reb2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode;
  record RebVc locRebr;
  row RebVc Rebrw; //Edit***************************Sasha2,13:36 23.12.2015
  Integer rwcnt,i,cnt,j; //Edit***************************Sasha2,13:36 23.12.2015
  record INVc INr; //Edit***************************Sasha2,13:37 23.12.2015
  Boolean foundf; //Edit***************************Sasha2,14:15 23.12.2015
  vector LongInt doublrow;
  array string 255 MyRebRecord,MyToDate,MyFromDate;
  array val MyRebRecordVra;
  boolean testf,TrHs;
  string 255 noCreate,Created;
	longint curtick;
	
	curtick = getcurtick();
  res = inner.RebVcRecordCheck(Rebr,Reb2r,stat,long4);
	if blank(Rebr.Comment) then begin
    res = -1;
    RecordCheckError(36211,"",-1,"Comment");      
    goto LRebVcRecordCheck;     
  end; 
LRebVcRecordCheck:;	
// LogProcTime("RebVcRecordCheck",getcurtick()-curtick); 
RebVcRecordCheck = res;
return;
end;	

/*global
updating function LongInt IVVcRecordImportAfter(var record IVVc IVp,record IVVc IV2p,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record IVrsVc IVrsr,IV1rsr;
  record INVc INr;
  record LocalMachineVc LMr;
  LongInt sernr;
  integer i,rwcnt;
  row IVVc IVpw;
  
  res = inner.IVVcRecordImportAfter(IVp,IV2p,long3,long4);
  if res==-1 then begin
    if (IVp.OKFlag==1 and IVp.Invalid==0) then begin
      rwcnt = MatRowCnt(IVp);
      IV1rsr.SerNr = 999999999;
			if (ReadLastMain(IV1rsr,1,false)) then begin
				sernr = IV1rsr.SerNr + 1;
			end else begin
				sernr = 1;
			end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVpw);
        if (nonblank(IVpw.ArtCode)) then begin
          RecordNew(IVrsr);
          IVrsr.SerNr = sernr;
          IVrsr.IVNr = IVp.SerNr;
          IVrsr.TransDate = IVp.TransDate;
          IVrsr.RowNr = i;
          IVrsr.ArtCode = IVpw.ArtCode;
          IVrsr.Spec = IVpw.Spec;
          if IVp.InvType==3 then begin
            IVrsr.Quant = -IVpw.Quant;
            IVrsr.FIFO = -IVpw.FIFO;
            IVrsr.Sum = -IVpw.Sum;
          end else begin
            IVrsr.Quant = IVpw.Quant;
            IVrsr.FIFO = IVpw.FIFO;
            IVrsr.Sum = IVpw.Sum;
          end;
          INr.Code = IVpw.ArtCode;
          if ReadFirstMain(INr,1,true) then begin
            IVrsr.Group = INr.Group;
            IVrsr.DispGroups = INr.DispGroups;
          end;
          IVrsr.MachineName = IVp.MachineName;
          RecordInsert(IVrsr,true);
          sernr = sernr + 1;
        end;
      end;
    end;
  end;
  
  IVVcRecordImportAfter = res; 
  RETURN;
END;*/

global
updating function LongInt ExternalStoreVcRecordCheck(record ExternalStoreVc ESp,record ExternalStoreVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  
  res = 0;
  if (blank(ESp.Code)) then begin
    RecordCheckError(1058,ESp.Code,-1,"Code");      
    res = -1; 
    goto LExternalStoreVcRecordCheck;
  end;
  

  LExternalStoreVcRecordCheck:;
  ExternalStoreVcRecordCheck = res;
  RETURN;
END; 

updating procedure ExtSalesUpdateLoyaltyCard(string custcode,val sum,record ExternalSalesVc ESp)
begin
 record LoyaltyCardVc LCr;
 record PointsHistVc PHr;
 boolean TrHs,testf;
 
 LCr.CustCode = custcode;
 TrHs = true;
 while(loopkey("ActCustCode",LCr,1,TrHs))begin
 	testf = true;
 	if(LCr.CustCode!=custcode)then begin TrHs = false; testf = false; end;
 	if(LCr.LCMLevel!="1")then begin testf = false; end;
 	
 	if(testf)then begin
		LCr.StartBalance = LCr.StartBalance + sum;
		LCr.PointsBalance = LCr.PointsBalance + sum;
		recordstore(LCr,true);
	
		recordnew(PHr);
		PHr.SerNr = NextSerNr("PointsHistVc",PHr.TransDate,-1,false,"");
		PHr.FileName = "ExternalSalesVc";
		PHr.TransNr = ESp.SerNr;
		PHr.LMCardNr = LCr.SerNr;
		PHr.FWBalance = LCr.PointsBalance;
		PHr.Points = sum;
		PHr.CustCode = ESp.CustCode;
		PHr.Location = ESp.Location;
		RecordStore(PHr,false); 
 	end;
 end;

return;
end;


global
updating function LongInt ExternalSalesVcRecordRemoveTest(record ExternalSalesVc ESp,record ExternalSalesVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  res = 1;
  
  if(ESp.OKFlag==1)then begin
  	if (stat>0) then begin
			MessageBox(1560,"");
			res = 0;
		end;
  	
  end;
  ExternalSalesVcRecordRemoveTest = res;
  RETURN;
END;


global
updating function LongInt ExternalSalesVcRecordDefaults(record ExternalSalesVc ESp,record ExternalSalesVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

 
  ESp.TransDate = currentdate;
	
  ExternalSalesVcRecordDefaults = res;
  RETURN;
END; 

global
updating function LongInt ExternalSalesVcRecordCheck(record ExternalSalesVc ESp,record ExternalSalesVc ES2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode,updatemode;
  record LoyaltyCardVc LCr;
	
	logtext(0,"ExternalSalesVcRecordCheck");
	
  res = 0;
  
  if (ESp.SerNr<0) then begin
  	ESp.SerNr = NextSerNr("ExternalSalesVc",CurrentDate,-1,false,"");
  end;
  if (blank(ESp.CustCode)) then begin
    RecordCheckError(1058,ESp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if (blank(ESp.TransDate)) then begin
    RecordCheckError(1058,ESp.TransDate,-1,"TransDate");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if (blank(ESp.Location)) then begin
    RecordCheckError(1058,ESp.Location,-1,"Location");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if (ESp.Sum==0) then begin
    RecordCheckError(1058,ESp.Sum,-1,"Sum");      
    res = -1; 
    goto LExternalSalesVcRecordCheck;
  end;
  if(ESp.OKFlag==1)then begin
  	LCr.CustCode = ESp.CustCode;
  	if(readfirstkey("ActCustCode",LCr,1,true)==false)then begin
  		RecordCheckError(31003,ESp.CustCode,-1,"CustCode");      
			res = -1; 
			goto LExternalSalesVcRecordCheck;
  	end;
  end;
  
  
	insertmode = 1;
  updatemode = 2;
  
  if(stat==insertmode)then begin
  	if(ESp.OKFlag==1)then begin
			ExtSalesUpdateLoyaltyCard(ESp.CustCode,ESp.Sum,ESp);
		end;
	end;
	if(stat==updatemode)then begin
  	if(ESp.OKFlag==1 and ES2p.OKFlag==0)then begin
			ExtSalesUpdateLoyaltyCard(ESp.CustCode,ESp.Sum,ESp);
		end;
		if(ESp.OKFlag==0 and ES2p.OKFlag==1)then begin
			ExtSalesUpdateLoyaltyCard(ESp.CustCode,-ESp.Sum,ESp);
		end;
	end;
	
  LExternalSalesVcRecordCheck:;
  ExternalSalesVcRecordCheck = res;
  RETURN;
END; 




global
function LongInt GCVcRecordDefaults(var record GCVc GCr,record GCVc GC2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = inner.GCVcRecordDefaults(GCr,GC2r,stat,long4);	
	GCr.Comment = CurMachineName; 
 	GCVcRecordDefaults = res; 
  RETURN;
END;	


global
function LongInt GCSVcRecordCheck(var record GCSVc GCSr,record GCSVc GCS2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = inner.GCSVcRecordCheck(GCSr,GCS2r,stat,long4);	
	if (GCSr.ExpiryDate<=GCSr.TransDate) then begin				//Edit--------Dima-------30.12.2014
    		RecordCheckError(1142," " & GCSr.ExpiryDate,-1,"ExpiryDate");
    		res = -1;
  	end;

 	GCSVcRecordCheck = res; 
  RETURN;
END;




	
global
updating function LongInt SDVcRecordUpdateAfter(var record SDVc SDr,record SDVc SD2r,LongInt stat,LongInt long4)
begin
  LongInt res;
	res = 0;
	res = inner.SDVcRecordUpdateAfter(SDr,SD2r,stat,long4);
	
	if (SDr.OKFlag!=0 and SD2r.OKFlag==0) then begin
		ExchCurrInTr41AccRow("SDVc",SDr.SerNr);
	end;
	if(SDr.OKFlag==1 and SD2r.OKFlag==0)then begin
		if (SDr.Reservf==1) then begin
			SDVcCreateTransferOfGoods(SDr);
		end else begin
			if (SDr.Location!="CWH_I") then begin
				SDVcCreatePUINConsComp(SDr);
			end;
		end;
	end;
	
	if (SDr.Reservf!=0 and SD2r.Reservf==0 and SDr.OKFlag==0) then begin
		updateResQtyFromSD(SDr,true);
	end;
	
	if (SDr.Reservf==0 and SD2r.Reservf==1 and SDr.OKFlag==0) then begin
		updateResQtyFromSD(SDr,false);
	end;
	
	if (SDr.Reservf==1 and SD2r.Reservf==1 and SD2r.OKFlag==0 and SDr.OKFlag==1) then begin
		updateResQtyFromSD(SDr,false);
	end;
	
  SDVcRecordUpdateAfter = res;
  RETURN;
END;

global// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 03 09 2020 y. at 12:09:55 PM
function LongInt UserLoginVcRecordImportTest(var record UserLoginVc RHr,record UserLoginVc RH2r,LongInt long3,LongInt long4)
begin


UserLoginVcRecordImportTest = 0;

return;
end;


global
function LongInt RHistVcRecordImportTest(var record RHistVc RHr,record RHistVc RH2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 10 c;
  string 50 recname,compnr;
  integer cter,i,pref,check;
  
  res = 1;
	if(RHr.accode==kRecordHistoryActionRead)then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	
	
	lRHistVcRecordImportTest:;
	
	RHistVcRecordImportTest = res;
return;
end;

/*
global
function LongInt RHistVcRecordImportTest(var record RHistVc RHr,record RHistVc RH2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 10 c;
  string 50 recname,compnr;
  integer cter,i,pref,check;
  
  res = 1;
	if(RHr.accode==kRecordHistoryActionRead)then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	
	if(compnr=="10")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="11")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="12")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="15")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="26")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="27")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="29")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="30")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="31")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="32")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(compnr=="33")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	
	
	c = left(RHr.RecidStr,1);
	pref = asc(c) + 1;
	compnr = mid(RHr.RecidStr,1,asc(c));
	recname = "";
  cter = 0;
  if(pref<len(RHr.RecidStr))then begin
		for(i=pref;i<len(RHr.RecidStr);i=i+1)begin
				c = mid(RHr.RecidStr,i,1);
			if(asc(c)==0)then begin
				i = len(RHr.RecidStr);
			end else begin
				recname = recname & c;
			end;
		end;
	end else begin
	end;
	if(blank(recname))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	
	if(uppercase(recname)=="USERVC")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="ERVC")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="TRVC" and RHr.TransDate<stringtodate("01/01/2019"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="DIVC")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="INVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="IVVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="VIVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="POVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="PUVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="IPVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="POVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="ORVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="PLVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="SHVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="SHVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="CLOUTVC" and RHr.TransDate<stringtodate("01/01/2018"))then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="STOCKTAKEVC")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	if(uppercase(recname)=="OBJVC")then begin
		res = 0;
		goto lRHistVcRecordImportTest;
	end;
	
	
lRHistVcRecordImportTest:;
  RHistVcRecordImportTest = res;
  RETURN;
END;
*/
global
function LongInt IVVcRecordDefaults(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
	LongInt res;
	
	res = inner.IVVcRecordDefaults(IVr,IV2r,long3,long4);
	IVr.CRMid = "";
	
	IVVcRecordDefaults = res;
return;
end;

