external procedure ExtractObj(string,var Integer,var string);
remote updating procedure R_ProceedChangeLoyCard(record RcVc);
external procedure FindRepDefHeader(string,string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean BPUVc_PasteArtCode(var record BigPUVc,Integer,var string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function roundmode SetRoundModeD(Integer);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
remote procedure PUDClassWeightRow(var record BigPUVc,integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:06 22.07.2019
remote procedure PUDClassCaratRow(var record BigPUVc,integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:06 22.07.2019
remote procedure BigPUSumUp(var record BigPUVc); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:38 22.07.2019
remote updating procedure CreatePOfromCCSH(record SHVc);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote procedure BPUDClassCustomsCostDo(var record BigPUVc);
remote procedure BPUDClassCost1Do(var record BigPUVc);
remote procedure IDGPUDClassCost1Do(var record BigPUVc);
remote procedure BPUDClassCost3Do(var record BigPUVc);
remote procedure BPUDClassCost4Do(var record BigPUVc);
remote procedure BPUDClassCost5Do(var record BigPUVc);
remote procedure BPUDClassShipCostDo(var record BigPUVc);
remote procedure CollectItemsFromDo(var record BigPUVc);
remote function Boolean remBPUDClassTax15PercentfEFAfter(var record BigPUVc,Integer); // Edit ****************** Ihor Trubachov 18*06*2021
remote function Boolean remBPUDClassCons15PercentfEFAfter(var record BigPUVc,Integer); // Edit ****************** Ihor Trubachov 25*06*2021
remote updating procedure Add_FAST_SHIPPING(var record IVVc);// Edit ****************** Ihor Trubachov 29*07*2021

SetLangMode(LangRussian,"RUS",0);


global
function Boolean VAT_ConsgBPU(var record BigPUVc BPUr,integer rownr) // Edit ************************** Ihor Trubachov 06*10*2021
BEGIN
	row BigPUVc BPUrw;
	record ERVc ERr;
	integer i;
	val cost;

	if(rownr>(-1))then begin
		MatRowGet(BPUr,rownr,BPUrw);
		if(Right(BPUrw.Location,3)=="CSG")then begin 
		
			//BPUrw.Tax15Percentf = 1;
			if(nonblank(BPUrw.CurrencyItem) and BPUrw.CurrencyItem!="AZN")then begin  // с учетом разных валют - перевод на AZN
				ERr.CurncyCode = BPUrw.CurrencyItem;
				if (ReadLastMain(ERr,1,true)) then begin
					BPUrw.RowCost2 = (BPUrw.UPrice * 0.15) * ERr.ToRate1;
				end;
			end else begin
				BPUrw.RowCost2 = BPUrw.UPrice * 0.15;
			end;
			MatRowPut(BPUr,rownr,BPUrw);
		end else begin
			BPUrw.RowCost2 = 0;
			// BPUrw.Tax15Percentf = 0;
			MatRowPut(BPUr,rownr,BPUrw);
		end;
	end;
	
	
	cost = 0;
	for(i=0;i<MatRowCnt(BPUr);i=i+1)begin
		MatRowGet(BPUr,i,BPUrw);
		
		if(Right(BPUrw.Location,3)=="CSG" and rownr==(-2))then begin
			BPUrw.Tax15Percentf=1;
			MatRowPut(BPUr,i,BPUrw);
		end;
		if(Right(BPUrw.Location,3)=="CSG" and rownr==(-3))then begin
			BPUrw.Tax15Percentf=0;
			MatRowPut(BPUr,i,BPUrw);
		end;
		
		if(Right(BPUrw.Location,3)=="CSG" and BPUrw.Tax15Percentf==1)then begin
			if(nonblank(BPUrw.CurrencyItem) and BPUrw.CurrencyItem!="AZN")then begin  // с учетом разных валют - перевод на AZN
				ERr.CurncyCode = BPUrw.CurrencyItem;
				if (ReadLastMain(ERr,1,true)) then begin
					BPUrw.RowCost2 = (BPUrw.UPrice * 0.15) * ERr.ToRate1;
				end;
			end else begin
				BPUrw.RowCost2 = BPUrw.UPrice * 0.15;
			end;
			
			MatRowPut(BPUr,i,BPUrw);
			
			// if(nonblank(BPUrw.CurrencyItem) and BPUrw.CurrencyItem!="AZN")then begin  // с учетом разных валют - перевод на AZN
				// ERr.CurncyCode = BPUrw.CurrencyItem;
				// if (ReadLastMain(ERr,1,true)) then begin
					// cost = cost + ((BPUrw.RowCost2 * BPUrw.Quant) * ERr.ToRate1);
				// end;
			// end else begin
				// cost = cost + (BPUrw.RowCost2 * BPUrw.Quant);
			// end;
			
			cost = cost + (BPUrw.RowCost2 * BPUrw.Quant);
			
		end else begin                                  
			BPUrw.RowCost2 = 0;
			// BPUrw.Tax15Percentf = 0;
			MatRowPut(BPUr,i,BPUrw);
		end;
	end;
	if(cost!=0)then begin
		BPUr.Cost2 = cost;
	end else begin  
		BPUr.Cost2 = 0;
	end;

  RETURN;
END;

global
procedure ExportToExcelNewINDsm()
begin
  record NewINVc NewINr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,NewINr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableToExcelNewINRn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = NewINr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;





global
procedure ExportTableNamesParamToExcelNewINDsm()
begin
  record NewINVc NewINr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,NewINr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableNamesParamToExcelNewINRn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = NewINr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;




global 
procedure ItemSaldoRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
	record UserVc User;
	integer i;
	string 20 loc;
	
	getwindowrecord(wn,RepSpec);
	User.Code = currentuser;
	if(readfirstmain(User,1,true))then begin
		if(nonblank(User.UserLocations) and usercanaction("AllowReportWithUserLoc",false))then begin
			i = 0;
			ExtractObjWithSeparator(",",User.UserLocations,true,i,loc);
			RepSpec.f1 = loc;
			putwindowrecord(wn,RepSpec);
		end;
	end;
return;
end;


global
procedure PecuniaryRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;


global
procedure PecuniaryTestRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PecuniaryRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f2 = LMb.DefLocation;
  RepSpec.f1 = LMb.LocalMachineCode;
  RepSpec.flags[29] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global 
procedure LoopNCSR(var record INVc INr)
begin
	Boolean res,testf;
	record NewClassSetVc NCSr;
	record BPISubGroupVc BPISubGroupr;
	row NewClassSetVc NCSrw;
	integer i;
	vector string 100 vtype;
	NCSr.Group="";
		while(LoopMain(NCSr,1,true)) begin
		  testf=true;
			if(NCSr.Type!=INr.BPISubGroup) then begin testf=false; end;
			if (testf) then begin
				for(i=0;i<matrowcnt(NCSr);i=i+1) begin
					matrowget(NCSr,i,NCSrw);
					vtype[NCSrw.CTypeName]="*";
				end;
				INr.BPICategory = vtype["Category"]; 
				INr.BPIMaterial = vtype["Material"];
			  INr.BPIColor = vtype["Color"];
				INr.BPIShape = vtype["Shape"];
				INr.BPISize = vtype["Size"];
				INr.BPIUse = vtype["Use"];
				INr.BPISex = vtype["Sex"];
				INr.BPIPlating = vtype["Plating"];
				INr.BPIClarity = vtype["Clarity"];
				INr.BPIWeight = vtype["Weigh"];
				INr.BPICut = vtype["Cut"];
				INr.BPIStone = vtype["Stone"];
				INr.BPIStrap = vtype["Strap"];
				INr.BPIOdour = vtype["Odour"];
			end;	
		end;
return;
end;

global
procedure SaleReportRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SaleReportRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global
procedure SalesReportExtRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SalesReportExtRClass");  
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

procedure INConsDClasspateCode(integer wn, integer changed)
begin
	record INConsVc INCr;
	record INVc INr;
	
	if(changed>0)then begin
		getwindowrecord(wn,INCr);
		INr.Code = INCr.Code;
		if(readfirstmain(INr,1,true))then begin
			INCr.Name = INr.Name;
			putwindowrecord(wn,INCr);
		end;
	end;
	
return
end;

global
function Boolean INConsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  switch (fieldname) begin
  	case "Code": INConsDClasspateCode(wn,changed);
  end;
  
return;
end;

global procedure DelBlankRowPUDsm()
begin
	record PUVc PUr;
	row PUVc PUrw;
	integer wn,i,rwcnt;
	
	wn = curwindow;
	getwindowrecord(wn,PUr);
	rwcnt = matrowcnt(PUr);
	
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(PUr,i,PUrw);
		if(blank(PUrw.ArtCode))then begin
			matrowdelete(PUr,i);
			i=i-1;
			rwcnt = rwcnt - 1;
		end;
	end;
	putwindowrecord(wn,PUr);
	
return;
end;


global 
procedure ExportRegIVDsm()
begin
	record IVVc IVr;
	integer wn;
	area arec;
	
	setareazerosize(arec);
	wn = curwindow;
	if(fileexists("IVBack/IV.txt"))then begin
	end else begin
		createfile("IVBack/IV.txt");
		closefile;
	end;
	getwindowrecord(wn,IVr);
	addrecordtoarea(IVr,"IVVc",arec);
	writeareatofile(arec,"IVBack/IV.txt",1);
	NewLine;
	
	
return;
end;


global 
procedure ChangeLoyaltyCardDsm()
begin
	record IVVc IVr;
	record RcVc RepSpec;
	integer wn;
	area arec;
	
	wn = curwindow;
	getwindowrecord(wn,IVr);
	if(nonblank(IVr.CustCode) and IVr.CustCode!="NONAME")then begin
		RepSpec.f4 = IVr.CustCode;
	end;
	if(nonblank(IVr.LoyaltyCardNr))then begin
		RepSpec.f1 = IVr.LoyaltyCardNr;
	end;
	
	OpenWindow("ChangeLoyCardDClass",0,0,"","",RepSpec);
		
return;
end;

global 
updating procedure ProceedChangeLoyCard()
begin
	record IVVc IVr;
	record RcVc RepSpec;
	integer wn;
	boolean testf;
	record LoyaltyCardVc LoyaltyCardr;

	testf = true;
	wn = curwindow;
	deselectwindow(wn,true);
	getwindowrecord(wn,RepSpec);
	
	if(RepSpec.flags[0]==0)then begin
		messagebox(0,"������� ������� ������ �����");
		testf = false;
	end;
	if(blank(RepSpec.f2))then begin
		messagebox(0,"������� ����� �������� �����");
		testf = false;
	end;
	if(RepSpec.flags[0]==1 and blank(RepSpec.f1))then begin
		messagebox(0,"������� ������ �������� �����");
		testf = false;
	end;
	if(blank(RepSpec.f4))then begin
		messagebox(0,"������� ID �������, �������� �������� ����� �����");
		testf = false;
	end;
	
	if(blank(RepSpec.f3))then begin
		messagebox(0,"������� ��� ���������� ������������ ������");
		testf = false;
	end;
	
	if(nonblank(RepSpec.f2))then begin
		LoyaltyCardr.SerNr = RepSpec.f2;
		if(readfirstmain(LoyaltyCardr,1,true))then begin
			messagebox(0,"����� ���������� � ����� �����-����� ��� ����������������!");
			testf = false;
		end;
	end;
	
	if(testf)then begin
		R_ProceedChangeLoyCard(RepSpec);
		closewindow(wn);
	end;
		
return;
end;

global 
function Boolean BPUDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  record INVc INr;
  GetWindowRecord(wn,BPUr);
	if(changedf!=0) then begin
		MatRowGet(BPUr,rownr,BPUrw);    
		INr.Code = BPUrw.ArtCode;
			if(ReadFirstMain(INr,1,true)) then begin BPUrw.Spec = INr.Name; end;
		MatRowPut(BPUr,rownr,BPUrw); 	
	end;
  PutWindowRecord(wn,BPUr);     
  BPUDClassArtCodeEFAfter = true;
  return;
end;


function Boolean BPUDClassCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
	record INVc INr;
	vector boolean Consf;
  
	total = 0;
	GetWindowRecord(wn,BPUr);
	if(changedf!=0) then begin
		BPUDClassCost1Do(BPUr);
	end;
	PutWindowRecord(wn,BPUr);     
  BPUDClassCost1EFAfter = true;
  return;
end;


global
function Boolean IDGPUDClassCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  row PUVc PUrw;
  integer i;
	val total;
	val FInBase;
	record INVc INr;
	vector boolean Consf;
  
	total = 0;
	GetWindowRecord(wn,PUr);
	if(changedf!=0) then begin
		IDGPUDClassCost1Do(PUr);
	end;
	PutWindowRecord(wn,PUr);     
  IDGPUDClassCost1EFAfter = true;
  return;
end;







function Boolean BPUDClassCost2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
	integer j,BProw,cnt;
	string 255 ordNr;
	record POVc POr;
	row POVc POrw;
	record BPIBrandVc BBr;
	record ConsCompBlock CCB;
	record INVc INr;
	record PosVc Posr;	
	val shipcostSum,CustomCostSum,RowCostSum1,RowCostSum2,RowCostSum3,RowCostSum4,RowCostSum5;
	boolean Consf, SecondPO, Errf;
  
	total = 0;
	GetWindowRecord(wn,BPUr);
	i=0;
	ExtractObj(BPUr.FromOrds,i,ordNr);
	while (nonblank(ordNr)) begin
		POr.SerNr = ordNr;
		if(ReadFirstMain(POr,1,true)) then begin
			if (right(POr.Location,3)!="CSG") then begin
				Errf = true;
			end;
		end;
		ExtractObj(BPUr.FromOrds,i,ordNr);
	end;
				
	if (!Errf) then begin
		remBPUDClassCons15PercentfEFAfter(BPUr,wn);
		BPUr.Tax15PercentSum = 0;
		remBPUDClassTax15PercentfEFAfter(BPUr,wn);
	end else begin
		BPUr.Cost2 = 0;
		remBPUDClassCons15PercentfEFAfter(BPUr,wn);
		messagebox(36416,"");
	end;
	// for(i=0;i<matrowcnt(BPUr);i=i+1) begin
		// MatRowGet(BPUr,i,BPUrw);
		// total = total + BPUrw.Quant * BPUrw.UPrice;
	// end;
	// FInBase = BPUr.Cost2;
	// for(i=0;i<matrowcnt(BPUr);i=i+1) begin
		// MatRowGet(BPUr,i,BPUrw);
		// BPUrw.RowCost2 = FInBase * (BPUrw.UPrice/total);
		// MatRowPut(BPUr,i,BPUrw);
	// end;
	// BigPUSumUp(BPUr);
	PutWindowRecord(wn,BPUr);     
  BPUDClassCost2EFAfter = true;
  return;
end;

function Boolean BPUDClassCost3EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
  
	total = 0;
	GetWindowRecord(wn,BPUr);
	if(changedf!=0) then begin
		BPUDClassCost3Do(BPUr);
	end;
	PutWindowRecord(wn,BPUr);     
  BPUDClassCost3EFAfter = true;
  return;
end;

function Boolean BPUDClassCost4EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
  
	total = 0;
	GetWindowRecord(wn,BPUr);
	if(changedf!=0) then begin
		BPUDClassCost4Do(BPUr);
	end;
	PutWindowRecord(wn,BPUr);     
  BPUDClassCost4EFAfter = true;
  return;
end;

function Boolean BPUDClassCost5EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
  
	total = 0;
	GetWindowRecord(wn,BPUr);
	if(changedf!=0) then begin
		BPUDClassCost5Do(BPUr);
	end;
	PutWindowRecord(wn,BPUr);     
  BPUDClassCost5EFAfter = true;
  return;
end;


function Boolean BPUDClassShipCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
  
	total = 0;
	GetWindowRecord(wn,BPUr);
	if(changedf!=0) then begin
		BPUDClassShipCostDo(BPUr);
	end;
	PutWindowRecord(wn,BPUr);     
  BPUDClassShipCostEFAfter = true;
  return;
end;

global 
function Boolean BPUDClassCustomsCostEFAfter(Integer wn,boolean changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  integer i;
	val total;
	val FInBase;
	record ConsCompBlock CCBb;
	record INVc INr;
	
	BlockLoad(CCBb);
	
	
	if(changedf) then begin
		GetWindowRecord(wn,BPUr);
		BPUDClassCustomsCostDo(BPUr);
		PutWindowRecord(wn,BPUr);   
	end;
	/*if(BPUr.OKFlag!=0) then begin
		for(i=0;i<matrowcnt(BPUr);i=i+1) begin
			MatRowGet(BPUr,i,BPUrw);
			total = total + BPUrw.Quant * BPUrw.UPrice;
		end;
		if(nonblank(BPUr.CurrencyT) and BPUr.CurrencyT!="AZN") then begin
			FInBase = MulRateToBase1(BPUr.CurrencyT,BPUr.CustomsCost,BPUr.FrRateT,BPUr.ToRateT,BPUr.ToRateT,BPUr.FrRateT,BPUr.ToRateT,SetROundModeD(5));
		end else begin 	FInBase = BPUr.CustomsCost; end;
		if(BPUr.ConsManualCost==1)then begin
			BPUr.ConsManualCost = 0;
		end;
		for(i=0;i<matrowcnt(BPUr);i=i+1) begin
			MatRowGet(BPUr,i,BPUrw);
			BPUrw.CustomsCost = FInBase * (BPUrw.UPrice/total);
			MatRowPut(BPUr,i,BPUrw);
		end;
		BigPUSumUp(BPUr);
	end;	*/
	
  BPUDClassCustomsCostEFAfter = true;
  return;
end;

global 
function Boolean BPUDClassCurrencyFEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
val fr,to1,to2,br1,br2;
record BigPUVc BPUr;

  row BigPUVc BPUrw;
	GetWindowRecord(wn,BPUr);
	GetFullCurncyRate(BPUr.CurrencyF,CurrentDate,fr,to1,to2,br1,br2);
	BPUr.FrRateF = fr;
	BPUr.ToRateF = to1;
	PutWindowRecord(wn,BPUr);
	BPUDClassShipCostEFAfter(wn,fn,rownr,changedf);
	BPUDClassCurrencyFEFAfter = true;
return;
end;

global 
function Boolean BPUDClassCurrencyTEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
val fr,to1,to2,br1,br2;
record BigPUVc BPUr;

  row BigPUVc BPUrw;
	GetWindowRecord(wn,BPUr);
	GetFullCurncyRate(BPUr.CurrencyT,CurrentDate,fr,to1,to2,br1,br2);
	BPUr.FrRateT = fr;
	BPUr.ToRateT = to1;
	PutWindowRecord(wn,BPUr);
	BPUDClassCustomsCostEFAfter(wn,true);
	BPUDClassCurrencyTEFAfter = true;
return;
end;

global 
function Boolean BPUDClassFromOrdsEFAfter(Integer wn,Integer fn,Integer changedf)
begin
record BigPUVc BPUr;
integer pos;
string 255 obj,set;
vector boolean used;
getwindowrecord(wn,BPUr);
pos = 0;
obj = "";
set = "";
ExtractObj(BPUr.FromOrds,pos,obj);
while(nonblank(obj)) begin
	if(nonblank(set)) then begin
		set = set & ",";
	end;
	if(!used[obj]) then begin
		set = set & obj;
		used[obj] = true;
	end else begin
		messagebox(0,obj & " ��� ��� �������");
		set = Left(set,len(set)-1);
	end;	
	ExtractObj(BPUr.FromOrds,pos,obj);
end;
BPUr.FromOrds = set;
PutWindowRecord(wn,BPUr);
BPUDClassFromOrdsEFAfter = true;
return;
end;




global 
function Boolean PUDClassWeightRowEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf,integer column)
begin
  Boolean chsum,chrsum;
  record BigPUVc PUr;
  row BigPUVc PUrw;
  val p,s;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
		PUDClassWeightRow(PUr,rownr);
    BigPUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassWeightRowEFAfter = true;
  return;
end;



global 
function Boolean PUDClassCaratRowEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf,integer column)
begin
  Boolean chsum,chrsum;
  record BigPUVc PUr;
  row BigPUVc PUrw;
  val p,s;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
		PUDClassCaratRow(PUr,rownr);
    BigPUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCaratRowEFAfter = true;
  return;
end;


global 
function Boolean PUDClassCaratplacerRowEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf,integer column)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
		PUDClassCaratRow(PUr,rownr);
    BigPUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCaratplacerRowEFAfter = true;
  return;
end;



global
function Boolean BigPUDClassConsManualCostButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record BigPUVc BigPUr;
  row BigPUVc BigPUrw;
  record POSettingBlock POSb;
  Integer err,i,mtrw;
	Integer fn, rownr,changed;
  
  res = true;
 	
 	getwindowrecord(wn,BigPUr);
 	res = BPUDClassCustomsCostEFAfter(wn,true);
  
LPODClassOKFlagButtonAction:;   
  BigPUDClassConsManualCostButtonAction = res;
  RETURN;
END;

global 
function Boolean BPUDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BigPUVc BPUr;
  row BigPUVc BPUrw;
  record INVc INr;
	if(changedf!=0) then begin
		
		GetWindowRecord(wn,BPUr);
		MatRowGet(BPUr,rownr,BPUrw);    
		BPUrw.Sum = BPUrw.Quant * BPUrw.UPrice;
		MatRowPut(BPUr,rownr,BPUrw); 
		PutWindowRecord(wn,BPUr);   
		BPUDClassShipCostEFAfter(wn,fn,-1,changedf);
		BPUDClassCustomsCostEFAfter(wn,changedf);
		BPUDClassCost1EFAfter(wn,fn,-1,changedf);
		// BPUDClassCost2EFAfter(wn,fn,-1,changedf);
		BPUDClassCost3EFAfter(wn,fn,-1,changedf);
		BPUDClassCost4EFAfter(wn,fn,-1,changedf);
		BPUDClassCost5EFAfter(wn,fn,-1,changedf);	

		// remBPUDClassTax15PercentfEFAfter(BPUr,wn); // Edit ****************** Ihor Trubachov 18*06*2021
		// remBPUDClassCons15PercentfEFAfter(BPUr,wn);	 // Edit ****************** Ihor Trubachov 25*06*2021
		PutWindowRecord(wn,BPUr);
	end;	
  BPUDClassQuantEFAfter = true;
  return;
end;

global 
function Boolean BPUDClassUPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
	record BigPUVc BPUr;
  row PUVc PUrw;
  val p,s;

  if (changedf!=0) then begin
		BPUDClassQuantEFAfter(wn,fn,rownr,changedf);
		GetWindowRecord(wn,BPUr);   
		// remBPUDClassTax15PercentfEFAfter(BPUr,wn);
		// remBPUDClassCons15PercentfEFAfter(BPUr,wn);	 // Edit ****************** Ihor Trubachov 25*06*2021
		VAT_ConsgBPU(BPUr,rownr);// Edit ************************** Ihor Trubachov 06*10*2021
		PutWindowRecord(wn,BPUr);
  end;
  BPUDClassUPriceEFAfter = true;
  return;
end;


global 
function Boolean BPUDClassTax15PercentSumEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf) // Edit ****************** Ihor Trubachov 16*06*2021
begin
 record BigPUVc BPUr;
	row BigPUVc BPUrw;
	integer i,j,BProw,cnt;
	string 255 ordNr;
	record POVc POr;
	row POVc POrw;
	record BPIBrandVc BBr;
	record ConsCompBlock CCB;
	record INVc INr;
	record PosVc Posr;	
	val shipcostSum,CustomCostSum,RowCostSum1,RowCostSum2,RowCostSum3,RowCostSum4,RowCostSum5;
	boolean Consf, SecondPO, Errf;


  if (changedf!=0) then begin
		GetWindowRecord(wn,BPUr); 
		
		i=0;
		ExtractObj(BPUr.FromOrds,i,ordNr);
		while (nonblank(ordNr)) begin
			POr.SerNr = ordNr;
			if(ReadFirstMain(POr,1,true)) then begin
				if (right(POr.Location,3)=="CSG") then begin
					Errf = true;
				end;
			end;
			ExtractObj(BPUr.FromOrds,i,ordNr);
		end;
		
		
		if (!Errf) then begin
			if (BPUr.Tax15PercentSum==blankval) then begin BPUr.Tax15PercentSum = 0; end;
			remBPUDClassTax15PercentfEFAfter(BPUr,wn);
			BPUr.Cost2 = 0;
			remBPUDClassCons15PercentfEFAfter(BPUr,wn);
		end else begin
			BPUr.Tax15PercentSum = 0;
			remBPUDClassTax15PercentfEFAfter(BPUr,wn);
			messagebox(36415,"");
		end;
		PutWindowRecord(wn,BPUr);
  end;
	
  BPUDClassTax15PercentSumEFAfter = true;
  return;
end;

global 
function Boolean BPUDClassTax15PercentfEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf) // Edit ****************** Ihor Trubachov 17*06*2021
begin
 record BigPUVc BPUr;
 row BigPUVc BPUrw;
  
  if (changedf!=0) then begin
		GetWindowRecord(wn,BPUr); 
		matrowget (BPUr,rownr,BPUrw);
		if (right(BPUrw.Location,3)!="CSG") then begin
			remBPUDClassTax15PercentfEFAfter(BPUr,wn);
		end else begin
			remBPUDClassCons15PercentfEFAfter(BPUr,wn);	 // Edit ****************** Ihor Trubachov 25*06*2021
		end;
		VAT_ConsgBPU(BPUr,rownr);// Edit ************************** Ihor Trubachov 06*10*2021
		
		PutWindowRecord(wn,BPUr);
  end;
	
  BPUDClassTax15PercentfEFAfter = true;
  return;
end;

global
updating function Boolean BigPUDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    
    case "ArtCode": res = BPUDClassArtCodeEFAfter(wn,fn,rownr,changed);
		case "ShipCost": res = BPUDClassShipCostEFAfter(wn,fn,rownr,changed);	
		case "Cost1": res = BPUDClassCost1EFAfter(wn,fn,rownr,changed);
		case "Cost2": res = BPUDClassCost2EFAfter(wn,fn,rownr,changed);
		case "Cost3": res = BPUDClassCost3EFAfter(wn,fn,rownr,changed);
		case "Cost4": res = BPUDClassCost4EFAfter(wn,fn,rownr,changed);
		case "Cost5": res = BPUDClassCost5EFAfter(wn,fn,rownr,changed);
		case "CustomsCost": res = BPUDClassCustomsCostEFAfter(wn,changed);
		case "CurrencyF": res = BPUDClassCurrencyFEFAfter(wn,fn,rownr,changed);
		case "CurrencyT": res = BPUDClassCurrencyTEFAfter(wn,fn,rownr,changed);
		case "WeightRow": res = PUDClassWeightRowEFAfter(wn,fn,rownr,changed,4);
    case "CaratRow": res = PUDClassCaratRowEFAfter(wn,fn,rownr,changed,5);
		case "CaratplacerRow": res = PUDClassCaratRowEFAfter(wn,fn,rownr,changed,5);
		case "FromOrds": res = BPUDClassFromOrdsEFAfter(wn,fn,changed);
		case "ToRateF": res = BPUDClassShipCostEFAfter(wn,fn,rownr,changed);
		case "ToRateT": res = BPUDClassCustomsCostEFAfter(wn,changed);
		case "Quant": res = BPUDClassQuantEFAfter(wn,fn,rownr,changed);
		case "UPrice": res = BPUDClassUPriceEFAfter(wn,fn,rownr,changed);
		case "Tax15PercentSum": res = BPUDClassTax15PercentSumEFAfter(wn,fn,rownr,changed); // Edit ****************** Ihor Trubachov 16*06*2021
		case "Tax15Percentf": res = BPUDClassTax15PercentfEFAfter(wn,fn,rownr,changed); // Edit ****************** Ihor Trubachov 17*06*2021
  end;
  BigPUDClassAfterEditField = res;
  RETURN;
END;








global 
updating procedure CollectItemsFromOrd()
begin
record BigPUVc BPUr;
row BigPUVc BPUrw;
integer wn,i,j,BProw,cnt;
string 255 ordNr;
record POVc POr;
row POVc POrw;
record BPIBrandVc BBr;
record ConsCompBlock CCB;
record INVc INr;
record PosVc Posr;	
val shipcostSum,CustomCostSum,RowCostSum1,RowCostSum2,RowCostSum3,RowCostSum4,RowCostSum5;
boolean Consf, SecondPO, Errf;

  
  wn = curwindow;
	DeselectWindow(wn,true);
	getwindowrecord(wn,BPUr);
	i=0;
	ExtractObj(BPUr.FromOrds,i,ordNr);
	while (nonblank(ordNr)) begin
		POr.SerNr = ordNr;
		if(ReadFirstMain(POr,1,true)) then begin
			if (right(POr.Location,3)=="CSG" and !SecondPO) then begin
				Consf = true;
			end;
			if (right(POr.Location,3)=="CSG" and SecondPO and !Consf) then begin
				MessageBox (36417,"");
				Errf = true;
			end;
			
			if (right(POr.Location,3)!="CSG" and SecondPO and Consf) then begin
				MessageBox (36417,"");
				Errf = true;
			end;
			SecondPO = true;
		end;
		ExtractObj(BPUr.FromOrds,i,ordNr);
	end;
	if (!Errf) then begin
		CollectItemsFromDo(BPUr);
	end;
	
	VAT_ConsgBPU(BPUr,-1);// Edit ************************** Ihor Trubachov 06*10*2021
	putwindowrecord(wn,BPUr);	

return;
end;

global 
updating procedure OrderStatusInfoMn()
begin
	integer wn,nwn;
	record RcVc RepSpec;

	nwn = OpenWindow("OrderStatusInfoAClass",0,0,"","",RepSpec);

  return;
end;

global
function Boolean ChangeLoyCardDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record LoyaltyCardVc LoyaltyCardr;
	record RcVc RepSpec;
	
  switch (fieldname) begin
    case "f1": 	getwindowrecord(wn,RepSpec);
    						LoyaltyCardr.SerNr = RepSpec.f1;
    						if(readfirstmain(LoyaltyCardr,1,true))then begin
    							if(nonblank(LoyaltyCardr.CustCode))then begin
    								RepSpec.f4 = LoyaltyCardr.CustCode;
    								putwindowrecord(wn,RepSpec);
    							end;
    						end else begin
    							messagebox(0,"����� ����� ������ �������");
    						end;
    
  end;
  ChangeLoyCardDClassAfterEditField = true;
  return;
end;

global
function Boolean BrandsReportTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
	record BrandsReportCCBlock BRCr;
	row BrandsReportCCBlock BRCrw;
	record BPIBrandVc BBr;
	
  switch (fieldname) begin
    case "Brand": 	
								if(rownr > -1) then begin
									getwindowrecord(wn,BRCr);
									matrowget(BRCr,rownr,BRCrw);
									BBr.Code = BRCrw.Brand;
									if(readfirstmain(BBr,1,true))then begin
										BRCrw.Comment = BBr.Name;
										matrowput(BRCr,rownr,BRCrw);
									end;
									putwindowrecord(wn,BRCr);
								end;	
    
  end;
  BrandsReportTClassAfterEditField = true;
  return;
end;

global 
 procedure GlobResRClassReportDefaults(integer wn)
begin
	record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ResRClass");  
  //FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
	RepSpec.Comparison = 1;
	RepSpec.AccSpec = 1;
	RepSpec.f10 = "1";
  RepSpec.flags[1] = 1;
  RepSpec.Stext = RepSpec.Period2Str;
  RepSpec.AccSpec = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
return;
end;

global 
updating procedure CheckPOCreate()
begin
record SHVc SHr;
integer wn;
wn = CurWindow;
GetWindowRecord(wn,SHr);
CreatePOfromCCSH(SHr);
return;
end;



global
procedure ExportToExcelPUDsm()
begin
  record PUVc PUr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableToExcelPURn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = PUr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;

global
procedure ExportToExcelBigPUDsm()
begin
  record BigPUVc BigPUr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,BigPUr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableToExcelBigPURn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = BigPUr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;

global
procedure ExportToExcelPODsm()
begin
  record POVc POr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,POr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableToExcelPORn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = POr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;

global
procedure ExportToExcelORDsm()
begin
  record ORVc ORr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,ORr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableToExcelORRn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = ORr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;

global
procedure ExportToExcelSDDsm()
begin
  record SDVc SDr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,SDr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableToExcelSDRn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = SDr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;

global
procedure ExportToExcelSHDsm()
begin
  record SHVc SHr;
  record RcVc RepSpec;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,SHr);
  RepSpec.Media = mtClipBoard;
  RepSpec.repname = "ExportTableToExcelSHRn";
  RepSpec.flags[0] = wn;
  RepSpec.long1 = SHr.SerNr;
	RunReport(RepSpec,0);
  
return;
end;


global
function Boolean BPUDClassOnOverStrike(Integer wn,Integer rownr) // Edit ****************** Ihor Trubachov 21*06*2021
BEGIN
  record BigPUVc BPUr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,BPUr);    
		remBPUDClassTax15PercentfEFAfter(BPUr,wn);	
		remBPUDClassCons15PercentfEFAfter(BPUr,wn);	 // Edit ****************** Ihor Trubachov 25*06*2021
    PutWindowRecord(wn,BPUr);    
  end;
  BPUDClassOnOverStrike = true;
  RETURN;
END;





global
updating procedure FAST_SHIPPING_Dsm()
begin
  record ORVc ORr;
	record IVVc IVr;
	record RLinkVc RLr;
  integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,ORr);
	
	if (CurrentCompany==29) then begin
		if(ReadRecordLink(ORr,1,IVr,RLr))then begin
			Add_FAST_SHIPPING(IVr);
		end else begin
			messagebox(0,"Счет-фактура не найдена!");
		end;
	end;
	
return;
end;