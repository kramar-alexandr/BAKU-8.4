//server-onlyexternal procedure LogProcTime(string,longint);globalfunction LongInt CoinPackListVcRecordCheck(var record CoinPackListVc PackListr,record CoinPackListVc PackList2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"GlobalGiftVaucherVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(PackListr.ImpDate)) then begin    PackListr.ImpDate = CurrentDate;  end;  if (BlankDate(PackListr.TransDate)) then begin    PackListr.TransDate = CurrentDate;  end;  if (PackListr.SerNr==-1) then begin    PackListr.SerNr = NextSerNr("CoinPackListVc",PackListr.ImpDate,-1,false,"");  end;LCoinPackListVcRecordCheck:;	LogProcTime("CoinPackListVcRecordCheck",getcurtick()-curtick);   CoinPackListVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinPackListVcRecordRemoveTest(var record CoinPackListVc PackListr,record CoinPackListVc PackList2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinPackListVcRecordRemoveTest;  end;LCoinPackListVcRecordRemoveTest:;  CoinPackListVcRecordRemoveTest = res;  RETURN;END;globalfunction LongInt CoinEANCodeVcRecordCheck(var record CoinEANCodeVc EANCoder,record CoinEANCodeVc EANCode2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinEANCodeVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(EANCoder.ImpDate)) then begin    EANCoder.ImpDate = CurrentDate;  end;  if (EANCoder.SerNr==-1) then begin    EANCoder.SerNr = NextSerNr("CoinEANCodeVc",EANCoder.ImpDate,-1,false,"");  end;LCoinEANCodeVcRecordCheck:;	LogProcTime("CoinEANCodeVcRecordCheck",getcurtick()-curtick);   CoinEANCodeVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinEANCodeVcRecordRemoveTest(var record CoinEANCodeVc CoinEANCoder,record CoinEANCodeVc CoinEANCode2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinEANCodeVcRecordRemoveTest;  end;LCoinEANCodeVcRecordRemoveTest:;  CoinEANCodeVcRecordRemoveTest = res;  RETURN;END;globalfunction LongInt CoinItemListVcRecordCheck(var record CoinItemListVc ItemListr,record CoinItemListVc ItemList2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinItemListVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(ItemListr.ImpDate)) then begin    ItemListr.ImpDate = CurrentDate;  end;  if (ItemListr.SerNr==-1) then begin    ItemListr.SerNr = NextSerNr("CoinItemListVc",ItemListr.ImpDate,-1,false,"");  end;LCoinItemListVcRecordCheck:;	LogProcTime("CoinItemListVcRecordCheck",getcurtick()-curtick);   CoinItemListVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinItemListVcRecordRemoveTest(var record CoinItemListVc CoinItemListr,record CoinItemListVc CoinItemList2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinItemListVcRecordRemoveTest;  end;LCoinItemListVcRecordRemoveTest:;  CoinItemListVcRecordRemoveTest = res;  RETURN;END;globalfunction LongInt CoinPackListHistVcRecordCheck(var record CoinPackListHistVc CoinPackListHistr,record CoinPackListHistVc CoinPackListHist2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinPackListHistVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(CoinPackListHistr.ImpDate)) then begin    CoinPackListHistr.ImpDate = CurrentDate;  end;  if (CoinPackListHistr.SerNr==-1) then begin    CoinPackListHistr.SerNr = NextSerNr("CoinPackListHistVc",CoinPackListHistr.ImpDate,-1,false,"");  end;LCoinPackListHistVcRecordCheck:;	LogProcTime("CoinPackListHistVcRecordCheck",getcurtick()-curtick);  CoinPackListHistVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinPackListHistVcRecordRemoveTest(var record CoinPackListHistVc CoinPackListHistr,record CoinPackListHistVc CoinPackListHist2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinPackListHistVcRecordRemoveTest;  end;LCoinPackListHistVcRecordRemoveTest:;  CoinPackListHistVcRecordRemoveTest = res;  RETURN;END;globalfunction LongInt CoinMissingEANVcRecordCheck(var record CoinMissingEANVc CoinMissingEANr,record CoinMissingEANVc CoinMissingEAN2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinMissingEANVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(CoinMissingEANr.TransDate)) then begin    CoinMissingEANr.TransDate = CurrentDate;  end;  if (CoinMissingEANr.SerNr==-1) then begin    CoinMissingEANr.SerNr = NextSerNr("CoinMissingEANVc",CoinMissingEANr.TransDate,-1,false,"");  end;LCoinMissingEANVcRecordCheck:;	LogProcTime("CoinMissingEANVcRecordCheck",getcurtick()-curtick);  CoinMissingEANVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinMissingEANVcRecordDefaultsClient(LongInt wn,var record CoinMissingEANVc CMEr,record CoinMissingEANVc CME2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  	CMEr.TransDate = CurrentDate;  CMEr.SerNr = NextSerNr("CoinMissingEANVc",CMEr.TransDate,-1,false,"");    CoinMissingEANVcRecordDefaultsClient = res;   RETURN;END;globalfunction LongInt CoinMissingEANVcRecordDefaults(var record CoinMissingEANVc CMEr,record CoinMissingEANVc CME2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  	CMEr.TransDate = CurrentDate;  CMEr.SerNr = NextSerNr("CoinMissingEANVc",CMEr.TransDate,-1,false,"");    CoinMissingEANVcRecordDefaults = res;   RETURN;END;globalfunction LongInt CoinMissingEANVcRecordDuplicateClient(LongInt wn,var record CoinMissingEANVc CMEr,record CoinMissingEANVc CME2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  	CMEr.TransDate = CurrentDate;  CMEr.SerNr = NextSerNr("CoinMissingEANVc",CMEr.TransDate,-1,false,"");  CMEr.FileName = "";    CoinMissingEANVcRecordDuplicateClient = res;   RETURN;END;globalfunction LongInt CoinMissingEANVcRecordDuplicate(var record CoinMissingEANVc CMEr,record CoinMissingEANVc CME2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  	CMEr.TransDate = CurrentDate;  CMEr.SerNr = NextSerNr("CoinMissingEANVc",CMEr.TransDate,-1,false,"");  CMEr.FileName = "";    CoinMissingEANVcRecordDuplicate = res;   RETURN;END;globalfunction LongInt CoinMissingEANVcRecordRemoveTest(var record CoinMissingEANVc CMEr,record CoinMissingEANVc CME2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  	res = 1;  if nonblank(CMEr.FileName) then begin  	res = 0;  end;    CoinMissingEANVcRecordRemoveTest = res;   RETURN;END;globalfunction LongInt CoinItemGoodsDecriptVcRecordCheck(var record CoinItemGoodsDecriptVc CoinItemGoodsDecriptr,record CoinItemGoodsDecriptVc CoinItemGoodsDecript2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinItemGoodsDecriptVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(CoinItemGoodsDecriptr.ImpDate)) then begin    CoinItemGoodsDecriptr.ImpDate = CurrentDate;  end;  if (BlankDate(CoinItemGoodsDecriptr.TransDate)) then begin    CoinItemGoodsDecriptr.TransDate = CurrentDate;  end;  if (CoinItemGoodsDecriptr.SerNr==-1) then begin    CoinItemGoodsDecriptr.SerNr = NextSerNr("CoinItemGoodsDecriptVc",CoinItemGoodsDecriptr.ImpDate,-1,false,"");  end;LCoinItemGoodsDecriptVcRecordCheck:;	LogProcTime("CoinItemGoodsDecriptVcRecordCheck",getcurtick()-curtick);  CoinItemGoodsDecriptVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinItemGoodsDecriptVcRecordRemoveTest(var record CoinItemGoodsDecriptVc CoinItemGoodsDecriptr,record CoinItemGoodsDecriptVc CoinItemGoodsDecript2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinItemGoodsDecriptVcRecordRemoveTest;  end;LCoinItemGoodsDecriptVcRecordRemoveTest:;  CoinItemGoodsDecriptVcRecordRemoveTest = res;  RETURN;END;globalfunction LongInt CoinComposDecriptVcRecordCheck(var record CoinComposDecriptVc CoinComposDecriptr,record CoinComposDecriptVc CoinComposDecript2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinComposDecriptVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(CoinComposDecriptr.ImpDate)) then begin    CoinComposDecriptr.ImpDate = CurrentDate;  end;  if (BlankDate(CoinComposDecriptr.TransDate)) then begin    CoinComposDecriptr.TransDate = CurrentDate;  end;  if (CoinComposDecriptr.SerNr==-1) then begin    CoinComposDecriptr.SerNr = NextSerNr("CoinComposDecriptVc",CoinComposDecriptr.ImpDate,-1,false,"");  end;LCoinComposDecriptVcRecordCheck:;	LogProcTime("CoinComposDecriptVcRecordCheck",getcurtick()-curtick);  CoinComposDecriptVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinComposDecriptVcRecordRemoveTest(var record CoinComposDecriptVc CoinComposDecriptr,record CoinComposDecriptVc CoinComposDecript2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinComposDecriptVcRecordRemoveTest;  end;LCoinComposDecriptVcRecordRemoveTest:;  CoinComposDecriptVcRecordRemoveTest = res;  RETURN;END;globalfunction LongInt CoinGoodsTypesVcRecordCheck(var record CoinGoodsTypesVc CoinGoodsTypesr,record CoinGoodsTypesVc CoinGoodsTypes2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinGoodsTypesVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(CoinGoodsTypesr.ImpDate)) then begin    CoinGoodsTypesr.ImpDate = CurrentDate;  end;  if (BlankDate(CoinGoodsTypesr.TransDate)) then begin    CoinGoodsTypesr.TransDate = CurrentDate;  end;  if (CoinGoodsTypesr.SerNr==-1) then begin    CoinGoodsTypesr.SerNr = NextSerNr("CoinGoodsTypesVc",CoinGoodsTypesr.ImpDate,-1,false,"");  end;LCoinGoodsTypesVcRecordCheck:;	LogProcTime("CoinGoodsTypesVcRecordCheck",getcurtick()-curtick);  CoinGoodsTypesVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinGoodsTypesVcRecordRemoveTest(var record CoinGoodsTypesVc CoinGoodsTypesr,record CoinGoodsTypesVc CoinGoodsTypes2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinGoodsTypesVcRecordRemoveTest;  end;LCoinGoodsTypesVcRecordRemoveTest:;  CoinGoodsTypesVcRecordRemoveTest = res;  RETURN;END;globalfunction LongInt CoinPriceChangesVcRecordCheck(var record CoinPriceChangesVc CoinPriceChangesr,record CoinPriceChangesVc CoinPriceChanges2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  Integer insertmode,updatemode;  Integer errcode;  string 255 errstr;	longint curtick;		curtick = getcurtick();	logtext(0,"CoinPriceChangesVcRecordCheck");	  res = 0;  insertmode = 1;//Rs_insert  updatemode = 2;//Rs_update    if (BlankDate(CoinPriceChangesr.ImpDate)) then begin    CoinPriceChangesr.ImpDate = CurrentDate;  end;  if (BlankDate(CoinPriceChangesr.TransDate)) then begin    CoinPriceChangesr.TransDate = CurrentDate;  end;  if (CoinPriceChangesr.SerNr==-1) then begin    CoinPriceChangesr.SerNr = NextSerNr("CoinPriceChangesVc",CoinPriceChangesr.ImpDate,-1,false,"");  end;LCoinPriceChangesVcRecordCheck:;	LogProcTime("CoinPriceChangesVcRecordCheck",getcurtick()-curtick);  CoinPriceChangesVcRecordCheck = res;  RETURN;END;globalfunction LongInt CoinPriceChangesVcRecordRemoveTest(var record CoinPriceChangesVc CoinPriceChangesr,record CoinPriceChangesVc CoinPriceChanges2r,LongInt stat,LongInt long4)BEGIN  LongInt res;  res = 1;  if (CurrentUser!="SA" and CurrentUser!="SA1") then begin    if (stat>0) then begin      MessageBox(1560,"");    end;    res = 0;    goto LCoinPriceChangesVcRecordRemoveTest;  end;LCoinPriceChangesVcRecordRemoveTest:;  CoinPriceChangesVcRecordRemoveTest = res;  RETURN;END;