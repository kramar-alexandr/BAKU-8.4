//server-only
external procedure B1ToB2StrValRM(string,val,val,var string,roundmode);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external updating function LongInt POVcRecordUpdate(var record POVc,record POVc,LongInt,LongInt);
external updating function LongInt POVcRecordUpdateAfter(var record POVc,record POVc,LongInt,LongInt);
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external function Boolean HasModNL();
external function Boolean HasIncomeAndExpenseBook();
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external updating function Integer CreateVIFromPO(LongInt,record RcVc,var record VIVc);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert(Integer,Integer,string,string,string,val,string,string,string,string);
external function Boolean AcceptanceActivityExists(Integer,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Boolean IsDigit(string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external function Boolean SerialNrEverinStock(string,string);
external function Boolean AcceptanceRulesExists(Integer,string);
external updating procedure PUVc_UpdateTR(record PUVc,record PUVc);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external updating procedure UpdateTrans_Stock(record TRVc);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Boolean ItemHistExists(string,LongInt);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure UpdateRecalcStockNeeded(Integer);
external updating function Boolean BA_GRNCostVarianceWarning(record PUVc,var Integer);
external procedure FindBatchBestBeforeDate(string,string,var Date);
external procedure B1ToB2StrVal(string,val,val,var string);
external procedure B1ToB2Val(val,val,val,var val);
external procedure SwapM4Val(var val,var val);
external function Integer ArtCodePrimaryCostModel(string);
external function Integer FIFOPerSerialNr(record INVc,record CostAccBlock);
external function Boolean CanOKStockRecord(var Integer);
external function Boolean IsStockSettingsOK();
external updating procedure AddTTrans_PUVc(record TRVc,record PUVc);
external updating procedure UpdateStockResFromPU(record PUVc,record PUVc);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external procedure FillAmForVariancePU(record PUVc);
external updating procedure UpdateVarianceStatusPU(record PUVc);
external function Integer CheckObjs(string,string,var string);
external procedure StockMovSumUp(var record StockMovVc);
external function Integer IsPositionFree(string);
external updating procedure RemovePU_PORows(var record PUVc);
external updating procedure SetPositionStatus(string,Integer);
external function string 20 FindFreePositionInLocArea(record INVc,string,record LocationVc,string,string);
external function Integer GetPO(LongInt,var record POVc,string,Boolean);
external updating procedure UpdatePOFromPURows(record PUVc,Boolean,record PUVc,Boolean,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean DateWarned(Date,string);
external function Boolean IsSerialNrCorrect(string);
external updating procedure UpdateSerStock(string,string,string,val,val);
external updating procedure InvalidatePU(record PUVc);
external updating procedure InvalidateTR(Integer,LongInt);
external updating procedure PurUpdateOvst(record PUVc,record PUVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Integer MakeTransFromPU(record TRVc,record PUVc,record LocationVc,Boolean);
external updating procedure PurUpdateCostPrice(record PUVc,Boolean);
external updating function Boolean UpdatePOFromPU(record PUVc,record PUVc,Boolean);
external updating procedure PurUpdateSerialNr(record PUVc,Boolean,Boolean);
external updating procedure PurUpdateItemHist(record PUVc);
external updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
external function Boolean ShouldItemUpdateStock(string);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external updating function val NextLocOKNr(string);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external function Integer SerialNrOnThisPU(record PUVc,string,string);
external function Boolean SerialNrAvail2(string,string,val);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external function Integer GetVATLaw();
external function Integer CheckPosition(string,string,Integer,val,val,val);
external function Boolean IsOffice(Boolean);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestPUVc(LongInt,Date,var Boolean);
external function LongInt GetCurUserLastNr(string);
external procedure PUSumUp(var record PUVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external function val GetAcceptanceSum_PUVc(record PUVc);
external function Integer SetAcceptanceStatus(Integer,string,val);
external updating procedure UnOk_PUVc(var record PUVc);		//Edit----------------------Dima  20.01.2016

procedure SetPUAcceptanceFlag(var record PUVc PUr,record PUVc prevPUr,LongInt stat)
begin
  val bc1v;
  Boolean testf;
  
  testf = true;
  switch (stat) begin
    case Rs_update:
      if (prevPUr.OKFlag!=0) then begin
        testf = false;
      end;
    otherwise
      ;
  end;
  if (testf) then begin
    switch (PUr.AcceptanceStatus) begin
      case kAcceptanceStatePending:
      case kAcceptanceStateApproved:
      case kAcceptanceStateRejected:
      otherwise
        bc1v = GetAcceptanceSum_PUVc(PUr);
        PUr.AcceptanceStatus = SetAcceptanceStatus(kAcceptancePU,PUr.VECode,bc1v);      
    end;
  end;
  return;
end;



global
function string 20 GetNextOfficialSerNr(string RegisterName, date TransDate)		//Edit----------------------Dima  01.04.2015
begin
// This function returns OfficialSerNr in the format:   yyyy/mm/nnnnn   (2015/04/00102)

	string 20 OfficialSerNr,lastOffSerNr,lastDate;
	string 10 month, SerNumber;
	integer year;
	longint lastNumber;
	record StockMovVc SMr;
	record PUVc PUr;
	boolean TrHs;
	
	OfficialSerNr = "";
	lastOffSerNr = "00000";
	year = GetYear(TransDate);
	lastDate = "31/12/" & year;
	TrHs = true;		
	
	switch(RegisterName) begin
	
		case "PUVc":	
						PUr.TransDate = StringToDate(lastDate);						
						While(LoopBackKey("TransDate",PUr,2,TrHs)) begin
							if (GetYear(PUr.TransDate)!=year) then begin TrHs = false; end;
							if (TrHs and nonblank(PUr.OfficialSerNr)) then begin
								lastOffSerNr = PUr.OfficialSerNr;
								TrHs = false;
							end;
						end;	
						
		case "StockMovVc":	
						SMr.TransDate = StringToDate(lastDate);
						While(LoopBackKey("TransDate",SMr,2,TrHs)) begin
							if (GetYear(SMr.TransDate)!=year) then begin TrHs = false; end;
							if (TrHs and nonblank(SMr.OfficialSerNr)) then begin
								lastOffSerNr = SMr.OfficialSerNr;
								TrHs = false;
							end;
						end;							
	end;
		

	lastNumber = StringToInt(Right(lastOffSerNr,5)) + 1;
	SerNumber = Right("00000" & lastNumber,5);
	month = Right("0" & GetMonth(TransDate),2);
	
	OfficialSerNr = year & "/" & month & "/" & SerNumber;
	

GetNextOfficialSerNr = OfficialSerNr;
return;
end;


global
updating function LongInt PUVcRecordSave(var record PUVc PUr,record PUVc PU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

	res = inner.PUVcRecordSave(PUr,PU2r,stat,long4);
	if (CurrentCompany==10) then begin //Dupont
		PUr.OfficialSerNr = GetNextOfficialSerNr("PUVc",PUr.TransDate);		//Edit----------------------Dima  01.04.2015
	end;
	
  PUVcRecordSave = res;
  RETURN;
END;


global
updating function LongInt PUVcRecordUpdate(var record PUVc PUr,record PUVc PU2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if ((PUr.OKFlag!=0) and (PU2r.OKFlag==0)) then begin
    if (ItemHistExists("PUVc",PUr.SerNr)==false) then begin
      PUr.LocOKNr = NextLocOKNr(PUr.Location);
    end;
  end;
  SetPUAcceptanceFlag(PUr,PU2r,stat);
  
  if ((PUr.OKFlag==0) and (PU2r.OKFlag!=0)) then begin		//Edit----------------------Dima  20.01.2016
    	UnOk_PUVc(PUr);
  end;   
  
LPUVcRecordUpdate:;  
  PUVcRecordUpdate = res;
  return;
end;
