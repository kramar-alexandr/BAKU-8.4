external procedure ExtractObj(string,var Integer,var string);
external function LongInt INVcRecordRemoveTest(var record INVc,record INVc,LongInt,LongInt);
external function Boolean IntORchrsum(record IntORVc,Integer);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:51:56 AM
external procedure SumupIntOR(var record IntORVc,var val);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:52:00 AM
external function boolean CompanyIsJWLikeCompany(Integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:04 20.11.2020
external updating procedure RecalculatePricesfromConsComp(record INVc); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 10:24 02.12.2020
external function string 255 StrReplace(string,string,string);// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 14 12 2020 y. at 9:37:36 AM
external procedure GetObjs(string,string,var string);
external function string 255 StrReplace(string,string,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 60 RemoveObjectFromObjectList(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObjectsByType(string, string, var array string, var integer);
external function string 100 BPICodeToName(string);
external procedure TRSumup(var record TRVc,var val);
external procedure SetORFlags(record ORVc);


SetLangMode(LangRussian,"RUS",0);

updating function boolean UpdateAFFTransFromIP(record IPVc IPr,string Objects)
begin
	record TRVc TRr,oldTRr;
	row TRVc TRrw;
	integer i,rwcnt;
	boolean chngd;
	string 20 affobj;
	boolean res;
	
	res = false;
	
	TRr.Number = IPr.SerNr;
	TRr.IntYc = IPYc;
	chngd = false;
	if(readfirstmain(TRr,2,true))then begin
		rwcnt = matrowcnt(TRr);
		recordcopy(oldTRr,TRr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(TRr,i,TRrw);
			if(setinset("AFF",TRrw.Objects))then begin
				affobj = "";
				GetObjs("SUBDI",Objects,affobj);
				if(nonblank(affobj))then begin
					TRrw.Objects = StrReplace(TRrw.Objects,"AFF",affobj);
					matrowput(TRr,i,TRrw);
					chngd = true;
				end;
			end;
		end;
		if(chngd)then begin
			res = recordupdate(oldTRr,TRr,true)==0;
			if(res)then begin
				weboutstring("<td>" & "UPDATED" & "</td>");
			end else begin
				weboutstring("<td>" & "ERROR++++++++++++++++++++++++++++" & "</td>");
			end;
		end else begin
			res = true;
			weboutstring("<td>" & "GoodRecord" & "</td>");
		end;
	end else begin
		res = true;
		weboutstring("<td>" & "NORECORD" & "</td>");
	end;
	
	UpdateAFFTransFromIP = res;
return;
end;

global webpublic updating procedure WebAFFIPVc()
begin
	record IPVc IPr;
	row IPVc IPrw;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos,ipi;
	boolean change,changed;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt,iprwcnt;
	record CUVc CUr;
	string 20 affobj,Objects;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	blockload(OTACb);
	rwcnt = matrowcnt(OTACb);
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(OTACb,i,OTACrw);
		if(nonblank(OTACrw.FOB))then begin
			vFOBAff[OTACrw.FOB] = OTACrw.SUBDI;
		end;
	end;
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(IPr,1,true))begin
		iprwcnt = matrowcnt(IPr);
		changed = false;
		Objects = "";
		for(ipi=0;ipi<iprwcnt;ipi=ipi+1)begin
			matrowget(IPr,ipi,IPrw);
			if(setinset("AFF",IPrw.Objects))then begin
				weboutstring("<tr>");
				weboutstring("<td>" & IPr.SerNr & "</td>");
				weboutstring("<td>" & IPr.TransDate & "</td>");
				weboutstring("<td>" & IPrw.CustCode & "</td>");
				fobobj = "";
				GetObjs("FOB",IPrw.Objects,fobobj);
				if(blank(fobobj))then begin
					CUr.Code = IPrw.CustCode;
					if(readfirstmain(CUr,1,true))then begin
						GetObjs("FOB",CUr.VEObjects,fobobj);
					end;
				end;
				if(nonblank(fobobj))then begin
					if(nonblank(vFOBAff[fobobj]))then begin 
						weboutstring("<td>" & vFOBAff[fobobj] & "</td>");
						IPrw.Objects = StrReplace(IPrw.Objects,"AFF",vFOBAff[fobobj]);
						Objects = vFOBAff[fobobj];
						matrowput(IPr,ipi,IPrw);
						changed = true;
					end else begin
						weboutstring("<td>" & "***********************************" & "</td>");
					end;
				end;
				weboutstring("</tr>");
			end;
		end;
		if(change)then begin
			if(changed)then begin
				if(UpdateAFFTransFromIP(IPr,Objects))then begin
					recordstore(IPr,true);
				end;
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;




updating function boolean UpdateAFFTransFromSH(record SHVc SHr)
begin
	record TRVc TRr,oldTRr;
	row TRVc TRrw;
	integer i,rwcnt;
	boolean chngd;
	string 20 affobj;
	boolean res;
	longint warn;
	
	res = false;
	
	TRr.Number = SHr.SerNr;
	TRr.IntYc = SHYc;
	chngd = false;
	if(readfirstmain(TRr,2,true))then begin
		rwcnt = matrowcnt(TRr);
		recordcopy(oldTRr,TRr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(TRr,i,TRrw);
			if(setinset("AFF",TRrw.Objects))then begin
				affobj = "";
				GetObjs("SUBDI",SHr.Objects,affobj);
				if(nonblank(affobj))then begin
					TRrw.Objects = StrReplace(TRrw.Objects,"AFF",affobj);
					matrowput(TRr,i,TRrw);
					chngd = true;
				end;
			end;
		end;
		if(chngd)then begin
			warn = 0;
			warn = recordupdate(oldTRr,TRr,true);
			
			res = warn==0;
			logtext(0,warn);
			if(res)then begin
				weboutstring("<td>" & "UPDATED" & "</td>");
			end else begin
				weboutstring("<td>" & "ERROR++++++++++++++++++++++++++++" & "</td>");
			end;
		end else begin
			res = true;
			weboutstring("<td>" & "GoodRecord" & "</td>");
		end;
	end else begin
		res = true;
		weboutstring("<td>" & "NORECORD" & "</td>");
	end;
	
	UpdateAFFTransFromSH = res;
return;
end;

global webpublic updating procedure WebAFFSHVc()
begin
	record SHVc SHr;
	row SHVc SHrw;
	record POVc POr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos;
	boolean change;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	record CUVc CUr;
	string 20 affobj;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(SHr,1,true))begin
		if(setinset("AFF",SHr.Objects))then begin
			weboutstring("<tr>");
			weboutstring("<td>" & SHr.SerNr & "</td>");
			weboutstring("<td>" & SHr.ShipDate & "</td>");
			weboutstring("<td>" & SHr.CustCode & "</td>");
			CUr.Code = SHr.CustCode;
			ReadFirstMain(CUr,1,true);
			affobj = "";
			GetObjs("SUBDI",CUr.Objects,affobj);
			weboutstring("<td>" & affobj & "</td>");
			if(change and nonblank(affobj))then begin
				SHr.Objects = StrReplace(SHr.Objects,"AFF",affobj);
				for (i=0;i<matrowcnt(SHr);i=i+1) begin
					matrowget(SHr,i,SHrw);
					if(setinset("AFF",SHrw.Objects))then begin
						affobj = "";
						GetObjs("SUBDI",CUr.Objects,affobj);
						SHrw.Objects = StrReplace(SHr.Objects,"AFF",affobj);
						matrowput(SHr,i,SHrw);
					end;
				end;
				if(change)then begin
					if(UpdateAFFTransFromSH(SHr))then begin
						recordstore(SHr,true);
					end;
				end;
			end;
			weboutstring("</tr>");
		end;
	end;
	weboutstring("</table>");

return;
end;




updating function boolean UpdateAFFTransFromSD(record SDVc SDr)
begin
	record TRVc TRr,oldTRr;
	row TRVc TRrw;
	integer i,rwcnt;
	boolean chngd;
	string 20 affobj;
	boolean res;
	longint warn;
	
	res = false;
	
	TRr.Number = SDr.SerNr;
	TRr.IntYc = SDYc;
	chngd = false;
	if(readfirstmain(TRr,2,true))then begin
		rwcnt = matrowcnt(TRr);
		recordcopy(oldTRr,TRr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(TRr,i,TRrw);
			if(setinset("AFF",TRrw.Objects))then begin
				affobj = "";
				GetObjs("SUBDI",SDr.Objects,affobj);
				if(nonblank(affobj))then begin
					TRrw.Objects = StrReplace(TRrw.Objects,"AFF",affobj);
					matrowput(TRr,i,TRrw);
					chngd = true;
				end;
			end;
		end;
		if(chngd)then begin
			warn = 0;
			warn = recordupdate(oldTRr,TRr,true);
			
			res = warn==0;
			logtext(0,warn);
			if(res)then begin
				weboutstring("<td>" & "UPDATED" & "</td>");
			end else begin
				weboutstring("<td>" & "ERROR++++++++++++++++++++++++++++" & "</td>");
			end;
		end else begin
			res = true;
			weboutstring("<td>" & "GoodRecord" & "</td>");
		end;
	end else begin
		res = true;
		weboutstring("<td>" & "NORECORD" & "</td>");
	end;
	
	UpdateAFFTransFromSD = res;
return;
end;

global webpublic updating procedure WebAFFSDVc()
begin
	record SDVc SDr;
	row SDVc SDrw;
	record POVc POr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos;
	boolean change;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	record CUVc CUr;
	string 20 affobj;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	
	setcompany(18,false);
	
	BlockLoad(OTACb);
	for (i=0;i<matrowcnt(OTACb);i=i+1) begin
		matrowget(OTACb,i,OTACrw);
		if (nonblank(OTACrw.FOB)) then begin
			vFOBAff[OTACrw.FOB] = OTACrw.SUBDI;
		end;
	end;
	
	weboutstring("<table>");
	while(loopmain(SDr,1,true))begin
		if(setinset("AFF",SDr.Objects))then begin
			weboutstring("<tr>");
			weboutstring("<td>" & SDr.SerNr & "</td>");	
			weboutstring("<td>" & SDr.Objects & "</td>");	
			
			if (SetInSet("AFF",SDr.Objects) and !SetInSet("AFF_TW",SDr.Objects) and !SetInSet("AFF_CR",SDr.Objects)) then begin
				affobj = "";
				GetObjs("FOB",SDr.Objects,affobj);
				if (nonblank(affobj) and nonblank(vFOBAff[affobj])) then begin
					weboutstring("<td>" & vFOBAff[affobj] & "</td>");
					SDr.Objects = StrReplace(SDr.Objects,"AFF",vFOBAff[affobj]);
					if(UpdateAFFTransFromSD(SDr))then begin
						recordstore(SDr,true);
					end;
				end;
			end;
			weboutstring("</tr>");
		end;
	end;
	weboutstring("</table>");

return;
end;






updating function boolean UpdateAFFTransFromRet(record RetVc Retr)
begin
	record TRVc TRr,oldTRr;
	row TRVc TRrw;
	integer i,rwcnt;
	boolean chngd;
	string 20 affobj;
	boolean res;
	
	res = false;
	
	TRr.Number = Retr.SerNr;
	TRr.IntYc = RetYc;
	chngd = false;
	if(readfirstmain(TRr,2,true))then begin
		rwcnt = matrowcnt(TRr);
		recordcopy(oldTRr,TRr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(TRr,i,TRrw);
			if(setinset("AFF",TRrw.Objects))then begin
				affobj = "";
				GetObjs("SUBDI",Retr.Objects,affobj);
				if(nonblank(affobj))then begin
					TRrw.Objects = StrReplace(TRrw.Objects,"AFF",affobj);
					matrowput(TRr,i,TRrw);
					chngd = true;
				end;
			end;
		end;
		if(chngd)then begin
			res = recordupdate(oldTRr,TRr,true)==0;
			if(res)then begin
				weboutstring("<td>" & "UPDATED" & "</td>");
			end else begin
				weboutstring("<td>" & "ERROR++++++++++++++++++++++++++++" & "</td>");
			end;
		end else begin
			res = true;
			weboutstring("<td>" & "GoodRecord" & "</td>");
		end;
	end else begin
		res = true;
		weboutstring("<td>" & "NORECORD" & "</td>");
	end;
	
	UpdateAFFTransFromRet = res;
return;
end;

global webpublic updating procedure WebAFFRetVc()
begin
	record RetVc Retr;
	row RetVc Retrw;
	record POVc POr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos;
	boolean change;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	record CUVc CUr;
	string 20 affobj;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(Retr,1,true))begin
		if(setinset("AFF",Retr.Objects))then begin
			weboutstring("<tr>");
			weboutstring("<td>" & Retr.SerNr & "</td>");
			weboutstring("<td>" & Retr.TransDate & "</td>");
			weboutstring("<td>" & Retr.CustCode & "</td>");
			CUr.Code = Retr.CustCode;
			ReadFirstMain(CUr,1,true);
			affobj = "";
			GetObjs("SUBDI",CUr.Objects,affobj);
			weboutstring("<td>" & affobj & "</td>");
			if(change and nonblank(affobj))then begin
				Retr.Objects = StrReplace(Retr.Objects,"AFF",affobj);
				for (i=0;i<matrowcnt(Retr);i=i+1) begin
					matrowget(Retr,i,Retrw);
					if(setinset("AFF",Retrw.Objects))then begin
						affobj = "";
						GetObjs("SUBDI",CUr.Objects,affobj);
						Retrw.Objects = StrReplace(Retr.Objects,"AFF",affobj);
						matrowput(Retr,i,Retrw);
					end;
				end;
				if(change)then begin
					if(UpdateAFFTransFromRet(Retr))then begin
						recordstore(Retr,true);
					end;
				end;
			end;
			weboutstring("</tr>");
		end;
	end;
	weboutstring("</table>");

return;
end;


global updating procedure DelBrInFrQD(record INVc INr)
begin
	ReadFirstMain(INr,1,true);
	if (left(INr.Name,1)=="\"" and right(INr.Name,1)!="\"") then begin
		INr.Name = right(INr.Name,len(INr.Name)-1);
		logtext(0,INr.Code);
		recordstore(INr,true);
	end;
	return;
end;



global webpublic procedure WebDelBrInFr()
begin
	integer i;
	record INVc INr;
	
	for (i=0;i<35;i=i+1) begin
		SetCompany(i+1,false);
		INr.Code = "";
		while (loopmain(INr,1,true)) begin
			if (left(INr.Name,1)=="\"" and right(INr.Name,1)!="\"") then begin
				queued.DelBrInFrQD(INr);
				MilliSleep(50);
			end;
		end;
		resetloop(INr);
	end;

	return;
end;







global updating procedure DelBrInPUSpecFrQD(record PUVc PUr)
begin
	longint i;
	row PUVc PUrw;
	
	ReadFirstMain(PUr,1,true);
	for (i=0;i<matrowcnt(PUr);i=i+1) begin
		matrowget(PUr,i,PUrw);
		if (left(PUrw.Spec,1)=="\"" and right(PUrw.Spec,1)!="\"") then begin
			PUrw.Spec = right(PUrw.Spec,len(PUrw.Spec)-1);
			logtext(0,PUr.SerNr);
			matrowput(PUr,i,PUrw);
		end;
	end;
	recordstore(PUr,true);
	return;
end;



global webpublic procedure WebDelBrInPuRowSpecFr()
begin
	longint i,j;
	record PUVc PUr;
	row PUVc PUrw;
	boolean Brf
	
	
	for (i=0;i<35;i=i+1) begin
		SetCompany(i+1,false);
		PUr.SerNr = "";
		while (loopmain(PUr,1,true)) begin
			Brf = false;
			for (j=0;j<matrowcnt(PUr);j=j+1) begin
				matrowget(PUr,j,PUrw);
				if (left(PUrw.Spec,1)=="\"" and right(PUrw.Spec,1)!="\"") then begin
					Brf = true;
				end;
			end;
			if (Brf) then begin
				queued.DelBrInPUSpecFrQD(PUr);
				MilliSleep(250);
			end;
		end;
		resetloop(PUr);
	end;

	return;
end;





global webpublic procedure WebGetYearLife()
begin
	longint i,j;
	record INVc INr;
	row INVc INrw;
	boolean Brf
	
	weboutstring("<table>");
	for (i=0;i<35;i=i+1) begin
		SetCompany(i+1,false);
		INr.Code = "";
		while (loopmain(INr,1,true)) begin
			if (nonblank(INr.High) or nonblank(INr.Life2)) then begin
				weboutstring("<tr>");
				weboutstring("<td>" & INr.Code & "</td>");
				weboutstring("<td>" & INr.High & "</td>");
				weboutstring("<td>" & INr.Life2 & "</td>");
				weboutstring("<td>" & i & "</td>");
				weboutstring("</tr>");
			end;
		end;
		resetloop(INr);
	end;
	weboutstring("</table>");
	return;
end;


global 
updating procedure SetYearLifeIn()
begin
	record INVc INr;
  string 100 itemCode;
  string 200 High, Life2;
	integer Comp;

	while (TestEOF()==false) begin
		itemCode = "";
		High = "";
		Life2 = "";
		Comp = 0;
		itemCode = ImportField;
		High = ImportField;
		Life2 = ImportField;
		Comp = StringToInt(ImportField)+1;
		if (Comp!=CurrentCompany) then begin
			SetCompany(Comp,false);
			logtext(0,Comp);
		end;
		if(nonblank(itemCode)) then begin
			INr.Code = itemCode;				
			if (ReadFirstMain(INr,1,true)) then begin
	      INr.High = High;
				INr.Life2 = Life2;
				if(RecordStore(INr,true)) begin
					// logtext(0,INr.Code);
				end;
			end;
		end;	
		if (NextImportLine(true)) then begin end;
	end;	
	

return;
end;




global webpublic updating procedure WebComissionRemove()
begin
  record IVVc IVr;
  record TRVc TRr,oldTRr;
  row TRVc TRrw;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  integer i,j,k,rwcnt,comprwcnt;
  boolean TrHs,foudf;
  val t;
  
  weboutstring("<table>");
  blockload(Compb);
  comprwcnt = matrowcnt(Compb);
  //comprwcnt = 1;//Swarowski.
  comprwcnt = 34;
  for(k=1;k<=comprwcnt;k=k+1)begin
    matrowget(Compb,k-1,Comprw);
    if(Comprw.ActiveStatus==0)then begin
      setcompany(k,false);
      resetloop(IVr);
      IVr.InvDate = currentDate;
      TrHs = true;
      while(loopbackkey("InvDate",IVr,1,TrHs))begin
        if(IVr.InvDate<stringtodate("01/01/2021"))then begin TrHs = false; end;
        
        if(TrHs)then begin
          TRr.Number = IVr.SerNr;
          TRr.IntYc = IVYc;
          if(readfirstmain(TRr,2,true))then begin
            foudf = false;
            rwcnt = matrowcnt(TRr);
            recordcopy(oldTRr,TRr);
            for(i=0;i<rwcnt;i=i+1)begin
              matrowget(TRr,i,TRrw);
              if(TRrw.AccNumber=="44/11" or TRrw.AccNumber=="75/03" or TRrw.AccNumber=="99999")then begin
                matrowdelete(TRr,i);
                TRSumup(TRr,t); 
                i=i-1;
                foudf = true;
              end;
            end;
            if(foudf)then begin
              recordupdate(oldTRr,TRr,true);
              weboutstring("<tr>");
                weboutstring("<td>" & IVr.SerNr & "</td>");
                weboutstring("<td>" & IVr.InvDate & "</td>");
              weboutstring("</tr>");
            end;
          end;
        end;
      end;
      //01/01/2021  44/11-75/03
    end;
  end;
  weboutstring("</table>");
  
return;
end;






global
updating procedure TestRecalcORMn(record RcVc RepSpec, var record ORVc ORr)
begin
  record ORVc oldORr;
  record SHVc SHr;
  record DropSHVc DropSHr;
  record RetVc Retr;
  record IVVc IVr;
  row ORVc ORrw;
  row SHVc SHrw;
  row DropSHVc DropSHrw;
  row RetVc Retrw;
  row IVVc IVrw;
  LongInt fror,toor;
  Integer rwcnt,i,orrwcnt;
  Boolean found,shfound,testf;
  record XSrsVc XSrsr;
  
  if (RepSpec.flags[2]==0) then begin
    if (blank(RepSpec.f1)) then begin
      MessageBox(2278,"");
      goto LRecalcORMn;
    end;
  end;
  fror = FirstInRange(RepSpec.f1,10);
  toor = LastInRange(RepSpec.f1,10);
  ORr.SerNr = fror;
  found = true;
  while (LoopKey("SerNr",ORr,1,found)) begin
    if (found) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (ORr.SerNr>toor) then begin
          found = false;
        end;
      end;
    end;
    testf = true;
    if (found==false) then begin
      testf = false;
    end;
    if (ORr.Closed<>0) then begin
      if (RepSpec.ArtMode==0) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      RecordCopy(oldORr,ORr);
      orrwcnt = MatRowCnt(ORr);
      for (i=0;i<orrwcnt;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        if (RepSpec.flags[0]<>0) then begin
          ORrw.Shipd1 = BlankVal;
          ORrw.Shipd2 = BlankVal;
        end;
        if (RepSpec.flags[1]<>0) then begin
          ORrw.Invd = BlankVal;
        end;
        MatRowPut(ORr,i,ORrw);
      end;
      if (RepSpec.flags[0]<>0) then begin
/* find all shipments */
        SHr.OrderNr = ORr.SerNr;
        shfound = true;
        ResetLoop(SHr);
        while (LoopKey("OrderKey",SHr,1,shfound)) begin
          if (shfound) then begin
            if (SHr.OrderNr!=ORr.SerNr) then begin
              shfound = false;
            end;
          end;
          if (shfound) then begin
            rwcnt = MatRowCnt(SHr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(SHr,i,SHrw);
              if ((SHrw.OrdRow>=0) and (SHrw.OrdRow<orrwcnt)) then begin
                MatRowGet(ORr,SHrw.OrdRow,ORrw);
                ORrw.Shipd1 = ORrw.Shipd1 + SHrw.Ship;
                if (SHr.OKFlag<>0) then begin
                  ORrw.Shipd2 = ORrw.Shipd2 + SHrw.Ship;
                end;
                MatRowPut(ORr,SHrw.OrdRow,ORrw);
              end;
            end;
          end;
        end;
/* find all drop shipments */
        DropSHr.OrderNr = ORr.SerNr;
        shfound = true;
        ResetLoop(DropSHr);
        while (LoopKey("OrderNr",DropSHr,1,shfound)) begin
          if (shfound) then begin
            if (DropSHr.OrderNr!=ORr.SerNr) then begin
              shfound = false;
            end;
          end;
          if (shfound) then begin
            rwcnt = MatRowCnt(DropSHr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(DropSHr,i,DropSHrw);
              if ((DropSHrw.OrdRow>=0) and (DropSHrw.OrdRow<orrwcnt)) then begin
                MatRowGet(ORr,DropSHrw.OrdRow,ORrw);
                ORrw.Shipd1 = ORrw.Shipd1 + DropSHrw.Ship;
                if (DropSHr.OKFlag<>0) then begin
                  ORrw.Shipd2 = ORrw.Shipd2 + DropSHrw.Ship;
                end;
                MatRowPut(ORr,DropSHrw.OrdRow,ORrw);
              end;
            end;
          end;
        end;
/* find all Returned Goods */
        Retr.OrdNr = ORr.SerNr;
        shfound = true;
        ResetLoop(Retr);
        while (LoopKey("OrdNr",Retr,1,shfound)) begin
          if (shfound) then begin
            if (Retr.OrdNr!=ORr.SerNr) then begin
              shfound = false;
            end;
          end;
         if (shfound) then begin
           rwcnt = MatRowCnt(Retr);
           for (i=0;i<rwcnt;i=i+1) begin
             MatRowGet(Retr,i,Retrw);
             if ((Retrw.OrdRow>=0) and (Retrw.OrdRow<orrwcnt)) then begin
               MatRowGet(ORr,Retrw.OrdRow,ORrw);
               if (Retr.OKFlag<>0) then begin
                 ORrw.Shipd1 = ORrw.Shipd1 - Retrw.Quant;
                 ORrw.Shipd2 = ORrw.Shipd2 - Retrw.Quant;
               end;
               MatRowPut(ORr,Retrw.OrdRow,ORrw);
             end;
           end;
         end;
       end;
      end;
      if (RepSpec.flags[1]<>0) then begin
/* find all invoices */
        IVr.OrderNr = ORr.SerNr;
        shfound = true;
        ResetLoop(IVr);
        while (LoopKey("OrderNr",IVr,1,shfound)) begin
          if (shfound) then begin
            if (IVr.OrderNr!=ORr.SerNr) then begin
              shfound = false;
            end;
          end;
          if (shfound) then begin
            if (IVr.Invalid==0) then begin
              rwcnt = MatRowCnt(IVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(IVr,i,IVrw);
                if ((IVrw.OrdRow>=0) and (IVrw.OrdRow<orrwcnt)) then begin
                  if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) then begin
                    MatRowGet(ORr,IVrw.OrdRow,ORrw);
                    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                      switch (IVrw.stp) begin
                        case kInvoiceRowTypeCorrection:
                          ORrw.Invd = ORrw.Invd + IVrw.Quant;
                        otherwise
                          ORrw.Invd = ORrw.Invd - IVrw.Quant;
                      end;                 
                    end else begin
                      ORrw.Invd = ORrw.Invd + IVrw.Quant;
                    end;  
                    MatRowPut(ORr,IVrw.OrdRow,ORrw);
                  end;
                end;
              end;
            end;  
          end;
        end;
        XSrsr.TransType = 0;
        XSrsr.FromFileName = "ORVc";
        XSrsr.FromSerNr = ORr.SerNr;
        shfound = true;
        ResetLoop(XSrsr);
        while (LoopKey("From",XSrsr,3,shfound)) begin
          if (XSrsr.TransType!=0) then begin shfound = false; end;
          if (XSrsr.FromFileName!="ORVc") then begin shfound = false; end;
          if (XSrsr.FromSerNr!=ORr.SerNr) then begin shfound = false; end;
          if (shfound) then begin
            if (XSrsr.FromRow>=0) then begin
              MatRowGet(ORr,XSrsr.FromRow,ORrw);
              ORrw.Invd = ORrw.Invd + XSrsr.FromQty;
              MatRowPut(ORr,XSrsr.FromRow,ORrw);
            end;            
          end;
        end;
        
      end;
      SetORFlags(ORr);
			if (fror>0) begin
				goto LRecalcORMn;
			end;
      // if (RecordUpdate(oldORr,ORr,false)==0) then begin
      // end;
      //MaintTrace(ORr.SerNr);
    end;
  end;
LRecalcORMn:;  
  return;
end;








global webpublic updating procedure WebRepBagORPriceDuplicates()
begin
	record ORVc ORr, OR2r;
	row ORVc ORrw, OR2rw;
	record POVc POr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos;
	boolean change;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	record CUVc CUr;
	string 20 affobj;
	vector string 255 vPriceArt;
	vector val vRRPArt;
	record PLVc PLr;
	record RcVc RepSpec;
	// change = false;
	// if(webgetarg("change")=="true")then begin
		// change = true;
	// end;
	
	
	setcompany(28,false);
	
	BlockLoad(OTACb);
	
	weboutstring("<table>");
	ORr.SerNr = 1;
	while(loopmain(ORr,1,true))begin
		clearVector(vPriceArt);
		clearVector(vRRPArt);
		// RepSpec.f1 = ORr.SerNr;
		// RepSpec.flags[1] = 1;
		// RepSpec.flags[0] = 1;
		// RepSpec.flags[2] = 0;
		// RepSpec.ArtMode = 0;
		// logtext(0,"RecalcORMn");
		// TestRecalcORMn(RepSpec,OR2r);
		for (i=0;i<matrowcnt(ORr);i=i+1) begin
			matrowget(ORr,i,ORrw);
			if (ORrw.Price>0) then begin
				PLr.PLCode = "RRP";
        PLr.ArtCode = ORrw.ArtCode;
				if(ReadFirstMain(PLr,2,true)) then begin
					vRRPArt[ORrw.ArtCode] = PLr.ExVatPrice;
				end;
				if (blank(vPriceArt[ORrw.Price])) then begin
					vPriceArt[ORrw.Price] = ORrw.ArtCode;
				end else begin
					matrowget(ORr,i-1,OR2rw);
					if (OR2rw.Price==ORrw.Price and vPriceArt[OR2rw.Price]==OR2rw.ArtCode) then begin
						// matrowget(OR2r,i,OR2rw);
						if (vPriceArt[ORrw.Price]!=ORrw.ArtCode and vRRPArt[vPriceArt[ORrw.Price]]!=vRRPArt[ORrw.ArtCode] and ORr.Sum4!=ORr.IDSum4/* and (OR2rw.Shipd1!=ORrw.Shipd1 or OR2rw.Shipd2!=ORrw.Shipd2)*/) then begin
							weboutstring("<tr>");
							weboutstring("<td>" & ORr.SerNr & "</td>");	
							weboutstring("<td>" & ORr.OrdDate & "</td>");	
							weboutstring("<td>" & vPriceArt[ORrw.Price] & "</td>");	
							weboutstring("<td>" & ORrw.ArtCode & "</td>");	
							// weboutstring("<td>" & OR2rw.Shipd1 & "</td>");	
							// weboutstring("<td>" & ORrw.Shipd1 & "</td>");	
							// weboutstring("<td>" & OR2rw.Shipd2 & "</td>");	
							// weboutstring("<td>" & ORrw.Shipd2 & "</td>");	
							weboutstring("</tr>");
							vPriceArt[ORrw.Price] = ORrw.ArtCode;
						end;
					end;
				end;
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;




global webpublic procedure WebGetGIrSourcesRn()
begin
	record GlobalItemVc GIr;
	record INVc INr;
	record ExpProvItemRegVc EPIRr;
	record CUVc CUr;
	integer i;
	record CompaniesBlock Cpb;
	row CompaniesBlock Cprw;


	weboutstring("<table>");
	GIr.Code = "";
	while (LoopMain(GIr,1,true)) begin
		if(GIr.ExtProwItRegulations>0)then begin
			SetCompany(29,false);
			EPIRr.SerNr = GIr.ExtProwItRegulations;
			if (ReadFirstMain(EPIRr,1,true)) then begin
				CUr.Code = EPIRr.Comment;
				if (ReadFirstMain(CUr,1,true)) then begin
					weboutstring("<tr>");
					weboutstring("<td>" & GIr.Code & "</td>");	
					weboutstring("<td>" & CUr.Name & "</td>");	
					weboutstring("</tr>");
				end;  
			end;
		end else begin
			if (nonblank(GIr.PriceFromComp)) then begin
				weboutstring("<tr>");
				weboutstring("<td>" & GIr.Code & "</td>");	
				weboutstring("<td>" & GIr.PriceFromComp & "</td>");	
				weboutstring("</tr>");
			end else begin
				for (i=0;i<35;i=i+1) begin
					SetCompany(i+1,false);
					INr.Code = GIr.HansaCode;
					if (ReadFirstMain(INr,1,true)) then begin
						blockload(Cpb);
						matrowget(Cpb,i+1,Cprw);
						weboutstring("<tr>");
						weboutstring("<td>" & GIr.Code & "</td>");	
						weboutstring("<td>" & Cprw.CompName & "</td>");	
						weboutstring("</tr>");
						i = 35;
					end;
				end;
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;






global 
webpublic updating procedure WebFixLoyaltyRebate()
begin
  record GlobalItemVc GIr,mainGIr;
	row GlobalItemVc GIrw;
	boolean TrHs,TrHs1,changed;
	val ITRebate,price;
	record INVc INr;
	record PLVc PLr,OldPLr;
	record RHistVc RHistr;
	string 200 rstr;
	record LoyaltyCardVc LCr,origLCr;
	
	
	setcompany(1,false);
	
	LCr.SerNr = "APPLC00001";
	TrHs = true;
	while(loopmain(LCr,1,TrHs))begin
	  if(left(LCr.SerNr,5)!="APPLC")then begin TrHs = false; end;
	  
	  if(TrHs)then begin
	    
	    if(LCr.RebCodeCRM=="0%")then begin
        
        rstr = BuildRecordIdStr(LCr,CurrentCompany);
        RHistr.RecidStr = rstr;
        readfirstkey("RecidStr",RHistr,1,true);
        ReadOriginalRecord(RHistr,origLCr);
        logtext(0,LCr.SerNr & "  " & LCr.RebCodeCRM & " -> " & origLCr.RebCodeCRM & "  " & origLCr.SerNr);
	    end;
	  end;
	end;
	
	/*if(SetCompany(25,false))then begin
		PLr.PLCode = "RRP";
		TrHs = true;
		while(loopkey("PLCode",PLr,1,TrHs))begin
			if(PLr.PLCode!="RRP")then begin TrHs = false; end;
			
			if(TrHs)then begin
				resetloop(RHistr);
				rstr = BuildRecordIdStr(PLr,CurrentCompany);
				RHistr.RecidStr = rstr;
				TrHs1 = true;
				changed = false;
				while(loopkey("RecidStr",RHistr,1,TrHs1)) begin
					if(RHistr.RecidStr!=rstr)then begin TrHs1 = false; end;
					
					if(TrHs1)then begin
						if(RHistr.TransDate==CurrentDate)then begin
							if(RHistr.User=="TOVAROVED" and RHistr.accode==1)then begin
								if(RHistr.TransTime<stringtotime("18:00:00"))then begin
									if(changed==false)then begin
										ReadOriginalRecord(RHistr,OldPLr);
										if(OldPLr.ExVatPrice!=PLr.ExVatPrice)then begin
											logtext(0,PLr.ArtCode & " " & OldPLr.ExVatPrice & " -> " & PLr.ExVatPrice);
											PLr.ExVatPrice = OldPLr.ExVatPrice;
											PLr.CurncyCode = OldPLr.CurncyCode;
											recordstore(PLr,true);
											changed = true;
											TrHs1 = false;
										end;
									end;
									
								end;
							end;
						end;
					end;
				end;
				if(changed)then begin
					//logtext(0,PLr.ArtCode);
				end;
			end;
		end;
		
	end;*/
  return;
end;