external procedure ExtractObj(string,var Integer,var string);
external function LongInt INVcRecordRemoveTest(var record INVc,record INVc,LongInt,LongInt);
external function Boolean IntORchrsum(record IntORVc,Integer);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:51:56 AM
external procedure SumupIntOR(var record IntORVc,var val);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:52:00 AM
external function boolean CompanyIsJWLikeCompany(Integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:04 20.11.2020
external updating procedure RecalculatePricesfromConsComp(record INVc); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 10:24 02.12.2020
external function string 255 StrReplace(string,string,string);// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 14 12 2020 y. at 9:37:36 AM
external procedure GetObjs(string,string,var string);
external function string 255 StrReplace(string,string,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 60 RemoveObjectFromObjectList(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObjectsByType(string, string, var array string, var integer);
external function string 100 BPICodeToName(string);

SetLangMode(LangRussian,"RUS",0);


global webpublic updating procedure WebAFFIPVc()
begin
	record IPVc IPr;
	row IPVc IPrw;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos,ipi;
	boolean change,changed;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt,iprwcnt;
	record CUVc CUr;
	string 20 affobj,Objects;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	blockload(OTACb);
	rwcnt = matrowcnt(OTACb);
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(OTACb,i,OTACrw);
		if(nonblank(OTACrw.FOB))then begin
			vFOBAff[OTACrw.FOB] = OTACrw.SUBDI;
		end;
	end;
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(IPr,1,true))begin
		iprwcnt = matrowcnt(IPr);
		changed = false;
		for(ipi=0;ipi<iprwcnt;ipi=ipi+1)begin
			matrowget(IPr,ipi,IPrw);
			if(setinset("AFF",IPrw.Objects))then begin
				weboutstring("<tr>");
				weboutstring("<td>" & IPr.SerNr & "</td>");
				weboutstring("<td>" & IPr.TransDate & "</td>");
				weboutstring("<td>" & IPrw.CustCode & "</td>");
				fobobj = "";
				GetObjs("FOB",IPrw.Objects,fobobj);
				if(blank(fobobj))then begin
					CUr.Code = IPrw.CustCode;
					if(readfirstmain(CUr,1,true))then begin
						GetObjs("FOB",CUr.VEObjects,fobobj);
					end;
				end;
				if(nonblank(fobobj))then begin
					if(nonblank(vFOBAff[fobobj]))then begin 
						weboutstring("<td>" & vFOBAff[fobobj] & "</td>");
						IPrw.Objects = StrReplace(IPrw.Objects,"AFF",vFOBAff[fobobj]);
						Objects = vFOBAff[fobobj];
						matrowput(IPr,ipi,IPrw);
					end else begin
						weboutstring("<td>" & "***********************************" & "</td>");
					end;
				end;
				weboutstring("</tr>");
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;