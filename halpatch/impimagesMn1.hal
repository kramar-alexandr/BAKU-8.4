external procedure TRSumup(var record TRVc,var val);
external function Integer GetIntYc(Date);
external procedure ExtractObj(string,var Integer,var string);
external function string 60 RemoveObjectFromObjectList(string,string);
external procedure GIWasUpdated(record GlobalItemVc,record GlobalItemVc,string);	
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote updating procedure PasteMaxTS (var record GlobalItemVc); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 13:13 09.12.2021







global updating procedure SaveGIClearAdditCat(Record GlobalItemVc GIr)
begin
	record GlobalItemVc LogGIr;

	recordcopy(LogGIr,GIr);
	GIWasUpdated(GIr,LogGIr," GIWasUpdatedlog 102");
	RecordStore(GIr,true);
	
return;
end;



global updating procedure AddNevComissionMn(record RcVc RepSpec)
begin
  record TRVc TRr;
  row TRVc TRrw;
  integer curcmp,i,rwcnt,k,comprwcnt;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  record NewComissArr3Block NCA3b;
  row NewComissArr3Block NCA3rw;
  record SRBlock SRb;
  val t;
  boolean changed;
  longint newnr;
  record AccVc Accr;
  
  curcmp = CurrentCompany;
  
  if(nonblankdate(RepSpec.d1))then begin
    blockload(Compb);
    
    comprwcnt = matrowcnt(Compb);
    for(k=1;k<=comprwcnt;k=k+1)begin
      matrowget(Compb,k-1,Comprw);
      if(Comprw.ActiveStatus==0)then begin
        setcompany(k,false);
        
        
        blockload(NCA3b);
        BlockLoad(SRb);
        if(matrowcnt(NCA3b)>0)then begin
          changed = false;
          recordnew(TRr);
          TRr.TransDate = RepSpec.d1;
          TRr.RegDate = RepSpec.d1;
          TRr.Comment = "44/11 ID GROUP COMMISSION";
          if (TRr.Number<=0) then begin
            newnr = SRb.LastTRNr;
            TRr.Number = NextSerNr("TRVc",TRr.TransDate,newnr,false,"");
          end;
          TRr.IntYc = GetIntYc(TRr.TransDate);
          for(i=0;i<matrowcnt(NCA3b);i=i+1)begin
            matrowget(NCA3b,i,NCA3rw);
            if(nonblank(NCA3rw.Obj) and NCA3rw.ConstSum!=0)then begin
              clearrow(TRr,TRrw,1);
              TRrw.AccNumber = NCA3rw.AccFr;
              Accr.AccNumber = TRrw.AccNumber;
              readfirstmain(Accr,1,true);
              TRrw.Comment = Accr.Comment;
              TRrw.Objects = NCA3rw.Obj;
              TRrw.DebVal = NCA3rw.ConstSum;
              TRrw.CurDebVal = NCA3rw.ConstSum;
              TRrw.Curncy = "AZN";
              matrowput(TRr,matrowcnt(TRr),TRrw);
              TRSumup(TRr,t); 
              clearrow(TRr,TRrw,1);
              TRrw.AccNumber = NCA3rw.AccTo;
              Accr.AccNumber = TRrw.AccNumber;
              readfirstmain(Accr,1,true);
              TRrw.Comment = Accr.Comment;
              TRrw.Objects = NCA3rw.Obj;
              TRrw.CredVal = NCA3rw.ConstSum;
              TRrw.CurCredVal = NCA3rw.ConstSum;
              TRrw.Curncy = "AZN";
              matrowput(TRr,matrowcnt(TRr),TRrw);
              TRSumup(TRr,t); 
              changed = true;
            end;
          end;
          if(changed)then begin
            recordinsert(TRr,true);
          end;
        end;
      
      end;
    end;
    setcompany(curcmp,true);
  end;
  
  
  
return;
end;





global 
updating procedure ImportResetAdditionalCatGIIn()
begin
	record GlobalItemVc GIr,LogGIr;
	string 255 code, cat, ostr, FinSTr;
	record BtrxThirdLevelCatVc BtrxThirdLevelCatr;
	record BtrxFourthLevelCatVc BtrxFourthLevelCatr;
	boolean res, TrHs;
	integer pos;
	
	logtext(0,"ImportRebateGIIn");
	
	while (TestEOF()==false) begin
		code = "";
		cat = "";
		code = ImportField;
		cat = ImportField;
		GIr.Code = code;
		if (ReadFirstMain(GIr,1,true)) then begin
			recordcopy(LogGIr,GIr);
			
			BtrxThirdLevelCatr.Name = trim(cat);
			TrHs = true;
			res = false;
			while(loopkey("Name",BtrxThirdLevelCatr,1,TrHs))begin
				if(BtrxThirdLevelCatr.Name!=trim(cat))then begin TrHs = false; end;
				if(TrHs and SetInSet(BtrxThirdLevelCatr.Code,GIr.BTRxGiftClass))then begin
					GIr.BTRxGiftClass = RemoveObjectFromObjectList(GIr.BTRxGiftClass,BtrxThirdLevelCatr.Code); 
					res = true;
					TrHs = false;
				end;
			end;
			ResetLoop(BtrxThirdLevelCatr);
			if (!res) then begin
				BtrxFourthLevelCatr.Name = trim(cat);
				TrHs = true;
				while(loopkey("Name",BtrxFourthLevelCatr,1,TrHs))begin
					if(BtrxFourthLevelCatr.Name!=trim(cat))then begin TrHs = false; end;
					if(TrHs and SetInSet(BtrxFourthLevelCatr.Code,GIr.BTRxGiftClass))then begin
						GIr.BTRxGiftClass = RemoveObjectFromObjectList(GIr.BTRxGiftClass,BtrxFourthLevelCatr.Code); 
						res = true;
						TrHs = false;
					end;
				end;
				ResetLoop(BtrxFourthLevelCatr);
			end;
			if (!res) then begin
				pos = 0;
				FinSTr = GIr.BTRxGiftClass;
				ExtractObjWithSeparator(",",GIr.BTRxGiftClass,true,pos,ostr);
				while (nonblank(ostr)) begin
					BtrxThirdLevelCatr.Code = ostr;
					res = false;
					if(ReadFirstMain(BtrxThirdLevelCatr,1,true))begin
						if(BtrxThirdLevelCatr.Name==trim(cat))then begin
							FinSTr = RemoveObjectFromObjectList(GIr.BTRxGiftClass,BtrxThirdLevelCatr.Code); 
							res = true;
							TrHs = false;
						end;
					end;
					if (!res) then begin
						FinSTr = ostr;
						res = false;
						if(ReadFirstMain(BtrxFourthLevelCatr,1,true))begin
							if(BtrxFourthLevelCatr.Name==trim(cat))then begin
								FinSTr = RemoveObjectFromObjectList(GIr.BTRxGiftClass,BtrxFourthLevelCatr.Code); 
								res = true;
								TrHs = false;
							end;
						end;
					end else begin
						GIr.BTRxGiftClass = FinSTr;
					end;
					ExtractObjWithSeparator(",",GIr.BTRxGiftClass,true,pos,ostr);
				end;
			end;
			if (res) then begin
				GIWasUpdated(GIr,LogGIr," GIWasUpdatedlog 58");
				RecordStore (GIr,true);
			end;
		end;
		NextImportLine(true);
	end;

return;
end;








