//server-only

global
function Boolean TimeRangeInTimeRange(Time st1,Time et1,Time st2,Time et2)
BEGIN
  Time frstRangeStrT, frstRangeEndT,scndRangeStrT,scndRangeEndT;
  Boolean res;
  

  frstRangeStrT = st1;
  if (BlankTime(frstRangeStrT)) then begin
    frstRangeStrT = StringToTime("00:00:00");
  end;
  frstRangeEndT = et1;
  if (BlankTime(frstRangeEndT)) then begin
    frstRangeEndT = StringToTime("23:59:59");
  end;
  scndRangeStrT = st2;
  if (BlankTime(scndRangeStrT)) then begin
    scndRangeStrT = StringToTime("00:00:00");
  end;
  scndRangeEndT = et2;
  if (BlankTime(scndRangeEndT)) then begin
    scndRangeEndT = StringToTime("23:59:59");
  end;
  
  if ((frstRangeStrT<scndRangeStrT and frstRangeEndT<scndRangeStrT) or (frstRangeStrT>scndRangeEndT and frstRangeEndT>scndRangeEndT)) then begin
    res = false;
  end else begin
    res = true;
  end;

  TimeRangeInTimeRange = res;
  RETURN;
END;

global
updating function LongInt LCCashbackCorrectionVcRecordCheck(var record LCCashbackCorrectionVc LCbCorr,record LCCashbackCorrectionVc LCbCor2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode,updatemode;
  record LCMemberLevelVc LCMLr;
  record LCCashbackCorrectionVc loopLCbCorr;
  Boolean TrHs,testf;
	
	logtext(0,"LCCashbackCorrectionVcRecordCheck");
	
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  
  if (BlankTime(LCbCorr.FromTime) and NonBlankTime(LCbCorr.ToTime)) then begin
    LCbCorr.FromTime = StringToTime("00:00:00");
  end;
  if (NonBlankTime(LCbCorr.FromTime) and BlankTime(LCbCorr.ToTime)) then begin
    LCbCorr.ToTime = StringToTime("23:59:59");
  end;
  if (Blank(LCbCorr.LCMLevel)) then begin
    RecordCheckError(1854,"",-1,"LCMLevel");      
    res = -1; 
    goto LLCCashbackCorrectionVcRecordCheck;
  end;   
  if (NonBlank(LCbCorr.LCMLevel)) then begin
    LCMLr.Code = LCbCorr.LCMLevel;
    if (ReadFirstMain(LCMLr,1,true)==false) then begin
      RecordCheckError(9588,"",-1,"LCMLevel");      
      res = -1; 
      goto LLCCashbackCorrectionVcRecordCheck;
    end;
  end; 
  if (BlankDate(LCbCorr.FromDate) and NonBlankDate(LCbCorr.ToDate)) then begin
    RecordCheckError(1854,"",-1,"FromDate");      
    res = -1; 
    goto LLCCashbackCorrectionVcRecordCheck;
  end;
  if (NonBlankDate(LCbCorr.FromDate) and BlankDate(LCbCorr.ToDate)) then begin
    RecordCheckError(1854,"",-1,"ToDate");      
    res = -1; 
    goto LLCCashbackCorrectionVcRecordCheck;
  end;
  
  //!!!!!!period overlapping checks work fine if FromDate and ToDate are both blank or nonBlank!!!!!!!!
  if (NonBlankDate(LCbCorr.FromDate) and NonBlankDate(LCbCorr.ToDate)) then begin
    if (LCbCorr.FromDate>LCbCorr.ToDate) then begin
      RecordCheckError(14642," " & USetStr(7254),-1,"FromDate");      
      res = -1; 
      goto LLCCashbackCorrectionVcRecordCheck;
    end;
    loopLCbCorr.LCMLevel = LCbCorr.LCMLevel;
    loopLCbCorr.CustomerPercentLevel = LCbCorr.CustomerPercentLevel;
    loopLCbCorr.ToDate = LCbCorr.ToDate;
    TrHs = true;
    while (LoopBackKey("ToDate",loopLCbCorr,3,TrHs)) begin
      testf = true;
      if (loopLCbCorr.LCMLevel!=LCbCorr.LCMLevel) then begin TrHs = false; testf = false; end;
      if (loopLCbCorr.CustomerPercentLevel!=LCbCorr.CustomerPercentLevel) then begin TrHs = false; testf = false; end;
      if (LCbCorr.FromDate>loopLCbCorr.ToDate or LCbCorr.ToDate<loopLCbCorr.FromDate) then begin TrHs = false; testf = false; end;
      if (loopLCbCorr.SerNr==LCbCorr.SerNr) then begin testf = false; end;
      if (testf) then begin
        //TrHs = false;
        if (DateInRange(loopLCbCorr.ToDate,LCbCorr.FromDate,LCbCorr.ToDate)) then begin
          if (TimeRangeInTimeRange(LCbCorr.FromTime,LCbCorr.ToTime,loopLCbCorr.FromTime,loopLCbCorr.ToTime)) then begin
            RecordCheckError(35107," #" & loopLCbCorr.SerNr,-1,"ToDate");      
            res = -1; 
            goto LLCCashbackCorrectionVcRecordCheck;  
          end; 
        end;
      end;
    end; RESETLOOP(loopLCbCorr);
    
    loopLCbCorr.LCMLevel = LCbCorr.LCMLevel;
    loopLCbCorr.CustomerPercentLevel = LCbCorr.CustomerPercentLevel;
    loopLCbCorr.FromDate = LCbCorr.ToDate;
    TrHs = true;
    while (LoopBackKey("LCMLevel",loopLCbCorr,3,TrHs)) begin
      testf = true;
      if (loopLCbCorr.LCMLevel!=LCbCorr.LCMLevel) then begin TrHs = false; testf = false; end;
      if (loopLCbCorr.CustomerPercentLevel!=LCbCorr.CustomerPercentLevel) then begin TrHs = false; testf = false; end;
      if (LCbCorr.FromDate>loopLCbCorr.ToDate or LCbCorr.ToDate<loopLCbCorr.FromDate) then begin TrHs = false; testf = false; end;
      if (loopLCbCorr.SerNr==LCbCorr.SerNr) then begin testf = false; end;
      if (testf) then begin
        //TrHs = false;
        if (DateInRange(LCbCorr.ToDate,loopLCbCorr.FromDate,loopLCbCorr.ToDate)) then begin
          if (TimeRangeInTimeRange(LCbCorr.FromTime,LCbCorr.ToTime,loopLCbCorr.FromTime,loopLCbCorr.ToTime)) then begin
            RecordCheckError(35107," #" & loopLCbCorr.SerNr,-1,"FromDate");      
            res = -1; 
            goto LLCCashbackCorrectionVcRecordCheck;
          end;  
        end;
      end;
    end; RESETLOOP(loopLCbCorr);
  end else begin
    loopLCbCorr.LCMLevel = LCbCorr.LCMLevel;
    loopLCbCorr.CustomerPercentLevel = LCbCorr.CustomerPercentLevel;
    loopLCbCorr.FromDate = LCbCorr.FromDate;
    TrHs = true;
    while (LoopBackKey("LCMLevel",loopLCbCorr,3,TrHs)) begin //!!!!!! if a necessity to separate blankdate LCCashbackCorrectionVc records according to time range will appear, update CheckForCashbackCorrection(...) too
      testf = true;
      if (loopLCbCorr.LCMLevel!=LCbCorr.LCMLevel or loopLCbCorr.CustomerPercentLevel!=LCbCorr.CustomerPercentLevel) then begin TrHs = false; testf = false; end;
      if (NonBlankDate(loopLCbCorr.FromDate)) then begin TrHs = false; testf = false; end;
      if (NonBlankDate(loopLCbCorr.ToDate)) then begin testf = false; end;
      if (loopLCbCorr.SerNr==LCbCorr.SerNr) then begin testf = false; end;
      if (testf) then begin
        RecordCheckError(35107," #" & loopLCbCorr.SerNr,-1,"FromDate");      
        res = -1; 
        goto LLCCashbackCorrectionVcRecordCheck; 
      end;
    end; 
  end;
  
  if (LCbCorr.SerNr==-1) then begin
    LCbCorr.SerNr = NextSerNr("LCCashbackCorrectionVc",CurrentDate,-1,false,"");
  end;
  
LLCCashbackCorrectionVcRecordCheck:;
  
  LCCashbackCorrectionVcRecordCheck = res;  
  RETURN;
end;

global
function LongInt LCCashbackCorrectionVcRecordDuplicate(var record LCCashbackCorrectionVc LCbCorr,record LCCashbackCorrectionVc LCbCor2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  LCbCorr.SerNr = -1;
  
  LCCashbackCorrectionVcRecordDuplicate = res;
  RETURN;
END;