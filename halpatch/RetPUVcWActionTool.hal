//server-only
external updating procedure StoreeShipTaxAuthReply(string,LongInt,string,string);
external function Boolean BulkSerialNos_CalculateQuantityAndSerialNr(record SerNrTrackBlock,Boolean,string,var string,var val);
external function roundmode GetCostRoundMode(record RoundBlock);
external function string 255 FindPositionWithSerialNr(string,string,string,string);
external function Boolean SerialNrForOneItem(string,var record SerBalVc);
external function string 255 FindINObjects(string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean GetFirstItem(var string,var record INVc);
external function Integer GetPO(LongInt,var record POVc,string,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure RetPUSumUp(var record RetPUVc);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external function Integer CheckSerialStatus(string,string,var string);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function string 20 FindCustRoute(string,string,string);
remote updating function Integer PasteSHInRet(var record SHVc,var record RetVc,string);
remote updating function Integer RecordAction_raPasteRetInInv(var record IVVc,LongInt);
remote updating function Integer RecordAction_raPasteRetPUInVI(var record VIVc,LongInt);
remote updating function Integer CreateCreditNoteVI(record VIVc,var record VIVc);
remote function Boolean PasteRetInInv2(var record IVVc,record RetVc,Boolean);
external function LongInt GetCurUserLastNr(string);
remote procedure RetPUVc_PasteQuant(var record RetPUVc,Integer);
external function val CalculateVINettVal(record VIVc,Boolean);
external function Integer CheckObjs(string,string,var string);
external procedure ExtractObj(string,var Integer,var string);
remote procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure GetObjs(string,string,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObjectsByType(string ,string,var array string,var integer);
external function string 60 RemoveObjectFromObjectList(string,string);

/*
function val AlreadyReturned(LongInt sernr,Integer rownr)
begin
  Boolean found;
  record RetPUVc RetPUr;
  row RetPUVc RetPUrw;
  Integer i,rwcnt;
  val res;

  found = true;
  RetPUr.PUNr = sernr;
  while (LoopKey("PUNr",RetPUr,1,found)) begin
    if (RetPUr.PUNr!=sernr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(RetPUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RetPUr,i,RetPUrw);
        if (RetPUrw.PURow==rownr) then begin
          res = res + RetPUrw.Quant;
        end;
      end;
    end;
  end;  

  AlreadyReturned = res;
  return;
end;

*/

function val AlreadyReturnedFromCustomer(LongInt sernr,LongInt shnr,LongInt shrow)
begin
  Boolean found;
  record ItemHistVc IHr;
  val res;
  record RetVc Retr;
  row RetVc Retrw;
  Integer i,rwcnt;

  found = true;
  IHr.Source = sernr;
  while (LoopKey("Source",IHr,1,found)) begin
    if (IHr.Source!=sernr) then begin found = false; end;
    if (found) then begin
       res = res + IHr.Qty;
//StopAlert("1.IHr.SerNr " & IHr.SerNr & " res " & res);
    end;
  end;  

  found = true;
  Retr.SHNr = shnr;
  while (LoopKey("SHNr",Retr,1,found)) begin
    if (Retr.SHNr!=shnr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(Retr);
      for (i=0;i<rwcnt;i=i+1) begin 
        MatRowGet(Retr,i,Retrw);
        if (Retrw.SHRow==shrow) then begin
          res = res + Retrw.Quant;
        end;
      end;
    end;
  end;  

  AlreadyReturnedFromCustomer = res;
  return;
end;

function val MovedBack(LongInt sernr)
begin
  Boolean found;
  record ItemHistVc IHr;
  val res;
  string 255 location;

  IHr.SerNr = sernr;
  if (ReadFirstMain(IHr,1,true)) then begin
    location = IHr.Location;
  end;

  found = true;
  IHr.Source = sernr;
  while (LoopKey("Source",IHr,1,found)) begin
    if (IHr.Source!=sernr) then begin found = false; end;
    if (found) then begin
//StopAlert("IHr.Qty " & IHr.Qty);
       if (IHr.Location==location) and (IHr.FileName=="StockMovVc") then begin
         res = res - IHr.Qty;
       end;
    end;
  end;  
  MovedBack = res;
  return;
end;

function LongInt MovementSource(record ItemHistVc outIHr)
begin
  record ItemHistVc inIHr;
  Boolean found,testf;
  
  inIHr.FileName = outIHr.FileName;
  inIHr.TransNr = outIHr.TransNr;
  inIHr.Row = outIHr.Row;
  found = true;
  while (LoopKey("FNTransNr",inIHr,3,found)) begin
    if (inIHr.FileName!=outIHr.FileName) then begin found = false; end;
    if (inIHr.TransNr!=outIHr.TransNr) then begin found = false; end;
    if (inIHr.Row!=outIHr.Row) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (inIHr.Qty!=-outIHr.Qty) then begin testf = false; end;
      if (testf) then begin 
        found = false;       
      end;
    end;
  end;
  MovementSource = inIHr.SerNr;
  return;
end;

global
function val AlreadyReturned_RetPUVc(LongInt sernr)
begin
  Boolean found;
  record ItemHistVc IHr;
  val res;

  found = true;
  IHr.Source = sernr;
  while (LoopKey("Source",IHr,1,found)) begin
    if (IHr.Source!=sernr) then begin found = false; end;
    if (found) then begin
       res = res - IHr.Qty;
//StopAlert("res " & res & " IHr.FileName " & IHr.FileName);
       switch (IHr.FileName) begin
         case "SHVc": res = res - AlreadyReturnedFromCustomer(IHr.SerNr,IHr.TransNr,IHr.Row);
         case "StockMovVc": res = res - MovedBack(MovementSource(IHr));
       end;
    end;
  end;  
  AlreadyReturned_RetPUVc = res;
  return;
end;

global
function LongInt PastePUInRetPU(record PUVc PUp,var record RetPUVc RetPUp)
BEGIN
  LongInt res;
  row PUVc PUrw;
  row RetPUVc RetPUrw;
  Integer i,rwcnt,retrw;
  record MainStockBlock MSb;
  record RetGoodsBlock RGb;  
  record CostAccBlock CAb;  
  record AccBlock ARb;  
  Boolean testf;
  record INVc INr;
  record CUVc VEr;
  record ItemHistVc IHr;
  record ItemStatusVc ISr;
  val q;
  record LocationVc Locationr;// Edit ************************** Friday, 11 September 2015 12:05:57
  string 100 locobj,veobj,subdobj;
  
  res = 1756; //1733;
  BlockLoad(MSb);    
  BlockLoad(RGb);
  BlockLoad(CAb);
  BlockLoad(ARb);
  RetPUp.PUNr = PUp.SerNr;
  RetPUp.PONr = PUp.PONr;  
  RetPUp.Type = RGb.ReduceDefault;
  RetPUp.UpdStockFlag = 1;  
  RetPUp.Comment = PUp.Comment;
  RetPUp.VECode = PUp.VECode;
  RetPUp.VEName = PUp.VEName;
  RetPUp.Location = PUp.Location;
  RetPUp.OKFlag = 0;
  RetPUp.InclVAT = 0;
  RetPUp.SumCostPrice = blankval;
  RetPUp.SumQuant = blankval;
  RetPUp.Objects = PUp.Objects;

  RetPUp.CurncyCode = PUp.CurncyCode;
  RetPUp.FrRate = PUp.FrRate;
  RetPUp.ToRateB1 = PUp.ToRateB1;
  RetPUp.ToRateB2 = PUp.ToRateB2;
  RetPUp.BaseRate1 = PUp.BaseRate1;
  RetPUp.BaseRate2 = PUp.BaseRate2;

  RetPUp.ExtraCost = PUp.ExtraCost;
//  RetPUp.ShipCost = PUp.ShipCost;
//  RetPUp.CustomsCost = PUp.CustomsCost;
  RetPUp.Cost1 = PUp.Cost1;
  RetPUp.Cost2 = PUp.Cost2;
  RetPUp.Cost3 = PUp.Cost3;
  RetPUp.Cost4 = PUp.Cost4;
  RetPUp.Cost5 = PUp.Cost5;

  RetPUp.Cost1Round = PUp.Cost1Round;
  RetPUp.Cost2Round = PUp.Cost2Round;
  RetPUp.Cost3Round = PUp.Cost3Round;
  RetPUp.Cost4Round = PUp.Cost4Round;
  RetPUp.Cost5Round = PUp.Cost5Round;
  RetPUp.ExtraCostsCalculation = PUp.ExtraCostsCalculation;

  VEr.Code = PUp.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin end;
  RetPUp.DelAddr0 = VEr.DelAddr0;
  RetPUp.DelAddr1 = VEr.DelAddr1;
  RetPUp.DelAddr2 = VEr.DelAddr2;
  RetPUp.DelAddr3 = VEr.DelAddr3;
  RetPUp.DelAddr4 = VEr.DelAddr4;
  RetPUp.Sorting = FindCustRoute(RetPUp.VECode,RetPUp.Location,RetPUp.DelAddrCode);
  
  // Edit Start ---------------------------------------------- Edit Start
	//Friday, 11 September 2015 12:06:51
	
  if (nonblank(RetPUp.Location)) then begin
		Locationr.Code = RetPUp.Location;
		readfirstmain(Locationr,1,true);
		if(nonblank(Locationr.Objects))then begin
			locobj = Locationr.Objects;
		end;
  end;
  
  VEr.Code = RetPUp.VECode;
  if(readfirstmain(VEr,1,true))then begin
  	if(nonblank(VEr.VEObjects))then begin
  		veobj = VEr.VEObjects;
  	end;
  end;
  
	// Edit End ---------------------------------------------- Edit End
	
  rwcnt = MatRowCnt(PUp);
  retrw = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    testf = true;
    if (blank(PUrw.ArtCode)) then begin
      testf = false;
    end;
    if (PUrw.Quant!=0) then begin testf = true; end;
    if (PUrw.Sum==0) then begin testf = true; end;
    if (testf) then begin
      testf = ReadFirstItem(PUrw.ArtCode,INr,true,true);
      q = PUrw.Quant;
      if (INr.ItemType!=1) then begin
        if (CAb.CostAccForNonStocked==0) then begin
          goto LPastePUInRetPU;
        end;
      end else begin
        FindStockValue(PUrw.ArtCode,RetPUp.Location,ISr);
        if (q>ISr.Instock) then begin
          q = ISr.Instock;
        end;
/*        
        if (CAb.RetPUCostPriceNotFromPU!=0) then begin
          IHr.FileName = "PUVc";
          IHr.TransNr = PUp.SerNr;
          IHr.Row = i;
          if (ReadFirstKey("FNTransNr",IHr,3,true)==false) then begin testf = false; end;
          q = PUrw.Quant - AlreadyReturned_RetPUVc(IHr.SerNr);          
        end;
        if (q<=0) then begin 
          testf = false; 
        end;
*/        
      end;
      
      if (testf) then begin
        ClearRow(RetPUp,RetPUrw,1);
        RetPUrw.PUNr = PUp.SerNr;
        RetPUrw.PURow = i;
        RetPUrw.Location = PUrw.Location;
        RetPUrw.PONr = PUrw.PONr;
        RetPUrw.OrdRow = PUrw.OrdRow;
        RetPUrw.ArtCode = PUrw.ArtCode;
        RetPUrw.Quant = q;
        RetPUrw.Spec = PUrw.Spec;
        RetPUrw.VEItemCode = PUrw.VEItemCode;
/*        
        if (CAb.RetPUCostPriceNotFromPU!=0) then begin
          RetPUrw.FIFO = PUrw.CostPrice;
          RetPUrw.FIFORowVal = Round(RetPUrw.Quant*RetPUrw.FIFO,SetRoundModeD(5));
        end;
*/        
        RetPUrw.Objects = PUrw.Objects;
        RetPUrw.CostAcc = PUrw.CostAcc;
        RetPUrw.CredAcc = PUrw.CredAcc;
        if (nonblank(ARb.RetPUAcc)) then begin
          if (ARb.UsePUAccInRetPU==0) or (blank(RetPUrw.CredAcc))  then begin
            RetPUrw.CredAcc = ARb.RetPUAcc;
          end;
        end;
        RetPUrw.PosCode = PUrw.PosCode;
        RetPUrw.Coefficient = INr.UnitCoefficient;
        RetPUrw.UnitXval = INr.Width;
        RetPUrw.UnitYval = INr.Height;
        RetPUrw.UnitZval = INr.Depth;
        RetPUrw.VATCode = "";
        RetPUrw.SerialNr = PUrw.SerialNr;
        RetPUrw.PUCostPrice = PUrw.Sum/PUrw.Quant;
        
        // Edit Start ---------------------------------------------- Edit Start
	//Friday, 11 September 2015 12:10:00
	
        if(nonblank(locobj) and !setinset(locobj,RetPUrw.Objects))then begin
        	if(nonblank(RetPUrw.Objects))then begin
        		RetPUrw.Objects = RetPUrw.Objects & "," & locobj;
        	end else begin
        		RetPUrw.Objects = locobj;
        	end;
        end;
        
        if(nonblank(veobj) and !setinset(veobj,RetPUrw.Objects))then begin
        	if(nonblank(RetPUrw.Objects))then begin
        		RetPUrw.Objects = RetPUrw.Objects & "," & veobj;
        	end else begin
        		RetPUrw.Objects = veobj;
        	end;
        end;
				
				subdobj = "";
				GetObjs("SUBDI", RetPUrw.Objects,subdobj);
				if (blank(subdobj)) then begin
					subdobj = "";
					GetObjs("SUBDI", PUp.Objects,subdobj);
					if (nonblank(subdobj)) then begin
						if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
						RetPUrw.Objects = RetPUrw.Objects & subdobj;
					end;
				end;
        
	// Edit End ---------------------------------------------- Edit End
	
       /*if (nonblank(RetPUrw.Location)) then begin
        		Locationr.Code = RetPUrw.Location;
        		readfirstmain(Locationr.Code);
        		RetPUrw.Objects = RetPUrw.Objects & "," & RetPUrw.Location;
        end else begin
						RetPUrw.Objects = RetPUrw.Objects & "," & RetPUp.Location;
				end;     */   
/*        
        RetPUrw.ShipCost = PUrw.ShipCost;
        RetPUrw.CustomsCost = PUrw.CustomsCost;
        RetPUrw.RowCost1 = PUrw.RowCost1;
        RetPUrw.RowCost2 = PUrw.RowCost2;
        RetPUrw.RowCost3 = PUrw.RowCost3;
        RetPUrw.RowCost4 = PUrw.RowCost4;
        RetPUrw.RowCost5 = PUrw.RowCost5;
*/       	
				if(CurrentCompany==18)then begin  RetPUrw.PosCode = PUrw.ToPosCode; end;
        MatRowPut(RetPUp,retrw,RetPUrw);
        retrw = retrw + 1;
        res = 0;        
      end;
LPastePUInRetPU:;      
    end;
  end;
  RetPUSumUp(RetPUp);
  PastePUInRetPU = res;
  RETURN;
END;

function Integer AddPURowToRetPU(record RetPUVc RetPUp,Integer purownr,LongInt PUNr,row POVc POrw,row PUVc PUrw,record CostAccBlock CAb,record AccBlock ARb)
BEGIN
  Integer retrw;
  row RetPUVc RetPUrw;
  record INVc INr;
	string 255 subdobj;
	record PUVc PUr;
  
  retrw = MatRowCnt(RetPUp);
  ClearRow(RetPUp,RetPUrw,1);
  if (ReadFirstItem(PUrw.ArtCode,INr,true,true)) then begin end;
  if (INr.ItemType!=1) then begin 
    if (CAb.CostAccForNonStocked==0) then begin
      goto LSKIPROW; 
    end;
  end;
	PUr.SerNr = PUNr;
	ReadFirstMain(PUr,1,true);
  RetPUrw.PONr = PUrw.PONr;
  RetPUrw.OrdRow = PUrw.OrdRow;
  RetPUrw.PURow = purownr;
  RetPUrw.PUNr = PUNr;
  RetPUrw.ArtCode = PUrw.ArtCode;
  RetPUrw.Quant = PUrw.Quant;
  RetPUrw.Spec = PUrw.Spec;
  RetPUrw.VEItemCode = POrw.VEArtCode;
/*  
  if (CAb.RetPUCostPriceNotFromPU==0) then begin
    RetPUrw.FIFORowVal = blankval;
    RetPUrw.FIFO = blankval;
  end else begin
    RetPUrw.FIFO = PUrw.CostPrice;
    RetPUrw.FIFORowVal = PUrw.Quant*PUrw.CostPrice;
  end;
*/  
  RetPUrw.Objects = PUrw.Objects;
	subdobj = "";
	GetObjs("SUBDI", RetPUrw.Objects,subdobj);
	if (blank(subdobj)) then begin
		subdobj = "";
		GetObjs("SUBDI", PUr.Objects,subdobj);
		if (nonblank(subdobj)) then begin
			if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
			RetPUrw.Objects = RetPUrw.Objects & subdobj;
		end;
	end;
  RetPUrw.PUCostPrice = PUrw.Sum/PUrw.Quant;
/*  
  RetPUrw.RowCost1 = PUrw.RowCost1;
  RetPUrw.RowCost2 = PUrw.RowCost2;
  RetPUrw.RowCost3 = PUrw.RowCost3;
  RetPUrw.RowCost4 = PUrw.RowCost4;
  RetPUrw.RowCost5 = PUrw.RowCost5;
  RetPUrw.ShipCost = PUrw.ShipCost;
  RetPUrw.CustomsCost = PUrw.CustomsCost;
  RetPUrw.CostAcc = "";
  RetPUrw.CredAcc = "";
  if (nonblank(ARb.RetPUAcc)) then begin
	  RetPUrw.CredAcc = ARb.RetPUAcc;
  end;
*/
  RetPUrw.CostAcc = PUrw.CostAcc;
  RetPUrw.CredAcc = PUrw.CredAcc;
  if (nonblank(ARb.RetPUAcc)) then begin
    if (ARb.UsePUAccInRetPU==0) or (blank(RetPUrw.CredAcc))  then begin
      RetPUrw.CredAcc = ARb.RetPUAcc;
    end;
  end;
  RetPUrw.PosCode = "";
  RetPUrw.Coefficient = INr.UnitCoefficient;
  RetPUrw.UnitXval = INr.Width;
  RetPUrw.UnitYval = INr.Height;
  RetPUrw.UnitZval = INr.Depth;
  RetPUrw.VATCode = "";
  RetPUrw.SerialNr = "";
  RetPUrw.BarCode = INr.BarCode; //Edit***************************Sasha2,13:57 03.08.2016
  MatRowPut(RetPUp,retrw,RetPUrw);
  retrw = retrw + 1;
LSKIPROW:;  
  AddPURowToRetPU = retrw;
  RETURN;
END;

function Integer PastePOInRetPU(var record RetPUVc RetPUp,var record POVc POr,LongInt ordnr)
BEGIN
  Integer res;
  row POVc POrw;
  row RetPUVc RetPUrw;
  Integer i,rwcnt,retrw;
  record MainStockBlock MSb;
  record RetGoodsBlock RGb;  
  Boolean testf;
  Integer pui,purwcnt;
  record PUVc PUr;
  row PUVc PUrw;
  val rem;
  Boolean found,loopf,found2;
  string 255 keystr;
  record CostAccBlock CAb;
  record AccBlock ARb;  
  record CUVc VEr;
	string 255 errstr,obj,set;
	integer errcode,pos;
	record ObjVc Objr;
  
  res = 20088;
  BlockLoad(MSb);    
  BlockLoad(RGb);
  BlockLoad(CAb);
  BlockLoad(ARb);
  POr.SerNr = ordnr;
  if (ReadFirstMain(POr,1,true)) then begin
  end;
	if(currentcompany==28)then begin
		if(nonblank(POr.IDPrjNum)) then begin
			if(!SetInSet(POr.IDPrjNum,RetPUp.Objects)) then begin
				if(blank(RetPUp.Objects)) then begin
					errcode = CheckObjs("",POr.IDPrjNum,errstr);
					if(errcode==0) then begin
						RetPUp.Objects = POr.IDPrjNum;
					end;
				end else begin
					errcode = CheckObjs("",RetPUp.Objects & "," & POr.IDPrjNum,errstr);
					if(errcode==0) then begin
						RetPUp.Objects = RetPUp.Objects & "," & POr.IDPrjNum;
					end else begin
						i = 0;
						pos = 0;
						set = "";
						ExtractObj(RetPUp.Objects,i,obj);
						while(nonblank(obj)) begin
							Objr.Code = obj;
							if(pos!=0) then begin
								set = set & ",";
							end;
							pos = pos+1;
							if(ReadFirstMain(Objr,1,true)) then begin
								if(Objr.OTCode=="PRC") then begin
									set = set & POr.IDPrjNum;
								end else begin
									set = set & obj;
								end;
							end;
							ExtractObj(RetPUp.Objects,i,obj);
						end;
						RetPUp.Objects = set;
					end;
				end;
			end;	
		end;	
	end;	
  RetPUp.PONr = POr.SerNr;
  RetPUp.Type = RGb.ReduceDefault;
  RetPUp.UpdStockFlag = 1;  
  RetPUp.Comment = POr.Comment;
  RetPUp.VECode = POr.VECode;
  RetPUp.VEName = POr.Addr0;
  RetPUp.Location = POr.Location;
  RetPUp.OKFlag = 0;
  RetPUp.InclVAT = 0;
  RetPUp.SumCostPrice = blankval;
  RetPUp.SumQuant = blankval;
  RetPUp.PUNr = -1;
  RetPUp.Objects = POr.Objects;
  VEr.Code = POr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin end;
  RetPUp.DelAddr0 = VEr.DelAddr0;
  RetPUp.DelAddr1 = VEr.DelAddr1;
  RetPUp.DelAddr2 = VEr.DelAddr2;
  RetPUp.DelAddr3 = VEr.DelAddr3;
  RetPUp.DelAddr4 = VEr.DelAddr4;
  RetPUp.Sorting = FindCustRoute(RetPUp.VECode,RetPUp.Location,RetPUp.DelAddrCode);
  rwcnt = MatRowCnt(POr);
  retrw = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    testf = true;
    if (blank(POrw.ArtCode)) then begin
      testf = false;
    end;
    if (POrw.Shipd2!=0) then begin testf = true; end;
    if (POrw.Sum==0) then begin testf = true; end;
    if (testf) then begin
      ResetLoop(PUr);
      rem = POrw.Shipd2;
      loopf = true;
      while (loopf) begin
        found = true;
        PUr.PONr = POr.SerNr;
        while (LoopKey("PONr",PUr,1,found)) begin
          if (PUr.PONr!=POr.SerNr) then begin found = false; end;
          if (found) then begin
            purwcnt = MatRowCnt(PUr);
            for (pui=0;pui<purwcnt;pui=pui+1) begin
              MatRowGet(PUr,pui,PUrw);
              if (PUrw.OrdRow==i) then begin
                retrw = AddPURowToRetPU(RetPUp,pui,PUr.SerNr,POrw,PUrw,CAb,ARb);
                res = 0;
                rem = rem - PUrw.Quant;
                if (rem<=0) then begin 
                  found = false; 
                  found2 = false;
                end else begin
                  found2 = true;
                end;
              end;
            end;
          end;
        end;
        if (found2==false) then begin loopf = false; end;
      end;  
      if (rem>0) then begin loopf = true; end;
      found2 = false;
      while (loopf) begin
        found = true;
        ResetLoop(PUr);      
        keystr = "RowPONr:" & POr.SerNr;
        while (LoopKey(keystr,PUr,1,found)) begin
          if (found) then begin
            purwcnt = MatRowCnt(PUr);
            for (pui=0;pui<purwcnt;pui=pui+1) begin
              MatRowGet(PUr,pui,PUrw);
              if (PUrw.OrdRow==i) and (PUrw.PONr==POr.SerNr) then begin
                retrw = AddPURowToRetPU(RetPUp,pui,PUr.SerNr,POrw,PUrw,CAb,ARb);
                res = 0;
                rem = rem - PUrw.Quant;
                if (rem<=0) then begin 
                  found = false; 
                  found2 = false;
                end else begin
                  found2 = true;
                end;
              end;
            end;
          end;
        end;
        if (found2==false) then begin loopf = false; end;
      end;            
LSKIPROW:;      
    end;
  end;
  PastePOInRetPU = res;
  RETURN;
END;

global
updating function Integer RecordAction_raPastePOInRetPU(var record RetPUVc RetPUp,LongInt ordnr)
BEGIN
  Integer res;
  record CostAccBlock CAb;
  record POVc POr;
  
  res = 20088;
  BlockLoad(CAb);
  RecordNew(RetPUp);
/*  
  if (CAb.RetPUCostPriceNotFromPU!=0) then begin
    res = 20559;
    goto LRecordAction_raPastePOInRetPU;
  end;
*/  
  RetPUp.SerNr = -1;
  if (RetPUp.SerNr==-1) then begin
    RetPUp.SerNr = NextSerNr("RetPUVc",RetPUp.TransDate,-1,false,"");
    if (RetPUp.SerNr==-1) then begin
      res = 1557;
      goto LRecordAction_raPastePOInRetPU;
    end;
  end;
  res = PastePOInRetPU(RetPUp,POr,ordnr);
  if ((MatRowCnt(RetPUp)>0) and (RetPUp.SerNr!=-1)) then begin
    RetPUSumUp(RetPUp);
    if (RecordInsert(RetPUp,false)) then begin
      CreateRecordLink(RetPUp,CurrentCompany,POr,CurrentCompany);
      CreateRecordLink(POr,CurrentCompany,RetPUp,CurrentCompany);
      res = 0;
    end;
  end;
LRecordAction_raPastePOInRetPU:;
  RecordAction_raPastePOInRetPU = res;
  RETURN;
END;

global
function Boolean RetPUVc_PasteArtCode(var record RetPUVc RetPUp,Integer rownr,Boolean changedf,Boolean warnf)
begin
  Boolean res;
  record INVc INr;
  row RetPUVc RetPUrw;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  Boolean itemfound;
	record ConsItemVc CIr;
	string 255 OrigCode;
	array string 255 aacc, asubdi;
	integer oscnt, k, i;

  if (changedf) then begin
    MatRowGet(RetPUp,rownr,RetPUrw);  
    res = true;
    itemfound = GetFirstItem(RetPUrw.ArtCode,INr);
    if (itemfound==false) then begin
      itemfound = ReadFirstItem(RetPUrw.ArtCode,INr,true,true);
      if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
        INr.Code = RetPUrw.ArtCode;
      end;
    end;
    if (itemfound) then begin
      RetPUrw.Coefficient = INr.UnitCoefficient;
      RetPUrw.ArtCode = INr.Code;
      RetPUrw.Spec = INr.Name;
			CIr.Code = RetPUrw.ArtCode;
			if (ReadFirstMain(Cir,1,true)) then begin
				RetPUrw.VEItemCode = CIr.LocCode;
			end else begin
				RetPUrw.VEItemCode = "";
			end;
//      RetPUrw.BasePrice = INr.UPrice1;
      RetPUrw.Objects = FindINObjects(INr.Objects,INr.Group);
			if (RetPUp.Location=="CWH_I") then begin

			end;
      RetPUrw.UnitXval = INr.Width;
      RetPUrw.UnitYval = INr.Height;
      RetPUrw.UnitZval = INr.Depth;
      RetPUrw.BarCode = INr.BarCode;// Edit ************************** Wednesday, 23 August 2017 13:58:29
      MatRowPut(RetPUp,rownr,RetPUrw);
      if (warnf) then begin
        if (INr.ItemType!=1) then begin
          MessageBox(1301,"");
        end;      
      end;
			for(i=0;i<matrowcnt(RetPUp);i=i+1) begin
				matrowget(RetPUp,i,RetPUrw);
				if (nonblank(RetPUrw.ArtCode)) then begin
					if (nonblank(RetPUrw.Location) and RetPUrw.Location=="CWH_I") then begin
						RetPUrw.Location = "CWH_I";
						// if (RetPUp.VECode == "KARE") then begin
							RetPUrw.PosCode = "CWH13";
						// end else begin
							// RetPUrw.PosCode = "CWH15";
						// end;
						INr.Code = RetPUrw.ArtCode;
						if (ReadFirstMain(INr,1,true)) then begin
							RetPUrw.Objects = FindINObjects(INr.Objects,INr.Group);
						end;
						if (!SetInSet("CC",RetPUrw.Objects)) then begin
							if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
							RetPUrw.Objects = RetPUrw.Objects & "CC";
						end;
						if (!SetInSet("IDE",RetPUrw.Objects)) then begin
							ExtractObjectsByType(RetPUrw.Objects,"SUBDI",asubdi,oscnt);
							for(k=0;k<asubdi.length;k=k+1)begin
								if(nonblank(asubdi[k]))then begin
									RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,asubdi[k]);
								end;
							end;
							if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
							RetPUrw.Objects = RetPUrw.Objects & "IDE";
						end;
						if (!SetInSet("SNT",RetPUrw.Objects)) then begin
							cleararray(aacc);
							ExtractObjectsByType(RetPUrw.Objects,"ACC",aacc,oscnt);
							for(k=0;k<aacc.length;k=k+1)begin
								if(nonblank(aacc[k]))then begin
									RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,aacc[k]);
								end;
							end;
							if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
							RetPUrw.Objects = RetPUrw.Objects & "SNT";
						end;
					end else begin
						INr.Code = RetPUrw.ArtCode;
						if (ReadFirstMain(INr,1,true)) then begin
							RetPUrw.Objects = FindINObjects(INr.Objects,INr.Group);
						end;
						if (RetPUp.Location=="CWH_I") then begin
							RetPUrw.Location = "CWH_I";
							// if (RetPUp.VECode == "KARE") then begin
								RetPUrw.PosCode = "CWH13";
							// end else begin
								// RetPUrw.PosCode = "CWH15";
							// end;
							if (!SetInSet("CC",RetPUrw.Objects)) then begin
								if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
								RetPUrw.Objects = RetPUrw.Objects & "CC";
							end;
							if (!SetInSet("IDE",RetPUrw.Objects)) then begin
								ExtractObjectsByType(RetPUrw.Objects,"SUBDI",asubdi,oscnt);
								for(k=0;k<asubdi.length;k=k+1)begin
									if(nonblank(asubdi[k]))then begin
										RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,asubdi[k]);
									end;
								end;
								if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
								RetPUrw.Objects = RetPUrw.Objects & "IDE";
							end;
							if (!SetInSet("SNT",RetPUrw.Objects)) then begin
								cleararray(aacc);
								ExtractObjectsByType(RetPUrw.Objects,"ACC",aacc,oscnt);
								for(k=0;k<aacc.length;k=k+1)begin
									if(nonblank(aacc[k]))then begin
										RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,aacc[k]);
									end;
								end;
								if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
								RetPUrw.Objects = RetPUrw.Objects & "SNT";
							end;
						end;
					end;
				end;
				matrowput(RetPUp,i,RetPUrw);
			end;
    end;
  end;
  RetPUVc_PasteArtCode = res;
  return;
end;

global
procedure RetPUVc_PasteTransDate(var record RetPUVc RetPUp)
BEGIN
/*
  val fr,to1,to2,br1,br2;

  GetFullCurncyRate(RetPUp.CurncyCode,RetPUp.TransDate,fr,to1,to2,br1,br2);
  RetPUp.FrRate = fr;
  RetPUp.ToRateB1 = to1; 
  RetPUp.ToRateB2 = to2;
  RetPUp.BaseRate1 = br1;
  RetPUp.BaseRate2 = br2;    
*/  
  RETURN;
END;

global
function Integer RetPUVc_PastePONr(var record RetPUVc RetPUp,Integer rownr)
begin
  row RetPUVc RetPUrw;
  record POVc POr;
  Integer retval;
  
  if (rownr<0) then begin
    retval = GetPO(RetPUp.PONr,POr,RetPUp.VECode,true);
    if (retval==0) then begin
      retval = PastePOInRetPU(RetPUp,POr,RetPUp.PONr);
    end;
  end else begin
    MatRowGet(RetPUp,rownr,RetPUrw);
    if (RetPUrw.PONr>0) then begin
      retval = GetPO(RetPUrw.PONr,POr,RetPUp.VECode,true);
    end;
  end;
  switch (retval) begin
    case 1: retval = 1281;
    case 2: retval = 1215;
    case 3: retval = 1138;
    case 4: retval = 1026;
    case 5: retval = 1459;  
  end;
  RetPUVc_PastePONr = retval;
  return;
end;

function Boolean CheckIfOnePOOnRetPU(record RetPUVc RetPUp,LongInt POSerNr)
begin
  Integer i,rwcnt;
  row RetPUVc RetPUrw;
  Boolean res;
  
  res = true;
  rwcnt = MatRowCnt(RetPUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUp,i,RetPUrw);
    if (RetPUrw.PONr!=POSerNr) then begin
      res = false;
      goto LCheckIfOnePOOnRetPU;
    end;
  end;
LCheckIfOnePOOnRetPU:;  
  CheckIfOnePOOnRetPU = res;
  return;
end;

function Boolean CopyPOrwToRetPUrw(record POVc POp,row POVc POrw,LongInt OrdRow,var record RetPUVc RetPUp,string VECode,var row RetPUVc RetPUrw)
begin
  Boolean res;
  val rem,p,t,pv,sv,v1,v2,totqty;
  record INVc INr;
  record CostAccBlock CAb;  
  record AccBlock ARb;  

  BlockLoad(CAb);
  BlockLoad(ARb);
  rem = POrw.Shipd1;
  if (rem>0) then begin
    if (ReadFirstItem(POrw.ArtCode,INr,true,true)) then begin end;
    if (INr.ItemType!=1) then begin 
      if (CAb.CostAccForNonStocked==0) then begin
        goto LCopyPOrwToRetPUrwSKIPROW; 
      end;
    end;
    if (blank(RetPUp.VECode)) then begin
      RetPUp.VECode = POp.VECode;
      RetPUp.Comment = POp.Comment;
      RetPUp.CurncyCode = POp.CurncyCode;
      RetPUp.FrRate = POp.FrRate;
      RetPUp.ToRateB1 = POp.ToRateB1;
      RetPUp.ToRateB2 = POp.ToRateB2;
      RetPUp.BaseRate1 = POp.BaseRate1;
      RetPUp.BaseRate2 = POp.BaseRate2;
      if (((POp.BaseRate1!=0) and (POp.BaseRate2!=0)) or
         ((POp.ToRateB1!=0) or (POp.ToRateB2!=0))) then begin
        RetPUp.FrRate = POp.FrRate;
        RetPUp.ToRateB1 = POp.ToRateB1;
        RetPUp.ToRateB2 = POp.ToRateB2;
        RetPUp.BaseRate1 = POp.BaseRate1;
        RetPUp.BaseRate2 = POp.BaseRate2;
      end;    
    end;
    if (CheckIfOnePOOnRetPU(RetPUp,POp.SerNr)) then begin
      RetPUp.PONr = POp.SerNr;
    end else begin
      RetPUp.PONr = -1;
    end;
    RetPUrw.PONr = POp.SerNr;
    RetPUrw.OrdRow = OrdRow;
    RetPUrw.ArtCode = POrw.ArtCode;
    RetPUrw.Quant = POrw.Quant;
    RetPUrw.Spec = POrw.Spec;
    RetPUrw.VEItemCode = POrw.VEArtCode;
    RetPUrw.FIFORowVal = blankval;
    RetPUrw.FIFO = blankval;
    RetPUrw.Objects = POrw.Objects;
//    RetPUrw.RowCost1 = POrw.RowCost1;
//    RetPUrw.RowCost2 = POrw.RowCost2;
//    RetPUrw.RowCost3 = POrw.RowCost3;
//    RetPUrw.RowCost4 = POrw.RowCost4;
//    RetPUrw.RowCost5 = POrw.RowCost5;
//    RetPUrw.ShipCost = POrw.ShipCost;
//    RetPUrw.CustomsCost = POrw.CustomsCost;
    RetPUrw.CostAcc = POrw.CostAcc;
//    RetPUrw.CredAcc = POrw.CredAcc;
    if (nonblank(ARb.RetPUAcc)) then begin
      if (ARb.UsePUAccInRetPU==0) or (blank(RetPUrw.CredAcc))  then begin
        RetPUrw.CredAcc = ARb.RetPUAcc;
      end;
    end;
    RetPUrw.PosCode = "";
    RetPUrw.Coefficient = INr.UnitCoefficient;
    RetPUrw.UnitXval = INr.Width;
    RetPUrw.UnitYval = INr.Height;
    RetPUrw.UnitZval = INr.Depth;
    RetPUrw.VATCode = "";
    RetPUrw.SerialNr = "";
    res = true;
LCopyPOrwToRetPUrwSKIPROW:;
  end;
  CopyPOrwToRetPUrw = res;
  return;
end;


/*
function Integer PastePORowInRetPU(var record RetPUVc RetPUp,LongInt PONr,Integer OrderRow,Integer retpurownr)
begin
  Integer retval;
  record POVc POr;
  row POVc POrw;
  Integer OrdRow;
  Integer i,porwcnt,retpurowcnt,currow;
  row RetPUVc RetPUrw;
  Boolean firstf;
  
  retval = GetPO(PONr,POr,RetPUp.VECode);
  if (retval==0) then begin
    firstf = true;
    currow = retpurownr;
    if (OrderRow>=0) then begin
      OrdRow = OrderRow  - 1;
    end else begin
      OrdRow = OrderRow;
    end;
    porwcnt = MatRowCnt(POr);
    retpurowcnt = MatRowCnt(RetPUp);
    if (OrdRow==-1) then begin
      if (((porwcnt+(retpurowcnt-1)) > 199) or (OrdRow >=porwcnt)) then begin
        retval = 1;
        goto LPastePORowInRetPU;
      end;
      for (i=0;i<porwcnt;i=i+1) begin
        ClearRow(RetPUp,RetPUrw,1);
        MatRowGet(POr,i,POrw);
        if (CopyPOrwToRetPUrw(POr,POrw,i,RetPUp,RetPUp.VECode,RetPUrw)) then begin
          if (firstf) then begin
            firstf = false;
            MatRowPut(RetPUp,currow,RetPUrw);
            currow = currow + 1;
          end else begin
            MatRowInsert(RetPUp,currow,RetPUrw);
            currow = currow + 1;
          end;
        end else begin
//          retval = 5;//just skip received rows
        end;
      end;
    end else begin
      if (OrdRow>=porwcnt) then begin
        retval = 5;
        goto LPastePORowInRetPU;
      end;  
      if (OrdRow<0) then begin
        retval = 5;
        goto LPastePORowInRetPU;
      end;
      ClearRow(RetPUp,RetPUrw,1);
      MatRowGet(POr,OrdRow,POrw);
      if (CopyPOrwToRetPUrw(POr,POrw,OrdRow,RetPUp,RetPUp.VECode,RetPUrw)) then begin
        MatRowPut(RetPUp,currow,RetPUrw);
      end else begin
        retval = 5;
      end;
    end;
  end;
LPastePORowInRetPU:;
  PastePORowInRetPU = retval;
  return;
end;
*/

function Boolean CopyPUrwToRetPUrw(record PUVc PUp,row PUVc PUrw,LongInt PURow,var record RetPUVc RetPUp,string VECode,var row RetPUVc RetPUrw)
begin
  Boolean res;
  val rem,p,t,pv,sv,v1,v2,totqty;
  record INVc INr;
  record CostAccBlock CAb;  
  record AccBlock ARb;  
  record POVc POr;
  row POVc POrw;

  BlockLoad(CAb);
  BlockLoad(ARb);
  POr.SerNr = PUrw.PONr;
  rem = PUrw.Quant;
  if (ReadFirstMain(POr,1,true)) then begin
    MatRowGet(POr,PUrw.OrdRow,POrw);
    rem = POrw.Shipd1;
  end;
  if (rem>0) then begin
    if (ReadFirstItem(PUrw.ArtCode,INr,true,true)) then begin end;
    if (INr.ItemType!=1) then begin 
      if (CAb.CostAccForNonStocked==0) then begin
        goto LCopyPUrwToRetPUrwSKIPROW; 
      end;
    end;
    if (blank(RetPUp.VECode)) then begin
      RetPUp.VECode = PUp.VECode;
      RetPUp.VEName = PUp.VEName;
      RetPUp.Location = PUp.Location;
      RetPUp.Comment = PUp.Comment;
      RetPUp.CurncyCode = PUp.CurncyCode;
      RetPUp.FrRate = PUp.FrRate;
      RetPUp.ToRateB1 = PUp.ToRateB1;
      RetPUp.ToRateB2 = PUp.ToRateB2;
      RetPUp.BaseRate1 = PUp.BaseRate1;
      RetPUp.BaseRate2 = PUp.BaseRate2;
      if (((PUp.BaseRate1!=0) and (PUp.BaseRate2!=0)) or
         ((PUp.ToRateB1!=0) or (PUp.ToRateB2!=0))) then begin
        RetPUp.FrRate = PUp.FrRate;
        RetPUp.ToRateB1 = PUp.ToRateB1;
        RetPUp.ToRateB2 = PUp.ToRateB2;
        RetPUp.BaseRate1 = PUp.BaseRate1;
        RetPUp.BaseRate2 = PUp.BaseRate2;
      end;    
    end;
    if (CheckIfOnePOOnRetPU(RetPUp,PUp.PONr)) then begin
      RetPUp.PONr = PUp.PONr;
    end else begin
      RetPUp.PONr = -1;
    end;
    RetPUrw.PONr = PUp.PONr;
    RetPUrw.OrdRow = PUrw.OrdRow;
    RetPUrw.PUNr = PUp.SerNr;
    RetPUrw.PURow = PURow;
    RetPUrw.ArtCode = PUrw.ArtCode;
    RetPUrw.Quant = PUrw.Quant;
    RetPUrw.Spec = PUrw.Spec;
    RetPUrw.SerialNr = PUrw.SerialNr;
//    RetPUrw.VEItemCode = PUrw.VEArtCode;
    RetPUrw.FIFORowVal = blankval;
    RetPUrw.FIFO = blankval;
    RetPUrw.Objects = PUrw.Objects;
    RetPUrw.PUCostPrice = PUrw.Sum/PUrw.Quant;
//    RetPUrw.RowCost1 = PUrw.RowCost1;
//    RetPUrw.RowCost2 = PUrw.RowCost2;
//    RetPUrw.RowCost3 = PUrw.RowCost3;
//    RetPUrw.RowCost4 = PUrw.RowCost4;
//    RetPUrw.RowCost5 = PUrw.RowCost5;
//    RetPUrw.ShipCost = PUrw.ShipCost;
//    RetPUrw.CustomsCost = PUrw.CustomsCost;
    RetPUrw.CostAcc = PUrw.CostAcc;
    RetPUrw.CredAcc = PUrw.CredAcc;
    RetPUrw.Location = PUrw.Location;
    if (nonblank(ARb.RetPUAcc)) then begin
      if (ARb.UsePUAccInRetPU==0) or (blank(RetPUrw.CredAcc))  then begin
        RetPUrw.CredAcc = ARb.RetPUAcc;
      end;
    end;
    RetPUrw.PosCode = PUrw.PosCode;
    RetPUrw.Coefficient = INr.UnitCoefficient;
    RetPUrw.UnitXval = INr.Width;
    RetPUrw.UnitYval = INr.Height;
    RetPUrw.UnitZval = INr.Depth;
    RetPUrw.VATCode = "";
    res = true;
LCopyPUrwToRetPUrwSKIPROW:;
  end;
  CopyPUrwToRetPUrw = res;
  return;
end;

function Integer PastePORowInRetPU(var record RetPUVc RetPUp,LongInt PONr,Integer OrderRow,Integer retpurownr)
begin
  Integer retval;
  record POVc POr;
  row POVc POrw;
  Integer OrdRow;
  Integer i,porwcnt,retpurowcnt,currow;
  row RetPUVc RetPUrw;
  Boolean firstf;
  record PUVc PUr;
  row PUVc PUrw;
  val rem;
  Boolean loopf,found,found2;
  Integer pui,purwcnt;
  string 255 keystr;
  
  retval = GetPO(PONr,POr,RetPUp.VECode,true);
  if (retval==0) then begin
    firstf = true;
    currow = retpurownr;
    if (OrderRow>=0) then begin
      OrdRow = OrderRow  - 1;
    end else begin
      OrdRow = OrderRow;
    end;
    porwcnt = MatRowCnt(POr);
    retpurowcnt = MatRowCnt(RetPUp);
    if (OrdRow==-1) then begin
      if (((porwcnt+(retpurowcnt-1)) > 199) or (OrdRow >=porwcnt)) then begin
        retval = 1;
        goto LPastePORowInRetPU;
      end;
      for (i=0;i<porwcnt;i=i+1) begin
        ClearRow(RetPUp,RetPUrw,1);
        MatRowGet(POr,i,POrw);

        ResetLoop(PUr);
        rem = POrw.Shipd2;
        loopf = true;
        while (loopf) begin
          found = true;
          PUr.PONr = POr.SerNr;
          while (LoopKey("PONr",PUr,1,found)) begin
            if (PUr.PONr!=POr.SerNr) then begin found = false; end;
            if (found) then begin
              purwcnt = MatRowCnt(PUr);
              for (pui=0;pui<purwcnt;pui=pui+1) begin
                MatRowGet(PUr,pui,PUrw);
                if (PUrw.OrdRow==i) then begin
                  if (CopyPUrwToRetPUrw(PUr,PUrw,pui,RetPUp,RetPUp.VECode,RetPUrw)) then begin
                    if (firstf) then begin
                      firstf = false;
                      MatRowPut(RetPUp,currow,RetPUrw);
                      currow = currow + 1;
                    end else begin
                      MatRowInsert(RetPUp,currow,RetPUrw);
                      currow = currow + 1;
                    end;
                    retval = 0;
                    rem = rem - PUrw.Quant;
                    if (rem<=0) then begin 
                      found = false; 
                      found2 = false;
                    end else begin
                      found2 = true;
                    end;
                  end else begin
                    retval = 5;
                    goto LPastePORowInRetPU;
                  end;                  
                end;
              end;
            end;
          end;
          if (found2==false) then begin loopf = false; end;
        end;  

        if (rem>0) then begin loopf = true; end;
        found2 = false;
        while (loopf) begin
          found = true;
          ResetLoop(PUr);      
          keystr = "RowPONr:" & POr.SerNr;
          while (LoopKey(keystr,PUr,1,found)) begin
            if (found) then begin
              purwcnt = MatRowCnt(PUr);
              for (pui=0;pui<purwcnt;pui=pui+1) begin
                MatRowGet(PUr,pui,PUrw);
                if (PUrw.OrdRow==i) and (PUrw.PONr==POr.SerNr) then begin
                  if (CopyPUrwToRetPUrw(PUr,PUrw,pui,RetPUp,RetPUp.VECode,RetPUrw)) then begin
                    if (firstf) then begin
                      firstf = false;
                      MatRowPut(RetPUp,currow,RetPUrw);
                      currow = currow + 1;
                    end else begin
                      MatRowInsert(RetPUp,currow,RetPUrw);
                      currow = currow + 1;
                    end;
                    retval = 0;
                    rem = rem - PUrw.Quant;
                    if (rem<=0) then begin 
                      found = false; 
                      found2 = false;
                    end else begin
                      found2 = true;
                    end;
                  end else begin
                    retval = 5;
                    goto LPastePORowInRetPU;
                  end;                  
                end;
              end;
            end;
          end;
          if (found2==false) then begin loopf = false; end;
        end;
        
      end;
    end else begin
      if (OrdRow>=porwcnt) then begin
        retval = 5;
        goto LPastePORowInRetPU;
      end;  
      if (OrdRow<0) then begin
        retval = 5;
        goto LPastePORowInRetPU;
      end;
      ClearRow(RetPUp,RetPUrw,1);
      MatRowGet(POr,OrdRow,POrw);
      
      ResetLoop(PUr);
      rem = POrw.Shipd2;
      loopf = true;
      while (loopf) begin
        found = true;
        PUr.PONr = POr.SerNr;
        while (LoopKey("PONr",PUr,1,found)) begin
          if (PUr.PONr!=POr.SerNr) then begin found = false; end;
          if (found) then begin
            purwcnt = MatRowCnt(PUr);
            for (pui=0;pui<purwcnt;pui=pui+1) begin
              MatRowGet(PUr,pui,PUrw);
              if (PUrw.OrdRow==OrdRow) then begin
                if (CopyPUrwToRetPUrw(PUr,PUrw,pui,RetPUp,RetPUp.VECode,RetPUrw)) then begin
                  if (firstf) then begin
                    firstf = false;
                    MatRowPut(RetPUp,currow,RetPUrw);
                    currow = currow + 1;
                  end else begin
                    MatRowInsert(RetPUp,currow,RetPUrw);
                    currow = currow + 1;
                  end;
                  retval = 0;
                  rem = rem - PUrw.Quant;
                  if (rem<=0) then begin 
                    found = false; 
                    found2 = false;
                  end else begin
                    found2 = true;
                  end;
                end else begin
                  retval = 5;
                  goto LPastePORowInRetPU;
                end;                  
              end;
            end;
          end;
        end;
        if (found2==false) then begin loopf = false; end;
      end;  

      if (rem>0) then begin loopf = true; end;
      found2 = false;
      while (loopf) begin
        found = true;
        ResetLoop(PUr);      
        keystr = "RowPONr:" & POr.SerNr;
        while (LoopKey(keystr,PUr,1,found)) begin
          if (found) then begin
            purwcnt = MatRowCnt(PUr);
            for (pui=0;pui<purwcnt;pui=pui+1) begin
              MatRowGet(PUr,pui,PUrw);
              if (PUrw.OrdRow==OrdRow) and (PUrw.PONr==POr.SerNr) then begin
                if (CopyPUrwToRetPUrw(PUr,PUrw,pui,RetPUp,RetPUp.VECode,RetPUrw)) then begin
                  if (firstf) then begin
                    firstf = false;
                    MatRowPut(RetPUp,currow,RetPUrw);
                    currow = currow + 1;
                  end else begin
                    MatRowInsert(RetPUp,currow,RetPUrw);
                    currow = currow + 1;
                  end;

                  retval = 0;
                  rem = rem - PUrw.Quant;
                  if (rem<=0) then begin 
                    found = false; 
                    found2 = false;
                  end else begin
                    found2 = true;
                  end;
                end else begin
                  retval = 5;
                  goto LPastePORowInRetPU;
                end;                  
              end;
            end;
          end;
        end;
        if (found2==false) then begin loopf = false; end;
        end;
      
    end;
  end;
LPastePORowInRetPU:;
  PastePORowInRetPU = retval;
  return;
end;

global
function Integer RetPUVc_PasteOrdRow(var record RetPUVc RetPUp,Integer rownr,Boolean changedf)
begin
  row RetPUVc RetPUrw;
  Integer retval;
  Integer i,rwcnt;
  
  if (rownr>=0) then begin
    MatRowGet(RetPUp,rownr,RetPUrw);
    retval = PastePORowInRetPU(RetPUp,RetPUrw.PONr,RetPUrw.OrdRow,rownr);
    RetPUSumUp(RetPUp);
  end;
  switch (retval) begin
    case 1: retval = 20407;
    case 2: retval = 1215;
    case 3: retval = 1138;
    case 4: retval = 1026;
    case 5: retval = 1459;  
  end;
  RetPUVc_PasteOrdRow = retval;
  return;
end;

global
function Integer RetPUVc_PastePUNr(var record RetPUVc RetPUp,Integer rownr)
begin
  row RetPUVc RetPUrw;
  record PUVc PUr;
  Integer res;

  if (rownr>=0) then begin
    MatRowGet(RetPUp,rownr,RetPUrw);
    if (RetPUrw.PUNr>0) then begin
      PUr.SerNr = RetPUrw.PUNr;
      if (ReadFirstMain(PUr,1,true)==false) then begin
        res = 1290;
      end;
    end;
  end;
  RetPUVc_PastePUNr = res;
  return;
end;

function Integer PastePURowInRetPU(var record RetPUVc RetPUp,Integer retpurownr)
begin
  Integer retval;
  record POVc POr;
  record PUVc PUr;
  row PUVc PUrw;
  Integer PURow;
  Integer i,purwcnt,retpurowcnt,currow;
  row RetPUVc RetPUrw;
  Boolean firstf;
  
  MatRowGet(RetPUp,retpurownr,RetPUrw);
  PUr.SerNr = RetPUrw.PUNr;
  if (ReadFirstMain(PUr,1,true)) then begin
    if (RetPUp.VECode==PUr.VECode) or (blank(RetPUp.VECode)) then begin
      firstf = true;
      currow = retpurownr;
      if (RetPUrw.PURow>=0) then begin
        PURow = RetPUrw.PURow  - 1;
      end else begin
        PURow = RetPUrw.PURow;
      end;
      purwcnt = MatRowCnt(PUr);
      retpurowcnt = MatRowCnt(RetPUp);
      if (PURow==-1) then begin
        if (((purwcnt+(retpurowcnt-1)) > 199) or (PURow >=purwcnt)) then begin
          retval = 1;
          goto LPastePURowInRetPU;
        end;
        for (i=0;i<purwcnt;i=i+1) begin
          ClearRow(RetPUp,RetPUrw,1);
          MatRowGet(PUr,i,PUrw);        
          if (CopyPUrwToRetPUrw(PUr,PUrw,i,RetPUp,RetPUp.VECode,RetPUrw)) then begin
            if (firstf) then begin
              firstf = false;
              MatRowPut(RetPUp,currow,RetPUrw);
              currow = currow + 1;
            end else begin
              MatRowInsert(RetPUp,currow,RetPUrw);
              currow = currow + 1;
            end;
          end else begin
  //          retval = 5;//just skip received rows
          end;
        end;
      end else begin
        if (PURow>=purwcnt) then begin
          retval = 5;
          goto LPastePURowInRetPU;
        end;  
        if (PURow<0) then begin
          retval = 5;
          goto LPastePURowInRetPU;
        end;
        ClearRow(RetPUp,RetPUrw,1);
        MatRowGet(PUr,PURow,PUrw);
        if (CopyPUrwToRetPUrw(PUr,PUrw,PURow,RetPUp,RetPUp.VECode,RetPUrw)) then begin
          MatRowPut(RetPUp,currow,RetPUrw);
        end else begin
          retval = 5;
        end;
      end;
    end;
  end;
LPastePURowInRetPU:;
  PastePURowInRetPU = retval;
  return;
end;

global
function Integer RetPUVc_PastePURow(var record RetPUVc RetPUp,Integer rownr,Boolean changedf)
begin
  Integer res;
  
  if (rownr>=0) then begin
    res = PastePURowInRetPU(RetPUp,rownr);
    RetPUSumUp(RetPUp);
  end;
  RetPUVc_PastePURow = res;
  return;
end;

global
procedure RetPUVc_PasteSerialNr(var record RetPUVc RetPUp,Integer rownr,var string warning)
BEGIN
  row RetPUVc RetPUrw;
  record BatchTextVc btr;
  string 255 tstr;
  val UnitXval,UnitYval,UnitZval;
  record SerBalVc SBr;
  Boolean serialfound;
  record ItemHistVc sourceIHr;
  record INVc INr;
  record SerNrTrackBlock SNrb;

  BlockLoad(SNrb);
  warning = "";
  MatRowGet(RetPUp,rownr,RetPUrw);
  if (blank(RetPUrw.ArtCode)) then begin 
    if (SerialNrForOneItem(RetPUrw.SerialNr,SBr)) then begin
      RetPUrw.ArtCode = SBr.Item;
      RetPUrw.Quant = 1;
      if blank(RetPUp.Location) then begin 
        RetPUp.Location = SBr.Location;
      end;
      RetPUrw.PosCode = FindPositionWithSerialNr(RetPUp.Location,RetPUrw.ArtCode,RetPUrw.SerialNr,RetPUrw.Location);
      MatRowPut(RetPUp,rownr,RetPUrw);
      if (RetPUVc_PasteArtCode(RetPUp,rownr,1,false)) then begin
      end;   
      MatRowGet(RetPUp,rownr,RetPUrw);
      
      sourceIHr.ArtCode = RetPUrw.ArtCode;
      sourceIHr.SerialNr = RetPUrw.SerialNr;
      sourceIHr.FileName = "PUVc";
      if (ReadLastKey("ArtCodeSerialNr",sourceIHr,3,true)) then begin
        RetPUrw.PUNr = sourceIHr.TransNr;
        RetPUrw.PURow = sourceIHr.Row + 1;
        MatRowPut(RetPUp,rownr,RetPUrw);
        RetPUVc_PastePURow(RetPUp,rownr,true);      
        MatRowGet(RetPUp,rownr,RetPUrw);
        RetPUrw.Location = SBr.Location;
      end;
    end;
  end else begin
    ReadFirstItem(RetPUrw.ArtCode,INr,true,true);
    if (nonblank(RetPUrw.ArtCode)) and (INr.SerNrf==1) then begin
      if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,true,RetPUrw.ArtCode,RetPUrw.SerialNr,RetPUrw.Quant)) then begin
        MatRowPut(RetPUp,rownr,RetPUrw);
        MatRowGet(RetPUp,rownr,RetPUrw);
      end;
    end;
  end;
  if ((SNrb.BulkSerialNos==0) or (InString(RetPUrw.SerialNr,":")==0)) then begin
    SerialNrDimensions(RetPUrw.ArtCode,RetPUrw.SerialNr,UnitXval,UnitYval,UnitZval);
    if (UnitXval!=0) then begin RetPUrw.UnitXval = UnitXval; end;
    if (UnitYval!=0) then begin RetPUrw.UnitYval = UnitYval; end;
    if (UnitZval!=0) then begin RetPUrw.UnitZval = UnitZval; end;
    if (CheckSerialStatus(RetPUrw.ArtCode,RetPUrw.SerialNr,tstr)==1) then begin
      warning = tstr;
    end;    
    if (serialfound==false) then begin 
      RetPUrw.Quant = CalculateSerialNrQuantity(RetPUrw.ArtCode,"","",false,RetPUrw.UnitXval,RetPUrw.UnitYval,RetPUrw.UnitZval,RetPUrw.Quant);
    end;
  end;
  MatRowPut(RetPUp,rownr,RetPUrw);
  RetPUSumUp(RetPUp);
  RETURN;
END;

global
procedure RetPUVc_PasteLocation(var record RetPUVc RetPUr,Integer rownr)
begin
row RetPUVc RetPUrw;
integer i, oscnt, k;
record BPIBrandVc BBr;
record LocationVc Locr;
boolean TrHs;
record INVc INr;
vector boolean consStock;
array string 255 aacc, asubdi;

	if(currentCompany==18) then begin  
		TrHs = true;
		Locr.Code = "";
		While(LoopMain(Locr,1,TrHs)) begin	
			if(nonblank(Locr.ConsigStockCode)) then begin
				consStock[Locr.ConsigStockCode] = true;
			end;
		end;
		ResetLoop(Locr);
	end;
  if (rownr==-1) then begin
    RetPUr.Sorting = FindCustRoute(RetPUr.VECode,RetPUr.Location,RetPUr.DelAddrCode);
		for(i=0;i<matrowcnt(RetPUr);i=i+1) begin
			matrowget(RetPUr,i,RetPUrw);
			if((consStock[RetPUr.Location] and blank(RetPUrw.Location)) or (consStock[RetPUrw.Location])) then begin
				INr.Code = RetPUrw.ArtCode;
				ReadFirstMain(INr,1,true);
				BBr.Code = INr.BPIBrand;
				if(ReadFirstMain(BBr,1,true)) then begin
					switch(BBr.CWHCode) begin
						case "CWH10": RetPUrw.PosCode = "CWHJCSG10";
						case "CWH11": RetPUrw.PosCode = "CWHJCSG11";
						case "CWH12": RetPUrw.PosCode = "CWHJCSG12";
						case "CWH7": RetPUrw.PosCode = "CWHJCSG7";
						case "CWH8": RetPUrw.PosCode = "CWHJCSG8";
						case "CWH9": RetPUrw.PosCode = "CWHJCSG9";
					end;
				end;
			end;
			matrowput(RetPUr,i,RetPUrw);
		end;
  end else begin
		matrowget(RetPUr,rownr,RetPUrw);
		if((consStock[RetPUrw.Location]) or (blank(RetPUrw.Location) and consStock[RetPUr.Location])) then begin
			INr.Code = RetPUrw.ArtCode;
			ReadFirstMain(INr,1,true);
			BBr.Code = INr.BPIBrand;
			if(ReadFirstMain(BBr,1,true)) then begin
				switch(BBr.CWHCode) begin
					case "CWH10": RetPUrw.PosCode = "CWHJCSG10";
					case "CWH11": RetPUrw.PosCode = "CWHJCSG11";
					case "CWH12": RetPUrw.PosCode = "CWHJCSG12";
					case "CWH7": RetPUrw.PosCode = "CWHJCSG7";
					case "CWH8": RetPUrw.PosCode = "CWHJCSG8";
					case "CWH9": RetPUrw.PosCode = "CWHJCSG9";
				end;
			end;
		end;
		matrowput(RetPUr,rownr,RetPUrw);
	end;
	for(i=0;i<matrowcnt(RetPUr);i=i+1) begin
		matrowget(RetPUr,i,RetPUrw);
		if (nonblank(RetPUrw.ArtCode)) then begin
			if (nonblank(RetPUrw.Location) and RetPUrw.Location=="CWH_I") then begin
				RetPUrw.Location = "CWH_I";
				// if (RetPUr.VECode == "KARE") then begin
					RetPUrw.PosCode = "CWH13";
				// end else begin
					// RetPUrw.PosCode = "CWH15";
				// end;
				INr.Code = RetPUrw.ArtCode;
				if (ReadFirstMain(INr,1,true)) then begin
					RetPUrw.Objects = FindINObjects(INr.Objects,INr.Group);
				end;
				if (!SetInSet("CC",RetPUrw.Objects)) then begin
					if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
					RetPUrw.Objects = RetPUrw.Objects & "CC";
				end;
				if (!SetInSet("IDE",RetPUrw.Objects)) then begin
					ExtractObjectsByType(RetPUrw.Objects,"SUBDI",asubdi,oscnt);
					for(k=0;k<asubdi.length;k=k+1)begin
						if(nonblank(asubdi[k]))then begin
							RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,asubdi[k]);
						end;
					end;
					if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
					RetPUrw.Objects = RetPUrw.Objects & "IDE";
				end;
				if (!SetInSet("SNT",RetPUrw.Objects)) then begin
					cleararray(aacc);
					ExtractObjectsByType(RetPUrw.Objects,"ACC",aacc,oscnt);
					for(k=0;k<aacc.length;k=k+1)begin
						if(nonblank(aacc[k]))then begin
							RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,aacc[k]);
						end;
					end;
					if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
					RetPUrw.Objects = RetPUrw.Objects & "SNT";
				end;
			end else begin
				if (RetPUr.Location=="CWH_I") then begin
					RetPUrw.Location = "CWH_I";
					// if (RetPUr.VECode == "KARE") then begin
						RetPUrw.PosCode = "CWH13";
					// end else begin
						// RetPUrw.PosCode = "CWH15";
					// end;
					INr.Code = RetPUrw.ArtCode;
					if (ReadFirstMain(INr,1,true)) then begin
						RetPUrw.Objects = FindINObjects(INr.Objects,INr.Group);
					end;
					if (!SetInSet("CC",RetPUrw.Objects)) then begin
						if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
						RetPUrw.Objects = RetPUrw.Objects & "CC";
					end;
					if (!SetInSet("IDE",RetPUrw.Objects)) then begin
						ExtractObjectsByType(RetPUrw.Objects,"SUBDI",asubdi,oscnt);
						for(k=0;k<asubdi.length;k=k+1)begin
							if(nonblank(asubdi[k]))then begin
								RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,asubdi[k]);
							end;
						end;
						if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
						RetPUrw.Objects = RetPUrw.Objects & "IDE";
					end;
					if (!SetInSet("SNT",RetPUrw.Objects)) then begin
						cleararray(aacc);
						ExtractObjectsByType(RetPUrw.Objects,"ACC",aacc,oscnt);
						for(k=0;k<aacc.length;k=k+1)begin
							if(nonblank(aacc[k]))then begin
								RetPUrw.Objects = RemoveObjectFromObjectList(RetPUrw.Objects,aacc[k]);
							end;
						end;
						if (nonblank(RetPUrw.Objects)) then begin RetPUrw.Objects = RetPUrw.Objects & ","; end;
						RetPUrw.Objects = RetPUrw.Objects & "SNT";
					end;
				end;
			end;
		end;
		matrowput(RetPUr,i,RetPUrw);
	end;
  return;
end;

global
procedure RetPUVc_PasteQuant(var record RetPUVc RetPUr,Integer rownr)
begin
  row RetPUVc RetPUrw;
  record INVc INr;
  record SerNrTrackBlock SNrb;
  record RoundBlock ROb;

  BlockLoad(SNrb);
  BlockLoad(ROb);
  MatRowGet(RetPUr,rownr,RetPUrw);
  ReadFirstItem(RetPUrw.ArtCode,INr,true,true);
  if (nonblank(RetPUrw.ArtCode)) and (INr.SerNrf==1) then begin
    if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,true,RetPUrw.ArtCode,RetPUrw.SerialNr,RetPUrw.Quant)) then begin
      MatRowPut(RetPUr,rownr,RetPUrw);
      MatRowGet(RetPUr,rownr,RetPUrw);
    end;
  end;
  RetPUrw.FIFORowVal = Round(RetPUrw.FIFO*RetPUrw.Quant,GetCostRoundMode(ROb));
  MatRowPut(RetPUr,rownr,RetPUrw);
  RetPUSumUp(RetPUr);
  return;
end;

global
updating procedure RetPUVcRecordUpdateClientRemote(record RetPUVc RetPUr,record RetPUVc RetPU2r,string TaxAdminServSeal)
begin
  if (HasLocalization("PRT")) then begin
    StoreeShipTaxAuthReply("RetPUVc",RetPUr.SerNr,RetPUr.OfficialSerNr,TaxAdminServSeal);
  end;
  return;
end;





global
updating function Integer CreateLocalRetFromECRet(record RetVc Retr) // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger17:22 05.12.2018
begin
integer rwcnt,i,j,y,ORrwcnt,locshcnt,mtrw,l,pucnt,p,pumtrw,pi,VIOFFCnt,k;
row RetVc Retrw, locRetrw;
record RLinkVc RLr, RL2r;
record ORVc ORr, LocORr;
row ORVc ORrw, LocORrw;
vector integer vRetItemsQuant, vLocRetItemsQuant, vLocRetItemCompany, RetPUitemQuant;
vector string 255 vLocRetItemStock;
array longint aLocOr, aLocSH;
vector boolean vLocCompanys, vLocSHf;
integer MaxNumComp;
record SHVc SHr;
row SHVc SHrw;
boolean testf;
longint r;
record LocalMachineBlock LMb;
record RetVc LocRetr;
vector longint vPUNr, vPUrQuant;
record PUVc PUr;
row PUVc PUrw;
record RetPUVc RetPUr;
row RetPUVc RetPUrw;
record IVVc IVr, OldIVr;
record VIVc VIr, credVIr, offVIr;
row VIVc credVIrw, VIrw;
record SRBlock SRb;
LongInt newnr;
string 255 tstr, strInvoiceNr, tolocsm;
Boolean nousersernr, TrHs;
record CUVc CUr;
record ECCasierDocSetBlock ECCDSb;
row ECCasierDocSetBlock ECCDSrw;
vector string 255 vNotSMcompLoc, vNotSMcompLocItem;
vector boolean LocSHCompltdf, vNotSMcomp, vNotSMItemFCash;
record StockMovVc SMr, newStockMovr;
row StockMovVc newStockMovrw;
vector val vRRPPrices;
val priceDiff;
	
	BlockLoad(ECCDSb);
	
	
	rwcnt = matrowcnt(Retr);
	for (i=0;i<rwcnt;i=i+1)begin
		matrowget(Retr,i,Retrw);
		vRetItemsQuant[Retrw.ArtCode] = vRetItemsQuant[Retrw.ArtCode] + Retrw.Quant;
	end;

	ORr.SerNr = Retr.OrdNr;
	if(ReadFirstMain(ORr,1,true))then begin
		j = 1;
		locshcnt = 0;
		while (ReadRecordLink(ORr,j,LocORr,RLr))begin
			aLocOr[j-1] = LocORr.SerNr;
			i = 1;
			matrowget(LocORr,0,LocORrw);
			if(SetCompany(LocORrw.ECReservComp,true))then begin
				while (ReadRecordLink(LocORr,i,SHr,RL2r))begin
					aLocSH[locshcnt] = SHr.SerNr;
					vLocSHf[locshcnt] = true;
					locshcnt = locshcnt + 1;
					i = i + 1;
				end;
				ResetCompany(29);
			end;
			j=j+1;
		end;
		MaxNumComp = 0;
		ORrwcnt = matrowcnt(ORr);
		for (i=0;i<ORrwcnt;i=i+1)begin
			matrowget(ORr,i,ORrw);
			if(vRetItemsQuant[ORrw.ArtCode]>0)then begin
				vLocRetItemsQuant[right(ORrw.GlobalItemArtCode,len(ORrw.GlobalItemArtCode)-9)] = vRetItemsQuant[ORrw.ArtCode];
				vLocRetItemCompany[right(ORrw.GlobalItemArtCode,len(ORrw.GlobalItemArtCode)-9)] = ORrw.ECReservComp;
				vLocRetItemStock[right(ORrw.GlobalItemArtCode,len(ORrw.GlobalItemArtCode)-9)] = ORrw.ECReservStock;
				vLocCompanys[ORrw.ECReservComp] = true;
				vRRPPrices[ORrw.ArtCode] = ORrw.Sum / ORrw.Quant;
				if(MaxNumComp<ORrw.ECReservComp)then begin MaxNumComp = ORrw.ECReservComp; end;
			end;
		end;
		
		
		rwcnt = matrowcnt(ECCDSb);
		for (i=0;i<rwcnt;i=i+1) begin
			matrowget(ECCDSb,i,ECCDSrw);
			vNotSMcomp[ECCDSrw.CompNr] = true;
			vNotSMcompLoc[ECCDSrw.CompNr] = ECCDSrw.LocCode;
		end;
		if(ReadRecordLink(ORr,1,SMr,RLr))then begin
			if(SMr.OKFlag==1)then begin
				tolocsm = SMr.ToLocation;
			end;
		end;
		rwcnt = matrowcnt(ORr);
		for (i=0;i<rwcnt;i=i+1) begin
			matrowget(ORr,i,ORrw);
			if(vNotSMcomp[ORrw.ECReservComp] and tolocsm==vNotSMcompLoc[ORrw.ECReservComp]) then begin
				vNotSMItemFCash[ORrw.SerialNr] = true;
				vNotSMcompLocItem[ORrw.SerialNr] = vNotSMcompLoc[ORrw.ECReservComp];
			end;
		end;
		
		
		pucnt = 0;
		for (i=0;i<MaxNumComp;i=i+1)begin
			if(vLocCompanys[i+1] and SetCompany(i+1,false))then begin
				for (j=0;j<locshcnt;j=j+1) begin
					SHr.SerNr = aLocSH[j];
					if(ReadFirstMain(SHr,1,true))then begin
						testf = false;
						rwcnt = matrowcnt(SHr);
						for (y=0;y<rwcnt;y=y+1)begin
							matrowget(SHr,y,SHrw);
							if(StringToLongInt(mid(SHrw.SerialNr,3,len(SHrw.SerialNr)-12))==Retr.OrdNr and vLocRetItemsQuant[SHrw.ArtCode]>0 and vLocSHf[j])then begin
								testf = true;
							end;
							if(testf)then begin
								p = 1;
								while (ReadRecordLink(SHr,p,PUr,RL2r))begin
									
									pumtrw = matrowcnt(PUr);
									for (pi=0;pi<pumtrw;pi=pi+1)begin
										matrowget(PUr,pi,PUrw);
										if(vRetItemsQuant[PUrw.ArtCode]>0)then begin
											vPUNr[pucnt] = PUr.SerNr;
											pucnt = pucnt + 1;
											pi = pumtrw;
										end;
									end;
									p = p + 1;
								end;
								BlockLoad(LMb);
								r = PasteSHInRet(SHr,LocRetr,LMb.DefReturnLocation);
								mtrw = matrowcnt(LocRetr);
								for (l=mtrw;l>=0;l=l-1)begin
									matrowget(LocRetr,l,LocRetrw);
									if(vLocRetItemsQuant[LocRetrw.ArtCode]>0)then begin
										if(vLocRetItemsQuant[LocRetrw.ArtCode]<LocRetrw.Quant)then begin
											LocRetrw.Quant = vLocRetItemsQuant[LocRetrw.ArtCode];
											vLocRetItemsQuant[LocRetrw.ArtCode] = 0;
											matrowput(LocRetr,l,LocRetrw);
										end else begin
											vLocRetItemsQuant[LocRetrw.ArtCode] = vLocRetItemsQuant[LocRetrw.ArtCode] - LocRetrw.Quant;
										end;
									end else begin
										matrowdelete(LocRetr,l);
									end;
								end;
								LocRetr.ECOMMERCEOrdf = 1;
								if(RecordStore(LocRetr,true))then begin
									CreateRecordLink(LocRetr,CurrentCompany,Retr,29);
									CreateRecordLink(Retr,29,LocRetr,CurrentCompany);
									vLocSHf[j] = false;
									RecordNew(IVr);
									IVr.SerNr = -1;
									IVr.UpdStockFlag = 0;
									IVr.ECOMMERCEOrdf = 1;
									if(PasteRetInInv2(IVr,LocRetr,false))then begin
										if (IVr.SerNr==-1) then begin
										BlockLoad(SRb);
											if ((IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (SRb.LastCredInvNr!=-1)) then begin
												newnr = GetCurUserLastNr("CreditIVVc");
												if (newnr<=0) then begin
													newnr = SRb.LastCredInvNr;
												end;
												nousersernr = true;
											end else begin
												if ((IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (SRb.LastCashInvNr!=-1)) then begin
													newnr = SRb.LastCashInvNr;
													nousersernr = true;
													if (newnr==-1) then begin
														newnr = GetCurUserLastNr("IVVc");
														nousersernr = false;
													end;
												end else begin
													newnr = GetCurUserLastNr("IVVc");
													if (newnr<=0) then begin
														newnr = SRb.LastInvNr;
													end;
												end;
											end;
										end;
										IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,newnr,true,"");
										IVr.PayDeal = "CN";
										RecordInsert(IVr,true);
										CreateRecordLink(IVr,CurrentCompany,LocRetr,CurrentCompany);  
										CreateRecordLink(LocRetr,CurrentCompany,IVr,CurrentCompany);  
									end;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger!this is in RetVcRecordCheck!
								end;
							end;
						end;
					end;
				end;
			end;
		end;
		ResetCompany(29);
		for (i=0;i<pucnt;i=i+1)begin
			PUr.SerNr = vPUNr[i];;
			if (ReadFirstMain(PUr,1,true))then begin
				rwcnt = matrowcnt(PUr);
				for (j=0;j<rwcnt;j=j+1) begin
					matrowget(PUr,j,PUrw);
					vPUrQuant[PUr.SerNr & "_" & PUrw.ArtCode] = PUrw.Quant;
				end;
				RetPUr.OfficialSerNr = Retr.OrdNr;
				TrHs = true;
				while (loopkey("OfficialSerNr",RetPUr,1,TrHs)) begin
					if(StringToLongInt(RetPUr.OfficialSerNr)!=Retr.OrdNr)then begin TrHs = false; end;
					if(TrHs)then begin
						rwcnt = matrowcnt(RetPUr);
						for (j=0;j<rwcnt;j=j+1) begin
							matrowget(RetPUr,j,RetPUrw);
							vPUrQuant[PUr.SerNr & "_" & RetPUrw.ArtCode] = vPUrQuant[PUr.SerNr & "_" & RetPUrw.ArtCode] - RetPUrw.Quant;
						end;
					end;
				end;
				ResetLoop(RetPUr);
				RecordNew(RetPUr);
				r = PastePUInRetPU(PUr,RetPUr);
				logtext(0,r & " PastePUInRetPU error code");
				if (RetPUr.SerNr<=0) then begin
					RetPUr.SerNr = NextSerNr("RetPUVc",RetPUr.TransDate,-1,false,"");
				end;  
				rwcnt = matrowcnt(RetPUr);
				for (j=rwcnt-1;j>=0;j=j-1)begin
					MatRowGet(RetPUr,j,RetPUrw);
					if (vRetItemsQuant[RetPUrw.ArtCode]>0)then begin
						if(RetPUrw.Quant>=vRetItemsQuant[RetPUrw.ArtCode])then begin
							RetPUrw.Quant = vRetItemsQuant[RetPUrw.ArtCode];
							RetPUitemQuant[RetPUr.SerNr & "_" & RetPUrw.ArtCode] = RetPUrw.Quant;
							vRetItemsQuant[RetPUrw.ArtCode] = 0;
							MatRowPut(RetPUr,j,RetPUrw);
							//RetPUVc_PasteQuant(RetPUr,j);
						end else begin
							if(vPUrQuant[PUr.SerNr & "_" & RetPUrw.ArtCode]>=vRetItemsQuant[RetPUrw.ArtCode])then begin
								RetPUrw.Quant = vRetItemsQuant[RetPUrw.ArtCode];
								vRetItemsQuant[RetPUrw.ArtCode] = vRetItemsQuant[RetPUrw.ArtCode] - RetPUrw.Quant;
								vPUrQuant[PUr.SerNr & "_" & RetPUrw.ArtCode] = vPUrQuant[PUr.SerNr & "_" & RetPUrw.ArtCode] - RetPUrw.Quant;
								RetPUitemQuant[RetPUr.SerNr & "_" & RetPUrw.ArtCode] = RetPUrw.Quant;
								MatRowPut(RetPUr,j,RetPUrw);
							end else begin
								RetPUrw.Quant = vPUrQuant[PUr.SerNr & "_" & RetPUrw.ArtCode];
								vRetItemsQuant[RetPUrw.ArtCode] = vRetItemsQuant[RetPUrw.ArtCode] - RetPUrw.Quant;
								vPUrQuant[PUr.SerNr & "_" & RetPUrw.ArtCode] = 0;
								RetPUitemQuant[RetPUr.SerNr & "_" & RetPUrw.ArtCode] = RetPUrw.Quant;
								MatRowPut(RetPUr,j,RetPUrw);
							end;
						end;
					end else begin
						matrowdelete(RetPUr,j);
					end;
				end;
				RetPUr.Location = "MAIN";
				rwcnt = matrowcnt(RetPUr);
				for (k=rwcnt-1;k>=0;k=k-1) begin
					matrowget(RetPUr,k,RetPUrw);
					if(vNotSMItemFCash[RetPUrw.SerialNr])then begin
						RetPUr.Location = vNotSMcompLocItem[RetPUrw.SerialNr];
						RetPUVc_PasteLocation(RetPUr,-1);
					end;
				end;
				RetPUr.OfficialSerNr = ORr.CustOrdNr;
				RetPUr.PONr = "";
				if(RecordInsert(RetPUr,true))then begin 
					if(MatRowCnt(RetPUr)>0)then begin
						CreateRecordLink(PUr,CurrentCompany,RetPUr,CurrentCompany);
						CreateRecordLink(RetPUr,CurrentCompany,PUr,CurrentCompany);
						CreateRecordLink(ORr,CurrentCompany,RetPUr,CurrentCompany);
						CreateRecordLink(RetPUr,CurrentCompany,ORr,CurrentCompany);	
						j = 1;
						while (ReadRecordLink(PUr,j,VIr,RLr))begin
							VIr.InvoiceNr = "";
							mtrw = matrowcnt(VIr);
							priceDiff = 0;
							for (y=mtrw-1;y>=0;y=y-1)begin
								matrowget(VIr,y,VIrw);
								if(VIrw.AccNumber=="41/01")then begin
									if(RetPUitemQuant[RetPUr.SerNr & "_" & VIrw.Item]==0)then begin
										matrowdelete(VIr,y);
									end else begin
										VIrw.Sum = (VIrw.Sum / VIrw.qty) * RetPUitemQuant[RetPUr.SerNr & "_" & VIrw.Item];
										VIrw.qty = RetPUitemQuant[RetPUr.SerNr & "_" & VIrw.Item];
										priceDiff = priceDiff + ((vRRPPrices[VIrw.Item] - (VIrw.Sum / VIrw.qty)) *  VIrw.qty);
										MatRowPut(VIr,y,VIrw);
									end;
								end;
							end;
							mtrw = matrowcnt(VIr);
							for (y=mtrw-1;y>=0;y=y-1)begin
								matrowget(VIr,y,VIrw);
								if(VIrw.AccNumber=="76")then begin
									VIrw.Sum = priceDiff;
									MatRowPut(VIr,y,VIrw);
								end;
							end;
							// mtrw = matrowcnt(VIr);  //for FOB36 Vendor
							// matrowget(VIr,mtrw-1,VIrw);
							// VIrw.Sum = 0;
							// matrowput(VIr,mtrw-1,VIrw);
							// VIr.PayVal = CalculateVINettVal(VIr,true);
							// VIr.FrRate = blankval;
							// VIr.ToRateB1 = blankval;
							// matrowget(VIr,mtrw-1,VIrw);
							// VIrw.Sum = VIr.PayVal * 0.36;
							// matrowput(VIr,mtrw-1,VIrw);
							VIr.PayVal = CalculateVINettVal(VIr,true);
							r = CreateCreditNoteVI(VIr,credVIr);
							
							if(r==0)then begin
								if(VIr.POSerNr>0)then begin
									testf = true;
									VIOFFCnt = 1;
									while (testf) begin
										offVIr.InvoiceNr = VIr.POSerNr & "-" & VIOFFCnt;
										if(ReadFirstKey("InvoiceNr",offVIr,1,true))then begin
											VIOFFCnt = VIOFFCnt + 1;
										end else begin
											testf = false;
											credVIr.InvoiceNr = VIr.POSerNr & "-" & VIOFFCnt;
										end;
									end;
								end;
								credVIr.PayDeal = "CN";
								if(RecordStore(credVIr,true))then begin
									CreateRecordLink(RetPUr,CurrentCompany,credVIr,CurrentCompany);  
									CreateRecordLink(credVIr,CurrentCompany,RetPUr,CurrentCompany);  
									CreateRecordLink(ORr,CurrentCompany,credVIr,CurrentCompany);
									CreateRecordLink(credVIr,CurrentCompany,ORr,CurrentCompany);
								end;
							end;
							j = j + 1;
						end;
					end;
				end;
			end;
		end;
	end;


	return;
end;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger17:22 05.12.2018

global  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:43 31.01.2020
procedure RetPUVc_PasteVendor(var record RetPUVc RetPUr,Integer rownr)
begin
	record CUVc CUr;
	string 255 curcode,obj,obj1,objACC;
	val fr,to1,to2,br1,br2;
	boolean TrHs1;
	record BPIBrandVc BPIBrandr;
	row RetPUVc RetPUrw;
	integer i;
	
  if (rownr==-1) then begin
    CUr.Code = RetPUr.VECode;
		if(ReadFirstMain(CUr,1,true)) then begin
			RetPUr.VEName = CUr.Name;
			RetPUr.CurncyCode = CUr.VECurncyCode;
			curcode = RetPUr.CurncyCode;
			GetFullCurncyRate(curcode,RetPUr.TransDate,fr,to1,to2,br1,br2);
			RetPUr.CurncyCode = curcode;
			RetPUr.FrRate = fr;
			RetPUr.ToRateB1 = to1; 
			RetPUr.ToRateB2 = to2;
			RetPUr.BaseRate1 = br1;
			RetPUr.BaseRate2 = br2;    
		end;
		TrHs1 = true;
		BPIBrandr.Code = "";	
		while(LoopMain(BPIBrandr,1,TrHs1)) begin
			if(SetInSet(RetPUr.VECode,BPIBrandr.Vendor)) then begin
				switch(BPIBrandr.CWHCode) begin 
					case "CWH1": obj = "AFF_TW";
					case "CWH2": obj = "AFF_TW";
					case "CWH3": obj = "AFF_CR";
					case "CWH4": obj = "AFF_CR";
					case "CWH5": obj = "LUX";
					case "CWH6": obj = "LUX";
					case "CWH7": obj = "JEW";
					case "CWH8": obj = "JEW";
					case "CWH12": obj = "JEW";
					case "CWH9": obj = "DSTR";
					case "CWH13": obj = "IDE";
					case "CWH14": obj = "LUX";
				end;
				objACC = BPIBrandr.StockGroup;
				TrHs1 = false;
			end;
		end;
		for(i=0;i<matrowcnt(RetPUr);i=i+1) begin
			matrowget(RetPUr,i,RetPUrw);
			GetObjs("ACC",RetPUrw.Objects,obj1);
			if(blank(obj1)) then begin RetPUrw.Objects = AddObjectToObjectList(RetPUrw.Objects,objACC); end;
			GetObjs("SUBDI",RetPUrw.Objects,obj1);
			if(blank(obj1)) then begin RetPUrw.Objects = AddObjectToObjectList(RetPUrw.Objects,obj); end;
			matrowput(RetPUr,i,RetPUrw);
		end;
  end;
  return;
end;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:43 31.01.2020