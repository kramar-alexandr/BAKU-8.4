//server-only
external function val AbsoluteVal(val);

/*
*	All "UnOk" works by the same mechanism:
*CheckUnOkXXXXVc : checks existance of all records in ItemHistVc,checks remaining quantity (FIFO queue must be correct)
*
*UnOk_XXXXVc: removes all items' history records (IHr) for selected document
*							item's quantity returns to the source record (IH2r), if it exists
*							restores all costs
*							restores all serial numbers,reservs, etc.
*/



updating procedure RemoveSerialNrRecord(record ItemHistVc IHr)
begin
  record SerBalVc SerBalr;
  
	if (nonblank(IHr.SerialNr)) then begin
		SerBalr.Serial = IHr.SerialNr;
		SerBalr.Item = IHr.ArtCode;
		SerBalr.Location = IHr.Location;
		if (ReadFirstMain(SerBalr,3,true)) then begin
				RecordDelete(SerBalr);
		end;
	end;    
end;



updating procedure ReturnSerialNrRecord(record ItemHistVc IHr)
begin
  record SerBalVc SerBalr;
  
	if (nonblank(IHr.SerialNr)) then begin
		SerBalr.Serial = IHr.SerialNr;
		SerBalr.Item = IHr.ArtCode;
		SerBalr.Location = IHr.Location;
		if (ReadFirstMain(SerBalr,3,true)) then begin
			SerBalr.Quant = 1;
			RecordStore(SerBalr,true);
		end;
	end;  
   
end;







global function boolean CheckUnOkIVVc(record IVVc IVr)
begin
	record ItemHistVc IHr;
	boolean TrHs,res;
	row IVVc IVrw;
	integer	rwcnt,i,count;
	val Qty; 

	res = true;	
	rwcnt = MatRowCnt(IVr);

  for(i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(IVr,i,IVrw);
  	IHr.FileName = "IVVc";
  	IHr.TransNr = IVr.SerNr;
  	IHr.Row = i;
  	TrHs = true;
  	count = 0;  	

		if (IVrw.stp == kInvoiceRowTypeNormal and nonblank(IVrw.ArtCode)) then begin
			Qty = 0;
  		While(LoopKey("FNTransNr",IHr,3,TrHs)) begin	
  			if(IHr.TransNr!=IVr.SerNr or IHr.Row!=i) then begin TrHs=false;  end;
  			
  			if (TrHs) then begin	
					Qty = Qty + IHr.Qty;
					
					if (IVrw.Quant<0 and IHr.RemQty != IHr.Qty) then begin
						res = false;
						goto LCheckUnOkIVVc;					
					end;
					if (IVr.InvType==kInvoiceTypeCredit and IHr.RemQty != IHr.Qty) then begin
						res = false;
						goto LCheckUnOkIVVc;					
					end;										
					count = count + 1;
				end;
				
			end;
			ResetLoop(IHr);
			if ((AbsoluteVal(Qty) != AbsoluteVal(IVrw.Quant)) or count==0) then begin 
						res = false;
						//Logtext(0,"---3 " & IVrw.ArtCode & "    row " & i  & "  count " & count);
						goto LCheckUnOkIVVc;			
			end;

		end;
	end;	

// LogText(0,"check for unok" & IVr.SerNr &  "...ok" );
LCheckUnOkIVVc:;



CheckUnOkIVVc = res;
return;
end;



global updating 
procedure UnOk_IVVc(var record IVVc IVr)
begin
  record ItemHistVc IHr,IH2r;
	row IVVc IVrw;
	integer	rwcnt,i;  
	Integer res;
	boolean TrHs;
	string 20 checkLocation;
	record INVc INr;	
	
  rwcnt = MatRowCnt(IVr);  	
	// LogText(0,IVr.SerNr &  "  was  unok..." );
  
  for(i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(IVr,i,IVrw);
  	if (IVrw.stp == kInvoiceRowTypeNormal) then begin
  	
			IHr.FileName = "IVVc";
  		IHr.TransNr = IVr.SerNr;
  		IHr.Row = i;  
			TrHs = true;  
				
  		While(LoopKey("FNTransNr",IHr,3,TrHs)) begin	
  			if(IHr.TransNr!=IVr.SerNr or IHr.Row!=i) then begin TrHs=false;end;
  			
  			if (TrHs) then begin
  				INr.Code = IVrw.ArtCode;
  				ReadFirstMain(INr,1,true);
  				if (INr.ItemType==1 or INr.ItemType==2) then begin
  				
						if (IVrw.Quant>0) then begin	    	
  						IH2r.SerNr = IHr.Source;
  						if (ReadFirstMain(IH2r,1,true)) then begin
  							IH2r.RemQty = IH2r.RemQty + (-IHr.Qty);  //this IHr has negative Qty
			  				IH2r.RemCostPrice = IH2r.TotCostPrice/IH2r.Qty*IH2r.RemQty;
			  				IH2r.RemCostPriceCurncy = IH2r.TotCostPriceCurncy/IH2r.Qty*IH2r.RemQty;
  							RecordStore(IH2r,true);
			  				ReturnSerialNrRecord(IH2r);
			  				RemoveSerialNrRecord(IHr);
							end;					
						end;
						
						  	
						LogText(0,"DELETED  history IVVc" & IHr.SerNr & "    : " & IHr.ArtCode);
						// if (IVrw.Quant<0 or IVr.InvType==kInvoiceTypeCredit)	then  -  just remove
							
					end;
					RecordDelete(IHr);
					StepBack(IHr);
							
  			end;
			end; 
			resetloop(IHr);
  	end; 
  	
	end; 
	
	IVr.LocOKNr = BlankVal; 
  


  return;
end;



global function longint CheckUnOkPUVc(record PUVc PUp)
begin
	record ItemHistVc IHr;
	Integer res,count;
	boolean TrHs;
	row PUVc PUrw;
	integer	rwcnt,i; 

	res = 0;	
	rwcnt = MatRowCnt(PUp);

  for(i=0;i<rwcnt;i=i+1) begin
  	MatRowGet(PUp,i,PUrw);
  	IHr.FileName = "PUVc";
  	IHr.TransNr = PUp.SerNr;
  	IHr.Row = i;
  	TrHs = true;
  	count = 0;
  	While(LoopKey("FNTransNr",IHr,3,TrHs)) begin	
  		if(IHr.TransNr!=PUp.SerNr or IHr.Row!=i) then begin TrHs=false;  end;
  		
  		if (TrHs) then begin
				if (IHr.RemQty != IHr.Qty and IHr.StockAffectf!=0) then begin
					res = 20884;
					goto LCheckUnOkPUVc;
				end;
				count=count+1;
			end;
			
		end;
		ResetLoop(IHr);
				
		if(count==0) then begin //records don't exist
			res = 20884;
			goto LCheckUnOkPUVc;
		end;

  end;


LCheckUnOkPUVc:;
CheckUnOkPUVc = res;
return;
end;





global updating 
procedure UnOk_PUVc(var record PUVc PUp)			//Edit----------------------Dima  20.01.2016
begin
  record ItemHistVc IHr;  
	Integer res;
	boolean TrHs;
	
	res = 0;
	TrHs = true; 

	  IHr.FileName = "PUVc";
  	IHr.TransNr = PUp.SerNr;
  	TrHs = true;
  	While(LoopKey("FNTransNr",IHr,2,TrHs)) begin	
  		if(IHr.TransNr!=PUp.SerNr) then begin TrHs=false; end;
  		if (TrHs) then begin
  		
  				RemoveSerialNrRecord(IHr);  		
  							
					RecordDelete(IHr);
					StepBack(IHr);
					LogText(0,"DELETED history PUvc " & IHr.ArtCode);
			end; 
  	end;
  	
  	PUp.LocOKNr = BlankVal;

  LUnOk_PUVc:;
  return;
end;



global function longint CheckUnOkRetPUVc(record RetPUVc RetPUr)
begin
	record ItemHistVc IHr;
	Integer res;
	boolean TrHs;
	val totQty;

	res = 0;	

  IHr.FileName = "RetPUVc";
  IHr.TransNr = RetPUr.SerNr;
  TrHs = true;
  While(LoopKey("FNTransNr",IHr,2,TrHs)) begin	
  	if(IHr.TransNr!=RetPUr.SerNr) then begin TrHs=false;  end;
  	
  	if (TrHs) then begin	
			totQty = totQty + (-IHr.Qty);
		end;		
	end; 
  
	if (totQty != RetPUr.SumQuant) then begin
		res = 20884;
		goto LCheckUnOkRetPUVc;
	end;
LCheckUnOkRetPUVc:;
CheckUnOkRetPUVc = res;
return;
end;


global updating 
procedure UnOk_RetPUVc(var record RetPUVc RetPUr)	//Edit----------------------Dima  20.01.2016
begin
  record ItemHistVc IHr,IH2r;  
	Integer res;
	boolean TrHs;
	
	res = 0;

  IHr.FileName = "RetPUVc";
  IHr.TransNr = RetPUr.SerNr;
  TrHs = true;
  While(LoopKey("FNTransNr",IHr,2,TrHs)) begin	
  	if(IHr.TransNr!=RetPUr.SerNr) then begin TrHs=false; end;
  	if (TrHs) then begin
  			IH2r.SerNr = IHr.Source;
  			if (ReadFirstMain(IH2r,1,true)) then begin
  				IH2r.RemQty = IH2r.RemQty - IHr.Qty;
  				IH2r.RemCostPrice = IH2r.TotCostPrice/IH2r.Qty*IH2r.RemQty;  
  				IH2r.RemCostPriceCurncy = IH2r.TotCostPriceCurncy/IH2r.Qty*IH2r.RemQty;
  				if (RecordStore(IH2r,true)) then begin
						//statuses and serial numbers are put back by themselves
						LogText(0,"DELETED history  RetPU " & IHr.ArtCode);
						RecordDelete(IHr);
						StepBack(IHr);
					end; 
  			end;
		end;
  end;
  
  RetPUr.LocOKNr = BlankVal;

  return;
end;
