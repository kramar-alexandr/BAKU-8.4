external procedure ExtractObj(string,var Integer,var string);
external function LongInt INVcRecordRemoveTest(var record INVc,record INVc,LongInt,LongInt);
external function Boolean IntORchrsum(record IntORVc,Integer);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:51:56 AM
external procedure SumupIntOR(var record IntORVc,var val);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:52:00 AM

global webpublic updating procedure WebFixConsItemsDupl()
begin
	record ConsItemVc CIr,oldCIr;
	vector integer aDupCode;
	vector string 100 vItems;
	array string 100 atag;
	longint i;
	record ItemHistVc IHr;
	integer pos;
	string 100 tstr;
	record INVc INr;
	boolean delflaf;
	
	setcompany(18,false);
	
	CIr.LocCode = "";
	while(loopkey("LocCodeBrand",CIr,1,true))begin
		INr.Code = CIr.Code;
		if(readfirstmain(INr,1,true))then begin
			if(CIr.LocCode==oldCIr.LocCode and CIr.BrandCode==oldCIr.BrandCode)then begin
				aDupCode[CIr.LocCode & "_" & CIr.BrandCode] = aDupCode[CIr.LocCode & "_" & CIr.BrandCode] + 1;
				if(!setinset(oldCIr.Code,vItems[CIr.LocCode & "_" & CIr.BrandCode]))then begin
					vItems[CIr.LocCode & "_" & CIr.BrandCode] = vItems[CIr.LocCode & "_" & CIr.BrandCode] & CIr.Code & "," & oldCIr.Code;
				end else begin
					vItems[CIr.LocCode & "_" & CIr.BrandCode] = vItems[CIr.LocCode & "_" & CIr.BrandCode] & "," & CIr.Code;
				end;
			end;
			recordcopy(oldCIr,CIr);
		end else begin
			logtext(0,"ItemNotExists " & CIr.Code);
			recorddelete(CIr);
			stepback(CIr);
		end;
	end;
	
	resetloop(CIr);
	CIr.Code = "";
	getvectortags(aDupCode,atag);
	for(i=0;i<atag.length;i=i+1)begin
		if(aDupCode[atag[i]]>0)then begin
			pos = 0;
			ExtractObj(vItems[atag[i]],pos,tstr);
			logtext(0,"______________________________");
			while(nonblank(tstr))begin
				INr.Code = tstr;
				readfirstmain(INr,1,true);
				IHr.ArtCode = INr.Code;
				delflaf = false;
				if(!readfirstkey("ArtCode",IHr,1,true))then begin
					if(INVcRecordRemoveTest(INr,INr,0,0)==1) then begin
						delflaf = true;
					end;	
				end;
				if(delflaf==false)then begin
					logtext(0,INr.Code & " " & INr.Name & " " & INr.BPIBrand & " " & INr.AlternativeCode);
				end else begin
					logtext(0,INr.Code & " " & INr.Name & " " & INr.BPIBrand & " " & INr.AlternativeCode & "-------------- t delete!");
					recorddelete(INr);
					CIr.Code = INr.Code;
					if(readfirstmain(CIr,1,true))then begin
						recorddelete(CIr);
					end;
				end;
				ExtractObj(vItems[atag[i]],pos,tstr);
			end;
		end;
	end;
	
	
return;
end;




global webpublic procedure WebGetCCCollectAndCCModel()
begin

	record INVc INr;
	boolean TrHs;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	longint i, CompNr;
	string 255 comp;
	boolean testf;

	setcompany(1,false);

	blockload(Compb);
	comp = WebGetArg("company");
	if (nonblank(comp)) then begin
		CompNr = StringToInt(comp);
	end else begin
		CompNr = 0;
	end;
	
	for(i=0;i<matrowcnt(Compb);i=i+1)begin
		testf = true;
		if (CompNr>0 and i+1!=CompNr) then begin testf = false; end;
		if (testf) then begin
			matrowget(Compb,i,Comprw);
			if(Comprw.ActiveStatus==0 and i+1!=28 and i+1!=29) then begin
				setcompany(i+1,false);
				INr.Code = "";
				TrHs = true;
				while(loopmain(INr,1,TrHs))begin
					if (nonblank(INr.MainDisp) or nonblank(INr.SNOne)) then begin
						WebOutString("CCCollection<=>" & INr.MainDisp & "<=>CCModel<=>" & INr.SNOne & "<=>Company<=>" & CurrentCompany);
						weboutstring("<BR>");
					end;
				end;
				Resetloop(INr);
			end;
		end;
	end;
return;
end;











global webpublic updating procedure WebDeleteCoinINItems()
begin
	record ConsItemVc CIr,oldCIr;
	vector integer aDupCode;
	vector string 100 vItems;
	array string 100 atag;
	longint i;
	record ItemHistVc IHr;
	integer pos;
	string 100 tstr;
	record INVc INr;
	boolean delflaf;
	record ItemStatusVc ISr;
	boolean TrHs;
	
	setcompany(25,false);
	
	
	INr.Code = "IN_";
	TrHs = true;
	while(loopmain(INr,1,TrHs))begin
		if(left(INr.Code,3)!="IN_")then begin TrHs = false; end;
		
		if(TrHs)then begin
			if(INr.Group=="COINC")then begin
				if(left(INr.Code,3)=="IN_")then begin
					if(INVcRecordRemoveTest(INr,INr,0,0)==1) then begin
						weboutstring("Delete this item " & INr.Code);
						recorddelete(INr);
						stepback(INr);
					end else begin	
						ISr.Code = INr.Code;
						ISr.Location = ";;;";
						if(readfirstmain(ISr,2,true))then begin
							if(ISr.Instock==0)then begin
								weboutstring("Delete this item " & INr.Code);
								recorddelete(INr);
								stepback(INr);
							end;
						end;
					end;
				end;
			end;
		end;
		
	end;
	
	
	
return;
end;



global webpublic updating procedure WebFillIVTaxTrVc()
begin
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	boolean TrHs, Orf;
	integer i, rwcnt, lcnt;
	record LocationVc Lcr, OrigLcr, OldLcr;
	record ECVendFobSetBlaock ECVFSb;
	row ECVendFobSetBlaock ECVFSrw;
	array string 255 aLoc;
	array integer aCompNr;
	record IVVc IVr;
  record IVTaxTrVc IVTaxTr;// Edit ************************** BPI Ukraine - KramarAlexandr - 06, 24 10 2020 y. at 6:39:37 PM
	
	SetCompany(29,false);
	blockload(Compb);
	
	for(i=0;i<matrowcnt(Compb);i=i+1)begin
		matrowget(Compb,i,Comprw);
		if(Comprw.ActiveStatus==0)then begin
			setcompany(i+1,false);
			resetloop(IVr);
			IVr.InvDate = stringtodate("1/6/2020");
			while(loopkey("InvDate",IVr,1,true))begin
				if(nonblank(IVr.TaxTransactionCode))then begin
					IVTaxTr.SerNr = IVr.SerNr;
					IVTaxTr.TaxTransactionCode = IVr.TaxTransactionCode;
					recordstore(IVTaxTr,true);
					logtext(0,"WebFillIVTaxTrVc " & currentcompany & " " & IVr.SerNr & " " & IVr.TaxTransactionCode);
				end;
			end;
		end;
	end;
	
	

	return;
end;


global webpublic updating procedure WebFixCoinINItensData()
begin
	record INVc INr,IN2r;
	boolean TrHs,testf,changed;
	
	setcompany(25,false);
	INr.Code = "IN_";
	TrHs = true;
	while(loopmain(INr,1,TrHs))begin
		testf = true;
		if(left(INr.Code,3)!="IN_")then begin TrHs = false; testf = true; end;
		if(INr.BPIBrand!="BRND0046")then begin testf = true; end;
		
		if(testf)then begin
			if(nonblank(INr.AlternativeCode))then begin
				IN2r.Code = INr.AlternativeCode;
				if(readfirstmain(IN2r,1,true))then begin
					
					changed = false;
					if(IN2r.Name!=INr.Name)then begin
						IN2r.Name = INr.Name;
						changed = true;
					end;
					
					if(IN2r.BPIGroup!=INr.BPIGroup)then begin
						IN2r.BPIGroup = INr.BPIGroup;
						changed = true;
					end;

					if(IN2r.BPISubGroup!=INr.BPISubGroup)then begin
						IN2r.BPISubGroup = INr.BPISubGroup;
						changed = true;
					end;

					if(IN2r.BPICategory!=INr.BPICategory)then begin
						IN2r.BPICategory = INr.BPICategory;
						changed = true;
					end;
					
					if(IN2r.BPIMaterial!=INr.BPIMaterial)then begin
						IN2r.BPIMaterial = INr.BPIMaterial;
						changed = true;
					end;
					
					if(IN2r.BPIColor!=INr.BPIColor)then begin
						IN2r.BPIColor = INr.BPIColor;
						changed = true;
					end;
					
					if(IN2r.BPIShape!=INr.BPIShape)then begin
						IN2r.BPIShape = INr.BPIShape;
						changed = true;
					end;
					
					if(IN2r.BPISize!=INr.BPISize)then begin
						IN2r.BPISize = INr.BPISize;
						changed = true;
					end;
					
					if(IN2r.BPIUse!=INr.BPIUse)then begin
						IN2r.BPIUse = INr.BPIUse;
						changed = true;
					end;
					
					if(IN2r.BPISex!=INr.BPISex)then begin
						IN2r.BPISex = INr.BPISex;
						changed = true;
					end;
					
					if(IN2r.BPIPlating!=INr.BPIPlating)then begin
						IN2r.BPIPlating = INr.BPIPlating;
						changed = true;
					end;
					
					if(IN2r.BPIClarity!=INr.BPIClarity)then begin
						IN2r.BPIClarity = INr.BPIClarity;
						changed = true;
					end;
					
					if(IN2r.BPIWeight!=INr.BPIWeight)then begin
						IN2r.BPIWeight = INr.BPIWeight;
						changed = true;
					end;
					
					if(IN2r.BPICut!=INr.BPICut)then begin
						IN2r.BPICut = INr.BPICut;
						changed = true;
					end;
					
					if(IN2r.BPIStone!=INr.BPIStone)then begin
						IN2r.BPIStone = INr.BPIStone;
						changed = true;
					end;
					
					if(IN2r.BPIStrap!=INr.BPIStrap)then begin
						IN2r.BPIStrap = INr.BPIStrap;
						changed = true;
					end;
					
					if(IN2r.BPIOdour!=INr.BPIOdour)then begin
						IN2r.BPIOdour = INr.BPIOdour;
						changed = true;
					end;
					
					if(IN2r.BPICollection!=INr.BPICollection)then begin
						IN2r.BPICollection = INr.BPICollection;
						changed = true;
					end;
					
					if(IN2r.Year!=INr.Year)then begin
						IN2r.Year = INr.Year;
						changed = true;
					end;
					
					if(IN2r.Life!=INr.Life)then begin
						IN2r.Life = INr.Life;
						changed = true;
					end;
					
					if(IN2r.High!=INr.High)then begin
						IN2r.High = INr.High;
						changed = true;
					end;
					
					if(IN2r.Life2!=INr.Life2)then begin
						IN2r.Life2 = INr.Life2;
						changed = true;
					end;
					
					if(IN2r.SN!=INr.SN)then begin
						IN2r.SN = INr.SN;
						changed = true;
					end;
					
					if(IN2r.MainDisp!=INr.MainDisp)then begin
						IN2r.MainDisp = INr.MainDisp;
						changed = true;
					end;
					
					if(IN2r.SNOne!=INr.SNOne)then begin
						IN2r.SNOne = INr.SNOne;
						changed = true;
					end;
					
					
					if(changed)then begin
						logtext(0,INr.Code & " " & INr.Name & " --> " & IN2r.Code & " " & IN2r.Name);
						recordstore(IN2r,true);
					end;
				end;
			end;
		end;
		
	end;
	

return;
end;


global webpublic updating procedure WebUpdateIntORVc()
begin
	record IntORVc IntORr,oldIntORr;
	row IntORVc IntORrw;
	integer i,rwcnt;
	val v;
	
	setcompany(18,true);
	while(loopmain(IntORr,1,true))begin
		recordcopy(oldIntORr,IntORr);
		v = blankval;
		rwcnt = matrowcnt(IntORr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(IntORr,i,IntORrw);
			
			matrowput(IntORr,i,IntORrw);
			IntORchrsum(IntORr,i);
		end;
		SumupIntOR(IntORr,v);
		IntORr.Total = v;
    if (RecordUpdate(oldIntORr,IntORr,false)==0) then begin // When added IntORVcRecordProtectFields, had to change this to false
    end;
	end;
	
return;
end;