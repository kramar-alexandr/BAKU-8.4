external procedure ExtractObj(string,var Integer,var string);
external function LongInt INVcRecordRemoveTest(var record INVc,record INVc,LongInt,LongInt);
external function Boolean IntORchrsum(record IntORVc,Integer);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:51:56 AM
external procedure SumupIntOR(var record IntORVc,var val);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 19 11 2020 y. at 9:52:00 AM
external function boolean CompanyIsJWLikeCompany(Integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:04 20.11.2020
external updating procedure RecalculatePricesfromConsComp(record INVc); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 10:24 02.12.2020
external function string 255 StrReplace(string,string,string);// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 14 12 2020 y. at 9:37:36 AM
external procedure GetObjs(string,string,var string);
external function string 255 StrReplace(string,string,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 60 RemoveObjectFromObjectList(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObjectsByType(string, string, var array string, var integer);
external function string 100 BPICodeToName(string);

SetLangMode(LangRussian,"RUS",0);


global webpublic updating procedure WebDelEndResActsMn()
begin
	record ActVc Actr, OldActr;
	integer i;
	boolean TrHs, testf;
	
	for (i=0;i<34;i=i+1) begin
		SetCompany(i,false);
		Actr.OKFlag = 0;
		TrHs = true;
		While(loopkey("OKFlag",Actr,1,TrHs)) begin
			testf = true;
			if(Actr.OKFlag>0)then begin TrHs = false; testf = false; end;	  
			if (left(Actr.Comment,28) != "Истекает срок резервирования") then begin testf = false; end;
			if(testf)then begin
				RecordCopy(OldActr,Actr);
				Actr.OKFlag = 1;
				RecordUpdate(OldActr,Actr,true);
				logtext (0,Actr.SerNr & "   " & CurrentCompany);
			end;
		end;
		Resetloop(Actr);
	end;
	
	return;
end;






global webpublic updating procedure WebUnSerItemIdeaMn()
begin
	record INVc INr;
	
	SetCompany(28,false);
	
	INr.Code = "";
	while (loopmain(INr,1,true)) begin
		if (INr.SerNrf!=0) then begin
			INr.SerNrf = 0;
			RecordStore(INr,true);
		end;
	end;
	
	
	return;
end;








global webpublic updating procedure WebSetVendorsIdeaBrMn()
begin
	record BPIBrandVc Brandr;
	record DIVc DIr;
	record CUVc CUr;
	
	SetCompany(28,false);
	
	Brandr.Code = "";
	while (loopmain(Brandr,1,true)) begin
		CUr.Name = "";
		if (nonblank(Brandr.IDEABrandRef) and blank(Brandr.Vendor)) then begin
			DIr.Code = Brandr.IDEABrandRef;
			if (ReadFIrstMain(DIr,1,true)) then begin
				CUr.Name = DIr.Name;
				if (ReadFirstKey("Name",CUr,1,true)) then begin
					if (CUr.VEType==1 and CUr.blockedFlag==0) then begin
						Brandr.Vendor = CUr.Code;
						RecordStore(Brandr,true);
					end else begin
						CUr.Name = "";
					end;
				end else begin
					CUr.Code = DIr.Code;
					CUr.VEType = 1;
					if(ReadFirstKey("VEActCode",CUr,2,true)) then begin
						if (CUr.blockedFlag==0) then begin
							Brandr.Vendor = CUr.Code;
							RecordStore(Brandr,true);
						end;
					end;
				end;
			end;
			WebOutString(Brandr.Name & "<=>" & CUr.Name);
			weboutstring("<BR>");
		end;
	end;
	return;
end;









// global webpublic updating procedure WebVendorsIdeaBrRn()
// begin
	// record BPIBrandVc Brandr;
	// record DIVc DIr;
	// record CUVc CUr;
	// string 255 CurVendCode, CurVendName, 
	
	// SetCompany(28,false);
	
	// Brandr.Code = "";
	// while (loopmain(Brandr,1,true)) begin
		// CUr.Name = "";
		// if (nonblank(Brandr.IDEABrandRef)) then begin
			// DIr.Code = Brandr.IDEABrandRef;
			// if (ReadFIrstMain(DIr,1,true)) then begin
				// CUr.Code = Brandr.Vendor;
				// CUr.VEType = 1;
				// CurVendCode = "";
				// CurVendName = "";
				// if(ReadFirstKey("VEActCode",CUr,2,true)) then begin
					// CurVendCode = CUr.Code;
					// CurVendName = CUr.Name;
				// end;
				// WebOutString(Brandr.Code & "<=>" & Brandr.Name & "<=>" & Brandr.IDEABrandRef & "<=>" & DIr.Name & "<=>" & CurVendCode & "<=>" & CurVendName & "<=>" & CUr.);
				// weboutstring("<BR>");
				// CUr
			// end;
			// WebOutString(Brandr.Name & "<=>" & CUr.Name);
			// weboutstring("<BR>");
		// end;
	// end;
	// return;
// end;








global webpublic updating procedure WebGlobalCatCodesRn()
begin
	record BTRxBrandVc Brandr;
	record GlobalItemVc GIr;
	string 255 Brandstr;
	
	GIr.Code = "";
	while (loopmain(GIr,1,true)) begin 
		Brandr.Code = GIr.BPIBrand;
		Brandstr = "";
		if (ReadFIrstMain(Brandr,1,true) and nonblank(GIr.BPIBrand)) then begin
			Brandstr = Brandr.Name;
		end else begin
			Brandstr = "";
		end;
		WebOutString(GIr.Code & "<=>" & Brandstr & "<=>" & GIr.BTRxFirstLevCat & "<=>" & GIr.BTRxSecondLevCat & "<=>" & GIr.BTRxThirdLevCat & "<=>" & GIr.BTRxFourthLevCat);
		WebOutString("<BR>");
	end;
	
	return;
end;














global webpublic updating procedure WebFixConsItemsDupl()
begin
	record ConsItemVc CIr,oldCIr;
	vector integer aDupCode;
	vector string 100 vItems;
	array string 100 atag;
	longint i;
	record ItemHistVc IHr;
	integer pos;
	string 100 tstr;
	record INVc INr;
	boolean delflaf;
	
	setcompany(18,false);
	
	CIr.LocCode = "";
	while(loopkey("LocCodeBrand",CIr,1,true))begin
		INr.Code = CIr.Code;
		if(readfirstmain(INr,1,true))then begin
			if(CIr.LocCode==oldCIr.LocCode and CIr.BrandCode==oldCIr.BrandCode)then begin
				aDupCode[CIr.LocCode & "_" & CIr.BrandCode] = aDupCode[CIr.LocCode & "_" & CIr.BrandCode] + 1;
				if(!setinset(oldCIr.Code,vItems[CIr.LocCode & "_" & CIr.BrandCode]))then begin
					vItems[CIr.LocCode & "_" & CIr.BrandCode] = vItems[CIr.LocCode & "_" & CIr.BrandCode] & CIr.Code & "," & oldCIr.Code;
				end else begin
					vItems[CIr.LocCode & "_" & CIr.BrandCode] = vItems[CIr.LocCode & "_" & CIr.BrandCode] & "," & CIr.Code;
				end;
			end;
			recordcopy(oldCIr,CIr);
		end else begin
			logtext(0,"ItemNotExists " & CIr.Code);
			recorddelete(CIr);
			stepback(CIr);
		end;
	end;
	
	resetloop(CIr);
	CIr.Code = "";
	getvectortags(aDupCode,atag);
	for(i=0;i<atag.length;i=i+1)begin
		if(aDupCode[atag[i]]>0)then begin
			pos = 0;
			ExtractObj(vItems[atag[i]],pos,tstr);
			logtext(0,"______________________________");
			while(nonblank(tstr))begin
				INr.Code = tstr;
				readfirstmain(INr,1,true);
				IHr.ArtCode = INr.Code;
				delflaf = false;
				if(!readfirstkey("ArtCode",IHr,1,true))then begin
					if(INVcRecordRemoveTest(INr,INr,0,0)==1) then begin
						delflaf = true;
					end;	
				end;
				if(delflaf==false)then begin
					logtext(0,INr.Code & " " & INr.Name & " " & INr.BPIBrand & " " & INr.AlternativeCode);
				end else begin
					logtext(0,INr.Code & " " & INr.Name & " " & INr.BPIBrand & " " & INr.AlternativeCode & "-------------- t delete!");
					recorddelete(INr);
					CIr.Code = INr.Code;
					if(readfirstmain(CIr,1,true))then begin
						recorddelete(CIr);
					end;
				end;
				ExtractObj(vItems[atag[i]],pos,tstr);
			end;
		end;
	end;
	
	
return;
end;




global updating procedure DeleteDuplicatesInMat(string Code)
begin
	record BTRxMaterialVc BTRxMatr;
	
	BTRxMatr.Code = Code;
	if (ReadFirstMain(BTRxMatr,1,true)) then begin
		logtext(0,BTRxMatr.Code);
		RecordDelete(BTRxMatr);
	end;
	
return;
end;



global updating procedure DeleteDuplicatesInCol(string Code)
begin
	record BtrxColourVc BTRxColorr;
	
	BTRxColorr.Code = Code;
	if (ReadFirstMain(BTRxColorr,1,true)) then begin
		logtext(0,BTRxColorr.Code);
		RecordDelete(BTRxColorr);
	end;
	
return;
end;

global updating procedure DeleteDuplicatesInStn(string Code)
begin
	record BTRxStoneVc BTRxStoner;
	
	BTRxStoner.Code = Code;
	if (ReadFirstMain(BTRxStoner,1,true)) then begin
		logtext(0,BTRxStoner.Code);
		RecordDelete(BTRxStoner);
	end;
	
return;
end;



global updating procedure DeleteDuplicatesInOdr(string Code)
begin
	record BTRxOdourVc BTRxOdourr;
	
	BTRxOdourr.Code = Code;
	if (ReadFirstMain(BTRxOdourr,1,true)) then begin
		logtext(0,BTRxOdourr.Code);
		RecordDelete(BTRxOdourr);
	end;
	
return;
end;



global updating procedure SaveINWithoutDupClassCodes(Record INVc INr)
begin
	
	RecordStore(INr,true);
	logtext(0,INr.Code);
	
return;
end;



global updating procedure SaveGIWithoutDupClassCodes(Record GlobalItemVc GIr)
begin
	
	RecordStore(GIr,true);
	logtext(0,GIr.Code);
	
return;
end;




global webpublic procedure WebDeleteDuplicatesInClass()
begin
	record INVc INr, ConsINr;
	boolean TrHs, testf, testf2;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	longint i, CompNr;
	string 255 comp;
	vector boolean ExistClasInItems;
	record GlobalItemVc GIr;
	record BtrxColourVc BTRxColorr;
	record BTRxStoneVc BTRxStoner;
	record BTRxMaterialVc BTRxMatr;
	record BTRxOdourVc BTRxOdourr;
	vector boolean noFirstClass;
	vector string 255 NameCode, DupCodeCode;
	
	setcompany(1,false);
	
	clearVector(NameCode);
	BTRxMatr.Code = "";
	while (loopKey("Code",BTRxMatr,1,true)) begin
		if (blank(NameCode[BTRxMatr.Name])) then begin
			NameCode[BTRxMatr.Name] = BTRxMatr.Code;
		end else begin
			DupCodeCode[BTRxMatr.Code] = NameCode[BTRxMatr.Name];
		end;
	end;
	Resetloop(BTRxMatr);
	clearVector(NameCode);
	BTRxColorr.Code = "";
	while (loopKey("Code",BTRxColorr,1,true)) begin
		if (blank(NameCode[BTRxColorr.Name])) then begin
			NameCode[BTRxColorr.Name] = BTRxColorr.Code;
		end else begin
			DupCodeCode[BTRxColorr.Code] = NameCode[BTRxColorr.Name];
			logtext(0,BTRxColorr.Name);
		end;
	end;
	Resetloop(BTRxColorr);
	clearVector(NameCode);
	BTRxOdourr.Code = "";
	while (loopKey("Code",BTRxOdourr,1,true)) begin
		if (blank(NameCode[BTRxOdourr.Name])) then begin
			NameCode[BTRxOdourr.Name] = BTRxOdourr.Code;
		end else begin
			DupCodeCode[BTRxOdourr.Code] = NameCode[BTRxOdourr.Name];
		end;
	end;
	Resetloop(BTRxOdourr);
	
	clearVector(NameCode);
	BTRxStoner.Code = "";
	while (loopKey("Code",BTRxStoner,1,true)) begin
		if (blank(NameCode[BTRxStoner.Name])) then begin
			NameCode[BTRxStoner.Name] = BTRxStoner.Code;
		end else begin
			DupCodeCode[BTRxStoner.Code] = NameCode[BTRxStoner.Name];
		end;
	end;
	Resetloop(BTRxStoner);
	
	
	blockload(Compb);
	
	
	
	
	for(i=0;i<matrowcnt(Compb);i=i+1)begin
		testf = true;
		if (CompNr>0 and i+1!=CompNr) then begin testf = false; end;
		if (testf) then begin
			matrowget(Compb,i,Comprw);
			if(Comprw.ActiveStatus==0 and i+1!=28 and i+1!=29 and (!CompanyIsJWLikeCompany(i+1) or i+1==3)) then begin
				setcompany(i+1,false);
				logtext(0,i+1 & " Company");
				INr.Code = "";
				TrHs = true;
				while(loopmain(INr,1,TrHs))begin
					testf2 = false;
					if (nonblank(DupCodeCode[INr.BtrxMaterial])) then begin
						testf2 = true;
						INr.BtrxMaterial = DupCodeCode[INr.BtrxMaterial];
					end;
					if (nonblank(DupCodeCode[INr.BtrxColor])) then begin
						testf2 = true;
						INr.BtrxColor = DupCodeCode[INr.BtrxColor];
					end;
					if (nonblank(DupCodeCode[INr.BtrxOdour])) then begin
						testf2 = true;
						INr.BtrxOdour = DupCodeCode[INr.BtrxOdour];
					end;
					if (nonblank(DupCodeCode[INr.BTRxStone])) then begin
						testf2 = true;
						INr.BTRxStone = DupCodeCode[INr.BTRxStone];
					end;
					if (nonblank(DupCodeCode[INr.BTRxStrapColour])) then begin
						testf2 = true;
						INr.BTRxStrapColour = DupCodeCode[INr.BTRxStrapColour];
					end;
					if (nonblank(DupCodeCode[INr.BTRxProdColour])) then begin
						testf2 = true;
						INr.BTRxProdColour = DupCodeCode[INr.BTRxProdColour];
					end;
					if (nonblank(DupCodeCode[INr.BtrxClockFaceColour])) then begin
						testf2 = true;
						INr.BtrxClockFaceColour = DupCodeCode[INr.BtrxClockFaceColour];
					end;
					if (nonblank(DupCodeCode[INr.BTRxChainMaterial])) then begin
						testf2 = true;
						INr.BTRxChainMaterial = DupCodeCode[INr.BTRxChainMaterial];
					end;
					if (nonblank(DupCodeCode[INr.BTRxStrapMat])) then begin
						testf2 = true;
						INr.BTRxStrapMat = DupCodeCode[INr.BTRxStrapMat];
					end;
					if (nonblank(DupCodeCode[INr.BtrxClockFaceMaterial])) then begin
						testf2 = true;
						INr.BtrxClockFaceMaterial = DupCodeCode[INr.BtrxClockFaceMaterial];
					end;
					if (testf2) then begin
						queued.SaveINWithoutDupClassCodes(INr);
						MilliSleep(50);
					end;
					testf2 = false;
					GIr.Code = INr.GlobalArtCode;
					if (readfirstmain(GIr,1,true)) then begin
						if (nonblank(DupCodeCode[GIr.BPIMaterial])) then begin
							testf2 = true;
							GIr.BPIMaterial = DupCodeCode[GIr.BPIMaterial];
						end;
						if (nonblank(DupCodeCode[GIr.BPIColor])) then begin
							testf2 = true;
							GIr.BPIColor = DupCodeCode[GIr.BPIColor];
						end;
						if (nonblank(DupCodeCode[GIr.BPIOdour])) then begin
							testf2 = true;
							GIr.BPIOdour = DupCodeCode[GIr.BPIOdour];
						end;
						if (nonblank(DupCodeCode[GIr.BTRxStoneA])) then begin
							testf2 = true;
							GIr.BTRxStoneA = DupCodeCode[GIr.BTRxStoneA];
						end;
						if (nonblank(DupCodeCode[GIr.BtrxClockFaceColour])) then begin
							testf2 = true;
							GIr.BtrxClockFaceColour = DupCodeCode[GIr.BtrxClockFaceColour];
						end;
						if (nonblank(DupCodeCode[GIr.BTRxProdColour])) then begin
							testf2 = true;
							GIr.BTRxProdColour = DupCodeCode[GIr.BTRxProdColour];
						end;
						if (nonblank(DupCodeCode[GIr.BTRxStrapColour])) then begin
							testf2 = true;
							GIr.BTRxStrapColour = DupCodeCode[GIr.BTRxStrapColour];
						end;
						if (nonblank(DupCodeCode[GIr.BTRxStrapMat])) then begin
							testf2 = true;
							GIr.BTRxStrapMat = DupCodeCode[GIr.BTRxStrapMat];
						end;
						if (nonblank(DupCodeCode[GIr.BTRxChainMaterial])) then begin
							testf2 = true;
							GIr.BTRxChainMaterial = DupCodeCode[GIr.BTRxChainMaterial];
						end;
						if (nonblank(DupCodeCode[GIr.BTRxBracelMat])) then begin
							testf2 = true;
							GIr.BTRxBracelMat = DupCodeCode[GIr.BTRxBracelMat];
						end;
						if (nonblank(DupCodeCode[GIr.BtrxClockFaceMaterial])) then begin
							testf2 = true;
							GIr.BtrxClockFaceMaterial = DupCodeCode[GIr.BtrxClockFaceMaterial];
						end;
					end;
					if (testf2) then begin
						queued.SaveGIWithoutDupClassCodes(GIr);
						MilliSleep(50);
					end;
				end;
				Resetloop(INr);
			end;
		end;
	end;
	
	Resetcompany(1);
	
	
	blockload(Compb);
	logtext(0,"WebDeleteDuplicatesInClass start");
	for(i=0;i<matrowcnt(Compb);i=i+1)begin
		testf = true;
		if (CompNr>0 and i+1!=CompNr) then begin testf = false; end;
		if (testf) then begin
			matrowget(Compb,i,Comprw);
			if(Comprw.ActiveStatus==0 and i+1!=28 and i+1!=29 and (!CompanyIsJWLikeCompany(i+1) or i+1==3)) then begin
				setcompany(i+1,false);
				logtext(0,i+1 & " Company");
				INr.Code = "";
				TrHs = true;
				while(loopmain(INr,1,TrHs))begin
					if (nonblank(INr.BtrxMaterial)) then begin
						ExistClasInItems[INr.BtrxMaterial] = true;
					end;
					if (nonblank(INr.BtrxColor)) then begin
						ExistClasInItems[INr.BtrxColor] = true;
					end;
					if (nonblank(INr.BtrxOdour)) then begin
						ExistClasInItems[INr.BtrxOdour] = true;
					end;
					if (nonblank(INr.BTRxStone)) then begin
						ExistClasInItems[INr.BTRxStone] = true;
					end;
					if (nonblank(INr.BTRxStrapColour)) then begin
						ExistClasInItems[INr.BTRxStrapColour] = true;
					end;
					if (nonblank(INr.BTRxProdColour)) then begin
						ExistClasInItems[INr.BTRxProdColour] = true;
					end;
					if (nonblank(INr.BtrxClockFaceColour)) then begin
						ExistClasInItems[INr.BtrxClockFaceColour] = true;
					end;
					if (nonblank(INr.BTRxChainMaterial)) then begin
						ExistClasInItems[INr.BTRxChainMaterial] = true;
					end;
					if (nonblank(INr.BTRxStrapMat)) then begin
						ExistClasInItems[INr.BTRxStrapMat] = true;
					end;
					if (nonblank(INr.BtrxClockFaceMaterial)) then begin
						ExistClasInItems[INr.BtrxClockFaceMaterial] = true;
					end;
					GIr.Code = INr.GlobalArtCode;
					if (readfirstmain(GIr,1,true)) then begin
						if (nonblank(GIr.BPIMaterial)) then begin
							ExistClasInItems[GIr.BPIMaterial] = true;
						end;
						if (nonblank(GIr.BPIColor)) then begin
							ExistClasInItems[GIr.BPIColor] = true;
						end;
						if (nonblank(GIr.BPIOdour)) then begin
							ExistClasInItems[GIr.BPIOdour] = true;
						end;
						if (nonblank(GIr.BTRxStoneA)) then begin
							ExistClasInItems[GIr.BTRxStoneA] = true;
						end;
						if (nonblank(GIr.BtrxClockFaceColour)) then begin
							ExistClasInItems[GIr.BtrxClockFaceColour] = true;
						end;
						if (nonblank(GIr.BTRxProdColour)) then begin
							ExistClasInItems[GIr.BTRxProdColour] = true;
						end;
						if (nonblank(GIr.BTRxStrapColour)) then begin
							ExistClasInItems[GIr.BTRxStrapColour] = true;
						end;
						if (nonblank(GIr.BTRxStrapMat)) then begin
							ExistClasInItems[GIr.BTRxStrapMat] = true;
						end;
						if (nonblank(GIr.BTRxChainMaterial)) then begin
							ExistClasInItems[GIr.BTRxChainMaterial] = true;
						end;
						if (nonblank(GIr.BTRxBracelMat)) then begin
							ExistClasInItems[GIr.BTRxBracelMat] = true;
						end;
						if (nonblank(GIr.BtrxClockFaceMaterial)) then begin
							ExistClasInItems[GIr.BtrxClockFaceMaterial] = true;
						end;
					end;
				end;
				Resetloop(INr);
			end;
		end;
	end;
	SetCompany(1,false);
	BTRxMatr.Code = "";
	while (loopKey("Code",BTRxMatr,1,true)) begin
		// if (noFirstClass[BTRxMatr.Name]) then begin
			if (!ExistClasInItems[BTRxMatr.Code]) then begin
				logtext(0,BTRxMatr.Code);
				queued.DeleteDuplicatesInMat(BTRxMatr.Code);  
				MilliSleep(50);
				// stepback(BTRxMatr);
			end;
		// end else begin
			// noFirstClass[BTRxMatr.Name] = true;
		// end;
	end;
	Resetloop(BTRxMatr);
	
	BTRxColorr.Code = "";
	while (loopKey("Code",BTRxColorr,1,true)) begin
		// if (noFirstClass[BTRxColorr.Name]) then begin
			if (!ExistClasInItems[BTRxColorr.Code]) then begin
				queued.DeleteDuplicatesInCol(BTRxColorr.Code);  
				MilliSleep(50);
				// stepback(BTRxColorr);
			end;
		// end else begin
			// noFirstClass[BTRxColorr.Name] = true;
		// end;
	end;
	Resetloop(BTRxColorr);
	
	BTRxOdourr.Code = "";
	while (loopKey("Code",BTRxOdourr,1,true)) begin
		// if (noFirstClass[BTRxOdourr.Name]) then begin
			if (!ExistClasInItems[BTRxOdourr.Code]) then begin 
				queued.DeleteDuplicatesInOdr(BTRxOdourr.Code);  
				MilliSleep(50);
				// stepback(BTRxOdourr);
			end;
		// end else begin
			// noFirstClass[BTRxOdourr.Name] = true;
		// end;
	end;
	Resetloop(BTRxOdourr);
	
	
	BTRxStoner.Code = "";
	while (loopKey("Code",BTRxStoner,1,true)) begin
		// if (noFirstClass[BTRxStoner.Name]) then begin
			if (!ExistClasInItems[BTRxStoner.Code]) then begin 
				queued.DeleteDuplicatesInStn(BTRxStoner.Code);  
				MilliSleep(50);
				// stepback(BTRxStoner);
			end;
		// end else begin
			// noFirstClass[BTRxStoner.Name] = true;
		// end;
	end;
	Resetloop(BTRxStoner);
	logtext(0,"WebDeleteDuplicatesInClass end");
	
return;
end;





global webpublic updating procedure WebGetCCCollectAndCCModel()
begin

	record INVc INr, ConsINr;
	boolean TrHs;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	longint i, CompNr;
	string 255 comp;
	boolean testf, ColDIf, ModDIf, ConsItemf;
	record OldDIVc OldDIr;
	record ConsItemVc CIr;

	logtext (0,"start WebGetCCCollectAndCCModel");

	setcompany(1,false);

	blockload(Compb);
	comp = WebGetArg("company");
	if (nonblank(comp)) then begin
		CompNr = StringToInt(comp);
	end else begin
		CompNr = 0;
	end;
	
	for(i=0;i<matrowcnt(Compb);i=i+1)begin
		testf = true;
		if (CompNr>0 and i+1!=CompNr) then begin testf = false; end;
		if (testf) then begin
			matrowget(Compb,i,Comprw);
			if(Comprw.ActiveStatus==0 and i+1!=28 and i+1!=29 and (!CompanyIsJWLikeCompany(i+1) or i+1==3)) then begin
				setcompany(i+1,false);
				logtext(0,i+1 & " Company");
				INr.Code = "";
				TrHs = true;
				while(loopmain(INr,1,TrHs))begin
					// logtext(0,INr.Code & " INr.Code");
					ColDIf = false;
					ModDIf = false;
					ConsItemf = false;
					if (nonblank(INr.MainDisp) or nonblank(INr.SNOne)) then begin
						if (nonblank(INr.MainDisp)) then begin 
							OldDIr.Code = INr.MainDisp;
							if (ReadFirstMain(OldDIr,1,true)) then begin
								INr.CCCollectName = OldDIr.Name;
								ColDIf = true;
							end else begin
								INr.CCCollectName = INr.MainDisp;
							end;
						end;
						if (nonblank(INr.SNOne)) then begin
							OldDIr.Code = INr.SNOne;
							if (ReadFirstMain(OldDIr,1,true)) then begin
								INr.CCModelName = OldDIr.Name;
								ModDIf = true;
							end else begin
								INr.CCModelName = INr.SNOne;
							end;
						end;
						if (nonblank(INr.MainDisp) or nonblank(INr.SNOne)) then begin
							RecordStore(INr,true);
						end;
						setcompany(18,false);
						CIr.LocCode = INr.Code;
						CIr.BrandCode = INr.BPIBrand;
						if (ReadFirstKey("LocCodeBrand",CIr,1,true)) then begin
							ConsItemf = true;
							ConsINr.Code = CIr.Code;
							if (ReadFirstMain(ConsINr,1,true)) then begin
								ConsINr.CCCollectName = INr.CCCollectName;
								ConsINr.CCModelName = INr.CCModelName;
								RecordStore(ConsINr,true);
							end;
						end;
						Resetcompany(i+1);
						WebOutString("CCCollection<=>" & INr.MainDisp & "<=>" & ColDIf & "<=>CCModel<=>" & INr.SNOne & "<=>" & ModDIf & "<=>Company<=>" & CurrentCompany & "<=>" & ConsItemf);
						weboutstring("<BR>");
					end;
				end;
				Resetloop(INr);
			end;
		end;
	end;
	logtext (0,"finish WebGetCCCollectAndCCModel");
return;
end;



global webpublic updating procedure WebFillPricesINItems()
begin
	record ItemDuplicatesVc IDr;
	record INVc INr, IN2r, oldINr;
	vector date LastPriceDate;
	date blnkDate;

	setcompany(18,false);
	
	IDr.OrigCode = "";
	IDr.DupCode = "";
	while (loopmain(IDr,2,true)) begin
		// logtext(0,IDr.OrigCode & " <> " & IDr.DupCode);
		INr.Code = IDr.OrigCode;
		if (ReadFirstMain(INr,1,true)) then begin
			if (INr.LastPurchPrice==blankval) then begin
				IN2r.Code = IDr.DupCode;
				if (ReadFirstMain(IN2r,1,true)) then begin
					if (IN2r.LastPurchPrice!=blankval) then begin
						if (blankDate(LastPriceDate[INr.Code]) or IN2r.LastPriceChange>LastPriceDate[INr.Code]) then begin
							recordCopy(OldINr,INr);
							LastPriceDate[INr.Code] = IN2r.LastPriceChange;
							INr.LastPurchPrice = IN2r.LastPurchPrice;
							INr.LastPurchPrice2 = IN2r.LastPurchPrice2;
							INr.LastPurchCurncyCode = IN2r.LastPurchCurncyCode;
							INr.WeighedAvPriceB2 = IN2r.WeighedAvPriceB2;
							INr.ExtraCost = IN2r.ExtraCost;
							INr.InPrice = IN2r.InPrice;
							INr.LastPriceChange = blnkDate;
							INr.InPriceB2 = IN2r.InPriceB2;
							INr.WeighedAvPrice = INr.WeighedAvPrice;
							if(recordUpdate(OldINr,INr,true)==0) then begin
								logtext (0,INr.Code & " Updated");
								RecalculatePricesfromConsComp(INr);
							end;
						end;
					end;
				end;
			end else begin
				logtext (0,INr.Code & " All Right");
			end;
		end;
	end;
	
	
return;
end;


global webpublic procedure WebGetExtGirItems()
begin
	record GlobalItemVc GIr;
	record ExpProvItemRegVc EPIRr;
	record CUVc CUr;
	boolean TrHs;
	
	setcompany(29,false);
	GIr.Code = "";
	while (loopmain(GIr,1,true)) begin
		if (GIr.ExtProwItRegulations>0) then begin 
			EPIRr.SerNr = GIr.ExtProwItRegulations;
			if (ReadFIrstMain(EPIRr,1,true)) then begin
				CUr.Code = EPIRr.Comment;
				ReadFirstMain(CUr,1,true);
				WebOutString(GIr.Code & "<-->" & GIr.BPIBrand & "<-->" & CUr.Name & "<-->" & GIr.Price & "<-->" & GIr.DealPrice);
				weboutstring("<BR>");
			end;
		end;
	end;

return
end;


global webpublic procedure WebFillINClassifFromGirItems()
begin
	record GlobalItemVc GIr;
	record INVc INr, IN2r, oldINr;
	vector date LastPriceDate;
	record CompaniesBlock CBb;
	row CompaniesBlock CBrw;
	longint j, mtrw;
	boolean updateINr, TrHs;
	
	setcompany(1,false);
	blockload(CBb);
	
	GIr.Code = "";
	TrHs = true;
	while (loopmain(GIr,1,TrHs)) begin
		if (!FileExists("stop")) then begin
			mtrw = matrowcnt(CBb);
			For(j=0;j<mtrw;j=j+1) begin
				matrowget(CBb,j,CBrw);
				if(CBrw.ActiveStatus==0 and j+1!=9 and j+1!=28 and (j+1==3 or !CompanyIsJWLikeCompany(j+1)) and j+1!=29)then begin
					SetCompany(j+1,false);
					INr.Code = GIr.HansaCode;
					if (ReadFirstMain(INr,1,true)) then begin
						updateINr = false;
						if(INr.BtrxProductName!=GIr.BtrxProductName) then begin updateINr = true; INr.BtrxProductName = GIr.BtrxProductName;  end;
						if(INr.BtrxCountInSet!=GIr.StrBTRxSetQty) then begin updateINr = true; INr.BtrxCountInSet = GIr.StrBTRxSetQty ; end;
						if(INr.BTRxStrapColour!=GIr.BTRxStrapColour) then begin updateINr = true; INr.BTRxStrapColour = GIr.BTRxStrapColour; end;
						if(INr.BTRxStrapMat!=GIr.BTRxStrapMat) then begin updateINr = true; INr.BTRxStrapMat = GIr.BTRxStrapMat; end;
						if(INr.BtrxClockFaceColour!=GIr.BtrxClockFaceColour) then begin updateINr = true; INr.BtrxClockFaceColour = GIr.BtrxClockFaceColour; end;
						if(INr.BtrxClockFaceMaterial!=GIr.BtrxClockFaceMaterial) then begin updateINr = true;INr.BtrxClockFaceMaterial  = GIr.BtrxClockFaceMaterial; end;
						if(INr.BtrxCentralGim!=GIr.BtrxCentralGim) then begin updateINr = true; INr.BtrxCentralGim = GIr.BtrxCentralGim; end;
						if(INr.BTRxLimitedGood!=GIr.BTRxLimitedGood) then begin updateINr = true; INr.BTRxLimitedGood = GIr.BTRxLimitedGood; end; // str to int
						if(INr.BtrxWarranty!=GIr.BtrxWarranty) then begin updateINr = true; INr.BtrxWarranty = GIr.BtrxWarranty; end;
						if(INr.BtrxScratchRes!=GIr.BtrxScratchRes) then begin updateINr = true; INr.BtrxScratchRes = GIr.BtrxScratchRes; end;
						if(INr.Depth!=StringToVal(GIr.StrDepth,M4Val)) then begin updateINr = true; INr.Depth = StringToVal(GIr.StrDepth,M4Val); end;
						if(INr.Width!=StringToVal(GIr.StrWidth,M4Val)) then begin updateINr = true; INr.Width = StringToVal(GIr.StrWidth,M4Val); end;
						if(INr.Height!=StringToVal(GIr.StrHeight,M4Val)) then begin updateINr = true; INr.Height = StringToVal(GIr.StrHeight,M4Val); end;
						if(INr.BTRxDiam!=StringToVal(GIr.StrBTRxDiam,M4Val)) then begin updateINr = true; INr.BTRxDiam = StringToVal(GIr.StrBTRxDiam,M4Val); end;
						if(INr.Volume!=StringToVal(GIr.StrVolume,M4Val)) then begin updateINr = true; INr.Volume = StringToVal(GIr.StrVolume,M4Val); end;
						if(INr.Weight!=StringToVal(GIr.StrWeight,M4Val)) then begin updateINr = true; INr.Weight = StringToVal(GIr.StrWeight,M4Val); end;
						if(INr.BtrxItemSize!=GIr.BtrxItemSize) then begin updateINr = true; INr.BtrxItemSize = GIr.BtrxItemSize; end;
						if(INr.BtrxUnitOfMeas!=GIr.BtrxUnitOfMeas) then begin updateINr = true; INr.BtrxUnitOfMeas = GIr.BtrxUnitOfMeas; end;
						if(INr.BtrxAllMaterials!=GIr.BtrxAllMaterials) then begin updateINr = true; INr.BtrxAllMaterials = GIr.BtrxAllMaterials; end;
						if(INr.BtrxComplications!=GIr.BtrxComplications) then begin updateINr = true; INr.BtrxComplications = GIr.BtrxComplications; end;
						if(INr.BtrxCaseDiam!=GIr.BtrxCaseDiam) then begin updateINr = true; INr.BtrxCaseDiam = GIr.BtrxCaseDiam; end;
						if(INr.BTRxWatchMechanism!=GIr.BTRxWatchMechanism) then begin updateINr = true; INr.BTRxWatchMechanism = GIr.BTRxWatchMechanism; end;
						if(INr.BTRxPowerReserve!=GIr.BTRxPowerReserve) then begin updateINr = true; INr.BTRxPowerReserve = GIr.BTRxPowerReserve; end;
						if(INr.BTRxWatterResf!=GIr.BTRxWatterResf) then begin updateINr = true; INr.BTRxWatterResf = GIr.BTRxWatterResf; end;
						if(INr.BTRxFilling!=GIr.BTRxFilling) then begin updateINr = true; INr.BTRxFilling = GIr.BTRxFilling; end;
						if(INr.BtrxMicrowaveProtect!=GIr.BtrxMicrowaveProtect) then begin updateINr = true; INr.BtrxMicrowaveProtect = GIr.BtrxMicrowaveProtect; end;
						if(INr.BtrxMatchesKitchenStove!=GIr.BtrxMatchesKitchenStove) then begin updateINr = true; INr.BtrxMatchesKitchenStove = GIr.BtrxMatchesKitchenStove; end;
						if(INr.BtrxSex!=GIr.BPISex) then begin updateINr = true; INr.BtrxSex = GIr.BPISex; end;
						if(INr.BPIPlating!=GIr.BPIPlating) then begin updateINr = true; INr.BPIPlating = GIr.BPIPlating; end;
						if(INr.BtrxAddProdDescription!=GIr.BtrxAddProdDescription) then begin updateINr = true; INr.BtrxAddProdDescription = GIr.BtrxAddProdDescription; end;
						if(INr.BtrxCare!=GIr.BtrxCare) then begin updateINr = true; INr.BtrxCare = GIr.BtrxCare; end;
						if(INr.BtrxProductFeaches!=GIr.BtrxProductFeaches) then begin updateINr = true; INr.BtrxProductFeaches = GIr.BtrxProductFeaches; end;
						if(INr.BtrxOdour!=GIr.BPIOdour) then begin updateINr = true; INr.BtrxOdour = GIr.BPIOdour; end;
						if(INr.BtrxMaterial!=GIr.BPIMaterial) then begin updateINr = true; INr.BtrxMaterial = GIr.BPIMaterial; end;
						if(INr.BtrxColor!=GIr.BPIColor) then begin updateINr = true; INr.BtrxColor = GIr.BPIColor; end;
						if(INr.BTRxStone!=GIr.BPIStone) then begin updateINr = true; INr.BTRxStone = GIr.BPIStone; end;
						if(INr.BTRxCentralCarat!=GIr.BTRxCentralCarat) then begin updateINr = true; INr.BTRxCentralCarat = GIr.BTRxCentralCarat; end;
						if(INr.High!=GIr.High) then begin updateINr = true; INr.High = GIr.High; end; 
						if (updateINr) then begin
							queued.SaveINWithoutDupClassCodes(INr);
							MilliSleep(150);
						end else begin
							logtext(0,INr.Code & " All Right!");
						end;
					end;
				end;
			end;
		end else begin
			TrHs = false;
		end;
		resetCompany(1);
	end;
	
	
return;
end;





global webpublic procedure WebReportPricArebRn()
begin
	record RebVc Rebr;
	boolean TrHs, TrHs2, testf, changed;
	val percentInCode;
	integer compnr; 
	record IVVc IVr;
	row IVVc IVrw;
	integer i, oscnt,k,j;
	string 255 promo, apric, areb, aprom, DelStr, AddStr, OldObj, NewObj, tstr, FileName;
	array string 10 aapric,aareb,aaprom;
	record INVc INr;
	area BodyAr;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	
	compnr = stringtoint(webgetarg("compnr"));
	for (k=0;k<34;k=k+1) begin
		SetCompany(k+1,false);
		blockload(Compb);
		matrowget(Compb,k,Comprw);
		FileName = "IV_AREB_APRIC_" & DateToString(CurrentDate,"DD.MM.YYYY") & "_" & Comprw.ShortName;
		runprogram("chmod","-R a+rw BPIReports");
		TrHs2 = true;
		AddTextToArea	("Inv Nr" & chr(09) & "ArtCode" & chr(09) & "Item name" & chr(09) & "Rebate" & chr(09)  & "Date" & chr(09) & "Objects (AREB/APRIC)" & chr(09)
										& "BPIBrand" & chr(09) 				
										& "BPICollection" & chr(09) 				
										& "BPIGroup" & chr(09) 	
										& "BPISubGroup" & chr(09) 	
										& "BPICategory" & chr(09) 			
										// & "BPIMaterial" & chr(09) 		
										// & "BPIColor" & chr(09) 	
										// & "BPIShape" & chr(09) 		
										// & "BPISize" & chr(09) 				
										// & "BPIUse" & chr(09) 				
										// & "BPISex" & chr(09) 						
										// & "BPIPlating" & chr(09) 	
										// & "BPIClarity" & chr(09) 	
										// & "BPIWeight" & chr(09) 		
										// & "BPICut" & chr(09) 				
										// & "BPIStone" & chr(09) 				
										// & "BPIStrap" & chr(09) 						
										// & "BPIOdour" & chr(09) 			
										& "High" & chr(09) 	
										& "Life2" & chr(13),BodyAr);
		IVr.TransDate = StringToDate("01/01/2019");
		while (loopKey("TransDate",IVr,1,TrHs2)) begin
			testf = true;
			if (IVr.OKFlag!=1) then begin testf = false; end;
			if (testf) then begin
				for (i=0;i<matrowcnt(IVr);i=i+1) begin
					matrowget(IVr,i,IVrw);
					if (IVrw.stp==kInvoiceRowTypeNormal) then begin
						oscnt = 0;
						clearArray(aapric);
						ExtractObjectsByType(IVrw.Objects,"APRIC",aapric,oscnt);
						oscnt = 0;
						clearArray(aareb);
						ExtractObjectsByType(IVrw.Objects,"AREB",aareb,oscnt);
						if (aapric.length>0 or aareb.length>0) then begin
							logtext(0,IVr.SerNr & " " & IVrw.ArtCode);
							AddTextToArea	(IVr.SerNr & chr(09) & "_" & IVrw.ArtCode & chr(09) & IVrw.Spec & chr(09) & IVrw.vRebate & chr(09) & IVr.TransDate & chr(09),BodyAr);
							for (j=0;j<aapric.length;j=j+1) begin
								if (j>0) then begin AddTextToArea	(",",BodyAr); end;
								AddTextToArea	(aapric[j],BodyAr);
							end;
							if (aapric.length>0 and aareb.length>0) then begin
								AddTextToArea	(",",BodyAr);
							end;
							for (j=0;j<aareb.length;j=j+1) begin
								if (j>0) then begin AddTextToArea	(",",BodyAr); end;
								AddTextToArea	(aareb[j],BodyAr);
							end;
							AddTextToArea	(chr(09),BodyAr);
							INr.Code = IVrw.ArtCode;
							ReadFIrstMain(INr,1,true);
							AddTextToArea	(BPICodeToName(INr.BPIBrand) & chr(09) 				
										& BPICodeToName(INr.BPICollection) & chr(09) 				
										& BPICodeToName(INr.BPIGroup) & chr(09) 	
										& BPICodeToName(INr.BPISubGroup) & chr(09) 	
										& BPICodeToName(INr.BPICategory) & chr(09) 			
										// & BPICodeToName(INr.BPIMaterial) & chr(09) 		
										// & BPICodeToName(INr.BPIColor) & chr(09) 	
										// & BPICodeToName(INr.BPIShape) & chr(09) 		
										// & BPICodeToName(INr.BPISize) & chr(09) 				
										// & BPICodeToName(INr.BPIUse) & chr(09) 				
										// & BPICodeToName(INr.BPISex) & chr(09) 						
										// & BPICodeToName(INr.BPIPlating) & chr(09) 	
										// & BPICodeToName(INr.BPIClarity) & chr(09) 	
										// & BPICodeToName(INr.BPIWeight) & chr(09) 		
										// & BPICodeToName(INr.BPICut) & chr(09) 				
										// & BPICodeToName(INr.BPIStone) & chr(09) 				
										// & BPICodeToName(INr.BPIStrap) & chr(09) 						
										// & BPICodeToName(INr.BPIOdour) & chr(09) 			
										& BPICodeToName(INr.High) & chr(09) 	
										& BPICodeToName(INr.Life2),BodyAr);
							AddTextToArea	(chr(13),BodyAr);
						end;
					end;
				end;
			end;
		end;
		resetloop(IVr);
		WriteAreaToFile	(BodyAr,"BPIReports/" & FileName & ".txt",0);
		SetAreaZeroSize	(BodyAr);
	end;
return;
end;



global webpublic updating procedure WebDeleteCoinINItems()
begin
	record ConsItemVc CIr,oldCIr;
	vector integer aDupCode;
	vector string 100 vItems;
	array string 100 atag;
	longint i;
	record ItemHistVc IHr;
	integer pos;
	string 100 tstr;
	record INVc INr;
	boolean delflaf;
	record ItemStatusVc ISr;
	boolean TrHs;
	
	setcompany(25,false);
	
	
	INr.Code = "IN_";
	TrHs = true;
	while(loopmain(INr,1,TrHs))begin
		if(left(INr.Code,3)!="IN_")then begin TrHs = false; end;
		
		if(TrHs)then begin
			if(INr.Group=="COINC")then begin
				if(left(INr.Code,3)=="IN_")then begin
					if(INVcRecordRemoveTest(INr,INr,0,0)==1) then begin
						weboutstring("Delete this item " & INr.Code);
						recorddelete(INr);
						stepback(INr);
					end else begin	
						ISr.Code = INr.Code;
						ISr.Location = ";;;";
						if(readfirstmain(ISr,2,true))then begin
							if(ISr.Instock==0)then begin
								weboutstring("Delete this item " & INr.Code);
								recorddelete(INr);
								stepback(INr);
							end;
						end;
					end;
				end;
			end;
		end;
		
	end;
	
	
	
return;
end;



global webpublic updating procedure WebFillIVTaxTrVc()
begin
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	boolean TrHs, Orf;
	integer i, rwcnt, lcnt;
	record LocationVc Lcr, OrigLcr, OldLcr;
	record ECVendFobSetBlaock ECVFSb;
	row ECVendFobSetBlaock ECVFSrw;
	array string 255 aLoc;
	array integer aCompNr;
	record IVVc IVr;
  record IVTaxTrVc IVTaxTr;// Edit ************************** BPI Ukraine - KramarAlexandr - 06, 24 10 2020 y. at 6:39:37 PM
	
	SetCompany(29,false);
	blockload(Compb);
	
	for(i=0;i<matrowcnt(Compb);i=i+1)begin
		matrowget(Compb,i,Comprw);
		if(Comprw.ActiveStatus==0)then begin
			setcompany(i+1,false);
			resetloop(IVr);
			IVr.InvDate = stringtodate("1/6/2020");
			while(loopkey("InvDate",IVr,1,true))begin
				if(nonblank(IVr.TaxTransactionCode))then begin
					IVTaxTr.SerNr = IVr.SerNr;
					IVTaxTr.TaxTransactionCode = IVr.TaxTransactionCode;
					recordstore(IVTaxTr,true);
					logtext(0,"WebFillIVTaxTrVc " & currentcompany & " " & IVr.SerNr & " " & IVr.TaxTransactionCode);
				end;
			end;
		end;
	end;
	
	

	return;
end;


global webpublic updating procedure WebFixCoinINItensData()
begin
	record INVc INr,IN2r;
	boolean TrHs,testf,changed;
	
	setcompany(25,false);
	INr.Code = "IN_";
	TrHs = true;
	while(loopmain(INr,1,TrHs))begin
		testf = true;
		if(left(INr.Code,3)!="IN_")then begin TrHs = false; testf = true; end;
		if(INr.BPIBrand!="BRND0046")then begin testf = true; end;
		
		if(testf)then begin
			if(nonblank(INr.AlternativeCode))then begin
				IN2r.Code = INr.AlternativeCode;
				if(readfirstmain(IN2r,1,true))then begin
					
					changed = false;
					if(IN2r.Name!=INr.Name)then begin
						IN2r.Name = INr.Name;
						changed = true;
					end;
					
					if(IN2r.BPIGroup!=INr.BPIGroup)then begin
						IN2r.BPIGroup = INr.BPIGroup;
						changed = true;
					end;

					if(IN2r.BPISubGroup!=INr.BPISubGroup)then begin
						IN2r.BPISubGroup = INr.BPISubGroup;
						changed = true;
					end;

					if(IN2r.BPICategory!=INr.BPICategory)then begin
						IN2r.BPICategory = INr.BPICategory;
						changed = true;
					end;
					
					if(IN2r.BPIMaterial!=INr.BPIMaterial)then begin
						IN2r.BPIMaterial = INr.BPIMaterial;
						changed = true;
					end;
					
					if(IN2r.BPIColor!=INr.BPIColor)then begin
						IN2r.BPIColor = INr.BPIColor;
						changed = true;
					end;
					
					if(IN2r.BPIShape!=INr.BPIShape)then begin
						IN2r.BPIShape = INr.BPIShape;
						changed = true;
					end;
					
					if(IN2r.BPISize!=INr.BPISize)then begin
						IN2r.BPISize = INr.BPISize;
						changed = true;
					end;
					
					if(IN2r.BPIUse!=INr.BPIUse)then begin
						IN2r.BPIUse = INr.BPIUse;
						changed = true;
					end;
					
					if(IN2r.BPISex!=INr.BPISex)then begin
						IN2r.BPISex = INr.BPISex;
						changed = true;
					end;
					
					if(IN2r.BPIPlating!=INr.BPIPlating)then begin
						IN2r.BPIPlating = INr.BPIPlating;
						changed = true;
					end;
					
					if(IN2r.BPIClarity!=INr.BPIClarity)then begin
						IN2r.BPIClarity = INr.BPIClarity;
						changed = true;
					end;
					
					if(IN2r.BPIWeight!=INr.BPIWeight)then begin
						IN2r.BPIWeight = INr.BPIWeight;
						changed = true;
					end;
					
					if(IN2r.BPICut!=INr.BPICut)then begin
						IN2r.BPICut = INr.BPICut;
						changed = true;
					end;
					
					if(IN2r.BPIStone!=INr.BPIStone)then begin
						IN2r.BPIStone = INr.BPIStone;
						changed = true;
					end;
					
					if(IN2r.BPIStrap!=INr.BPIStrap)then begin
						IN2r.BPIStrap = INr.BPIStrap;
						changed = true;
					end;
					
					if(IN2r.BPIOdour!=INr.BPIOdour)then begin
						IN2r.BPIOdour = INr.BPIOdour;
						changed = true;
					end;
					
					if(IN2r.BPICollection!=INr.BPICollection)then begin
						IN2r.BPICollection = INr.BPICollection;
						changed = true;
					end;
					
					if(IN2r.Year!=INr.Year)then begin
						IN2r.Year = INr.Year;
						changed = true;
					end;
					
					if(IN2r.Life!=INr.Life)then begin
						IN2r.Life = INr.Life;
						changed = true;
					end;
					
					if(IN2r.High!=INr.High)then begin
						IN2r.High = INr.High;
						changed = true;
					end;
					
					if(IN2r.Life2!=INr.Life2)then begin
						IN2r.Life2 = INr.Life2;
						changed = true;
					end;
					
					if(IN2r.SN!=INr.SN)then begin
						IN2r.SN = INr.SN;
						changed = true;
					end;
					
					if(IN2r.MainDisp!=INr.MainDisp)then begin
						IN2r.MainDisp = INr.MainDisp;
						changed = true;
					end;
					
					if(IN2r.SNOne!=INr.SNOne)then begin
						IN2r.SNOne = INr.SNOne;
						changed = true;
					end;
					
					
					if(changed)then begin
						logtext(0,INr.Code & " " & INr.Name & " --> " & IN2r.Code & " " & IN2r.Name);
						recordstore(IN2r,true);
					end;
				end;
			end;
		end;
		
	end;
	

return;
end;


global webpublic updating procedure WebUpdateIntORVc()
begin
	record IntORVc IntORr,oldIntORr;
	row IntORVc IntORrw;
	integer i,rwcnt;
	val v;
	
	setcompany(18,true);
	while(loopmain(IntORr,1,true))begin
		recordcopy(oldIntORr,IntORr);
		v = blankval;
		rwcnt = matrowcnt(IntORr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(IntORr,i,IntORrw);
			
			matrowput(IntORr,i,IntORrw);
			IntORchrsum(IntORr,i);
		end;
		SumupIntOR(IntORr,v);
		IntORr.Total = v;
    if (RecordUpdate(oldIntORr,IntORr,false)==0) then begin // When added IntORVcRecordProtectFields, had to change this to false
    end;
	end;
	
return;
end;







global webpublic  procedure WebGlobalItemClass()
begin
	record GlobalItemVc GIr;
	row GlobalItemVc GIrw;
	record BtrxFirstLevelCatVc BtrxFirstLevelCatr;
	record BtrxSecondLevelCatVc BtrxSecondLevelCatr;
	record BtrxThirdLevelCatVc BtrxThirdLevelCatr;
	record BTRxBrandVc BTRxBrandr;
	record BTRxMaterialVc BTRxMaterialr;
	record BTRxColourVc BTRxColorr;
	record BTRxSizeVc BTRxSizer;
	record BTRxSexVc BTRxSexr;
	record BTRxPlatingVc BTRxPlatingr;
	record BTRxStoneVc BTRxStoner;
	record BTRxStrapVc BTRxStrapr;
	record BTRxOdourVc BTRxOdourr;
	record BtrxCollectionVc BtrxCollectionr;
	record BPIGroupVc BPIGroupr;
	record BPISubGroupVc BPISubGroupr;
	record BPIShapeVc BPIShaper;
	record BPICategoryVc BPICategoryr;
	record INVc INr;
	boolean TrHs, INrf;
	area BodyAr;
	longint i,l;
	string 255 LocCodes, FileName;
	val LocInstock;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	
	
	FileName = "GlobalItemClass_" & DateToString(CurrentDate,"DD.MM.YYYY");
	runprogram("chmod","-R a+rw /mnt/database/Ecommerce");
	BlockLoad(Compb);
	SetCompany(1,false);
	logtext(0,"GlobalItemClass Start")
	GIr.Code = "BRND";
	TrHs = true;
	i = 0;
	l = 1;
	while (loopmain(GIr,1,TrHs)) begin
		INrf = true;
		if (left(GIr.Code,4)!="BRND") then begin TrHs = false; INrf = false; end;
		if (left(GIr.HansaCode,2)=="SB") then begin INrf = false; end;
		if (INrf) then begin
			AddTextToArea	(GIr.Code & chr(09) 
									& GIr.Code & chr(09) 		
									& GIr.BTRxInterCatClass & chr(09) 						
									& GIr.BTRxFirstLevCat & chr(09) 				
									& GIr.BTRxSecondLevCat & chr(09) 				
									& GIr.BTRxThirdLevCat & chr(09) 	
									& GIr.BTRxFourthLevCat & chr(09) 	
									& GIr.AlternativeCode & chr(09) 			
									& GIr.BPIBrand & chr(09) 		
									& GIr.HansaName & chr(09) 	
									& GIr.BPIMaterial & chr(09) 		
									& GIr.BPIPlating & chr(09) 				
									& GIr.Cert & chr(09) 				
									& GIr.BTRxWatchMechanism & chr(09) 						
									& GIr.BTRxPowerReserve & chr(09) 	
									& GIr.BPIStrap & chr(09) 	
									& GIr.BTRxStrapColour & chr(09) 		
									& GIr.BTRxPlacerScatt & chr(09) 				
									& GIr.BPIColor & chr(09) 				
									& GIr.BPIOdour & chr(09) 						
									& GIr.BTRxPhoneModel & chr(09) 			
									& GIr.BTRxType & chr(09) 	
									& GIr.BTRxStrapMat & chr(09) 		
									& GIr.TPCode & chr(09) 				
									& GIr.BtrxCollection & chr(09) 				
									& GIr.TPCPCode & chr(09) 						
									& GIr.BtrxMatchesKitchenStove & chr(09) 			
									& GIr.BtrxProductName & chr(09) 	
									& GIr.BtrxItemSize & chr(09) 		
									& GIr.BtrxAddProdDescription & chr(09) 				
									& GIr.BtrxCare & chr(09) 				
									& GIr.BTRxFilling & chr(09) 						
									& GIr.BPISex & chr(09) 			
									& GIr.BPISize & chr(09) 	
									& GIr.StrDepth & chr(09) 		
									& GIr.StrWidth & chr(09) 				
									& GIr.StrHeight & chr(09) 				
									& GIr.StrBTRxDiam & chr(09) 						
									& GIr.StrVolume & chr(09) 			
									& GIr.StrWeight & chr(09) 	
									& GIr.BTRxProdColour & chr(09) 		
									& GIr.BTRxChainMaterial & chr(09) 				
									& GIr.BTRxWatchGradeA & chr(09) 				
									& GIr.BTRxWatchGradeB & chr(09) 						
									& GIr.BTRxWatchGradeC & chr(09) 			
									& GIr.BTRxStoneA & chr(09) 	
									& GIr.BTRxStoneScattA & chr(09) 		
									& GIr.BTRxStoneB & chr(09) 				
									& GIr.BTRxStoneScattB & chr(09) 				
									& GIr.BTRxStoneC & chr(09) 						
									& GIr.BTRxStoneScattC & chr(09) 			
									& GIr.BTRxBracelMat & chr(09) 	
									& GIr.BtrxProductFeaches & chr(09) 		
									& GIr.BPIStone & chr(09) 				
									& GIr.BTRxCentralCarat & chr(09) 				
									& GIr.BTRxWatterRes & chr(09) 						
									& GIr.StrBTRxSetQty & chr(09) 			
									& GIr.BTRxFingerGirth & chr(09) 	
									& GIr.BtrxClockFaceColour & chr(09) 		
									& GIr.BtrxComplications & chr(09) 				
									& GIr.BtrxClockFaceMaterial & chr(09) 				
									& GIr.BtrxMicrowaveProtect & chr(09) 						
									& GIr.BtrxStoveCompat & chr(09) 
									& GIr.BtrxWarranty & chr(09) 			
									& GIr.BtrxAllMaterials & chr(09) 	
									& GIr.BtrxPrecMetalCont & chr(09) 		
									& GIr.BtrxCaseDiam & chr(09) 				
									& GIr.BtrxScratchRes & chr(09) 				
									& GIr.BTRxLimitedGood & chr(09) 						
									& GIr.BTRxWatterResf 									
									&	chr(13),BodyAr);
		end;
		if (i==999) then begin
			l = l + 1;
			WriteAreaToFile	(BodyAr,"GlobalItemReports/" & FileName & "_" & l & ".txt",0);
			i = 0;
			SetAreaZeroSize(BodyAr);
		end else begin
			i = i + 1;
		end;
	end;
		
		
	// WriteAreaToFile	(BodyAr,"GlobalItemReports/" & FileName,0);
		// WriteAreaToFile	(BodyAr,"/mnt/database/Ecommerce/GlobalItemReports/" & FileName,0);
	logtext(0,"GlobalItemClass finish");
end;	










global webpublic procedure WebImportBUClassGIrIn()  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 13:50 13.10.2020
begin
record INVc INr,oldINr;
longint i,flushcnt,curcomp,GIrCNT,j,k,CompQty,ErrCnt1,ErrCnt2,mtrw,INComp,StatAllRows,StatOkRows,StatFailItemRows,StatFailClassRows,ErrClasscnt,ErrCnt3,slipcont;
record GlobalItemVc GIr, OldGIr;
string 100 artcode,brand,newBrand,code,glCode,tstr,bltstr,cntstr,origartcode;
record BPIBrandVc BPIBrandr;
record BPIBrandVc BPIBrand1r;
area ErrAr1, ErrAr2, reply;
array string 255 abrand,anewbrand,ErrArr,ErrAr3;
array string 100 headers,params;
record CompaniesBlock Compb;
row CompaniesBlock Comprw;
vector boolean Errf, Classf;
array string 255 ItemCode,ItemName,ItemBrand,ItemPrice,DealerPrice;
boolean INrf, ExtPrItemf, namef, dpf, updf;
vector string 255 classCode;
string 255 filename, FinRow, PrefCode;
LongInt rcnt, r, okend ;
vector string 255 vparams, vartcode, vbrand, vorigartcode,vJSONParENG,vJSONParRUS,vJSONParAZE;
record JSONClassNamesVc JCNr;
vector boolean vJSONClassf;
vector boolean CodeInstf;
boolean TrHs;
record ExpProvItemRegVc EPIRr;
array string 255 aGIr;	
vector string 255 vGirClass;

	BlockLoad(Compb);
	
	CompQty = matrowcnt(Compb);
	curcomp = currentcompany;	
	// SetImportCodePage("CP1251");
	SetCompany(1,false);
	okend = 0;
	for (j=0;j<CountFilesInDir("/mnt/database/Ecommerce/ExtItemIN");j=j+1) begin
		ClearArray(aGIr);
		ClearVector(vGirClass);
		if (right(GetFileNameInDir("/mnt/database/Ecommerce/ExtItemIN",j),4) == ".txt") then begin 
			filename = GetFileNameInDir("/mnt/database/Ecommerce/ExtItemIN",0);
			k = CountFilesInDir("/mnt/database/Ecommerce/ExtItemIN"); 
			if(nonblank(filename) and fileexists("/mnt/database/Ecommerce/ExtItemIN/" & filename))then begin
				if (fileexists("/mnt/database/Ecommerce/ExtItemOUT/" & filename)) then begin
					delete_file("/mnt/database/Ecommerce/ExtItemOUT/" & filename);
				end;
				logtext(0,"start ImportAddExtVendItemsFromFolderQueuedIn");
				SetImportCodePage("UTF-8");
				openfile("/mnt/database/Ecommerce/ExtItemIN/" & filename);
		// _______________________________________________________________________
	// for (j=0;j<CountFilesInDir("ExtItemIN");j=j+1) begin
		// ClearArray(aGIr);
		// ClearVector(vGirClass);
		// if (right(GetFileNameInDir("ExtItemIN",j),4) == ".txt") then begin 
			// filename = GetFileNameInDir("ExtItemIN",0);
			// k = CountFilesInDir("ExtItemIN"); 
			// if(nonblank(filename) and fileexists("ExtItemIN/" & filename))then begin
				// if (fileexists("ExtItemOUT/" & filename)) then begin
					// delete_file("ExtItemOUT/" & filename);
				// end;
				// logtext(0,"start ImportAddExtVendItemsFromFolderQueuedIn");
				// SetImportCodePage("UTF-8");
				// openfile("ExtItemIN/" & filename);
				// _______________________________________________________________________
				
				i = 0;
				while (TestEOF()==false) begin
					tstr = ImportField;
					tstr = ImportField; aGIr[i] = tstr;	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxInterCatClass"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxFirstLevCat"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxSecondLevCat"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxThirdLevCat"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxFourthLevCat"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "AlternativeCode"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPIBrand"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "HansaName"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPIMaterial"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPIPlating"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "Cert"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxWatchMechanism"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxPowerReserve"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPIStrap"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStrapColour"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxPlacerScatt"] = tstr; 					
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPIColor"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPIOdour"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxPhoneModel"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxType"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStrapMat"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "TPCode"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxCollection"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "TPCPCode"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxMatchesKitchenStove"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxProductName"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxItemSize"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxAddProdDescription"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxCare"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxFilling"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPISex"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPISize"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "StrDepth"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "StrWidth"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "StrHeight"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "StrBTRxDiam"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "StrVolume"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "StrWeight"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxProdColour"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxChainMaterial"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxWatchGradeA"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxWatchGradeB"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxWatchGradeC"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStoneA"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStoneScattA"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStoneB"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStoneScattB"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStoneC"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxStoneScattC"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxBracelMat"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxProductFeaches"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BPIStone"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxCentralCarat"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxWatterRes"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "StrBTRxSetQty"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxFingerGirth"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxClockFaceColour"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxComplications"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxClockFaceMaterial"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxMicrowaveProtect"] = tstr; 						
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxStoveCompat"] = tstr; 
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxWarranty"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxAllMaterials"] = tstr; 	
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxPrecMetalCont"] = tstr; 		
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxCaseDiam"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BtrxScratchRes"] = tstr; 				
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxLimitedGood"] = tstr; 			
					tstr = ImportField; vGirClass[aGIr[i] & "_" & "BTRxWatterResf"] = tstr; 	
					i = i + 1;
					if (NextImportLine(true)) then begin end;
				end;
				GIrCNT = i;
				CloseFile;
				// MoveFile(filename,"ExtItemIN","ExtItemOUT");
				// delete_file("ExtItemIN/" & filename);
				//MoveFile(filename,"/mnt/database/Ecommerce/ExtItemIN","/mnt/database/Ecommerce/ExtItemOUT");
				delete_file("/mnt/database/Ecommerce/ExtItemIN/" & filename);
				runprogram("chmod","-R a+rw Ecommerce");
			end;
			
			
			for (i=0;i<GIrCNT;i=i+1) begin
				GIr.Code = aGIr[i]; 	
				if (ReadFirstMain(GIr,1,true)) then begin		
					updf = false;
					recordCopy(OldGIr,GIr);
					GIr.BTRxInterCatClass = vGirClass[GIr.Code & "_" & "BTRxInterCatClass"]; 						
					GIr.BTRxFirstLevCat = vGirClass[GIr.Code & "_" & "BTRxFirstLevCat"];				
					GIr.BTRxSecondLevCat = vGirClass[GIr.Code & "_" & "BTRxSecondLevCat"];				
					GIr.BTRxThirdLevCat = vGirClass[GIr.Code & "_" & "BTRxThirdLevCat"];	
					GIr.BTRxFourthLevCat = vGirClass[GIr.Code & "_" & "BTRxFourthLevCat"];	
					GIr.AlternativeCode = vGirClass[GIr.Code & "_" & "AlternativeCode"];			
					GIr.BPIBrand = vGirClass[GIr.Code & "_" & "BPIBrand"];		
					GIr.HansaName = vGirClass[GIr.Code & "_" & "HansaName"];	
					GIr.BPIMaterial = vGirClass[GIr.Code & "_" & "BPIMaterial"];		
					GIr.BPIPlating = vGirClass[GIr.Code & "_" & "BPIPlating"];				
					GIr.Cert = vGirClass[GIr.Code & "_" & "Cert"];				
					GIr.BTRxWatchMechanism = vGirClass[GIr.Code & "_" & "BTRxWatchMechanism"];						
					GIr.BTRxPowerReserve = vGirClass[GIr.Code & "_" & "BTRxPowerReserve"];	
					GIr.BPIStrap = vGirClass[GIr.Code & "_" & "BPIStrap"];	
					GIr.BTRxStrapColour = vGirClass[GIr.Code & "_" & "BTRxStrapColour"];		
					GIr.BTRxPlacerScatt = StringToVal(vGirClass[GIr.Code & "_" & "BTRxPlacerScatt"],M4Val);		
					GIr.BPIColor = vGirClass[GIr.Code & "_" & "BPIColor"];				
					GIr.BPIOdour = vGirClass[GIr.Code & "_" & "BPIOdour"];						
					GIr.BTRxPhoneModel = vGirClass[GIr.Code & "_" & "BTRxPhoneModel"];			
					GIr.BTRxType = vGirClass[GIr.Code & "_" & "BTRxType"];	
					GIr.BTRxStrapMat = vGirClass[GIr.Code & "_" & "BTRxStrapMat"];		
					GIr.TPCode = vGirClass[GIr.Code & "_" & "TPCode"];				
					GIr.BtrxCollection = vGirClass[GIr.Code & "_" & "BtrxCollection"];				
					GIr.TPCPCode = vGirClass[GIr.Code & "_" & "TPCPCode"];						
					GIr.BtrxMatchesKitchenStove = vGirClass[GIr.Code & "_" & "BtrxMatchesKitchenStove"];			
					GIr.BtrxProductName = vGirClass[GIr.Code & "_" & "BtrxProductName"];	
					GIr.BtrxItemSize = vGirClass[GIr.Code & "_" & "BtrxItemSize"];		
					GIr.BtrxAddProdDescription = vGirClass[GIr.Code & "_" & "BtrxAddProdDescription"];				
					GIr.BtrxCare = vGirClass[GIr.Code & "_" & "BtrxCare"];				
					GIr.BTRxFilling = vGirClass[GIr.Code & "_" & "BTRxFilling"];						
					GIr.BPISex = vGirClass[GIr.Code & "_" & "BPISex"];			
					GIr.BPISize = vGirClass[GIr.Code & "_" & "BPISize"];	
					GIr.StrDepth = vGirClass[GIr.Code & "_" & "StrDepth"];		
					GIr.StrWidth = vGirClass[GIr.Code & "_" & "StrWidth"];				
					GIr.StrHeight = vGirClass[GIr.Code & "_" & "StrHeight"];				
					GIr.StrBTRxDiam = vGirClass[GIr.Code & "_" & "StrBTRxDiam"];						
					GIr.StrVolume = vGirClass[GIr.Code & "_" & "StrVolume"];			
					GIr.StrWeight = vGirClass[GIr.Code & "_" & "StrWeight"];	
					GIr.BTRxProdColour = vGirClass[GIr.Code & "_" & "BTRxProdColour"];		
					GIr.BTRxChainMaterial = vGirClass[GIr.Code & "_" & "BTRxChainMaterial"];				
					GIr.BTRxWatchGradeA = vGirClass[GIr.Code & "_" & "BTRxWatchGradeA"];				
					GIr.BTRxWatchGradeB = vGirClass[GIr.Code & "_" & "BTRxWatchGradeB"];						
					GIr.BTRxWatchGradeC = vGirClass[GIr.Code & "_" & "BTRxWatchGradeC"];			
					GIr.BTRxStoneA = vGirClass[GIr.Code & "_" & "BTRxStoneA"];	
					GIr.BTRxStoneScattA =  StringToVal(vGirClass[GIr.Code & "_" & "BTRxStoneScattA"],M4Val);	
					GIr.BTRxStoneB = vGirClass[GIr.Code & "_" & "BTRxStoneB"];				
					GIr.BTRxStoneScattB = StringToVal(vGirClass[GIr.Code & "_" & "BTRxStoneScattB"],M4Val);				
					GIr.BTRxStoneC = vGirClass[GIr.Code & "_" & "BTRxStoneC"];						
					GIr.BTRxStoneScattC = StringToVal(vGirClass[GIr.Code & "_" & "BTRxStoneScattC"],M4Val);		
					GIr.BTRxBracelMat = vGirClass[GIr.Code & "_" & "BTRxBracelMat"];	
					GIr.BtrxProductFeaches = vGirClass[GIr.Code & "_" & "BtrxProductFeaches"];		
					GIr.BPIStone = vGirClass[GIr.Code & "_" & "BPIStone"];				
					GIr.BTRxCentralCarat = vGirClass[GIr.Code & "_" & "BTRxCentralCarat"];				
					GIr.BTRxWatterRes = vGirClass[GIr.Code & "_" & "BTRxWatterRes"];						
					GIr.StrBTRxSetQty = vGirClass[GIr.Code & "_" & "StrBTRxSetQty"];			
					GIr.BTRxFingerGirth = vGirClass[GIr.Code & "_" & "BTRxFingerGirth"];	
					GIr.BtrxClockFaceColour = vGirClass[GIr.Code & "_" & "BtrxClockFaceColour"];		
					GIr.BtrxComplications = vGirClass[GIr.Code & "_" & "BtrxComplications"];				
					GIr.BtrxClockFaceMaterial = vGirClass[GIr.Code & "_" & "BtrxClockFaceMaterial"];				
					GIr.BtrxMicrowaveProtect = vGirClass[GIr.Code & "_" & "BtrxMicrowaveProtect"];						
					GIr.BtrxStoveCompat = vGirClass[GIr.Code & "_" & "BtrxStoveCompat"];
					GIr.BtrxWarranty = vGirClass[GIr.Code & "_" & "BtrxWarranty"];			
					GIr.BtrxAllMaterials = vGirClass[GIr.Code & "_" & "BtrxAllMaterials"];	
					GIr.BtrxPrecMetalCont = vGirClass[GIr.Code & "_" & "BtrxPrecMetalCont"];		
					GIr.BtrxCaseDiam = vGirClass[GIr.Code & "_" & "BtrxCaseDiam"];				
					GIr.BtrxScratchRes = vGirClass[GIr.Code & "_" & "BtrxScratchRes"];				
					GIr.BTRxLimitedGood = StringToInt(vGirClass[GIr.Code & "_" & "BTRxLimitedGood"]);
					GIr.BTRxWatterResf = StringToInt(vGirClass[GIr.Code & "_" & "BTRxWatterResf"]);
					if (
						GIr.BTRxInterCatClass != OldGIr.Name 						
						or GIr.BTRxFirstLevCat != OldGIr.BTRxFirstLevCat 				
						or GIr.BTRxSecondLevCat != OldGIr.BTRxSecondLevCat 				
						or GIr.BTRxThirdLevCat != OldGIr.BTRxThirdLevCat 	
						or GIr.BTRxFourthLevCat != OldGIr.BTRxFourthLevCat 	
						or GIr.AlternativeCode != OldGIr.AlternativeCode 			
						or GIr.BPIBrand != OldGIr.BPIBrand 		
						or GIr.HansaName != OldGIr.HansaName 	
						or GIr.BPIMaterial != OldGIr.BPIMaterial 		
						or GIr.BPIPlating != OldGIr.BPIPlating 				
						or GIr.Cert != OldGIr.Cert 				
						or GIr.BTRxWatchMechanism != OldGIr.BTRxWatchMechanism 						
						or GIr.BTRxPowerReserve != OldGIr.BTRxPowerReserve 	
						or GIr.BPIStrap != OldGIr.BPIStrap 	
						or GIr.BTRxStrapColour != OldGIr.BTRxStrapColour 		
						or GIr.BTRxPlacerScatt != OldGIr.BTRxPlacerScatt 				
						or GIr.BPIColor != OldGIr.BPIColor 				
						or GIr.BPIOdour != OldGIr.BPIOdour 						
						or GIr.BTRxPhoneModel != OldGIr.BTRxPhoneModel 			
						or GIr.BTRxType != OldGIr.BTRxType 	
						or GIr.BTRxStrapMat != OldGIr.BTRxStrapMat 		
						or GIr.TPCode != OldGIr.TPCode 				
						or GIr.BtrxCollection != OldGIr.BtrxCollection 				
						or GIr.TPCPCode != OldGIr.TPCPCode 						
						or GIr.BtrxMatchesKitchenStove != OldGIr.BtrxMatchesKitchenStove 			
						or GIr.BtrxProductName != OldGIr.BtrxProductName 	
						or GIr.BtrxItemSize != OldGIr.BtrxItemSize 		
						or GIr.BtrxAddProdDescription != OldGIr.BtrxAddProdDescription 				
						or GIr.BtrxCare != OldGIr.BtrxCare 				
						or GIr.BTRxFilling != OldGIr.BTRxFilling 						
						or GIr.BPISex != OldGIr.BPISex 			
						or GIr.BPISize != OldGIr.BPISize 	
						or GIr.StrDepth != OldGIr.StrDepth 		
						or GIr.StrWidth != OldGIr.StrWidth 				
						or GIr.StrHeight != OldGIr.StrHeight 				
						or GIr.StrBTRxDiam != OldGIr.StrBTRxDiam 						
						or GIr.StrVolume != OldGIr.StrVolume 			
						or GIr.StrWeight != OldGIr.StrWeight 	
						or GIr.BTRxProdColour != OldGIr.BTRxProdColour 		
						or GIr.BTRxChainMaterial != OldGIr.BTRxChainMaterial 				
						or GIr.BTRxWatchGradeA != OldGIr.BTRxWatchGradeA 				
						or GIr.BTRxWatchGradeB != OldGIr.BTRxWatchGradeB 						
						or GIr.BTRxWatchGradeC != OldGIr.BTRxWatchGradeC 			
						or GIr.BTRxStoneA != OldGIr.BTRxStoneA 	
						or GIr.BTRxStoneScattA != OldGIr.BTRxStoneScattA 		
						or GIr.BTRxStoneB != OldGIr.BTRxStoneB 				
						or GIr.BTRxStoneScattB != OldGIr.BTRxStoneScattB 				
						or GIr.BTRxStoneC != OldGIr.BTRxStoneC 						
						or GIr.BTRxStoneScattC != OldGIr.BTRxStoneScattC 			
						or GIr.BTRxBracelMat != OldGIr.BTRxBracelMat 	
						or GIr.BtrxProductFeaches != OldGIr.BtrxProductFeaches 		
						or GIr.BPIStone != OldGIr.BPIStone 				
						or GIr.BTRxCentralCarat != OldGIr.BTRxCentralCarat 				
						or GIr.BTRxWatterRes != OldGIr.BTRxWatterRes 						
						or GIr.StrBTRxSetQty != OldGIr.StrBTRxSetQty 			
						or GIr.BTRxFingerGirth != OldGIr.BTRxFingerGirth 	
						or GIr.BtrxClockFaceColour != OldGIr.BtrxClockFaceColour 		
						or GIr.BtrxComplications != OldGIr.BtrxComplications 				
						or GIr.BtrxClockFaceMaterial != OldGIr.BtrxClockFaceMaterial 				
						or GIr.BtrxMicrowaveProtect != OldGIr.BtrxMicrowaveProtect 						
						or GIr.BtrxStoveCompat != OldGIr.BtrxStoveCompat 
						or GIr.BtrxWarranty != OldGIr.BtrxWarranty 			
						or GIr.BtrxAllMaterials != OldGIr.BtrxAllMaterials 	
						or GIr.BtrxPrecMetalCont != OldGIr.BtrxPrecMetalCont 		
						or GIr.BtrxCaseDiam != OldGIr.BtrxCaseDiam 				
						or GIr.BtrxScratchRes != OldGIr.BtrxScratchRes 				
						or GIr.BTRxLimitedGood != OldGIr.BTRxLimitedGood 						
						or GIr.BTRxWatterResf != OldGIr.BTRxWatterResf 	
					) then begin updf = true; end;
					if (updf) then begin
						queued.SaveGIWithoutDupClassCodes(GIr);
						MilliSleep(50);
					end;
				end;
				if (NextImportLine(true)) then begin end;
			end;
		end;
	end;
	
	
	
	return;
end;




global webpublic procedure WebFixClientReservesID()
begin
	record ORVc ORr,locORr;
	row ORVc ORrw;
	integer targcom,isclosed,i,rwcnt;
	record INVc INr;
	longint ponr;
	record POVc POr;
	vector integer vbrand;
	array string 30 atags;
	record BPIBrandVc BPIBrandr;
	string 255 brands;
	
	setcompany(18,false);
	
	weboutstring("Счет клиента в КК||||||");
	weboutstring("Дата||||||");
	weboutstring("Бренд||||||");
	weboutstring("Из компании||||||");
	weboutstring("Заказ поста. в бутике||||||");
	weboutstring("Сч.кл. в бутике||||||");
	weboutstring("Закр.||||||");
	weboutstring("<BR>");
	
	while(loopmain(ORr,1,true))begin
		if(ORr.OrderClass=="CLIEN")then begin
			if(ORr.ShipMark==0)then begin
				targcom = blankval;
				ponr = -1;
				if(nonblank(ORr.OfficialSerNr))then begin
					targcom = stringtoint(lastinrange(ORr.OfficialSerNr,20));
					ponr = stringtolongint(firstinrange(ORr.OfficialSerNr,20));
				end;
				
				brands = "";
				clearVector(vbrand);
				clearArray(atags);
				rwcnt = matrowcnt(ORr);
				for(i=0;i<rwcnt;i=i+1)begin
					matrowget(ORr,i,ORrw);
					if(nonblank(ORrw.ArtCode))then begin
						INr.Code = ORrw.ArtCode;
						if(readfirstmain(INr,1,true))then begin
							vbrand[INr.BPIBrand] = 1;
						end;
					end;
				end;
				
				getvectortags(vbrand,atags);
				
				for(i=0;i<atags.length;i=i+1)begin
					BPIBrandr.Code = atags[i];
					readfirstmain(BPIBrandr,1,true);
					brands = brands & "," & BPIBrandr.Name;
				end;
				
				isclosed = 0;
				
				if(targcom>0 and targcom<34)then begin
					setcompany(targcom,false);
						POr.SerNr = ponr;
						if(readfirstmain(POr,1,true))then begin
							if(POr.OrdNr>0)then begin
								locORr.SerNr = POr.OrdNr;
								if(readfirstmain(locORr,1,true))then begin
									if(locORr.ShipMark>0)then begin
										isclosed = 1;
									end;
									if(locORr.Closed>0)then begin
										isclosed = 1;
									end;
								end;
							end;
						end;
					
					setcompany(18,false);
				end;
				
				
				weboutstring(ORr.SerNr);
				weboutstring("||||||");
				weboutstring(ORr.OrdDate);
				weboutstring("||||||");
				weboutstring(brands);
				weboutstring("||||||");
				weboutstring(targcom);
				weboutstring("||||||");
				weboutstring(ponr);
				weboutstring("||||||");
				weboutstring(locORr.SerNr);
				weboutstring("||||||");
				weboutstring(isclosed);
				weboutstring("||||||");
				weboutstring("<BR>");
				
			end;
		end;
	end;

return;
end;


global
webpublic updating procedure WebdelRepInSetGr()
begin
	record BTRxGroupClassSetVc BGCSr;
	row BTRxGroupClassSetVc BGCSrw;
	longint i;
	vector boolean Classcodesf;
 
  SetCompany(18,false);

	BGCSr.Type = "";
	while (loopmain(BGCSr,1,true)) begin
		ClearVector(Classcodesf);
		for (i=matrowcnt(BGCSr)-1;i>=0;i=i-1) begin
			matrowget(BGCSr,i,BGCSrw);
			if (Classcodesf[BGCSrw.CCode]) then begin
				matrowdelete (BGCSr,i);
			end else begin
				Classcodesf[BGCSrw.CCode] = true;
			end;
		end;
		RecordStore(BGCSr,true);
	end;
	
 return;
end;








global
webpublic updating procedure WebGetVendorDuplicates()
begin
	record BPIBrandVc Brandr;
	record CUVc CUr;	
	boolean CuDupf, TrHs, testf;
	vector boolean vCuDupf;
	array string 255 DupCuCodes;
	integer i, cnt;
	string 255 IDEAVenName,CurVendName,CurVendCode;
	vector boolean VeExistf;
	record DIVc DIr;
	
	
  SetCompany(28,false);
	Brandr.Code = "";
	while(loopmain(Brandr,1,true))begin
		if (nonblank(Brandr.IDEABrandRef)) then begin
			CUr.Name = "";
			DIr.Code = Brandr.IDEABrandRef;
			if (ReadFIrstMain(DIr,1,true)) then begin
				CUr.Code = Brandr.Vendor;
				CUr.VEType = 1;
				CurVendCode = "";
				CurVendName = "";
				if(ReadFirstKey("VEActCode",CUr,2,true)) then begin
					CurVendCode = CUr.Code;
					CurVendName = CUr.Name;
				end;
				WebOutString(Brandr.Code & "<=>" & Brandr.Name & "<=>" & Brandr.IDEABrandRef & "<=>" & DIr.Name & "<=>" & CurVendCode & "<=>" & CurVendName & "<=>" & CUr.blockedFlag);
				weboutstring("<BR>");
			end;
			CUr.Code = Brandr.Vendor;
			IDEAVenName = "";
			i = 0;
			clearArray(DupCuCodes);
			if (readfirstmain(CUr,1,true)) then begin
				// DupCuCodes[i] = CUr.Code;
				vCuDupf[CUr.Code] = true;
				// IDEAVenName = CUr.Name;
				// i=i+1;
			end;
			CUr.Name = Brandr.Name;
			TrHs = true;
			while (loopKey("Name",CUr,1,TrHs)) begin
				if (CUr.Name!=Brandr.Name) then begin TrHs = false; end;
				if (!vCuDupf[CUr.Code] and TrHs and CUr.VEType==1 and CUr.blockedFlag==0) then begin
					DupCuCodes[i] = CUr.Code;
					vCuDupf[CUr.Code] = true;
					i=i+1;
				end;
			end;
			Resetloop(CUr);
			CUr.Name = UpperCase(Brandr.Name);
			TrHs = true;
			while (loopKey("Name",CUr,1,TrHs)) begin
				if (CUr.Name!=UpperCase(Brandr.Name)) then begin TrHs = false; end;
				if (!vCuDupf[CUr.Code] and TrHs and CUr.VEType==1 and CUr.blockedFlag==0) then begin
					DupCuCodes[i] = CUr.Code;
					vCuDupf[CUr.Code] = true;
					i=i+1;
				end;
			end;
			CUr.Code = UpperCase(Brandr.Name);
			TrHs = true;
			while (loopmain(CUr,1,TrHs)) begin
				if (CUr.Code!=UpperCase(Brandr.Name)) then begin TrHs = false; end;
				if (!vCuDupf[CUr.Code] and TrHs and CUr.VEType==1 and CUr.blockedFlag==0) then begin
					DupCuCodes[i] = CUr.Code;
					vCuDupf[CUr.Code] = true;
					i=i+1;
				end;
			end;
			CUr.Code = UpperCase(Brandr.Name);
			TrHs = true;
			while (loopmain(CUr,1,TrHs)) begin
				if (CUr.Code!=UpperCase(Brandr.Name)) then begin TrHs = false; end;
				if (!vCuDupf[CUr.Code] and TrHs and CUr.VEType==1 and CUr.blockedFlag==0) then begin
					DupCuCodes[i] = CUr.Code;
					vCuDupf[CUr.Code] = true;
					i=i+1;
				end;
			end;
			Resetloop(CUr);
			if (nonblank(CurVendName)) then begin
				CUr.Name = CurVendName;
				TrHs = true;
				while (loopKey("Name",CUr,1,TrHs)) begin
					if (CUr.Name!=CurVendName) then begin TrHs = false; end;
					if (!vCuDupf[CUr.Code] and TrHs and CUr.VEType==1 and CUr.blockedFlag==0) then begin
						DupCuCodes[i] = CUr.Code;
						vCuDupf[CUr.Code] = true;
						i=i+1;
					end;
				end;
				Resetloop(CUr);
				CUr.Name = UpperCase(CurVendName);
				TrHs = true;
				while (loopKey("Name",CUr,1,TrHs)) begin
					if (CUr.Name!=CurVendName) then begin TrHs = false; end;
					if (!vCuDupf[CUr.Code] and TrHs and CUr.VEType==1 and CUr.blockedFlag==0) then begin
						DupCuCodes[i] = CUr.Code;
						vCuDupf[CUr.Code] = true;
						i=i+1;
					end;
				end;
				Resetloop(CUr);
			end;
			cnt = i;
			if (cnt>1) then begin
				for (i=0;i<cnt;i=i+1) begin
					CUr.Code = DupCuCodes[i];
					if (ReadFirstMain(CUr,1,true)) then begin
						WebOutString("<=>" & "<=>" & "<=>" & "<=>" & CUr.Code & "<=>" & CUr.Name);
						WebOutString("<BR>");
						// if (!VeExistf[Brandr.Code] and CUr.VECat!="IDEA") then begin
							// VeExistf[Brandr.Code] = true;
							// WebOutString(Brandr.Code & "<_>" & Brandr.Name  & "<_>" &  CUr.Code & "<_>" & CUr.Name);
							// WebOutString("<BR>");
						// end;
					end;
				end;
			end else begin
				CUr.Code = DupCuCodes[0];
				if (ReadFirstMain(CUr,1,true)) then begin
					// VeExistf[Brandr.Code] = true;
					WebOutString("<=>" & "<=>" & "<=>" & "<=>" & CUr.Code & "<=>" & CUr.Name & "<=>" & CUr.VECat);
					WebOutString("<BR>");
				end;
			end;
		end;
	end;
	
 return;
end;


global
webpublic updating procedure WebRecalcClientReservesforBigPUMn()
begin
record BigPUVc BPUr;
record ORVc ORr;
row ORVc ORrw;
record POVc POr;
row POVc POrw;
integer pos, i, j, ORCnt;
string 255 tstr;
array string 255 ClientORrs;
record ClientItemStatusVc CISr;
val ReserClQty;
	
	SetCompany(18,false);
	BPUr.SerNr = 1;
	while (loopmain(BPUr,1,true)) begin
		logtext(0,"recalc BPU " & BPUr.SerNr);
		pos = 0;
		tstr = "";
		ExtractObjWithSeparator(",",BPUr.FromOrds,true,pos,tstr);
		i=0;
		while (nonblank(tstr)) begin
			if (nonblank(tstr)) then begin
				POr.SerNr = StringToLongInt(tstr);
				if (ReadFirstMain(POr,1,true)) then begin
					if (POr.POClass=="CLIEN") then begin
						ClientORrs[i] = POr.OrdNr;
						i=i+1;
					end;
				end;
			end;
			ExtractObjWithSeparator(",",BPUr.FromOrds,true,pos,tstr);
		end;
		ORCnt = i;
		for (i=0;i<ORCnt;i=i+1) begin
			ORr.SerNr = StringToLongInt(ClientORrs[i]);
			if (ReadFirstMain(ORr,1,true)) then begin
				for (j=0;j<matrowcnt(ORr);j=j+1) begin
					matrowget(ORr,j,ORrw);
					ReserClQty = ORrw.Quant-ORrw.Shipd2;
					if (ReserClQty>0) then begin
						CISr.ItemCode = ORrw.ArtCode;
						CISr.OrderNr = ORr.SerNr;
						if(ReadFIrstMain(CISr,2,true)) then begin
							CISr.Quant = ReserClQty;
							recordStore (CISr,true);
						end else begin
							RecordNew(CISr);
							CISr.ItemCode = ORrw.ArtCode;
							CISr.OrderNr = ORr.SerNr;
							CISr.Quant = ReserClQty;
							recordStore (CISr,true);
						end;
					end;
				end;
			end;
		end;
	end;

return
end;







global
webpublic updating procedure WebRecalcClientReservesforPUMn()
begin
record PUVc PUr;
row PUVc PUrw;
record ORVc ORr;
row ORVc ORrw;
record POVc POr;
row POVc POrw;
integer pos, i, j, ORCnt;
string 255 tstr;
record ClientItemStatusVc CISr;
val ReserClQty;
longint ClientORrs;
vector boolean vClientORrs;
array longint aORrs;
vector val PUArtCodes;
record ItemStatusVc ISr;
	
	SetCompany(18,false);
	PUr.SerNr = 1;
	while (loopmain(PUr,1,true)) begin
		if (PUr.PONr>0) then begin
			POr.SerNr = PUr.PONr;
			if (ReadFirstMain(POr,1,true)) then begin
				if (POr.POClass=="CLIEN") then begin
					if (!vClientORrs[POr.OrdNr]) then begin
						vClientORrs[POr.OrdNr] = true;
						aORrs[aORrs.length] = POr.OrdNr;
						for (i=0;i<matrowcnt(PUr);i=i+1) begin
							matrowget(PUr,i,PUrw);
							PUArtCodes[POr.OrdNr & "_" & PUrw.ArtCode] = PUArtCodes[POr.OrdNr & "_" & PUrw.ArtCode] + PUrw.Quant;
							ISr.Code = PUrw.ArtCode;
							ISr.Location = PUrw.Location;
							if (blank(PUrw.Location)) then begin ISr.Location = PUr.Location; end;
							if (ReadFirstMain(ISr,2,true)) then begin 
								if (ISr.Instock - ISr.RsrvQty<=0) then begin
									PUArtCodes[POr.OrdNr & "_" & PUrw.ArtCode] = 0;
								end;
							end;
						end;
					end else begin
						for (i=0;i<matrowcnt(PUr);i=i+1) begin
							matrowget(PUr,i,PUrw);
							PUArtCodes[POr.OrdNr & "_" & PUrw.ArtCode] = PUArtCodes[POr.OrdNr & "_" & PUrw.ArtCode] + PUrw.Quant;
							ISr.Code = PUrw.ArtCode;
							ISr.Location = PUrw.Location;
							if (blank(PUrw.Location)) then begin ISr.Location = PUr.Location; end;
							if (ReadFirstMain(ISr,2,true)) then begin 
								if (ISr.Instock - ISr.RsrvQty<=0) then begin
									PUArtCodes[POr.OrdNr & "_" & PUrw.ArtCode] = 0;
								end;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	for (i=0;i<aORrs.length;i=i+1) begin
		if (vClientORrs[aORrs[i]]) then begin
			ORr.SerNr = aORrs[i];
			if (ReadFirstMain(ORr,1,true)) then begin
				for (j=0;j<matrowcnt(ORr);j=j+1) begin
					matrowget(ORr,j,ORrw);
					ReserClQty = PUArtCodes[ORr.SerNr & "_" & ORrw.ArtCode] - ORrw.Shipd2;
					CISr.ItemCode = ORrw.ArtCode;
					CISr.OrderNr = ORr.SerNr;
					if(ReadFIrstMain(CISr,2,true)) then begin
						if (ReserClQty<0) then begin ReserClQty = 0; end;
						CISr.Quant = ReserClQty;
						if (ORr.Closed==1) then begin 
							RecordDelete(CISr);
							logtext(0,"Delete client reserve" & CISr.ItemCode & " " & CISr.Quant & " " & CISr.OrderNr);
						end else begin
							if(recordStore (CISr,true))then begin
								logtext(0,"recalc PU " & CISr.ItemCode & " " & CISr.Quant);
							end;
						end;
					end else begin
						if (ORr.Closed==0) then begin
							RecordNew(CISr);
							CISr.ItemCode = ORrw.ArtCode;
							CISr.OrderNr = ORr.SerNr;
							if (ReserClQty<0) then begin ReserClQty = 0; end;
							if (ORr.Closed==1) then begin ReserClQty = 0; end;
							CISr.Quant = ReserClQty;
							if(recordStore (CISr,true))then begin
								logtext(0,"recalc PU " & CISr.ItemCode & " " & CISr.Quant);
							end;
						end;
					end;
				end;
			end;
		end;
	end;
return
end;








global
webpublic updating procedure WebNewMaintAddToDBMn()
begin
	record IVVc IVr, IVr2;
	record POVc POr, POr2;
	record ItemHistVc IHr, IHr2;
	record SHVc SHr, SHr2;
	boolean TrHs;
	integer j, i;
	
	IVr.SerNr = 9999;
	POr.SerNr = 9999;
	IHr.SerNr = 9999;
	SHr.SerNr = 9999;
	
	readlastmain(IVr2,1,false);
	readlastmain(POr2,1,false);
	readlastmain(IHr2,1,false);
	readlastmain(SHr2,1,false);
	
	/*
	RecordCopy(IVr2,IVr);
	RecordCopy(POr2,POr);
	RecordCopy(IHr2,IHr);
	RecordCopy(SHr2,SHr);
	*/
	logtext(0,"IV maint started");
	j = 0;
	for(i=0;i<10000;i=i+1) begin
		IVr2.SerNr = NextSerNr("IVVc",CurrentDate,-1,false,"");
		RecordStore(IVr2,false);
		j = j + 1;
		if(j==1000)then begin
			j = 0;
			DBFlush;
			DBHold;
		end;
	end;
	logtext(0,"IV maint ended, PO started");
	j = 0;
	for(i=0;i<10000;i=i+1) begin
		POr2.SerNr = NextSerNr("POVc",CurrentDate,-1,false,"");
		RecordStore(POr2,false);
		j = j + 1;
		if(j==1000)then begin
			DBFlush;
			DBHold;
			j = 0;
		end;
	end;
	logtext(0,"PO maint ended, ItemHist started");
	j = 0;
	for(i=0;i<10000;i=i+1) begin
		IHr2.SerNr = NextSerNr("ItemHistVc",CurrentDate,-1,false,"");
		RecordStore(IHr2,false);
		j = j + 1;
		if(j==1000)then begin
			j = 0;
			DBFlush;
			DBHold;
		end;
	end;
	logtext(0,"ItemHist maint ended, SH started");
	j = 0;
	for(i=0;i<10000;i=i+1) begin
		SHr2.SerNr = NextSerNr("SHVc",CurrentDate,-1,false,"");
		RecordStore(SHr2,false);
		j = j + 1;
		if(j=1000)then begin
			DBFlush;
			DBHold;
			j = 0;
		end;
	end;
	logtext(0,"SH maint ended");
	
	
return;
end;


global webpublic updating procedure WebFixObjInIP()
begin
record IPVc IPr;
record TRVc TRr,oldTRr;
row TRVc TRrw;
integer rwcnt,i;
boolean changed;

	setcompany(18,false);
	
	while(loopmain(IPr,1,true))begin
		if(IPr.PayMode=="VZ")then begin
			TRr.Number = IPr.SerNr;
			TRr.IntYc = IPYc;
			if(readfirstmain(TRr,2,true))then begin
				recordcopy(oldTRr,TRr);
				changed = false;
				rwcnt = matrowcnt(TRr);
				for(i=0;i<rwcnt;i=i+1)begin
					matrowget(TRr,i,TRrw);
					if(TRrw.AccNumber=="76/01")then begin
						if(nonblank(TRrw.Objects) and setinset("E131",TRrw.Objects))then begin
							logtext(0,"before " & TRr.Number & " " & TRrw.AccNumber & " " & TRrw.Objects);
							logtext(0,"after  " & TRr.Number & " " & TRrw.AccNumber & " " & StrReplace(TRrw.Objects,"E131","E137"));
							TRrw.Objects = StrReplace(TRrw.Objects,"E131","E137");
							MatRowPut(TRr,i,TRrw);
							changed = true;
						end;
					end;
				end;
				if(changed)then begin
					recordupdate(oldTRr,TRr,true);
				end;
			end;
		end;
	end;

return;
end;



global webpublic updating procedure WebdelEmptItem ()
begin
record INVc INr;


	SetCompany (18,false);
	INr.Code = "";
	if (ReadFirstMain(INr,1,true)) then begin
		RecordDelete(INr);	
	end;


return 
end;

global webpublic updating procedure WebAFFPOVc()
begin
	record POVc POr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF;
	string 20 tstr;
	integer pos;
	boolean change;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	while(loopmain(BPIBrandr,1,true))begin
		tstr = "";
		pos = 0;
		
		ExtractObj(BPIBrandr.Vendor,pos,tstr);
		while(nonblank(tstr))begin
			if(nonblank(tstr))then begin
				vVendAFF[tstr] = BPIBrandr.CWHCode;
				ExtractObj(BPIBrandr.Vendor,pos,tstr);
			end;
		end;
	end;
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(POr,1,true))begin
		if(setinset("AFF",POr.Objects))then begin
			weboutstring("<tr>");
			weboutstring("<td>" & POr.SerNr & "</td>");
			weboutstring("<td>" & POr.TransDate & "</td>");
			weboutstring("<td>" & POr.VECode & "</td>");
			weboutstring("<td>" & vVendAFF[POr.VECode] & "</td>");
			
			switch(vVendAFF[POr.VECode]) begin 
				case "CWH1": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											POr.Objects = StrReplace(POr.Objects,"AFF","AFF_TW");
											recordstore(POr,true);
										end;
				case "CWH2": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											POr.Objects = StrReplace(POr.Objects,"AFF","AFF_TW");
											recordstore(POr,true);
										end;
				case "CWH3": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											POr.Objects = StrReplace(POr.Objects,"AFF","AFF_CR");
											recordstore(POr,true);
										end;
				case "CWH4": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											POr.Objects = StrReplace(POr.Objects,"AFF","AFF_CR");
											recordstore(POr,true);
										end;
				otherwise weboutstring("<td>" & "***********************************" & "</td>");
			end;
			
			weboutstring("</tr>");
		end;
	end;
	weboutstring("</table>");

return;
end;

updating function boolean UpdateAFFTransFromPU(record PUVc PUr)
begin
	record TRVc TRr,oldTRr;
	row TRVc TRrw;
	integer i,rwcnt;
	boolean chngd;
	string 20 affobj;
	boolean res;
	
	res = false;
	
	TRr.Number = PUr.SerNr;
	TRr.IntYc = PUYc;
	chngd = false;
	if(readfirstmain(TRr,2,true))then begin
		rwcnt = matrowcnt(TRr);
		recordcopy(oldTRr,TRr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(TRr,i,TRrw);
			if(setinset("AFF",TRrw.Objects))then begin
				affobj = "";
				GetObjs("SUBDI",PUr.Objects,affobj);
				if(nonblank(affobj))then begin
					TRrw.Objects = StrReplace(TRrw.Objects,"AFF",affobj);
					matrowput(TRr,i,TRrw);
					chngd = true;
				end;
			end;
		end;
		if(chngd)then begin
			res = recordupdate(oldTRr,TRr,true)==0;
			if(res)then begin
				weboutstring("<td>" & "UPDATED" & "</td>");
			end else begin
				weboutstring("<td>" & "ERROR++++++++++++++++++++++++++++" & "</td>");
			end;
		end else begin
			res = true;
			weboutstring("<td>" & "GoodRecord" & "</td>");
		end;
	end else begin
		res = true;
		weboutstring("<td>" & "NORECORD" & "</td>");
	end;
	
	UpdateAFFTransFromPU = res;
return;
end;

global webpublic updating procedure WebAFFPUVc()
begin
	record PUVc PUr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos;
	boolean change;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	record POVc POr;
	
	blockload(OTACb);
	rwcnt = matrowcnt(OTACb);
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(OTACb,i,OTACrw);
		if(nonblank(OTACrw.FOB))then begin
			vFOBAff[OTACrw.FOB] = OTACrw.SUBDI;
		end;
	end;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	while(loopmain(BPIBrandr,1,true))begin
		tstr = "";
		pos = 0;
		
		ExtractObj(BPIBrandr.Vendor,pos,tstr);
		while(nonblank(tstr))begin
			if(nonblank(tstr))then begin
				vVendAFF[tstr] = BPIBrandr.CWHCode;
				ExtractObj(BPIBrandr.Vendor,pos,tstr);
			end;
		end;
	end;
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(PUr,1,true))begin
		if(setinset("AFF",PUr.Objects))then begin
			weboutstring("<tr>");
			weboutstring("<td>" & PUr.SerNr & "</td>");
			weboutstring("<td>" & PUr.TransDate & "</td>");
			weboutstring("<td>" & PUr.VECode & "</td>");
			weboutstring("<td>" & vVendAFF[PUr.VECode] & "</td>");
			
			switch(vVendAFF[PUr.VECode]) begin 
				case "CWH1": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											PUr.Objects = StrReplace(PUr.Objects,"AFF","AFF_TW");
											if(UpdateAFFTransFromPU(PUr))then begin
												recordstore(PUr,true);
											end;
										end;
				case "CWH2": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											PUr.Objects = StrReplace(PUr.Objects,"AFF","AFF_TW");
											if(UpdateAFFTransFromPU(PUr))then begin
												recordstore(PUr,true);
											end;
										end;
				case "CWH3": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											PUr.Objects = StrReplace(PUr.Objects,"AFF","AFF_CR");
											if(UpdateAFFTransFromPU(PUr))then begin
												recordstore(PUr,true);
											end;
										end;
				case "CWH4": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											PUr.Objects = StrReplace(PUr.Objects,"AFF","AFF_CR");
											if(UpdateAFFTransFromPU(PUr))then begin
												recordstore(PUr,true);
											end;
										end;
				otherwise 
										fobobj = "";
					 					GetObjs("FOB",PUr.Objects,fobobj);
										if(nonblank(fobobj))then begin
											if(nonblank(vFOBAff[fobobj]))then begin 
												weboutstring("<td>" & vFOBAff[fobobj] & "</td>");
												if(change)then begin
													PUr.Objects = StrReplace(PUr.Objects,"AFF",vFOBAff[fobobj]);
													recordstore(PUr,true);
												end;
											end else begin
												if(PUr.PONr>-1)then begin
													POr.SerNr = PUr.PONr;
													if(readfirstmain(POr,1,true))then begin
														if(setinset("AFF_TW",POr.Objects))then begin
															weboutstring("<td>" & "AFF_TW" & "</td>");
															if(change)then begin
																PUr.Objects = StrReplace(PUr.Objects,"AFF","AFF_TW");
																if(UpdateAFFTransFromPU(PUr))then begin
																	recordstore(PUr,true);
																end;
															end;
														end;
														if(setinset("AFF_CR",POr.Objects))then begin
															weboutstring("<td>" & "AFF_CR" & "</td>");
															if(change)then begin
																PUr.Objects = StrReplace(PUr.Objects,"AFF","AFF_CR");
																if(UpdateAFFTransFromPU(PUr))then begin
																	recordstore(PUr,true);
																end;
															end;
														end;
													end;
												end else begin
													weboutstring("<td>" & "***********************************" & "</td>");
												end;
											end;
										end else begin
											weboutstring("<td>" & "***********************************" & "</td>");
										end;
			end;
			
			weboutstring("</tr>");
		end else begin
			if(setinset("AFF_CR",PUr.Objects) or setinset("AFF_TW",PUr.Objects))then begin
				weboutstring("<tr>");
					weboutstring("<td>" & PUr.SerNr & "</td>");
					weboutstring("<td>" & PUr.TransDate & "</td>");
					weboutstring("<td>" & PUr.VECode & "</td>");
					weboutstring("<td>" & vVendAFF[PUr.VECode] & "</td>");
					UpdateAFFTransFromPU(PUr);
				weboutstring("</tr>");
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;


updating function boolean UpdateAFFTransFromRetPU(record RetPUVc RetPUr)
begin
	record TRVc TRr,oldTRr;
	row TRVc TRrw;
	integer i,rwcnt;
	boolean chngd;
	string 20 affobj;
	boolean res;
	
	res = false;
	
	TRr.Number = RetPUr.SerNr;
	TRr.IntYc = RetPUYc;
	chngd = false;
	if(readfirstmain(TRr,2,true))then begin
		rwcnt = matrowcnt(TRr);
		recordcopy(oldTRr,TRr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(TRr,i,TRrw);
			if(setinset("AFF",TRrw.Objects))then begin
				affobj = "";
				GetObjs("SUBDI",RetPUr.Objects,affobj);
				if(nonblank(affobj))then begin
					TRrw.Objects = StrReplace(TRrw.Objects,"AFF",affobj);
					matrowput(TRr,i,TRrw);
					chngd = true;
				end;
			end;
		end;
		if(chngd)then begin
			res = recordupdate(oldTRr,TRr,true)==0;
			if(res)then begin
				weboutstring("<td>" & "UPDATED" & "</td>");
			end else begin
				weboutstring("<td>" & "ERROR++++++++++++++++++++++++++++" & "</td>");
			end;
		end else begin
			res = true;
			weboutstring("<td>" & "GoodRecord" & "</td>");
		end;
	end else begin
		res = true;
		weboutstring("<td>" & "NORECORD" & "</td>");
	end;
	
	UpdateAFFTransFromRetPU = res;
return;
end;

global webpublic updating procedure WebAFFRetPUVc()
begin
	record RetPUVc RetPUr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos;
	boolean change;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	
	blockload(OTACb);
	rwcnt = matrowcnt(OTACb);
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(OTACb,i,OTACrw);
		if(nonblank(OTACrw.FOB))then begin
			vFOBAff[OTACrw.FOB] = OTACrw.SUBDI;
		end;
	end;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	while(loopmain(BPIBrandr,1,true))begin
		tstr = "";
		pos = 0;
		
		ExtractObj(BPIBrandr.Vendor,pos,tstr);
		while(nonblank(tstr))begin
			if(nonblank(tstr))then begin
				vVendAFF[tstr] = BPIBrandr.CWHCode;
				ExtractObj(BPIBrandr.Vendor,pos,tstr);
			end;
		end;
	end;
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(RetPUr,1,true))begin
		if(setinset("AFF",RetPUr.Objects))then begin
			weboutstring("<tr>");
			weboutstring("<td>" & RetPUr.SerNr & "</td>");
			weboutstring("<td>" & RetPUr.TransDate & "</td>");
			weboutstring("<td>" & RetPUr.VECode & "</td>");
			weboutstring("<td>" & vVendAFF[RetPUr.VECode] & "</td>");
			
			switch(vVendAFF[RetPUr.VECode]) begin 
				case "CWH1": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											RetPUr.Objects = StrReplace(RetPUr.Objects,"AFF","AFF_TW");
											if(UpdateAFFTransFromRetPU(RetPUr))then begin
												recordstore(RetPUr,true);
											end;
										end;
				case "CWH2": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											RetPUr.Objects = StrReplace(RetPUr.Objects,"AFF","AFF_TW");
											if(UpdateAFFTransFromRetPU(RetPUr))then begin
												recordstore(RetPUr,true);
											end;
										end;
				case "CWH3": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											RetPUr.Objects = StrReplace(RetPUr.Objects,"AFF","AFF_CR");
											if(UpdateAFFTransFromRetPU(RetPUr))then begin
												recordstore(RetPUr,true);
											end;
										end;
				case "CWH4": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											RetPUr.Objects = StrReplace(RetPUr.Objects,"AFF","AFF_CR");
											if(UpdateAFFTransFromRetPU(RetPUr))then begin
												recordstore(RetPUr,true);
											end;
										end;
				otherwise 
										fobobj = "";
					 					GetObjs("FOB",RetPUr.Objects,fobobj);
										if(nonblank(fobobj))then begin
											if(nonblank(vFOBAff[fobobj]))then begin 
												weboutstring("<td>" & vFOBAff[fobobj] & "</td>");
												if(change)then begin
													RetPUr.Objects = StrReplace(RetPUr.Objects,"AFF",vFOBAff[fobobj]);
													if(UpdateAFFTransFromRetPU(RetPUr))then begin
														recordstore(RetPUr,true);
													end;
												end;
											end else begin
												weboutstring("<td>" & "***********************************" & "</td>");
											end;
										end else begin
											weboutstring("<td>" & "***********************************" & "</td>");
										end;
			end;
			
			weboutstring("</tr>");
		end else begin
			if(setinset("AFF_CR",RetPUr.Objects) or setinset("AFF_TW",RetPUr.Objects))then begin
				weboutstring("<tr>");
					weboutstring("<td>" & RetPUr.SerNr & "</td>");
					weboutstring("<td>" & RetPUr.TransDate & "</td>");
					weboutstring("<td>" & RetPUr.VECode & "</td>");
					weboutstring("<td>" & vVendAFF[RetPUr.VECode] & "</td>");
					UpdateAFFTransFromRetPU(RetPUr);
				weboutstring("</tr>");
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;


updating function boolean UpdateAFFTransFromVI(record VIVc VIr)
begin
	record TRVc TRr,oldTRr;
	row TRVc TRrw;
	integer i,rwcnt;
	boolean chngd;
	string 20 affobj;
	boolean res;
	
	res = false;
	
	TRr.Number = VIr.SerNr;
	TRr.IntYc = VIYc;
	chngd = false;
	if(readfirstmain(TRr,2,true))then begin
		rwcnt = matrowcnt(TRr);
		recordcopy(oldTRr,TRr);
		for(i=0;i<rwcnt;i=i+1)begin
			matrowget(TRr,i,TRrw);
			if(setinset("AFF",TRrw.Objects))then begin
				affobj = "";
				GetObjs("SUBDI",VIr.Objects,affobj);
				if(nonblank(affobj))then begin
					TRrw.Objects = StrReplace(TRrw.Objects,"AFF",affobj);
					matrowput(TRr,i,TRrw);
					chngd = true;
				end;
			end;
		end;
		if(chngd)then begin
			res = recordupdate(oldTRr,TRr,true)==0;
			if(res)then begin
				weboutstring("<td>" & "UPDATED" & "</td>");
			end else begin
				weboutstring("<td>" & "ERROR++++++++++++++++++++++++++++" & "</td>");
			end;
		end else begin
			res = true;
			weboutstring("<td>" & "GoodRecord" & "</td>");
		end;
	end else begin
		res = true;
		weboutstring("<td>" & "NORECORD" & "</td>");
	end;
	
	UpdateAFFTransFromVI = res;
return;
end;

global webpublic updating procedure WebAFFVIVc()
begin
	record VIVc VIr;
	record POVc POr;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos;
	boolean change;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	
	blockload(OTACb);
	rwcnt = matrowcnt(OTACb);
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(OTACb,i,OTACrw);
		if(nonblank(OTACrw.FOB))then begin
			vFOBAff[OTACrw.FOB] = OTACrw.SUBDI;
		end;
	end;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	while(loopmain(BPIBrandr,1,true))begin
		tstr = "";
		pos = 0;
		
		ExtractObj(BPIBrandr.Vendor,pos,tstr);
		while(nonblank(tstr))begin
			if(nonblank(tstr))then begin
				vVendAFF[tstr] = BPIBrandr.CWHCode;
				ExtractObj(BPIBrandr.Vendor,pos,tstr);
			end;
		end;
	end;
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(VIr,1,true))begin
		if(setinset("AFF",VIr.Objects))then begin
			weboutstring("<tr>");
			weboutstring("<td>" & VIr.SerNr & "</td>");
			weboutstring("<td>" & VIr.TransDate & "</td>");
			weboutstring("<td>" & VIr.VECode & "</td>");
			weboutstring("<td>" & vVendAFF[VIr.VECode] & "</td>");
			
			switch(vVendAFF[VIr.VECode]) begin 
				case "CWH1": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_TW");
											if(UpdateAFFTransFromVI(VIr))then begin
												recordstore(VIr,true);
											end;
										end;
				case "CWH2": weboutstring("<td>" & "AFF_TW" & "</td>");
										if(change)then begin
											VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_TW");
											if(UpdateAFFTransFromVI(VIr))then begin
												recordstore(VIr,true);
											end;
										end;
				case "CWH3": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_CR");
											if(UpdateAFFTransFromVI(VIr))then begin
												recordstore(VIr,true);
											end;
										end;
				case "CWH4": weboutstring("<td>" & "AFF_CR" & "</td>");
										if(change)then begin
											VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_CR");
											if(UpdateAFFTransFromVI(VIr))then begin
												recordstore(VIr,true);
											end;
										end;
				otherwise 
										fobobj = "";
					 					GetObjs("FOB",VIr.Objects,fobobj);
										if(nonblank(fobobj))then begin
											if(nonblank(vFOBAff[fobobj]))then begin 
												weboutstring("<td>" & vFOBAff[fobobj] & "</td>");
												if(change)then begin
													VIr.Objects = StrReplace(VIr.Objects,"AFF",vFOBAff[fobobj]);
													if(UpdateAFFTransFromVI(VIr))then begin
												recordstore(VIr,true);
											end;
												end;
											end else begin
												weboutstring("<td>" & "***********************************" & "</td>");
											end;
										end else begin
											if(VIr.POSerNr>-1)then begin
lWebAFFVIVc1:;
												POr.SerNr = VIr.POSerNr;
												if(readfirstmain(POr,1,true))then begin
													if(setinset("AFF_TW",POr.Objects))then begin
														weboutstring("<td>" & "AFF_TW" & "</td>");
														if(change)then begin
															VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_TW");
															if(UpdateAFFTransFromVI(VIr))then begin
																recordstore(VIr,true);
															end;
														end;
													end;
													if(setinset("AFF_CR",POr.Objects))then begin
														weboutstring("<td>" & "AFF_CR" & "</td>");
														if(change)then begin
															VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_CR");
															if(UpdateAFFTransFromVI(VIr))then begin
																recordstore(VIr,true);
															end;
														end;
													end;
													if(setinset("AFF",POr.Objects))then begin
														switch(vVendAFF[POr.VECode]) begin 
															case "CWH1": weboutstring("<td>" & "AFF_TW" & "</td>");
																					if(change)then begin
																						VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_TW");
																						if(UpdateAFFTransFromVI(VIr))then begin
																							recordstore(VIr,true);
																						end;
																					end;
															case "CWH2": weboutstring("<td>" & "AFF_TW" & "</td>");
																					if(change)then begin
																						VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_TW");
																						if(UpdateAFFTransFromVI(VIr))then begin
																							recordstore(VIr,true);
																						end;
																					end;
															case "CWH3": weboutstring("<td>" & "AFF_CR" & "</td>");
																					if(change)then begin
																						VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_CR");
																						if(UpdateAFFTransFromVI(VIr))then begin
																							recordstore(VIr,true);
																						end;
																					end;
															case "CWH4": weboutstring("<td>" & "AFF_CR" & "</td>");
																					if(change)then begin
																						VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_CR");
																						if(UpdateAFFTransFromVI(VIr))then begin
																							recordstore(VIr,true);
																						end;
																					end;
															otherwise weboutstring("<td>" & "***********************************" & "</td>");
														end;
			
													end;
												end;
											end else begin
												if(nonblank(VIr.VATNr))then begin
													if(setinset("AFF_TW",VIr.VATNr))then begin
														weboutstring("<td>" & "AFF_TW" & "</td>");
														if(change)then begin
															VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_TW");
															if(UpdateAFFTransFromVI(VIr))then begin
																recordstore(VIr,true);
															end;
														end;
													end;
													if(setinset("AFF_CR",VIr.VATNr))then begin
														weboutstring("<td>" & "AFF_CR" & "</td>");
														if(change)then begin
															VIr.Objects = StrReplace(VIr.Objects,"AFF","AFF_CR");
															if(UpdateAFFTransFromVI(VIr))then begin
																recordstore(VIr,true);
															end;
														end;
													end;
												end else begin
													weboutstring("<td>" & "***********************************" & "</td>");	
												end;
											end;		
										end;
			end;
			
			weboutstring("</tr>");
		end else begin
			if(setinset("AFF_CR",VIr.Objects) or setinset("AFF_TW",VIr.Objects))then begin
				weboutstring("<tr>");
					weboutstring("<td>" & VIr.SerNr & "</td>");
					weboutstring("<td>" & VIr.TransDate & "</td>");
					weboutstring("<td>" & VIr.VECode & "</td>");
					weboutstring("<td>" & vVendAFF[VIr.VECode] & "</td>");
					UpdateAFFTransFromVI(VIr);
				weboutstring("</tr>");
			end else begin
				if(VIr.POSerNr>-1)then begin
					if(nonblank(VIr.Objects))then begin
						VIr.Objects = VIr.Objects & "," & "AFF";
					end else begin
						VIr.Objects = "AFF";
					end;
					weboutstring("<tr>");
					weboutstring("<td>" & VIr.SerNr & "</td>");
					weboutstring("<td>" & VIr.TransDate & "</td>");
					weboutstring("<td>" & VIr.VECode & "</td>");
					weboutstring("<td>" & vVendAFF[VIr.VECode] & "</td>");
					goto lWebAFFVIVc1;
				end;
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;


global webpublic updating procedure WebAFFOPVc()
begin
	record VIVc VIr;
	record POVc POr;
	record OPVc OPr;
	row OPVc OPrw;
	record BPIBrandVc BPIBrandr;
	vector string 20 vVendAFF,vFOBAff;
	string 20 tstr,fobobj;
	integer pos,opi,oprwcnt;
	boolean change,changed;
	record OTypeAddControlBlock OTACb;
	row OTypeAddControlBlock OTACrw;
	integer i,rwcnt;
	record CUVc CUr;
	
	blockload(OTACb);
	rwcnt = matrowcnt(OTACb);
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(OTACb,i,OTACrw);
		if(nonblank(OTACrw.FOB))then begin
			vFOBAff[OTACrw.FOB] = OTACrw.SUBDI;
		end;
	end;
	
	change = false;
	if(webgetarg("change")=="true")then begin
		change = true;
	end;
	
	while(loopmain(BPIBrandr,1,true))begin
		tstr = "";
		pos = 0;
		
		ExtractObj(BPIBrandr.Vendor,pos,tstr);
		while(nonblank(tstr))begin
			if(nonblank(tstr))then begin
				vVendAFF[tstr] = BPIBrandr.CWHCode;
				ExtractObj(BPIBrandr.Vendor,pos,tstr);
			end;
		end;
	end;
	
	setcompany(18,false);
	weboutstring("<table>");
	while(loopmain(OPr,1,true))begin
		oprwcnt = matrowcnt(OPr);
		changed = false;
		for(opi=0;opi<oprwcnt;opi=opi+1)begin
			matrowget(OPr,opi,OPrw);
			if(setinset("AFF",OPrw.Objects))then begin
				weboutstring("<tr>");
				weboutstring("<td>" & OPr.SerNr & "</td>");
				weboutstring("<td>" & OPr.TransDate & "</td>");
				weboutstring("<td>" & OPrw.VECode & "</td>");
				weboutstring("<td>" & vVendAFF[OPrw.VECode] & "</td>");
			
				switch(vVendAFF[OPrw.VECode]) begin 
					case "CWH1": weboutstring("<td>" & "AFF_TW" & "</td>");
												OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_TW");
												changed = true;
												matrowput(OPr,opi,OPrw);
					case "CWH2": weboutstring("<td>" & "AFF_TW" & "</td>");
												OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_TW");
												changed = true;
												matrowput(OPr,opi,OPrw);
					case "CWH3": weboutstring("<td>" & "AFF_CR" & "</td>");
												OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_CR");
												changed = true;
												matrowput(OPr,opi,OPrw);
					case "CWH4": weboutstring("<td>" & "AFF_CR" & "</td>");
												OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_CR");
												matrowput(OPr,opi,OPrw);
					otherwise 
											fobobj = "";
											GetObjs("FOB",OPrw.Objects,fobobj);
											if(blank(fobobj))then begin
												CUr.Code = OPrw.VECode;
												if(readfirstmain(CUr,1,true))then begin
													GetObjs("FOB",CUr.VEObjects,fobobj);
												end;
											end;
											if(nonblank(fobobj))then begin
												if(nonblank(vFOBAff[fobobj]))then begin 
													weboutstring("<td>" & vFOBAff[fobobj] & "</td>");
													OPrw.Objects = StrReplace(OPrw.Objects,"AFF",vFOBAff[fobobj]);
													matrowput(OPr,opi,OPrw);
												end else begin
													weboutstring("<td>" & "***********************************" & "</td>");
												end;
											end else begin
												if(OPrw.VISerNr>-1)then begin
	lWebAFFOPVc1:;
													VIr.SerNr = OPrw.VISerNr;
													if(readfirstmain(VIr,1,true))then begin
														if(setinset("AFF_TW",VIr.Objects))then begin
															weboutstring("<td>" & "AFF_TW" & "</td>");
															OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_TW");
															matrowput(OPr,opi,OPrw);
														end;
														if(setinset("AFF_CR",VIr.Objects))then begin
															weboutstring("<td>" & "AFF_CR" & "</td>");
															OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_CR");
															matrowput(OPr,opi,OPrw);
														end;
													end else begin
														if(nonblank(VIr.VATNr))then begin
															if(setinset("AFF_TW",VIr.VATNr))then begin
																weboutstring("<td>" & "AFF_TW" & "</td>");
																OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_TW");
																matrowput(OPr,opi,OPrw);
															end;
															if(setinset("AFF_CR",VIr.VATNr))then begin
																weboutstring("<td>" & "AFF_CR" & "</td>");
																OPrw.Objects = StrReplace(OPrw.Objects,"AFF","AFF_CR");
																matrowput(OPr,opi,OPrw);
															end;
														end 
														else begin
															fobobj = "";
															GetObjs("FOB",VIr.Objects,fobobj);
															if(nonblank(fobobj))then begin
																if(nonblank(vFOBAff[fobobj]))then begin 
																	weboutstring("<td>" & vFOBAff[fobobj] & "</td>");
																	OPrw.Objects = StrReplace(OPrw.Objects,"AFF",vFOBAff[fobobj]);
																	matrowput(OPr,opi,OPrw);
																end else begin
																	weboutstring("<td>" & "***********************************" & "</td>");
																end;
															end else begin
																weboutstring("<td>" & "***********************************" & "</td>");	
															end;
														end;
													end;
												end;		
											end;
				end;
			
				weboutstring("</tr>");
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;

global webpublic updating procedure WebAFFCLOUTVc()
begin
	record CLOutVc CLOutr;
	
	weboutstring("<table>");
	while(loopmain(CLOutr,1,true))begin
		if(setinset("AFF",CLOutr.Objects))then begin
			weboutstring("<tr>");
				weboutstring("<td>" & CLOutr.SerNr & "</td>");	
				weboutstring("<td>" & CLOutr.Objects & "</td>");	
				weboutstring("<td>" & CLOutr.Addr4 & "</td>");
				if(nonblank(CLOutr.Addr4))then begin
					if(CLOutr.Addr4=="AFF_TW" or CLOutr.Addr4=="AFF_CR")then begin
						CLOutr.Objects = StrReplace(CLOutr.Objects,"AFF",CLOutr.Addr4);
					end;
				end;
			weboutstring("</tr>");
		end;
	end;
	weboutstring("</table>");
	
return;
end;

global webpublic updating procedure WebFixSutra()
begin
	record INVc INr,IN2r;
	boolean TrHs,testf,TrHs2;
	record ItemStatusVc ISr;
	record ItemHistVc IHr;
	integer ihcounter;
	record GlobalItemVc GIr,GI2r;
	
	setcompany(18,false);
	
	INr.Group = "SUTRA";
	TrHs = true;
	weboutstring("<table>");
	while(loopkey("Group",INr,1,TrHs))begin
		testf = true;
		if(INr.Group!="SUTRA")then begin TrHs = false; testf = false;  end;
		if(INr.BPIBrand!="BRND0199")then begin testf = false;  end;
	
		if(testf)then begin
			/*if(currentcompany==20)then begin
				ihcounter = 0;
				IHr.ArtCode = INr.Code;
				TrHs2 = true;
				while(loopkey("ArtCode",IHr,1,TrHs2))begin
					if(IHr.ArtCode!=INr.Code)then begin TrHs2 = false; end;
					if(TrHs2 and IHr.StockAffectf==1)then begin
						ihcounter = ihcounter + 1;
					end;
				end;
				resetloop(IHr);
			end;*/
			if(currentcompany==18)then begin
				INr.BPIBrand = "BRND0197";
				/*if(nonblank(INr.GlobalArtCode))then begin
					GIr.Code = INr.GlobalArtCode;
					if(readfirstmain(GIr,1,true))then begin
						GI2r.Code = StrReplace(INr.GlobalArtCode,"BRND0199","BRND0197");
						if(readfirstmain(GI2r,1,true)==false)then begin
							recordcopy(GI2r,GIr);
							GI2r.Code = StrReplace(INr.GlobalArtCode,"BRND0199","BRND0197");
							recordstore(GI2r,true);
						end;
					end;
					INr.GlobalArtCode = StrReplace(INr.GlobalArtCode,"BRND0199","BRND0197");
				end;*/
				INr.GlobalArtCode = StrReplace(INr.GlobalArtCode,"BRND0199","BRND0197");
				if(nonblank(INr.DispGroups))then begin
					INr.DispGroups = StrReplace(INr.DispGroups,"BRND0199","BRND0197");
				end;
				recordstore(INr,true);
			end;
			weboutstring("<tr>");
			weboutstring("<td>" & INr.Code & "</td>");
			weboutstring("<td>" & INr.Name & "</td>");
			weboutstring("<td>" & INr.BPIBrand & "</td>");
			weboutstring("<td>" & ihcounter & "</td>");

			weboutstring("</tr>");
		end;
	end;
	weboutstring("</table>");

return;
end;

global webpublic procedure WebFixSutraHist()
begin
	record INVc INr,IN2r;
	boolean TrHs,testf,TrHs2;
	record ItemStatusVc ISr;
	record ItemHistVc IHr;
	integer ihcounter;
	record GlobalItemVc GIr,GI2r;
	record PLVc PLr;
	
	
	setcompany(20,false);
	
	INr.Group = "SUTRA";
	TrHs = true;
	weboutstring("<table>");
	while(loopkey("Group",INr,1,TrHs))begin
		testf = true;
		if(INr.Group!="SUTRA")then begin TrHs = false; testf = false;  end;
		if(INr.BPIBrand!="BRND0199")then begin testf = false;  end;
		if(left(INr.Code,3)!="IN_")then begin testf = false;  end;
	
		if(testf)then begin
			if(currentcompany==20)then begin
				ihcounter = 0;
				IHr.ArtCode = INr.Code;
				TrHs2 = true;
				while(loopkey("ArtCode",IHr,1,TrHs2))begin
					if(IHr.ArtCode!=INr.Code)then begin TrHs2 = false; end;
					if(TrHs2 and IHr.StockAffectf==1)then begin
						ihcounter = ihcounter + 1;
					end;
				end;
				resetloop(IHr);
			end;
			if(currentcompany==20)then begin
				IN2r.Code = INr.AlternativeCode;
				if(readfirstmain(IN2r,1,true))then begin
				
				end;
			end;
			ISr.Code = INr.Code;
			ISr.Location = ";;;";
			readfirstmain(ISr,2,true);
			weboutstring("<tr>");
			weboutstring("<td>" & INr.Code & "</td>");
			weboutstring("<td>" & INr.Name & "</td>");
			weboutstring("<td>" & INr.BPIBrand & "</td>");
			weboutstring("<td>" & INr.LastPurchPrice2 & "</td>");
			weboutstring("<td>" & ISr.Instock & "</td>");
			weboutstring("<td>" & IN2r.Code & "</td>");
			weboutstring("<td>" & IN2r.Name & "</td>");
			PLr.ArtCode = INr.Code;
			PLr.PLCode = "RRP";
			readfirstmain(PLr,2,true);
			weboutstring("<td>" & PLr.ExVatPrice & "</td>");
			weboutstring("<td>" & PLr.CurncyCode & "</td>");
			PLr.ArtCode = IN2r.Code;
			PLr.PLCode = "RRP";
			readfirstmain(PLr,2,true);
			weboutstring("<td>" & PLr.ExVatPrice & "</td>");
			weboutstring("<td>" & PLr.CurncyCode & "</td>");

			weboutstring("</tr>");
		end;
	end;
	weboutstring("</table>");

return;
end;

global webpublic updating procedure WebUpdatePROMO()
begin
	integer compnr;
	date d1,d2;
	area importfile,aperiods;
	vector boolean artcode;
	longint cntlin,i,j,rwcnt,periods,kk;
	string 20 sd1,sd2,sart,promo,apric,areb,promoacc,updtef;
	record IVVc IVr;
	row IVVc IVrw;
	boolean TrHs;
	integer items,counter,oscnt,k;
	boolean changed,ispric;
	array string 10 aapric,aareb;
	record INVc INr;
	
	logtext(0,"WebUpdatePROMO");
	updtef = webgetarg("updtef");
	compnr = stringtoint(webgetarg("compnr"));
	logtext(0,"compnr " & compnr);
	promoacc = webgetarg("promoobj");
	
	addfiletoarea("PromoRecalc/" & webgetarg("filename") & "-periods",aperiods,false);
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin_Lic.txt&promoobj=PR_LIC&updtef=true
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=7&filename=Amb_Lic.txt&promoobj=PR_LIC&updtef=true
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=7&filename=AmbLic1.txt&promoobj=PR_LIC&updtef=true
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=7&filename=AmbPromo.txt&promoobj=PR_PROMO&updtef=true
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=7&filename=AmbRemove.txt&promoobj=REMOVE&updtef=true
	
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=20&filename=ElluxusLic.txt&promoobj=PR_LIC&updtef=true
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=20&filename=ElluxusLic1.txt&promoobj=PR_LIC&updtef=true
	// http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=20&filename=ElluxusLic2.txt&promoobj=PR_LIC&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=22&filename=GL_T-Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=22&filename=GL_T-REMOVE.txt&promoobj=REMOVE&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=3&filename=RCol1_Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=3&filename=RCol1_REMOVE.txt&promoobj=REMOVE&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=24&filename=RCol2_Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=24&filename=RCol2_Lic1.txt&promoobj=PR_LIC&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=16&filename=XTR_Day.txt&promoobj=PR_TIME&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=16&filename=XTR_Remove.txt&promoobj=REMOVE&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=16&filename=XTR_Spec.txt&promoobj=PR_SPEC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=16&filename=XTR_Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=16&filename=XTR_Season.txt&promoobj=PR_SEASON&updtef=true   !!!!
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=1&filename=SW_Season.txt&promoobj=PR_SEASON&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=1&filename=SW_Spec.txt&promoobj=PR_SPEC&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=4&filename=VB-Spec.txt&promoobj=PR_SPEC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=4&filename=VB-Season.txt&promoobj=PR_SEASON&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=4&filename=VB-Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=4&filename=VB-Day.txt&promoobj=PR_TIME&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=4&filename=VB-Mag.txt&promoobj=PR_MAGAZ&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=2&filename=Lladro-Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=2&filename=Lladro-Spec.txt&promoobj=PR_SPEC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=2&filename=Lladro-Pred.txt&promoobj=PR_PREORD&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=5&filename=Rosental-Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=5&filename=Rosental-Spec.txt&promoobj=PR_SPEC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=5&filename=Rosental-Promo.txt&promoobj=PR_PROMO&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=8&filename=YD-Lic.txt&promoobj=PR_LIC&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic1.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic2.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic3.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic4.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic5.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic6.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic7.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic8.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic9.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic91.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic92.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic93.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic94.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic95.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic96.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic97.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Lic98.txt&promoobj=PR_LIC&updtef=true


	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Magaz.txt&promoobj=PR_MAGAZ&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Magaz1.txt&promoobj=PR_MAGAZ&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Magaz2.txt&promoobj=PR_MAGAZ&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Promo.txt&promoobj=PR_PROMO&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Season.txt&promoobj=PR_SEASON&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Spec.txt&promoobj=PR_SPEC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=25&filename=Coin-Day.txt&promoobj=PR_TIME&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=23&filename=Chopard-Lic.txt&promoobj=PR_LIC&updtef=true
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=23&filename=Chopard-Remove.txt&promoobj=REMOVE&updtef=true
	
	//http://idhansa.italdizain.az:8034/WebUpdatePROMO.hal?compnr=21&filename=GL_J_Lic.txt&promoobj=PR_LIC&updtef=true
	
	weboutstring("<table>");
	periods = countlinesinarea(aperiods);
	for(kk=0;kk<periods;kk=kk+1)begin
		d1 = stringtodate(GetTabTextFromArea(kk,0,aperiods));
		d2 = stringtodate(GetTabTextFromArea(kk,1,aperiods));
		weboutstring("<tr>");
			weboutstring("<td>" & "d1:" & "</td>");
			weboutstring("<td>" & d1 & "</td>");
			weboutstring("<td>" & "d2:" & "</td>");
			weboutstring("<td>" & d2 & "</td>");
		weboutstring("</tr>");
		if(compnr>0)then begin
			
			logtext(0,"d1 " & d1);
			logtext(0,"d2 " & d2);
			if(nonblankdate(d1) and nonblankdate(d2))then begin
				logtext(0,"filename " & webgetarg("filename"));
				if(nonblank(webgetarg("filename")))then begin
					setcompany(compnr,false);
					addfiletoarea("PromoRecalc/" & webgetarg("filename"),importfile,false);
					cntlin = countlinesinarea(importfile);
					clearVector(artcode);
					for(i=0;i<cntlin;i=i+1)begin
						sd1 = GetTabTextFromArea(i,0,importfile);
						sd2 = GetTabTextFromArea(i,1,importfile);
						sart = GetTabTextFromArea(i,2,importfile);
					
						if(stringtodate(sd1)==d1 and stringtodate(sd2)==d2)then begin
							artcode[sart] = true;
							if(nonblank(sart))then begin
								INr.Code = sart;
								if(readfirstmain(INr,1,true)==false)then begin
									INr.Group = sart;
									TrHs = true;
									while(loopkey("Group",INr,1,TrHs))begin
										if(INr.Group!=sart)then begin TrHs = false; end;
										
										if(TrHs)then begin
											artcode[INr.Code] = true;
											items = items + 1;
										end;
									end;
									resetloop(INr);
								end;
								
							end;
							items = items + 1;
							/*weboutstring("<tr>");
								weboutstring("<td>" & sd1 & "</td>");
								weboutstring("<td>" & sd2 & "</td>");
								weboutstring("<td>" & sart & "</td>");
							weboutstring("</tr>");*/
						end;
					end;
				
					weboutstring("<tr>");
						weboutstring("<td>" & "Items:" & "</td>");
						weboutstring("<td>" & items & "</td>");
					weboutstring("</tr>");
				
					IVr.InvDate = d1;
					TrHs = true;
					while(loopkey("InvDate",IVr,1,TrHs))begin
						if(IVr.InvDate>d2)then begin TrHs = false; end;
					
						if(TrHs)then begin
							changed = false;
							counter = counter + 1;
							rwcnt = matrowcnt(IVr);
							for(j=0;j<rwcnt;j=j+1)begin
								matrowget(IVr,j,IVrw);
								if(artcode[IVrw.ArtCode])then begin
									weboutstring("<tr>");
										weboutstring("<td>" & IVr.SerNr & "</td>");
										weboutstring("<td>" & IVrw.ArtCode & "</td>");
										weboutstring("<td>" & IVr.InvDate & "</td>");
										weboutstring("<td>" & IVrw.Price & "</td>");
										weboutstring("<td>" & IVr.CurncyCode & "</td>");
										weboutstring("<td>" & IVrw.vRebate & "</td>");
								
										promo = "";
										GetObjs("PROMO",IVrw.Objects,promo);
										if(nonblank(promoacc))then begin
											apric = "";
											areb = "";
											oscnt = 0;
											clearArray(aapric);
											ExtractObjectsByType(IVrw.Objects,"APRIC",aapric,oscnt);
											oscnt = 0;
											clearArray(aareb);
											ExtractObjectsByType(IVrw.Objects,"AREB",aareb,oscnt);
											ispric = false;
											for(k=0;k<aapric.length;k=k+1)begin
												ispric = true;
												apric = aapric[k];
												if(nonblank(apric))then begin
													IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,apric);
													changed = true;
												end;
											end;
											for(k=0;k<aareb.length;k=k+1)begin
												areb = aareb[k];
												if(nonblank(areb))then begin
													IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,areb);
													changed = true;
												end;
											end;
											
											if(nonblank(promo))then begin
												IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,promo);
												changed = true;
											end;
											
											if(promoacc!="REMOVE")then begin
												if(ispric==true or IVrw.vRebate>0)then begin
													IVrw.Objects = AddObjectToObjectList(IVrw.Objects,promoacc);      
													changed = true;
												end;
											end;
											if(promoacc=="REMOVE")then begin
												IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,"REMOVE");
												changed = true;
											end;
											if(changed)then begin
												matrowput(IVr,j,IVrw);  
											end;
											
										end;
										weboutstring("<td>" & apric & "</td>");
										weboutstring("<td>" & areb & "</td>");
										weboutstring("<td>" & IVrw.Objects & "</td>");
									weboutstring("</tr>");
								
								end;
							end;
							if(updtef=="true" and changed)then begin
								recordstore(IVr,true);
							end;
						end;
					end;
					resetloop(IVr);
					weboutstring("<tr>");
						weboutstring("<td>" & "Counter:" & "</td>");
						weboutstring("<td>" & counter & "</td>");
					weboutstring("</tr>");
				end;
			end;
		end;
	end;
	weboutstring("</table>");

return;
end;





global webpublic updating procedure WebDeleteGIWithOldDrands()
begin
	record GlobalItemVc GIr;
	row GlobalItemVc GIrw;
	record INvc INr;
	integer i;
	vector boolean ItemExistf;
	array string 255 vtags;

	GIr.Code = "";
	while (loopmain(GIr,1,true)) begin
		for (i=0;i<34;i=i+1) begin
			SetCompany(i+1,false);
			if (CurrentCompany!=28 and CurrentCompany!=29 and CurrentCompany!=18) then begin
				INr.Code = GIr.HansaCode;
				if (ReadFIrstMain(INr,1,true)) then begin
					if (INr.BPIBrand==Left(GIr.Code,len(INr.BPIBrand))) then begin
						ItemExistf[GIr.Code] = true;
					end;
				end;
			end;
		end;
	end;
	resetloop(GIr)
	
	GIr.Code = "ZMAZTest";
	while (loopbackkey("Code",GIr,1,true)) begin
		if (!ItemExistf[GIr.Code] and left(GIr.Code,4)=="BRND" and GIr.ExtProwItRegulations<1) then begin
			for (i=0;i<matrowcnt(GIr);i=i+1) begin
				matrowget(GIr,i,GIrw);
				if (GIrw.Instock>0) then begin
					GIrw.Instock = 0;
					matrowput(GIr,i,GIrw);
				end;
			end;
			RecordStore(GIr,true);
			RecordDelete(GIr);
			WebOutString(GIr.Code);
			weboutstring("<BR>");
		end;
	end;
	
	
	
return;
end;







global webpublic updating procedure WebReportRebPromo()
begin
	record RebVc Rebr;
	boolean TrHs, TrHs2, testf, changed;
	val percentInCode;
	integer compnr; 
	record IVVc IVr;
	row IVVc IVrw;
	integer i, oscnt,k;
	string 255 promo, apric, areb, aprom, DelStr, AddStr, OldObj, NewObj, tstr;
	array string 10 aapric,aareb,aaprom;
	record INVc INr;
	
	
	compnr = stringtoint(webgetarg("compnr"));
	SetCompany(compnr,false);
	Rebr.Code = "";
	TrHs = true;
	while (LoopMain(Rebr,1,TrHs)) begin
		if (left(right(Rebr.Code,3),1)=="_") then begin
			percentInCode = StringToVal(left(Rebr.Code,len(Rebr.Code)-3),M4Val);
		end else begin
			percentInCode = StringToVal(left(Rebr.Code,len(Rebr.Code)-1),M4Val);
		end;
		if (percentInCode!=Rebr.vra0) then begin
			// WebOutString(Rebr.Code & "<=>" & Rebr.vra0 & "<=>" & Rebr.FromDate & "<=>" & Rebr.ToDate);
			// weboutstring("<BR>");
			TrHs2 = true;
			IVr.TransDate = Rebr.FromDate;
			while (loopKey("TransDate",IVr,1,TrHs2)) begin
				testf = true;
				if (IVr.TransDate>Rebr.ToDate) then begin TrHs2 = false; testf = false; end;
				if (IVr.RebCode!=Rebr.Code) then begin testf = false; end;
				if (testf) then begin
					for (i=0;i<matrowcnt(IVr);i=i+1) begin
						matrowget(IVr,i,IVrw);
						// if (IVrw.vRebate==Rebr.vra0 and !SetInSet("PR_MAGAZ",IVrw.Objects)) then begin
							// OldObj = IVrw.Objects;
							// DelStr = "";
							// AddStr = "";
							// changed = false;
							// apric = "";
							// areb = "";
							// oscnt = 0;
							// clearArray(aapric);
							// ExtractObjectsByType(IVrw.Objects,"APRIC",aapric,oscnt);
							// oscnt = 0;
							// clearArray(aareb);
							// ExtractObjectsByType(IVrw.Objects,"AREB",aareb,oscnt);
							// for(k=0;k<aapric.length;k=k+1)begin
								// apric = aapric[k];
								// if(nonblank(apric))then begin
									// IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,apric);
									// if (nonblank(DelStr)) then begin DelStr = DelStr & ","; end;
									// DelStr = DelStr & apric;
									// changed = true;
								// end;
							// end;
							// for(k=0;k<aareb.length;k=k+1)begin
								// areb = aareb[k];
								// if(nonblank(areb))then begin
									// IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,areb);
									// if (nonblank(DelStr)) then begin DelStr = DelStr & ","; end;
									// DelStr = DelStr & areb;
									// changed = true;
								// end;
							// end;
							
							// oscnt = 0;
							// clearArray(aaprom);
							// ExtractObjectsByType(IVrw.Objects,"PROMO",aaprom,oscnt);
							
							// if (oscnt==0) then begin
								// IVrw.Objects = AddObjectToObjectList(IVrw.Objects,"PR_MAGAZ");      
								// changed = true;
							// end;
							
							// AddStr = "PR_MAGAZ";
							// NewObj = IVrw.Objects;
							
							// if(changed)then begin
								// matrowput(IVr,i,IVrw);  
							// end;
							// WebOutString(IVr.SerNr & "<=>" & IVrw.ArtCode & "<=>" & IVrw.vRebate & "<=>" & Rebr.Code & "<=>" & Rebr.vra0 & "<=>" & Rebr.FromDate & "<=>" & Rebr.ToDate & "<=>" & AddStr & "<=>" & DelStr & "<=>" & OldObj & "<=>" & NewObj & "<=>" & CurrentCompany);
							// weboutstring("<BR>");
						// end;
						if (IVrw.vRebate==Rebr.vra0 and SetInSet("PR_MAGAZ",IVrw.Objects)) then begin
							if (IVrw.vRebate==0 or IVrw.vRebate==blankval) then begin
								 IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,"PR_MAGAZ");
								 logtext(0,IVr.SerNr & "  " & IVrw.ArtCode & " zero rebate");
								 matrowput(IVr,i,IVrw);  
							end;
							if (IVrw.stp!=kInvoiceRowTypeNormal and SetInSet("PR_MAGAZ",IVrw.Objects))then begin
								IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,"PR_MAGAZ");
								logtext(0,IVr.SerNr & "  " & IVrw.ArtCode & " ! kInvoiceRowTypeNormal");
								matrowput(IVr,i,IVrw);  
							end;
							if (IVr.TransDate<StringToDate("01/01/2019") and SetInSet("PR_MAGAZ",IVrw.Objects))then begin
								IVrw.Objects = RemoveObjectFromObjectList(IVrw.Objects,"PR_MAGAZ");
								logtext(0,IVr.SerNr & "  " & IVrw.ArtCode & " < 01/01/2019");
								matrowput(IVr,i,IVrw);  
							end;
							if(SetInSet("PR_MAGAZ",IVrw.Objects)) then begin
								WebOutString(IVr.SerNr & "<=>" & IVrw.ArtCode & "<=>" & IVrw.vRebate & "<=>" & Rebr.Code & "<=>" & Rebr.vra0 & "<=>" & Rebr.FromDate & "<=>" & Rebr.ToDate & "<=>" & IVrw.Objects & "<=>" & CurrentCompany);
								weboutstring("<BR>");
							end;
						end;
					end;
					RecordStore(IVr,true);
				end;
			end;
			Resetloop(IVr);
		end;
	end;
return;
end;



global webpublic procedure WebreportIdeaBPIBrands()
begin
	record BPIBrandVc BPIBrandr;
	vector string 255 IDEABrandRefBBICode;
	
	BPIBrandr.Code = "";
	while (loopmain(BPIBrandr,1,true))begin
		if (nonblank(BPIBrandr.IDEABrandRef)) then begin
			WebOutString(BPIBrandr.Code & "<=>" & BPIBrandr.Name);
			weboutstring("<BR>");
		end;
	end;
	

return;
end;




global updating procedure SaveINBPIBrand(record INVc INr)
begin
	recordstore(INr,true);
	logtext(0,INr.Code & " " & INr.BPIBrand);
return;
end;



global webpublic procedure WebINIdeaBPIBrands()
begin
	record BPIBrandVc BPIBrandr;
	vector string 255 IDEABrandRefBBICode;
	record INVc INr;
	array string 255 allIDEABRNDs;
	longint i;	
	SetCompany(28,false);
	i = 0;
	BPIBrandr.Code = "";
	while (loopmain(BPIBrandr,1,true))begin
		if (nonblank(BPIBrandr.IDEABrandRef) and blank(IDEABrandRefBBICode[BPIBrandr.IDEABrandRef])) then begin
			IDEABrandRefBBICode[BPIBrandr.IDEABrandRef] = BPIBrandr.Code;
			allIDEABRNDs[i] = BPIBrandr.IDEABrandRef;
			i = i + 1;
		end;
	end;
	
	
	INr.Code = "";
	while (loopmain(INr,1,true)) begin
		for (i=0;i<allIDEABRNDs.length;i=i+1) begin
			if (SetInSet(allIDEABRNDs[i],INr.DispGroups) and blank(INr.BPIBrand)) then begin
				INr.BPIBrand = IDEABrandRefBBICode[allIDEABRNDs[i]];
				queued.SaveINBPIBrand(INr);
				MilliSleep(30);
			end;
		end;
	end;
	
	

return;
end;





global webpublic procedure WebINIdeaBPIBrands()
begin
	record BPIBrandVc BPIBrandr;
	vector string 255 IDEABrandRefBBICode;
	record INVc INr;
	array string 255 allIDEABRNDs;
	longint i;	
	SetCompany(28,false);
	i = 0;
	BPIBrandr.Code = "";
	while (loopmain(BPIBrandr,1,true))begin
		if (nonblank(BPIBrandr.IDEABrandRef) and blank(IDEABrandRefBBICode[BPIBrandr.IDEABrandRef])) then begin
			IDEABrandRefBBICode[BPIBrandr.IDEABrandRef] = BPIBrandr.Code;
			allIDEABRNDs[i] = BPIBrandr.IDEABrandRef;
			i = i + 1;
		end;
	end;
	
	
	INr.Code = "";
	while (loopmain(INr,1,true)) begin
		for (i=0;i<allIDEABRNDs.length;i=i+1) begin
			if (SetInSet(allIDEABRNDs[i],INr.DispGroups)) then begin
				INr.BPIBrand = IDEABrandRefBBICode[allIDEABRNDs[i]];
				queued.SaveINBPIBrand(INr);
				MilliSleep(30);
			end;
		end;
	end;
	
	

return;
end;





