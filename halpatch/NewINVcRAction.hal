//server-only
external function LongInt nINVcRecordCheck(var record INVc,record INVc,LongInt,LongInt,integer);
remote updating procedure CheckAndCreateClassification(var string,string,boolean);// Edit ************************** Wednesday, 14 August 2013 10:30:58
external procedure ExtractObj(string,var Integer,var string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote function string 20 ReturnFieldDIType(string,boolean); //Edit***************************Sasha2,10:55 08.12.2015
remote function boolean SkipCheckDIType(string); //Edit***************************Sasha2,16:35 25.12.2015
remote function string 20 ReturnFieldDITypeNotJW(string); //Edit***************************Sasha2,16:50 14.06.2016
external function string 255 ReplaceCharByString(string,string,string);
external function string 255 NormalizeSetString(string);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 3 April 2018 12:00:28
external procedure NextM4Number(string,var string);
external procedure NextM4SerialNumber(string,var string);
remote function boolean CompanyIsJWLikeCompany(Integer);
remote procedure CheckItemCCBeforCreate(var record newINVc, integer);
external procedure INCatSClassArrayOnOpen(var Array string,var Integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger11:55 06.08.2018
external procedure NextM4SerialNumber(string,var string);
external function boolean CheckChangesCodeNewINVc(Integer);
external procedure INCatSClassArrayOnOpen(var Array string,var Integer); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger11:55 06.08.2018
remote updating procedure CreateNewGlobalItem(var record INVc);
external procedure NextCode(string,var string);

 
SetLangMode(LangRussian,"RUS",0);


//Edit***************************Sasha2,18:12 07.12.2015 {
procedure HandleTypeField(string fieldname,string fieldcontent,string comptostring,var String outdispstr, var String outtypesstr) 
begin
  string 20 curtype;
  
    curtype = ReturnFieldDIType(fieldname,false);
    if (NonBlank(curtype) and SetInSet(curtype,comptostring)) then begin
      //if (fieldname!="SerNrf") then begin
      if (SkipCheckDIType(ReturnFieldDIType(fieldname,false))==false) then begin
        if (Blank(outdispstr)) then begin
          outdispstr = fieldcontent;
        end else begin
          outdispstr = outdispstr & "," & fieldcontent;
        end;
      end;
      outtypesstr = outtypesstr & curtype & ",";
    end;
      
  return;
end; //Edit***************************Sasha2,18:12 07.12.2015 }

//Edit***************************Sasha2,12:12 18.12.2015 {
function string 10 PrepareDICode(string indisp)
begin
  string 10 res,newdisp;
  integer i,lenth;
  string 1 c;
  
    res = "";
    newdisp = left(indisp,10);
    lenth = len(newdisp); 
    if (lenth>0) then begin
      for (i=0;i<lenth;i=i+1) begin
        c= Mid(newdisp,i,1);
        if (c==" " or c=="." or c==",") then begin
          res = res & "_";
        end else begin
          res = res & c;
        end;
      end;
      res = UpperCase(res);
    end;
    
  PrepareDICode = res;
  return;
end; //Edit***************************Sasha2,12:12 18.12.2015 }

global
function boolean CheckAndPasteName(integer rownr,var row NewINVc newINrw)
begin
integer i;
array string 100 asnt;
integer acnt;
boolean res;
record DIVc DIr;
record ITVc ITr;
record UnitVc UNr;

res = true;
INCatSClassArrayOnOpen(asnt,acnt);


		UNr.Code = NewINrw.Unittext;
		if!(ReadFirstMain(UNr,1,true)) then begin
			res = false;
			messagebox(0,"Такие Единици измерения не заведены строка -" & rownr);
		end;	
	if(nonblank(newINrw.Category) and res) then begin res = false; end;
	for(i=0;i<acnt;i=i+1) begin
		if(newINrw.Category==Right(asnt[i],len(asnt[i])-16))then begin
			newINrw.Category = left(asnt[i],4);
			res = true;
		end;
		if(newINrw.Category==left(asnt[i],4)) then begin
			res = true;
		end;
	end;
	if(!res) then begin messagebox(0,"Такой Категории не существует строка -" & rownr); end;
	if(nonblank(newINrw.classif30) and res) then begin res = false; 
		DIr.Name = newINrw.classif30;
		if (readfirstKey("Name",DIr,1,true)) then begin
			if(DIr.CType=="MODEL") then begin
				newINrw.classif30 = DIr.Code;
				res = true;
			end;	
		end else begin
			DIr.CType = "MODEL";
			DIr.Code = newINrw.classif30;
			if(readfirstKey("CType",DIr,2,true)) then begin
				res = true;
			end;	
		end;
		if(!res) then begin messagebox(0,"Такой Модели не существует строка -" & rownr); end;
	end;	
	if(nonblank(newINrw.Colour) and res) then begin res = false; 
		DIr.Name = newINrw.Colour;
		if (readfirstKey("Name",DIr,1,true)) then begin
			if(DIr.CType=="COLOUR") then begin
				newINrw.Colour = DIr.Code;
				res = true;
			end;	
		end else begin
			DIr.CType = "COLOUR";
			DIr.Code = newINrw.Colour;
			if(readfirstKey("CType",DIr,2,true)) then begin
					res = true;
			end;	
		end;
		if(!res) then begin messagebox(0,"Такого Цвета не существует строка -" & rownr);  end;
	end;	
		if(nonblank(newINrw.BrandSC) and res) then begin res = false; 
			DIr.Name = newINrw.BrandSC;
			if (readfirstKey("Name",DIr,1,true)) then begin
				if(DIr.CType=="BRAND") then begin
					newINrw.BrandSC = DIr.Code;
					res = true;
				end;	
			end else begin
				DIr.CType = "BRAND";
				DIr.Code = newINrw.BrandSC;
				if(ReadFirstKey("CType",DIr,2,true)) then begin
					res = true;
				end;
			end;
			if(!res) then begin messagebox(0,"Такого Бренда не существует строка -" & rownr);  end;
		end;	
		if(nonblank(newINrw.GroupCl) and res) then begin res = false; 
			ITr.Comment = newINrw.GroupCl;
			if (readfirstKey("Comment",ITr,1,true)) then begin
				newINrw.GroupCl = ITr.Code;	
				res = true;
			end else begin
				ITr.Code = newINrw.GroupCl;
				if(ReadFirstMain(ITr,1,true)) then begin
					res = true;
				end;
			end;
			if(!res) then begin messagebox(0,"Такой Группы не существует строка -" & rownr); end;
		end;
		CheckAndPasteName = res;
		
	return;
end;
//Edit***************************Sasha2,15:11 14.06.2016 {
updating //For non JW companies. No type control
function boolean CheckDispAndCreateIfNeeded(string indisps,var string outdisps,string inType,var string mes)
begin
  boolean res,testf,TrHs,foundf;
  integer pos,i,lenth;
  string 20 classname;
  string 10 newdisp,type;
  record DIVc DIr;
  record CTypeVc CTyper;
  string 255 prepdisps;
  string 1 c;
  LongInt j;
  
    res = true;
    if (blank(inType)) then begin
      res = false;
      mes = " Type is not defined for classification.";
      goto LCheckDispAndCreateIfNeeded;
    end;
    
    type = Left(UpperCase(inType),10);
    CTyper.Code = type;
    foundf = ReadFirstMain(CTyper,1,true);
    
    if (foundf==false) then begin
      RECORDNEW(CTyper);
      CTyper.Code = type;
      CTyper.Comment = type;
      RECORDSTORE(CTyper,true);
    end else begin
      foundf = false;
    end;
        
    lenth = len(indisps); //deleting control symbols
    if (lenth>0) then begin
      for (i=0;i<lenth;i=i+1) begin
        c= Mid(indisps,i,1);
        if (Asc(c)>31) then begin
          prepdisps = prepdisps & c;
        end;
      end;
    end;
    
    outdisps = "";
    mes = "";
    pos = 0;
    prepdisps = ReplaceCharByString(prepdisps,";",",");
    ExtractObjWithSeparator(",",prepdisps,true,pos,classname);
		while (nonblank(classname)) begin
			lenth = len(classname);
      testf = true;
      i=0;
      while(testf and i<lenth) begin //cuts whitespaces at the beginning
      	if(mid(classname,i,1)!=" ")then begin
      		testf = false;
      	end;
      	i=i+1;
      end;
      classname = mid(classname,i-1,lenth-i+1);
      
      lenth = len(classname);
      testf = true;
      i=lenth;
      while(testf and i>=0) begin //cuts whitespaces in the end
      	if(mid(classname,i,1)!=" " and mid(classname,i,1)!="")then begin
      		testf = false;
      	end;
      	i=i-1;
      end;
      classname = mid(classname,0,i+2); 
        if (len(classname)==1 and mid(classname,i,1)==" ") then begin
        classname = "";
      end;
          
      if(nonblank(classname))then begin
        DIr.Code = UpperCase(classname);
        if (ReadFirstMain(DIr,1,true) and blank(DIr.CType)) then begin
          DIr.CType = type;
          RECORDSTORE(DIr,true);
        end;
        DIr.Code = UpperCase(classname);
        DIr.CType = type;
        if (!readfirstkey("CType",DIr,2,true)) then begin
          DIr.Name = classname;
          TrHs = true;
          foundf = false;
          while (LoopKey("DIName",DIr,1,TrHs)) begin
            if (DIr.Name!=classname) then begin TrHs=false; end;
            if (foundf==false and DIr.CType==type and DIr.Name==classname) then begin
              foundf = true;
              TrHs = false;
            end;
          end; RESETLOOP(DIr);
          if (!foundf) then begin
            newdisp = PrepareDICode(classname);
            if (NonBlank(newdisp)) then begin
              DIr.Code = newdisp;
              TrHs = ReadfirstMain(DIr,1,true);
              if (TrHs) then begin
                j = 1;
                newdisp = left(newdisp,len(newdisp) - len(j)) & j;
                DIr.Code = newdisp;
                TrHs = ReadfirstMain(DIr,1,true);  
              end;
              while (TrHs) begin
                j = j + 1;
                newdisp = left(newdisp,len(newdisp) - len(j)) & j;
                DIr.Code = newdisp;
                TrHs = ReadfirstMain(DIr,1,true); 
              end;
              if (TrHs==false) then begin 
              	recordnew(DIr);
                DIr.Code = newdisp;
                DIr.Name = classname;
                DIr.CType = type;
                if (RECORDSTORE(DIr,true)==false) then begin
                  res = false;
                  mes = " Can not store " & newdisp & "with type " & type & ".";
                  goto LCheckDispAndCreateIfNeeded;
                end;
              end;
            end else begin
              res = false;
              mes = " New classification code is empty.";
              goto LCheckDispAndCreateIfNeeded;
            end;
          end;
          
        end;

        if (Blank(outdisps)) then begin
          outdisps = DIr.Code;
        end else begin
          outdisps = outdisps & "," & DIr.Code;
        end;
      end;
		  ExtractObjWithSeparator(",",prepdisps,true,pos,classname);
		end;
  
LCheckDispAndCreateIfNeeded:;  
    CheckDispAndCreateIfNeeded = res;
  return;
end; //Edit***************************Sasha2,15:11 14.06.2016 }

updating//Edit***************************Sasha2,16:17 09.12.2015 {
function boolean DIsWithTypeExistsOrCreateSpecific(string indisps,var string outdisps,string type,var string mes)
begin
  boolean res,testf,testf1,TrHs,foundf;
  integer pos,i,lenth;
  string 20 classname;
  string 10 newdisp,suffix;
  record DIVc DIr;
  string 255 prepdisps;
  string 1 c;
  LongInt j;
  
    res = true;
    if (blank(type)) then begin
      res = false;
      mes = " No correlation between field and field type.";
      goto LDIsWithTypeExistsOrCreateSpecific;
    end;
    
    lenth = len(indisps); //deleting control symbols
    if (lenth>0) then begin
      for (i=0;i<lenth;i=i+1) begin
        c= Mid(indisps,i,1);
        if (Asc(c)>31) then begin
          prepdisps = prepdisps & c;
        end;
      end;
    end;
    
    outdisps = "";
    mes = "";
    pos = 0;
    prepdisps = ReplaceCharByString(prepdisps,";",",");
    ExtractObjWithSeparator(",",prepdisps,true,pos,classname);
		while (nonblank(classname)) begin
		
			lenth = len(classname);
      testf = true;
      i=0;
      while(testf and i<lenth) begin //cuts whitespaces at the beginning
      	if(mid(classname,i,1)!=" ")then begin
      		testf = false;
      	end;
      	i=i+1;
      end;
      classname = mid(classname,i-1,lenth-i+1);
      
      lenth = len(classname);
      testf = true;
      i=lenth;
      while(testf and i>=0) begin //cuts whitespaces in the end
      	if(mid(classname,i,1)!=" " and mid(classname,i,1)!="")then begin
      		testf = false;
      	end;
      	i=i-1;
      end;
      classname = mid(classname,0,i+2); 
      if (len(classname)==1 and mid(classname,i,1)==" ") then begin
        classname = "";
      end;
      
      if(nonblank(classname))then begin
        DIr.Code = UpperCase(classname);
        DIr.CType = type;
        if (!readfirstkey("CType",DIr,2,true)) then begin
          DIr.Name = classname;
          TrHs = true;
          foundf = false;
          while (LoopKey("DIName",DIr,1,TrHs)) begin
            if (DIr.Name!=classname) then begin TrHs=false; end;
            if (foundf==false and DIr.CType==type and DIr.Name==classname) then begin
              foundf = true;
              TrHs = false;
            end;
          end; RESETLOOP(DIr);
          if (!foundf) then begin
            testf = false;
            testf1 = false;
            suffix = "";
            switch (type) begin
              case "COLL_W":
                testf1 = true;
              case "COLL_J":
                testf1 = true;
              case "COLL_A":
                testf1 = true;
              case "WEIGHT": //supposed to be digital
                suffix = "WM";
                testf = true;
              case "D_CARAT": //supposed to be digital
                suffix = "DC";
                testf = true;
              case "CENT_ST": //supposed to be digital
                suffix = "CST";
                testf = true;
              case "CARAT": //supposed to be digital
                suffix = "CRT";
                testf = true;
              case "R_SIZE": //supposed to be digital
                suffix = "RS";
                testf = true;
              case "SAP": //supposed to be digital
                suffix = "SP";
                testf = true;
              otherwise
                res = false;
                mes = USetStr(8182) & " " & USetStr(9588);
                goto LDIsWithTypeExistsOrCreateSpecific;
            end;
            if (testf) then begin
              newdisp = PrepareDICode(classname);
              if (NonBlank(newdisp)) then begin
                if (Left(newdisp,len(suffix))!=suffix) then begin
                  newdisp = left(suffix & newdisp,10);
                end;
                DIr.Code = newdisp;
                DIr.CType = type;
                if (Readfirstkey("CType",DIr,2,true)==false) then begin
                  recordnew(DIr);
                  DIr.Code = newdisp;
                  DIr.Name = classname;
                  DIr.CType = type;
                  if (RECORDSTORE(DIr,true)==false) then begin
                    res = false;
                    mes = " Can not store " & newdisp & " with type " & type & ".";
                    goto LDIsWithTypeExistsOrCreateSpecific;
                  end;
                end;
              end else begin
                res = false;
                mes = " New classification code is empty.";
                goto LDIsWithTypeExistsOrCreateSpecific;
              end;
            end;
            if (testf1) then begin
              newdisp = PrepareDICode(classname);
              if (NonBlank(newdisp)) then begin
                DIr.Code = newdisp;
                TrHs = ReadfirstMain(DIr,1,true);
                if (TrHs) then begin
                  j = 1;
                  newdisp = left(newdisp,len(newdisp) - len(j)) & j;
                  DIr.Code = newdisp;
                  TrHs = ReadfirstMain(DIr,1,true);
                end;
                while (TrHs) begin
                  j = j + 1;
                  newdisp = left(newdisp,len(newdisp) - len(j)) & j;
                  DIr.Code = newdisp;
                  TrHs = ReadfirstMain(DIr,1,true);
                end;
                if (TrHs==false) then begin
                	recordnew(DIr);
                  DIr.Code = newdisp;
                  DIr.Name = classname;
                  DIr.CType = type;
                  if (RECORDSTORE(DIr,true)==false) then begin
                    res = false;
                    mes = " Can not store " & newdisp & "with type " & type & ".";
                    goto LDIsWithTypeExistsOrCreateSpecific;
                  end;
                end;
              end else begin
                res = false;
                mes = " New classification code is empty.";
                goto LDIsWithTypeExistsOrCreateSpecific;
              end;
            end;
          end;
        end;

        if (Blank(outdisps)) then begin
          outdisps = DIr.Code;
        end else begin
          outdisps = outdisps & "," & DIr.Code;
        end;
      end;
		  ExtractObjWithSeparator(",",prepdisps,true,pos,classname);
		end;
  
LDIsWithTypeExistsOrCreateSpecific:;  
    DIsWithTypeExistsOrCreateSpecific = res;
  return;
end; //Edit***************************Sasha2,16:17 09.12.2015 }

procedure CalcINPrice(var record INVc INr)
begin
val fr,to1,to2,br1,br2;

	GetFullCurncyRate(INr.LastPurchCurncyCode,CurrentDate,fr,to1,to2,br1,br2);
	if(fr==0 or to1==0)then begin
		fr=1; to1=1;
	end;
	INr.InPrice = INr.LastPurchPrice2/fr*to1;
	
end;

global procedure NormalizeCodeName(var string name)
begin
string 200 newclassname,c;
integer i,lenth,zercnt;
  
  lenth = len(name);
  for(i=0;i<lenth;i=i+1)begin
  	if((asc(mid(name,i,1))>32 and asc(mid(name,i,1))<127) or (asc(mid(name,i,1))>1039 and asc(mid(name,i,1))<1111))then begin
  		if((mid(name,i,1)!="\"") and (mid(name,i,1)!=",")and (mid(name,i,1)!=" "))then begin
  		newclassname = newclassname & mid(name,i,1);
  		end;
  	end;
  end;
  name = newclassname;
return;
end;


global
function LongInt NewINVcRecordRemoveTest(var record NewINVc newINr,record NewINVc newIN2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (newINr.OKFlag==1) then begin
    res = 0;
    messagebox(0,USetStr(1520));
  end;
  NewINVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt NewINVcRecordDefaults(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ItemSettingBlock ISb;
  Boolean lightFlag;
  record VATCodeBlock VATb;
  row VATCodeBlock VATrw;
  integer mtrw,i;
  
  blockload(VATb);
  if(matrowcnt(VATb)>0)then begin
  	matrowget(VATb,0,VATrw);
  end;
  
  BlockLoad(ISb);
  if (SingleUserMode) then begin
    newINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 
  end else begin
    newINr.SerNr = -1;
  end;
  newINr.TransDate = currentdate;
  newINr.VATCode = VATrw.VATCode;
  newINr.SalesMan = CurrentUser;
  newINr.Group = ISb.DefIGroup;
  newINr.WarrantyLength = ISb.WarrantyLength;
  newINr.Unittext = ISb.Unittext;
  newINr.SerNrf = ISb.SerNrf;
  newINr.UPrice1 = blankval;
  newINr.MinLevel = blankval;
  newINr.Bonus = blankval;
  newINr.InPrice = blankval;
  newINr.ExtraCost = blankval;
  newINr.PriceFactor = blankval;
  newINr.UnitCoefficient = blankval;
  newINr.Width = blankval;
  newINr.Height = blankval;
  newINr.Depth = blankval;
  newINr.AlcPrc = blankval;
  newINr.LastPriceChange = CurrentDate;
  newINr.LastBasePriceChange = CurrentDate;
  newINr.Terminated = 0;
  newINr.ItemMaterial = 0;
  newINr.Perceptions = ISb.Perceptions;
   
	newINr.ItemType = ISb.DefItemType;
	newINr.UpdateCost = ISb.UpdateCost;
	newINr.SRUpdateCost = ISb.SRUpdateCost;
  newINr.colnr = 20;
  NewINVcRecordDefaults = res; 
  RETURN;
END;


global
updating function LongInt NewINVcRecordSave(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record SRBlock SRb;
  string 255 lastitemnr,curitemnr;
  LongInt lastinnr,curinnr;

  
  
  NewINVcRecordSave = res; 
  return;
end;




global
updating function LongInt NewINVcRecordSaveAfter(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record SRBlock SRb;
  string 255 lastitemnr,curitemnr;
  LongInt lastinnr,curinnr;
  row NewINVc newINrw;
	integer i,cnt;
	Integer acnt,strlen,y,j,rwcnt,k;
	record IdINSNOneBlock IINSNOb;
	row IdINSNOneBlock IINSNOrw;
	string 255 SNOneNumber;
	val SNMiddleval;
	boolean Catef;
	Array string 255 astr;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record INVc tmpINr;
	record BarCodeVc BCr;
	record PIVc PIr;
	record BPIBrandVc Brandr;
	integer  mtrwNewIN,curcomp,CompQty;
	
	BlockLoad(Compb);
		
	curcomp = currentcompany;
	CompQty = matrowcnt(Compb);
	
	if(currentcompany==18 and newINr.OKFlag!=0) then begin
		Brandr.Code = NewINr.Brand;
		ReadFirstMain(Brandr,1,true);
		mtrwNewIN = matrowcnt(NewINr);
		for (i=0;i<mtrwNewIN;i=i+1) begin
			matrowget(newINr,i,newINrw);
			if(nonblank(NewINrw.NewBarCode)) then begin
				BCr.Barcode = NewINrw.NewBarCode;
				BCr.Itemcode = NewINrw.Code;
				if(ReadfirstKey("Itemcode",BCr,2,true)==false) then begin
					RecordNew(BCr);
					BCr.Barcode = NewINrw.NewBarCode;
					BCr.Itemcode = NewINrw.Code;
					RecordStore(BCr,false);
				end;	
			end;	
			if(nonblank(NewINrw.NewVECode)) then begin
				PIr.ItemCode = NewINrw.Code;
				PIr.Location = blankval;
				PIr.VECode = Brandr.Vendor;
				PIr.VEItemCode = newINrw.NewVECode;
				if(ReadFirstMain(PIr,4,true)==false) then begin
					RecordNew(PIr);
					PIr.ItemCode = NewINrw.Code;
					PIr.VECode = Brandr.Vendor;
					PIr.VEItemCode = newINrw.NewVECode;
					PIr.Comment = newINrw.Name;
					RecordStore(PIr,false);
				end;	
			end;	
			if(nonblank(NewINrw.NewVECode) OR nonblank(NewINrw.NewBarCode))THEN BEGIN
				for (j=0;j<CompQty;j=j+1)begin
					matrowget(Compb,j,Comprw);
					if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(j+1) or j+1==3) and j+1!=currentcompany)then begin
						SetCompany(j+1,false);
						tmpINr.Code = newINrw.VendorCode;
						if(ReadFirstMain(tmpINr,1,true)) then begin
							if(nonblank(NewINrw.NewBarCode)) then begin
								BCr.Barcode = NewINrw.NewBarCode;
								BCr.Itemcode = NewINrw.VendorCode;
								if(ReadfirstKey("Itemcode",BCr,2,true)==false) then begin
									RecordNew(BCr);
									BCr.Barcode = NewINrw.NewBarCode;
									BCr.Itemcode = NewINrw.VendorCode;
									RecordStore(BCr,false);
								end;	
							end;	
							if(nonblank(NewINrw.NewVECode)) then begin
								PIr.ItemCode = NewINrw.VendorCode;
								PIr.Location = blankval;
								PIr.VECode = Brandr.Vendor;
								PIr.VEItemCode = newINrw.NewVECode;
								if(ReadFirstMain(PIr,4,true)==false) then begin
									RecordNew(PIr);
									PIr.ItemCode = NewINrw.VendorCode;
									PIr.VECode = Brandr.Vendor;
									PIr.VEItemCode = newINrw.NewVECode;
									PIr.Comment = newINrw.Name;
									RecordStore(PIr,false);
								end;	
							end;	
						end;	
					end;
				end;
			END;
			ResetCompany(curcomp);
		end;	
	end;
	
  
  NewINVcRecordSaveAfter = res; 
  return;
end;





global
updating function LongInt NewINVcRecordUpdateAfter(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
BEGIN
  row NewINVc newINrw;
	integer i,cnt;
  LongInt res;
	Integer acnt,strlen,y,j,rwcnt,k;
	record IdINSNOneBlock IINSNOb;
	row IdINSNOneBlock IINSNOrw;
	string 255 SNOneNumber;
	val SNMiddleval;
	boolean Catef;
	Array string 255 astr;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record INVc tmpINr;
	record BarCodeVc BCr;
	record PIVc PIr;
	record BPIBrandVc Brandr;
	integer  mtrwNewIN,curcomp,CompQty;
	
	BlockLoad(Compb);
		
	curcomp = currentcompany;
	CompQty = matrowcnt(Compb);
	
	if(currentcompany==18 and newINr.OKFlag!=0 and newIN2r.OKFlag==0) then begin
		Brandr.Code = NewINr.Brand;
		ReadFirstMain(Brandr,1,true);
		mtrwNewIN = matrowcnt(NewINr);
		for (i=0;i<mtrwNewIN;i=i+1) begin
			matrowget(newINr,i,newINrw);
			if(nonblank(NewINrw.NewBarCode)) then begin
				BCr.Barcode = NewINrw.NewBarCode;
				BCr.Itemcode = NewINrw.Code;
				if(ReadfirstKey("Itemcode",BCr,2,true)==false) then begin
					RecordNew(BCr);
					BCr.Barcode = NewINrw.NewBarCode;
					BCr.Itemcode = NewINrw.Code;
					RecordStore(BCr,false);
				end;	
			end;	
			if(nonblank(NewINrw.NewVECode)) then begin
				PIr.ItemCode = NewINrw.Code;
				PIr.Location = blankval;
				PIr.VECode = Brandr.Vendor;
				PIr.VEItemCode = newINrw.NewVECode;
				if(ReadFirstMain(PIr,4,true)==false) then begin
					RecordNew(PIr);
					PIr.ItemCode = NewINrw.Code;
					PIr.VECode = Brandr.Vendor;
					PIr.VEItemCode = newINrw.NewVECode;
					PIr.Comment = newINrw.Name;
					RecordStore(PIr,false);
				end;	
			end;	
			if(nonblank(NewINrw.NewVECode) OR nonblank(NewINrw.NewBarCode))THEN BEGIN
				for (j=0;j<CompQty;j=j+1)begin
					matrowget(Compb,j,Comprw);
					if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(j+1) or j+1==3) and j+1!=currentcompany)then begin
						SetCompany(j+1,false);
						tmpINr.Code = newINrw.VendorCode;
						if(ReadFirstMain(tmpINr,1,true)) then begin
							if(nonblank(NewINrw.NewBarCode)) then begin
								BCr.Barcode = NewINrw.NewBarCode;
								BCr.Itemcode = NewINrw.VendorCode;
								if(ReadfirstKey("Itemcode",BCr,2,true)==false) then begin
									RecordNew(BCr);
									BCr.Barcode = NewINrw.NewBarCode;
									BCr.Itemcode = NewINrw.VendorCode;
									RecordStore(BCr,false);
								end;	
							end;	
							if(nonblank(NewINrw.NewVECode)) then begin
								PIr.ItemCode = NewINrw.VendorCode;
								PIr.Location = blankval;
								PIr.VECode = Brandr.Vendor;
								PIr.VEItemCode = newINrw.NewVECode;
								if(ReadFirstMain(PIr,4,true)==false) then begin
									RecordNew(PIr);
									PIr.ItemCode = NewINrw.VendorCode;
									PIr.VECode = Brandr.Vendor;
									PIr.VEItemCode = newINrw.NewVECode;
									PIr.Comment = newINrw.Name;
									RecordStore(PIr,false);
								end;	
							end;	
						end;	
					end;
				end;
			END;
			ResetCompany(curcomp);
		end;	
	end;
	
  NewINVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt NewINVcRecordUpdate(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
BEGIN
  longint res;
  NewINVcRecordUpdate = res; 
  RETURN;
END;


global updating procedure ChechCreateNewClass(string CType, string Code)
begin
	record DIVc DIr;
	record BPIBrandVc BPIBrandr;
	record BPICollectionVc BPICollectionr;
	record BPIGroupVc BPIGroupr;
	record BPISubGroupVc BPISubGroupr;
	record BPICategoryVc BPICategoryr;
	record BPIMaterialVc BPIMaterialr;
	record BPIColorVc BPIColorr;
	record BPIShapeVc BPIShaper;
	record BPISizeVc BPISizer;
	record BPIUseVc BPIUser;
	record BPISexVc BPISexr;
	record BPIPlatingVc BPIPlatingr;
	record BPIClarityVc BPIClarityr;
	record BPIWeightVc BPIWeightr;
	record BPICutVc BPICutr;
	record BPIStoneVc BPIStoner;
	record BPIStrapVc BPIStrapr;
	record BPIOdourVc BPIOdourr;
	string 255 cname;
	
	switch(CType)begin
		case"BRAND":BPIBrandr.Code = Code; readfirstmain(BPIBrandr,1,true); cname = BPIBrandr.Name;
		case "CATEGORY":BPICategoryr.Code = Code; readfirstmain(BPICategoryr,1,true); cname = BPICategoryr.Name;
		case "CLARITY":BPIClarityr.Code = Code; readfirstmain(BPIClarityr,1,true); cname = BPIClarityr.Name;
		case "COLLECT":BPICollectionr.Code = Code; readfirstmain(BPICollectionr,1,true); cname = BPICollectionr.Name;
		case "COLOR":BPIColorr.Code = Code; readfirstmain(BPIColorr,1,true); cname = BPIColorr.Name;
		case "CUT":BPICutr.Code = Code; readfirstmain(BPICutr,1,true); cname = BPICutr.Name;
		case "GROUP":BPIGroupr.Code = Code; readfirstmain(BPIGroupr,1,true); cname = BPIGroupr.Name;
		case "MATERIAL":BPIMaterialr.Code = Code; readfirstmain(BPIMaterialr,1,true); cname = BPIMaterialr.Name;
		case "ODOUR":BPIOdourr.Code = Code; readfirstmain(BPIOdourr,1,true); cname = BPIOdourr.Name;
		case "PLATING":BPIPlatingr.Code = Code; readfirstmain(BPIPlatingr,1,true); cname = BPIPlatingr.Name;
		case "SEX":BPISexr.Code = Code; readfirstmain(BPISexr,1,true); cname = BPISexr.Name;
		case "SHAPE":BPIShaper.Code = Code; readfirstmain(BPIShaper,1,true); cname = BPIShaper.Name;
		case "SIZE":BPISizer.Code = Code; readfirstmain(BPISizer,1,true); cname = BPISizer.Name;
		case "STRAP":BPIStrapr.Code = Code; readfirstmain(BPIStrapr,1,true); cname = BPIStrapr.Name;
		case "STONE":BPIStoner.Code = Code; readfirstmain(BPIStoner,1,true); cname = BPIStoner.Name;
		case "WEIGHT":BPIWeightr.Code = Code; readfirstmain(BPIWeightr,1,true); cname = BPIWeightr.Name;
		case "SUBGROUP":BPISubGroupr.Code = Code; readfirstmain(BPISubGroupr,1,true); cname = BPISubGroupr.Name;
		case "USE":BPIUser.Code = Code; readfirstmain(BPIUser,1,true); cname = BPIUser.Name;
	end;
	if(nonblank(Code))then begin
	DIr.Code = Code;
	if(readfirstmain(DIr,1,true)==false)then begin
		recordnew(DIr);
		DIr.Code = Code;
		DIr.CType = CType;
		DIr.Name = cname;
		recordstore(DIr,false);
	end;
	
	end;

return;
end;


global function string 255 DelDublicates(string instr)// Edit ************************** Tuesday, 31 October 2017 17:47:41
begin
	string 255 res,tstr;
	integer pos,i,acnt;
	vector boolean objf;
	array string 255 objsrt;
	
	if(nonblank(instr))then begin
		pos = 0;
		ExtractObj(instr,pos,tstr);
		while(nonblank(tstr))begin
			if(nonblank(tstr))then begin
				if(objf[tstr]==false)then begin
					res = res & "," & tstr;
				end;
				if(objf[tstr]==false)then begin
					objf[tstr] = true;
					objsrt[acnt] = tstr;
					acnt = acnt + 1;
				end;
			end;
			ExtractObj(instr,pos,tstr);
		end;
	end;
	
	if(left(res,1)==",")then begin
		res = right(res,len(res)-1);
	end;
	DelDublicates = res;
	
return;
end;

//Edit***************************Sasha2,9:23 10.03.2016 {
updating procedure FullFillCCINVc(var record INVc INr,record NewINVc newINr,row NewINVc newINrw,string group,string type,Boolean insertDispNameNotCode)
begin
  record DIVc DIr;
	Integer acnt,strlen,y,j,rwcnt,i;
	record IdINSNOneBlock IINSNOb;
	row IdINSNOneBlock IINSNOrw;
	row INVc INrw;
	string 255 SNOneNumber;
	val SNMiddleval;
	boolean Catef;
	Array string 255 astr;
	record BPIBrandVc BBr;
			
  	  if(nonblank(newINr.Name))then begin INr.Name=newINr.Name;  end; if(nonblank(newINrw.Name))then begin INr.Name=newINrw.Name;  end;
  		if(nonblank(newINr.Unittext))then begin INr.Unittext=newINr.Unittext;  end; if(nonblank(newINrw.Unittext))then begin INr.Unittext=newINrw.Unittext;  end;
  		if(nonblank(newINr.Objects))then begin INr.Objects=newINr.Objects;  end; if(nonblank(newINrw.Objects))then begin INr.Objects=newINrw.Objects;  end;
  		if(newINr.UPrice1>0)then begin INr.UPrice1=newINr.UPrice1;  end; if(newINrw.UPrice1>0)then begin INr.UPrice1=newINrw.UPrice1;  end;
  		if(newINr.ItemType>-1)then begin INr.ItemType=newINr.ItemType; end;//end; if(nonblank(newINrw.ItemType))then begin INr.ItemType=newINrw.ItemType;  end;
			INr.Group=newINr.Group;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 16 October 2018 15:39:22
  		if(currentcompany!=9 and currentcompany!=13)then begin
  			newINr.DispGroups = "";
  		end;
  		if(newINr.SerNrf>=0)then begin INr.SerNrf=newINr.SerNrf;  end; if(newINrw.SerNrf>newINr.SerNrf)then begin INr.SerNrf=newINrw.SerNrf;  end;
			if(nonblank(newINr.BarCode))then begin INr.BarCode = newINr.BarCode;  end; if(nonblank(newINrw.BarCode))then begin INr.BarCode = newINrw.BarCode;  end;
  		if(blank(INr.BarCode))then begin INr.BarCode = newINr.AlternativeCode; end;
  		if(nonblank(newINr.VATCode))then begin INr.VATCode=newINr.VATCode;  end; if(nonblank(newINrw.VATCode))then begin INr.VATCode = newINrw.VATCode;  end;
  		if(nonblank(newINr.AlternativeCode))then begin INr.AlternativeCode=newINr.AlternativeCode;  end; if(nonblank(newINrw.AlternativeCode))then begin INr.AlternativeCode=newINrw.AlternativeCode;  end;
  		if(nonblank(newINrw.VendorCode))then begin INr.AlternativeCode=newINrw.VendorCode;  end; if(nonblank(newINrw.VendorCode))then begin INr.AlternativeCode=newINrw.VendorCode;  end;
			if(blank(newINrw.VendorCode) and currentcompany==18) then begin INr.AlternativeCode = newINrw.Code; end;
  		if(currentcompany==9 or currentcompany==13)then begin 
				if(nonblank(newINr.DispGroups))then begin INr.DispGroups = newINr.DispGroups;  end; 
  		  if(nonblank(newINrw.DispGroups))then begin INr.DispGroups = newINrw.DispGroups;  end;	
  		end else begin
  			INr.DispGroups = "";
  		end;
  			
			if(CurrentCompany==28) then begin
				if(nonblank(newINrw.Category) and blank(INr.Category))then begin INr.Category = newINrw.Category; INr.CompletCode = 1; end;
				if(nonblank(newINrw.BrandSC))then begin  INr.DispGroups =  newINrw.BrandSC;  end;
				if(nonblank(newINrw.Colour))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.Colour;  end; 
				if(nonblank(newINrw.classif30))then begin  INr.Reference = newINrw.classif30; INr.DispGroups = INr.DispGroups & "," & newINrw.classif30;  end; 
				if(nonblank(newINrw.UserStr1)) then begin INrw.Text = newINrw.UserStr1; matrowput(INr,0,INrw); end;
			end;
  		if(nonblank(type))then begin INr.MainDisp=type;  end;	
  		if(nonblank(newINr.EKNCode))then begin INr.EKNCode=newINr.EKNCode;  end; if(nonblank(newINrw.EKNCode))then begin INr.EKNCode=newINrw.EKNCode;  end;
  		if(nonblank(newINr.NotForSales))then begin INr.NotForSales=newINr.NotForSales;  end; if(nonblank(newINrw.NotForSales))then begin INr.NotForSales=newINrw.NotForSales;  end;
		  
		  if(nonblank(newINr.Brand) and currentcompany!=28)then begin
		  	BBr.Code = newINr.Brand;
		  	if(ReadFirstMain(BBr,1,true)) then begin
					INr.BPIBrand=newINr.Brand;  
					if(nonblank(newINr.DispGroups)) then begin
						INr.DispGroups = INr.DispGroups & "," & newINr.Brand;     
					end else begin
						INr.DispGroups = newINr.Brand;  
					end;
				end;
		  end;     
			if(currentcompany!=28) then begin
				BBr.Code = newINr.Brand;
				if(ReadFirstMain(BBr,1,true)) then begin
					if(nonblank(newINrw.GroupCl))then begin INr.BPIGroup = newINrw.GroupCl; INr.DispGroups = INr.DispGroups & "," & newINrw.GroupCl; end;
					if(nonblank(newINrw.SubGroupCl))then begin INr.BPISubGroup = newINrw.SubGroupCl; INr.DispGroups = INr.DispGroups & "," & newINrw.SubGroupCl;  end;
					if(nonblank(newINrw.classif31))then begin INr.BPICategory = newINrw.classif31; INr.DispGroups = INr.DispGroups & "," & newINrw.classif31;  end;
					if(nonblank(newINrw.Material))then begin INr.BPIMaterial = newINrw.Material; INr.DispGroups = INr.DispGroups & "," & newINrw.Material;  end;
					if(nonblank(newINrw.Color))then begin INr.BPIColor = newINrw.Color; INr.DispGroups = INr.DispGroups & "," & newINrw.Color;  end;
					if(nonblank(newINrw.ShapeCut))then begin INr.BPIShape = newINrw.ShapeCut; INr.DispGroups = INr.DispGroups & "," & newINrw.ShapeCut;  end;
					if(nonblank(newINrw.SizeCl))then begin INr.BPISize = newINrw.SizeCl; INr.DispGroups = INr.DispGroups & "," & newINrw.SizeCl;  end;
					if(nonblank(newINrw.UseCl))then begin INr.BPIUse = newINrw.UseCl; INr.DispGroups = INr.DispGroups & "," & newINrw.UseCl;  end;
					if(nonblank(newINrw.SexCl))then begin INr.BPISex = newINrw.SexCl; INr.DispGroups = INr.DispGroups & "," & newINrw.SexCl;  end;
					if(nonblank(newINrw.PlatingCl))then begin INr.BPIPlating = newINrw.PlatingCl; INr.DispGroups = INr.DispGroups & "," & newINrw.PlatingCl;  end;
					if(nonblank(newINrw.ClaritySC))then begin INr.BPIClarity = newINrw.ClaritySC; INr.DispGroups = INr.DispGroups & "," & newINrw.ClaritySC;  end;
					if(nonblank(newINrw.WeightCl))then begin INr.BPIWeight = newINrw.WeightCl; INr.DispGroups = INr.DispGroups & "," & newINrw.WeightCl;  end;
					if(nonblank(newINrw.CutCl))then begin INr.BPICut = newINrw.CutCl; INr.DispGroups = INr.DispGroups & "," & newINrw.CutCl; end;
					if(nonblank(newINrw.StoneCl))then begin INr.BPIStone = newINrw.StoneCl; INr.DispGroups = INr.DispGroups & "," & newINrw.StoneCl; end;
					if(nonblank(newINrw.Strap))then begin INr.BPIStrap = newINrw.Strap; INr.DispGroups = INr.DispGroups & "," & newINrw.Strap;  end;
					if(nonblank(newINrw.OdourCl))then begin INr.BPIOdour = newINrw.OdourCl; INr.DispGroups = INr.DispGroups & "," & newINrw.OdourCl;  end;
					if(nonblank(newINrw.Collection))then begin INr.BPICollection = newINrw.Collection; INr.DispGroups = INr.DispGroups & "," & newINrw.Collection;  end;
				end;	
			end;	
			if(nonblank(newINrw.UserStr4))then begin INr.CCModelName = newINrw.UserStr4; end;
			if(nonblank(newINrw.UserStr2))then begin INr.CCCollectName = newINrw.UserStr2; end;
						
			if(nonblank(newINrw.WeightOfMat))then begin
				INr.RowWeight = newINrw.WeightOfMat;
			end;
			if(nonblank(newINrw.DiamondsCarat))then begin
				INr.MajStoneDet = newINrw.DiamondsCarat;
			end;
			if(newINrw.ConsgType!=3 and newINrw.ConsgType!=4 and currentcompany!=28) then begin
			ChechCreateNewClass("BRAND",NewINrw.BrandSC);
			ChechCreateNewClass("CATEGORY",NewINrw.classif31);
			ChechCreateNewClass("CLARITY",NewINrw.ClaritySC);
			ChechCreateNewClass("COLLECT",NewINrw.Collection);
			ChechCreateNewClass("COLOR",NewINrw.Color);
			ChechCreateNewClass("CUT",NewINrw.CutCl);
			ChechCreateNewClass("GROUP",NewINrw.GroupCl);
			ChechCreateNewClass("MATERIAL",NewINrw.Material);
			ChechCreateNewClass("ODOUR",NewINrw.OdourCl);
			ChechCreateNewClass("PLATING",NewINrw.PlatingCl);
			ChechCreateNewClass("SEX",NewINrw.SexCl);
			ChechCreateNewClass("SHAPE",NewINrw.ShapeCut);
			ChechCreateNewClass("SIZE",NewINrw.SizeCl);
			ChechCreateNewClass("STRAP",NewINrw.Strap);
			ChechCreateNewClass("STONE",NewINrw.StoneCl);
			ChechCreateNewClass("WEIGHT",NewINrw.WeightCl);
			ChechCreateNewClass("SUBGROUP",NewINrw.SubGroupCl);
			ChechCreateNewClass("USE",NewINrw.UseCl);
			end;
			INr.DispGroups = DelDublicates(INr.DispGroups);
			
  		if(nonblank(newINr.MajStoneDet))then begin 
  		  INr.MajStoneDet=newINr.MajStoneDet;  
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.MajStoneDet;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.MajStoneDet = DIr.Name;
  		    end;
  		  end;
  		end; 
  		if(nonblank(newINrw.MajStoneDet))then begin 
  		  INr.MajStoneDet=newINrw.MajStoneDet;  
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.MajStoneDet;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.MajStoneDet = DIr.Name;
  		    end;
  		  end;
  		end;
  		if(nonblank(newINr.Colour))then begin 
  		  INr.Colour=newINr.Colour;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Colour;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Colour = DIr.Name;
  		    end;
  		  end;
  		end; 
  		if(nonblank(newINrw.Colour))then begin 
  		  INr.Colour=newINrw.Colour; 
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Colour;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Colour = DIr.Name;
  		    end;
  		  end; 
  		end;
  		if(nonblank(newINr.Metal))then begin 
  		  INr.Metal=newINr.Metal;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Metal;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Metal = DIr.Name;
  		    end;
  		  end;  
  		end; 
  		if(nonblank(newINrw.Metal))then begin 
  		  INr.Metal=newINrw.Metal;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Metal;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Metal = DIr.Name;
  		    end;
  		  end; 
  		end;
  		if(nonblank(newINr.RowWeight))then begin 
  		  INr.RowWeight=newINr.RowWeight;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.RowWeight;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.RowWeight = DIr.Name;
  		    end;
  		  end;  
  		end; 
  		if(nonblank(newINrw.RowWeight))then begin 
  		  INr.RowWeight=newINrw.RowWeight;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.RowWeight;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.RowWeight = DIr.Name;
  		    end;
  		  end; 
  		end;
  		if(nonblank(newINr.Size))then begin 
  		  INr.Size=newINr.Size;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Size;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Size = DIr.Name;
  		    end;
  		  end; 
  		end; 
  		if(nonblank(newINrw.Size))then begin 
  		  INr.Size=newINrw.Size;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Size;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Size = DIr.Name;
  		    end;
  		  end;
  		end;
  		if(nonblank(newINr.Reference))then begin 
  		  INr.Reference=newINr.Reference;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Reference;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Reference = DIr.Name;
  		    end;
  		  end;
  		end; 
  		if(nonblank(newINrw.Reference))then begin 
  		  INr.Reference=newINrw.Reference;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Reference;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Reference = DIr.Name;
  		    end;
  		  end;
  		end;
			INr.Group=newINrw.Group;
  		if(nonblank(newINr.CPSCode))then begin INr.CPSCode=newINr.CPSCode;  end; if(nonblank(newINrw.CPSCode))then begin INr.CPSCode=newINrw.CPSCode;  end;  		
		if(nonblank(newINrw.ConsgType))then begin INr.ConsgType=newINrw.ConsgType;  end;  
		if(INr.ConsgType==3) then begin INr.PurchAcc = "01"; end;
		if(INr.ConsgType==4) then begin INr.PurchAcc = "12/01"; end;
		if(INr.ConsgType==2) then begin INr.PurchAcc = "12"; end;
		if(INr.ConsgType==1) then begin /*INr.PurchAcc = "41/02";*/ end;
  return;
end; //Edit***************************Sasha2,9:23 10.03.2016 }

updating procedure FullFillINVc(var record INVc INr,record NewINVc newINr,row NewINVc newINrw,string group,string type,Boolean insertDispNameNotCode)
begin
  record DIVc DIr;
	Integer acnt,strlen,y,j,rwcnt,i;
	record IdINSNOneBlock IINSNOb;
	row IdINSNOneBlock IINSNOrw;
	row INVc INrw;
	string 255 SNOneNumber;
	val SNMiddleval;
	boolean Catef;
	Array string 255 astr;
	record BPIBrandVc BBr;
			
  	  if(nonblank(newINr.Name))then begin INr.Name=newINr.Name;  end; if(nonblank(newINrw.Name))then begin INr.Name=newINrw.Name;  end;
  		if(nonblank(newINr.Unittext))then begin INr.Unittext=newINr.Unittext;  end; if(nonblank(newINrw.Unittext))then begin INr.Unittext=newINrw.Unittext;  end;
  		if(nonblank(newINr.Objects))then begin INr.Objects=newINr.Objects;  end; if(nonblank(newINrw.Objects))then begin INr.Objects=newINrw.Objects;  end;
  		if(newINr.UPrice1>0)then begin INr.UPrice1=newINr.UPrice1;  end; if(newINrw.UPrice1>0)then begin INr.UPrice1=newINrw.UPrice1;  end;
  		if(newINr.ItemType>-1)then begin INr.ItemType=newINr.ItemType; end;//end; if(nonblank(newINrw.ItemType))then begin INr.ItemType=newINrw.ItemType;  end;
			INr.Group=newINr.Group;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 16 October 2018 15:39:22
  		if(currentcompany!=9 and currentcompany!=13)then begin
  			newINr.DispGroups = "";
  		end;
  		if(newINr.SerNrf>=0)then begin INr.SerNrf=newINr.SerNrf;  end; if(newINrw.SerNrf>newINr.SerNrf)then begin INr.SerNrf=newINrw.SerNrf;  end;
			if(nonblank(newINr.BarCode))then begin INr.BarCode = newINr.BarCode;  end; if(nonblank(newINrw.BarCode))then begin INr.BarCode = newINrw.BarCode;  end;
  		if(nonblank(newINr.VATCode))then begin INr.VATCode=newINr.VATCode;  end; if(nonblank(newINrw.VATCode))then begin INr.VATCode = newINrw.VATCode;  end;
  		if(nonblank(newINr.AlternativeCode) and newINr.AlternativeCode!=INr.Code)then begin INr.AlternativeCode=newINr.AlternativeCode;  end; if(nonblank(newINrw.AlternativeCode) and newINrw.AlternativeCode!=INr.Code)then begin INr.AlternativeCode=newINrw.AlternativeCode;  end;
  		if(nonblank(newINrw.VendorCode) and currentcompany==18)then begin INr.AlternativeCode=newINrw.VendorCode;  end; if(nonblank(newINrw.VendorCode) and currentcompany==18)then begin INr.AlternativeCode=newINrw.VendorCode;  end;
  		if(currentcompany==9 or currentcompany==13)then begin
				if(nonblank(newINr.DispGroups))then begin INr.DispGroups = newINr.DispGroups;  end; 
  		  if(nonblank(newINrw.DispGroups))then begin INr.DispGroups = newINrw.DispGroups;  end;	
  		end else begin
  			INr.DispGroups = "";
  		end;
  			
			if(CurrentCompany==28) then begin
				if(nonblank(newINrw.Category) and blank(INr.Category))then begin INr.Category = newINrw.Category; INr.CompletCode = 1; end;
				if(nonblank(newINrw.BrandSC))then begin  INr.DispGroups =  newINrw.BrandSC;  end;
				if(nonblank(newINrw.Colour))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.Colour;  end; 
				if(nonblank(newINrw.classif30))then begin  INr.Reference = newINrw.classif30; INr.DispGroups = INr.DispGroups & "," & newINrw.classif30;  end; 
				if(nonblank(newINrw.UserStr1)) then begin INrw.Text = newINrw.UserStr1; matrowput(INr,0,INrw); end;
			end;
  		if(nonblank(type))then begin INr.MainDisp=type;  end;	
  		if(nonblank(newINr.EKNCode))then begin INr.EKNCode=newINr.EKNCode;  end; if(nonblank(newINrw.EKNCode))then begin INr.EKNCode=newINrw.EKNCode;  end;
  		if(nonblank(newINr.NotForSales))then begin INr.NotForSales=newINr.NotForSales;  end; if(nonblank(newINrw.NotForSales))then begin INr.NotForSales=newINrw.NotForSales;  end;
		  
		  if(nonblank(newINr.Brand) and currentcompany!=28)then begin
		  	BBr.Code = newINr.Brand;
		  	if(ReadFirstMain(BBr,1,true)) then begin
					INr.BPIBrand=newINr.Brand;  
					if(nonblank(newINr.DispGroups)) then begin
						INr.DispGroups = INr.DispGroups & "," & newINr.Brand;     
					end else begin
						INr.DispGroups = newINr.Brand;  
					end;
				end;
		  end;     
			if(currentcompany!=28) then begin
				BBr.Code = newINr.Brand;
				if(ReadFirstMain(BBr,1,true)) then begin
					INr.BPIGroup = newINrw.GroupCl; if(nonblank(newINrw.GroupCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.GroupCl; end;
					INr.BPISubGroup = newINrw.SubGroupCl; if(nonblank(newINrw.SubGroupCl))then begin INr.DispGroups = INr.DispGroups & "," & newINrw.SubGroupCl;  end;
					INr.BPICategory = newINrw.classif31; if(nonblank(newINrw.classif31))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.classif31;  end;
					INr.BPIMaterial = newINrw.Material; if(nonblank(newINrw.Material))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.Material;  end;
					INr.BPIColor = newINrw.Color; if(nonblank(newINrw.Color))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.Color;  end;
					INr.BPIShape = newINrw.ShapeCut; if(nonblank(newINrw.ShapeCut))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.ShapeCut;  end;
					INr.BPISize = newINrw.SizeCl; if(nonblank(newINrw.SizeCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.SizeCl;  end;
					INr.BPIUse = newINrw.UseCl; if(nonblank(newINrw.UseCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.UseCl;  end;
					INr.BPISex = newINrw.SexCl; if(nonblank(newINrw.SexCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.SexCl;  end;
					INr.BPIPlating = newINrw.PlatingCl; if(nonblank(newINrw.PlatingCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.PlatingCl;  end;
					INr.BPIClarity = newINrw.ClaritySC; if(nonblank(newINrw.ClaritySC))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.ClaritySC;  end;
					INr.BPIWeight = newINrw.WeightCl; if(nonblank(newINrw.WeightCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.WeightCl;  end;
					INr.BPICut = newINrw.CutCl; if(nonblank(newINrw.CutCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.CutCl; end;
					INr.BPIStone = newINrw.StoneCl; if(nonblank(newINrw.StoneCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.StoneCl; end;
					INr.BPIStrap = newINrw.Strap; if(nonblank(newINrw.Strap))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.Strap;  end;
					INr.BPIOdour = newINrw.OdourCl; if(nonblank(newINrw.OdourCl))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.OdourCl;  end;
					INr.BPICollection = newINrw.Collection; if(nonblank(newINrw.Collection))then begin  INr.DispGroups = INr.DispGroups & "," & newINrw.Collection;  end;
					INr.High = newINrw.High; 
					INr.Life2 = newINrw.Life2; 
				end;	
			end;	
			if(nonblank(newINrw.UserStr4))then begin INr.SNOne = newINrw.UserStr4; end;
			if(nonblank(newINrw.UserStr2))then begin INr.MainDisp = newINrw.UserStr2; end;
						
			if(nonblank(newINrw.WeightOfMat))then begin
				INr.RowWeight = newINrw.WeightOfMat;
			end;
			if(nonblank(newINrw.DiamondsCarat))then begin
				INr.MajStoneDet = newINrw.DiamondsCarat;
			end;
			if(newINrw.ConsgType!=3 and newINrw.ConsgType!=4 and currentcompany!=28) then begin
			ChechCreateNewClass("BRAND",NewINrw.BrandSC);
			ChechCreateNewClass("CATEGORY",NewINrw.classif31);
			ChechCreateNewClass("CLARITY",NewINrw.ClaritySC);
			ChechCreateNewClass("COLLECT",NewINrw.Collection);
			ChechCreateNewClass("COLOR",NewINrw.Color);
			ChechCreateNewClass("CUT",NewINrw.CutCl);
			ChechCreateNewClass("GROUP",NewINrw.GroupCl);
			ChechCreateNewClass("MATERIAL",NewINrw.Material);
			ChechCreateNewClass("ODOUR",NewINrw.OdourCl);
			ChechCreateNewClass("PLATING",NewINrw.PlatingCl);
			ChechCreateNewClass("SEX",NewINrw.SexCl);
			ChechCreateNewClass("SHAPE",NewINrw.ShapeCut);
			ChechCreateNewClass("SIZE",NewINrw.SizeCl);
			ChechCreateNewClass("STRAP",NewINrw.Strap);
			ChechCreateNewClass("STONE",NewINrw.StoneCl);
			ChechCreateNewClass("WEIGHT",NewINrw.WeightCl);
			ChechCreateNewClass("SUBGROUP",NewINrw.SubGroupCl);
			ChechCreateNewClass("USE",NewINrw.UseCl);
			end;
			INr.DispGroups = DelDublicates(INr.DispGroups);
			
  		if(nonblank(newINr.MajStoneDet))then begin 
  		  INr.MajStoneDet=newINr.MajStoneDet;  
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.MajStoneDet;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.MajStoneDet = DIr.Name;
  		    end;
  		  end;
  		end; 
  		if(nonblank(newINrw.MajStoneDet))then begin 
  		  INr.MajStoneDet=newINrw.MajStoneDet;  
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.MajStoneDet;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.MajStoneDet = DIr.Name;
  		    end;
  		  end;
  		end;
  		if(nonblank(newINr.Colour))then begin 
  		  INr.Colour=newINr.Colour;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Colour;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Colour = DIr.Name;
  		    end;
  		  end;
  		end; 
  		if(nonblank(newINrw.Colour))then begin 
  		  INr.Colour=newINrw.Colour; 
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Colour;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Colour = DIr.Name;
  		    end;
  		  end; 
  		end;
  		if(nonblank(newINr.Metal))then begin 
  		  INr.Metal=newINr.Metal;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Metal;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Metal = DIr.Name;
  		    end;
  		  end;  
  		end; 
  		if(nonblank(newINrw.Metal))then begin 
  		  INr.Metal=newINrw.Metal;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Metal;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Metal = DIr.Name;
  		    end;
  		  end; 
  		end;
  		if(nonblank(newINr.RowWeight))then begin 
  		  INr.RowWeight=newINr.RowWeight;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.RowWeight;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.RowWeight = DIr.Name;
  		    end;
  		  end;  
  		end; 
  		if(nonblank(newINrw.RowWeight))then begin 
  		  INr.RowWeight=newINrw.RowWeight;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.RowWeight;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.RowWeight = DIr.Name;
  		    end;
  		  end; 
  		end;
  		if(nonblank(newINr.Size))then begin 
  		  INr.Size=newINr.Size;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Size;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Size = DIr.Name;
  		    end;
  		  end; 
  		end; 
  		if(nonblank(newINrw.Size))then begin 
  		  INr.Size=newINrw.Size;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Size;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Size = DIr.Name;
  		    end;
  		  end;
  		end;
  		if(nonblank(newINr.Reference))then begin 
  		  INr.Reference=newINr.Reference;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINr.Reference;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Reference = DIr.Name;
  		    end;
  		  end;
  		end; 
  		if(nonblank(newINrw.Reference))then begin 
  		  INr.Reference=newINrw.Reference;
  		  if (insertDispNameNotCode) then begin
  		    DIr.Code = newINrw.Reference;
  		    if (ReadFirstMain(DIr,1,true)) then begin
  		      INr.Reference = DIr.Name;
  		    end;
  		  end;
  		end;
			INr.Group=newINrw.Group;
  		if(nonblank(newINr.CPSCode))then begin INr.CPSCode=newINr.CPSCode;  end; if(nonblank(newINrw.CPSCode))then begin INr.CPSCode=newINrw.CPSCode;  end;  		
		if(nonblank(newINrw.ConsgType))then begin INr.ConsgType=newINrw.ConsgType;  end;  
		if(INr.ConsgType==3) then begin INr.PurchAcc = "01"; end;
		if(INr.ConsgType==4) then begin INr.PurchAcc = "12/01"; end;
		if(INr.ConsgType==2) then begin INr.PurchAcc = "12"; end;
		if(INr.ConsgType==1) then begin /*INr.PurchAcc = "41/02";*/ end;
  return;
end; //Edit***************************Sasha2,9:23 10.03.2016 }

updating procedure FullGlobalINBtrx(var record INVc INr,record NewINVc newINr,row NewINVc newINrw)
begin
  record DIVc DIr;
	Integer acnt,strlen,y,j,rwcnt,i;
	record IdINSNOneBlock IINSNOb;
	row IdINSNOneBlock IINSNOrw;
	row INVc INrw;
	string 255 SNOneNumber;
	val SNMiddleval;
	boolean Catef;
	Array string 255 astr;
	record BPIBrandVc BBr;
	record GlobalItemVc GIr;		
	boolean updateGIr;
	string 255 INCode;
	record BTRxMaterialVc BTRxMaterialr;
	record BTRxColourVc BTRxColorr;
	record BTRxSexVc BTRxSexr;
	record BTRxPlatingVc BTRxPlatingr;
	record BTRxStoneVc BTRxStoner;
	record BTRxOdourVc BTRxOdourr;
	record NewClassSetVc NCSr;
	row NewClassSetVc NCSrw;
	record BPIBrandVc BPIBrandr;
	record BPICollectionVc BPICollectionr;
	record BPIMaterialVc BPIMaterialr;
	record BPIColorVc BPIColorr;
	record BPISexVc BPISexr;
	record BPIPlatingVc BPIPlatingr;
	record BPIStoneVc BPIStoner;
	record BPIOdourVc BPIOdourr;
	
	
		INr.BtrxProductName = newINrw.ProductNameCode;
		INr.BtrxCountInSet = newINrw.CountInSet;
		INr.BTRxStrapColour = newINrw.StrapColourCode;
		INr.BTRxStrapMat = newINrw.StrapMat;
		INr.BtrxClockFaceColour = newINrw.ClockFaceColourCode;
		INr.BtrxClockFaceMaterial = newINrw.ClockFaceMaterialCode; 
		INr.BtrxCentralGim = newINrw.StoneScattA2; 
		INr.BTRxCentralCarat = newINrw.CentralCarat;
		INr.Life2 = newINrw.Life2; 
		if(nonblank(newINrw.LimitedGood)) then begin 
			INr.BTRxLimitedGood = 1;
		end else begin
			INr.BTRxLimitedGood = 0;
		end;
		INr.BtrxWarranty = newINrw.Warranty;
		INr.BtrxScratchRes = newINrw.Sctrchresistant;
		INr.Depth = StringToVal(newINrw.Length2,M4UVal);
		INr.Width = StringToVal(newINrw.Width2,M4UVal);
		INr.Height = StringToVal(newINrw.Height2,M4UVal);
		INr.BTRxDiam = StringToVal(newINrw.Diameter2,M4UVal);
		INr.Volume = StringToVal(newINrw.Volume2,M4UVal);
		INr.Weight = StringToVal(newINrw.Weight2,M4UVal);
		INr.BtrxItemSize = newINrw.ItemSize;
		INr.BtrxUnitOfMeas = newINrw.UnitOfMeasurement;
		INr.BtrxAllMaterials = newINrw.AllMaterials; 
		INr.BtrxComplications = newINrw.Complications;
		INr.BtrxCaseDiam = newINrw.CaseDiameter;
		INr.BTRxWatchMechanism = newINrw.WatchMechanism;
		INr.BTRxPowerReserve = newINrw.PowerReserve;
		if(nonblank(newINrw.WaterResistant)) then begin 
			INr.BTRxWatterResf = 1; 
		end else begin
			INr.BTRxWatterResf = 0; 
		end;
		INr.BTRxFilling = newINrw.Filling; 
		INr.BtrxMicrowaveProtect = newINrw.MicrowaveSafe; 
		INr.BtrxMatchesKitchenStove = newINrw.MatchesKitchenStove; 
		INr.BPISex = newINrw.SexCl; 
		BPISexr.Code =  newINrw.SexCl;
		if (ReadFirstMain(BPISexr,1,true)) then begin
			BTRxSexr.Name = BPISexr.Name;
			if (ReadfirstKey("Name",BTRxSexr,1,true)) then begin
				INr.BtrxSex = BTRxSexr.Code; 
			end;
		end;
		INr.BPIPlating = newINrw.PlatingCl;
		INr.BtrxAddProdDescription = newINrw.AddProdDesc; 
		INr.BtrxCare = newINrw.Care;
		INr.BtrxProductFeaches = newINrw.ProdFeat;
		INr.BPIOdour = newINrw.OdourCl;
		BPIOdourr.Code =  newINrw.OdourCl;
		if (ReadFirstMain(BPIOdourr,1,true)) then begin
			BTRxOdourr.Name = BPIOdourr.Name;
			if (ReadfirstKey("Name",BTRxOdourr,1,true)) then begin
				INr.BtrxOdour = BTRxOdourr.Code; 
			end;
		end;
		INr.BPIMaterial = newINrw.Material; 
		BPIMaterialr.Code =  newINrw.Material;
		if (ReadFirstMain(BPIMaterialr,1,true)) then begin
			BTRxMaterialr.Name = BPIMaterialr.Name;
			if (ReadfirstKey("Name",BTRxMaterialr,1,true)) then begin
				INr.BtrxMaterial = BTRxMaterialr.Code; 
			end;
		end;
		INr.BPIColor = newINrw.Color; 
		BPIColorr.Code = newINrw.Color;
		if (ReadFirstMain(BPIColorr,1,true)) then begin
			BTRxColorr.Name = BPIColorr.Name;
			if (ReadfirstKey("Name",BTRxColorr,1,true)) then begin
				INr.BtrxColor = BTRxColorr.Code; 
			end;
		end;
		INr.BPIStone = newINrw.StoneCl; 
		BPIStoner.Code = newINrw.StoneCl;
		if (ReadFirstMain(BPIStoner,1,true)) then begin
			BTRxStoner.Name = BPIStoner.Name;
			if (ReadfirstKey("Name",BTRxStoner,1,true)) then begin
				INr.BTRxStone = BTRxStoner.Code; 
			end;
		end;		
		INr.High = newINrw.High; 
		if(nonblank(INr.BPIBrand)) then begin 
			if(Left(INr.Code,3)=="IN_") then begin
				GIr.Code = INr.BPIBrand & "_" & INr.AlternativeCode ;
			end else begin
				GIr.Code = INr.BPIBrand & "_" & INr.Code;
			end;
			if(ReadFirstMain(GIr,1,true)) then begin
				updateGIr = false;
				if(INr.BtrxProductName!=GIr.BtrxProductName and blank(GIr.BtrxProductName)) then begin updateGIr = true; GIr.BtrxProductName = INr.BtrxProductName;  end;
				if(INr.BtrxCountInSet!=GIr.StrBTRxSetQty and blank(GIr.StrBTRxSetQty)) then begin updateGIr = true; GIr.StrBTRxSetQty = INr.BtrxCountInSet; end;
				if(INr.BTRxStrapColour!=GIr.BTRxStrapColour and blank(GIr.BTRxStrapColour)) then begin updateGIr = true; GIr.BTRxStrapColour = INr.BTRxStrapColour; end;
				if(INr.BTRxStrapMat!=GIr.BTRxStrapMat and blank(GIr.BTRxStrapMat)) then begin updateGIr = true; GIr.BTRxStrapMat = INr.BTRxStrapMat; end;
				if(INr.BtrxClockFaceColour!=GIr.BtrxClockFaceColour and blank(GIr.BtrxClockFaceColour)) then begin updateGIr = true; GIr.BtrxClockFaceColour = INr.BtrxClockFaceColour; end;
				if(INr.BtrxClockFaceMaterial!=GIr.BtrxClockFaceMaterial and blank(GIr.BtrxClockFaceMaterial)) then begin updateGIr = true; GIr.BtrxClockFaceMaterial = INr.BtrxClockFaceMaterial; end;
				if(INr.BtrxCentralGim!=GIr.BtrxCentralGim and blank(GIr.BtrxCentralGim)) then begin updateGIr = true; GIr.BtrxCentralGim = INr.BtrxCentralGim; end;
				if(INr.Life2!=GIr.Life2 and blank(GIr.Life2)) then begin updateGIr = true; GIr.Life2 = INr.Life2; end;
				if(INr.BTRxLimitedGood!=GIr.BTRxLimitedGood and blank(GIr.BTRxLimitedGood)) then begin updateGIr = true; GIr.BTRxLimitedGood = INr.BTRxLimitedGood; end; // str to int
				if(INr.BtrxWarranty!=GIr.BtrxWarranty and blank(GIr.BtrxWarranty)) then begin updateGIr = true; GIr.BtrxWarranty = INr.BtrxWarranty; end;
				if(INr.BtrxScratchRes!=GIr.BtrxScratchRes and blank(GIr.BtrxScratchRes)) then begin updateGIr = true; GIr.BtrxScratchRes = INr.BtrxScratchRes; end;
				if(newINrw.Length2!=GIr.StrDepth and blank(GIr.StrDepth)) then begin updateGIr = true; GIr.StrDepth = newINrw.Length2; end;
				if(newINrw.Width2!=GIr.StrWidth and blank(GIr.StrWidth)) then begin updateGIr = true; GIr.StrWidth = newINrw.Width2; end;
				if(newINrw.Height2!=GIr.StrHeight and blank(GIr.StrHeight)) then begin updateGIr = true; GIr.StrHeight = newINrw.Height2; end;
				if(newINrw.Diameter2!=GIr.StrBTRxDiam and blank(GIr.StrBTRxDiam)) then begin updateGIr = true; GIr.BtrxDiameter = newINrw.Diameter2; end;
				if(newINrw.Volume2!=GIr.StrVolume and blank(GIr.StrVolume)) then begin updateGIr = true; GIr.StrVolume = newINrw.Volume2; end;
				if(newINrw.Weight2!=GIr.StrWeight and blank(GIr.StrWeight)) then begin updateGIr = true; GIr.StrWeight = newINrw.Weight2; end;
				if(INr.BtrxItemSize!=GIr.BtrxItemSize and blank(GIr.BtrxItemSize)) then begin updateGIr = true; GIr.BtrxItemSize = INr.BtrxItemSize; end;
				if(INr.BtrxUnitOfMeas!=GIr.BtrxUnitOfMeas and blank(GIr.BtrxUnitOfMeas)) then begin updateGIr = true; GIr.BtrxUnitOfMeas = INr.BtrxUnitOfMeas; end;
				if(INr.BtrxAllMaterials!=GIr.BtrxAllMaterials and blank(GIr.BtrxAllMaterials)) then begin updateGIr = true; GIr.BtrxAllMaterials = INr.BtrxAllMaterials; end;
				if(INr.BtrxComplications!=GIr.BtrxComplications and blank(GIr.BtrxComplications)) then begin updateGIr = true; GIr.BtrxComplications = INr.BtrxComplications; end;
				if(INr.BtrxCaseDiam!=GIr.BtrxCaseDiam and blank(GIr.BtrxCaseDiam)) then begin updateGIr = true; GIr.BtrxCaseDiam = INr.BtrxCaseDiam; end;
				if(INr.BTRxWatchMechanism!=GIr.BTRxWatchMechanism and blank(GIr.BTRxWatchMechanism)) then begin updateGIr = true; GIr.BTRxWatchMechanism = INr.BTRxWatchMechanism; end;
				if(INr.BTRxPowerReserve!=GIr.BTRxPowerReserve and blank(GIr.BTRxPowerReserve)) then begin updateGIr = true; GIr.BTRxPowerReserve = INr.BTRxPowerReserve; end;
				if(INr.BTRxWatterResf!=GIr.BTRxWatterResf and blank(GIr.BTRxWatterResf)) then begin updateGIr = true; GIr.BTRxWatterResf = INr.BTRxWatterResf; end;
				if(INr.BTRxFilling!=GIr.BTRxFilling and blank(GIr.BTRxFilling)) then begin updateGIr = true; GIr.BTRxFilling = INr.BTRxFilling; end;
				if(INr.BtrxMicrowaveProtect!=GIr.BtrxMicrowaveProtect and blank(GIr.BtrxMicrowaveProtect)) then begin updateGIr = true; GIr.BtrxMicrowaveProtect = INr.BtrxMicrowaveProtect; end;
				if(INr.BtrxMatchesKitchenStove!=GIr.BtrxMatchesKitchenStove and blank(GIr.BtrxMatchesKitchenStove)) then begin updateGIr = true; GIr.BtrxMatchesKitchenStove = INr.BtrxMatchesKitchenStove; end;
				if(INr.BtrxSex!=GIr.BPISex and blank(GIr.BPISex)) then begin updateGIr = true; GIr.BPISex = INr.BtrxSex; end;
				if(INr.BPIPlating!=GIr.BPIPlating and blank(GIr.BPIPlating)) then begin updateGIr = true; GIr.BPIPlating = INr.BPIPlating; end;
				if(INr.BtrxAddProdDescription!=GIr.BtrxAddProdDescription and blank(GIr.BtrxAddProdDescription)) then begin updateGIr = true; GIr.BtrxAddProdDescription = INr.BtrxAddProdDescription; end;
				if(INr.BtrxCare!=GIr.BtrxCare and blank(GIr.BtrxCare)) then begin updateGIr = true; GIr.BtrxCare = INr.BtrxCare; end;
				if(INr.BtrxProductFeaches!=GIr.BtrxProductFeaches and blank(GIr.BtrxProductFeaches)) then begin updateGIr = true; GIr.BtrxProductFeaches = INr.BtrxProductFeaches; end;
				if(INr.BtrxOdour!=GIr.BPIOdour and blank(GIr.BPIOdour)) then begin updateGIr = true; GIr.BPIOdour = INr.BtrxOdour; end;
				if(INr.BtrxMaterial!=GIr.BPIMaterial and blank(GIr.BPIMaterial)) then begin updateGIr = true; GIr.BPIMaterial = INr.BtrxMaterial; end;
				if(INr.BtrxColor!=GIr.BPIColor and blank(GIr.BPIColor)) then begin updateGIr = true; GIr.BPIColor = INr.BtrxColor; end;
				if(INr.BTRxStone!=GIr.BPIStone and blank(GIr.BPIStone)) then begin updateGIr = true;GIr.BPIStone = INr.BTRxStone; end;
				if(INr.BTRxCentralCarat!=GIr.BTRxCentralCarat and blank(GIr.BTRxCentralCarat)) then begin updateGIr = true;GIr.BTRxCentralCarat = INr.BTRxCentralCarat; end;
				if(INr.High!=GIr.High and blank(GIr.High)) then begin updateGIr = true; GIr.High = INr.High; end; 
				if(updateGIr) then begin
					RecordStore(GIr,true);
				end;
			end else begin
				if(Left(INr.Code,3)=="IN_") then begin
					INCode = INr.Code;
					INr.Code = INr.AlternativeCode;
					CreateNewGlobalItem(INr);
					INr.Code = INCode;
				end else begin
					CreateNewGlobalItem(INr);
				end;
			end;
		end;
  return;
end; //Edit***************************Sasha2,9:23 10.03.2016 }


global
updating procedure CheckCreateBtrxClass(string TypeClass, string Class)
begin
	record BTRxSexVc BTRxSexr, OldBTRxSexr;
	record BTRxOdourVc BTRxOdourr, OldBTRxOdourr;
	record BTRxMaterialVc BTRxMaterialr, OldBTRxMaterialr;
	record BTRxColourVc BTRxColorr, OldBTRxColorr;
	record BTRxStoneVc BTRxStoner, OldBTRxStoner;
	record BTRxPlatingVc BTRxPlatingr, OldBTRxPlatingr;
	boolean TrHs;
	string 255 OldCode;
	
	switch (TypeClass) begin
		case "PLATING":
			BTRxPlatingr.Name = Class;
			if (!ReadFirstKey("Name",BTRxPlatingr,1,true)) then begin
				BTRxPlatingr.Code = "PLAT99999";
				TrHs = true;
				while (LoopBackKey("Code",BTRxPlatingr,1,TrHs)) begin
					OldCode = BTRxPlatingr.Code;
					TrHs = false;
				end;
				ResetLoop(BTRxPlatingr);
				recordnew(BTRxPlatingr);
				if(blank(OldCode))then begin OldCode = "PLAT00000"; end;
				NextCode(OldCode,BTRxPlatingr.Code);
				BTRxPlatingr.Name = Class;
				recordinsert(BTRxPlatingr,true);
				recordupdate(BTRxPlatingr,BTRxPlatingr,true);
			end;
		case "ODOUR":
			BTRxOdourr.Name = Class;
			if (!ReadFirstKey("Name",BTRxOdourr,1,true)) then begin
				BTRxOdourr.Code = "ODR99999";
				TrHs = true;
				while (LoopBackKey("Code",BTRxOdourr,1,TrHs)) begin
					OldCode = BTRxOdourr.Code;
					TrHs = false;
				end;
				ResetLoop(BTRxOdourr);
				recordnew(BTRxOdourr);
				if(blank(OldCode))then begin OldCode = "ODR00000"; end;
				NextCode(OldCode,BTRxOdourr.Code);
				BTRxOdourr.Name = Class;
				recordinsert(BTRxOdourr,true);
				recordupdate(BTRxOdourr,BTRxOdourr,true);
			end;
		case "MATERIAL": 
			BTRxMaterialr.Name = Class;
			if (!ReadFirstKey("Name",BTRxMaterialr,1,true)) then begin
				BTRxMaterialr.Code = "MATR99999";
				TrHs = true;
				while (LoopBackKey("Code",BTRxMaterialr,1,TrHs)) begin
					OldCode = BTRxMaterialr.Code;
					TrHs = false;
				end;
				ResetLoop(BTRxMaterialr);
				recordnew(BTRxMaterialr);
				if(blank(OldCode))then begin OldCode = "MATR00000"; end;
				NextCode(OldCode,BTRxMaterialr.Code);
				BTRxMaterialr.Name = Class;
				recordinsert(BTRxMaterialr,true);
				recordupdate(BTRxMaterialr,BTRxMaterialr,true);
			end;
		case "SEX": 
			BTRxSexr.Name = Class;
			if (!ReadFirstKey("Name",BTRxSexr,1,true)) then begin
				BTRxSexr.Code = "SEX99999";
				TrHs = true;
				while (LoopBackKey("Code",BTRxSexr,1,TrHs)) begin
					OldCode = BTRxSexr.Code;
					TrHs = false;
				end;
				ResetLoop(BTRxSexr);
				recordnew(BTRxSexr);
				if(blank(OldCode))then begin OldCode = "SEX00000"; end;
				NextCode(OldCode,BTRxSexr.Code);
				BTRxSexr.Name = Class;
				recordinsert(BTRxSexr,true);
				recordupdate(BTRxSexr,BTRxSexr,true);
			end;
		case "COLOR": 
			BTRxColorr.Name = Class;
			if (!ReadFirstKey("Name",BTRxColorr,1,true)) then begin
				BTRxColorr.Code = "CL99999";
				TrHs = true;
				while (LoopBackKey("Code",BTRxColorr,1,TrHs)) begin
					OldCode = BTRxColorr.Code;
					TrHs = false;
				end;
				ResetLoop(BTRxColorr);
				recordnew(BTRxColorr);
				if(blank(OldCode))then begin OldCode = "CL00000"; end;
				NextCode(OldCode,BTRxColorr.Code);
				BTRxColorr.Name = Class;
				recordinsert(BTRxColorr,true);
				recordupdate(BTRxColorr,BTRxColorr,true);
			end;
		case "STONE": 
			BTRxStoner.Name = Class;
			if (!ReadFirstKey("Name",BTRxStoner,1,true)) then begin
				BTRxStoner.Code = "STN99999";
				TrHs = true;
				while (LoopBackKey("Code",BTRxStoner,1,TrHs)) begin
					OldCode = BTRxStoner.Code;
					TrHs = false;
				end;
				ResetLoop(BTRxStoner);
				recordnew(BTRxStoner);
				if(blank(OldCode))then begin OldCode = "STN00000"; end;
				NextCode(OldCode,BTRxStoner.Code);
				BTRxStoner.Name = Class;
				recordinsert(BTRxStoner,true);
				recordupdate(BTRxStoner,BTRxStoner,true);
			end;
	end;
	return
end;

global
updating function LongInt NewINVcRecordCheck(var record NewINVc newINr,record NewINVc newIN2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row NewINVc newINrw;
	record INVc tmpINr,OldConsINr;
  record INVc INr,IN2r,INConsr,IN3r, testINr, UINr;
  record ITVc ITr;
  integer mtrw,i,insertmode,updatemode,j, compNumber; //Edit***************************Sasha2,17:50 07.12.2015
  string 20 codestring;
	string 100 GroupCode;
  LongInt stat1,long41;
  string 200 rawclass,uloc,group;
  integer pos,rwcnt, t,tcnt,oldComp,CompQty,k;
  record DIVc DIr;
  boolean upd,insertDispNameNotCode,TrHs,TrHs1,testf,InJwSavedf,testf2;
  record DiCheckBlock DiCb; //Edit***************************Sasha2,16:52 07.12.2015
  row DiCheckBlock DiCbw; //Edit***************************Sasha2,16:52 07.12.2015
  vector string 255 diCheckTypes; //Edit***************************Sasha2,17:22 07.12.2015
  string 255 newdispstr,foundtypes,outdisps,mes; //Edit***************************Sasha2,17:37 07.12.2015
  string 20 type; //Edit***************************Sasha2,10:34 08.12.2015
  boolean NewValidClassif, rowGroupf;
	record NewClassSetVc NCSr;
	row NewClassSetVc NCSrw;
	record BTRxClassSetVc BCSr;
	row BTRxClassSetVc BCSrw;
	record BPIBrandVc Brandr;
	record BPICollectionVc Collectr;
	record BPIGroupVc Groupr;
	record BPISubGroupVc SGroupr;
	vector string 255 vclassification, vclassificationfield;
	vector boolean vclasstipecode, AllSetTypes;
	record NewClassifChBlock NCCHb;	
	array string 100 aTipeClass;
	record BPICategoryVc BPICategoryr;
	record BPIMaterialVc BPIMaterialr;
	record BPIColorVc BPIColorr;
	record BPIShapeVc BPIShaper;
	record BPISizeVc BPISizer;
	record BPIUseVc BPIUser;
	record BPISexVc BPISexr;
	record BPIPlatingVc BPIPlatingr;
	record BPIClarityVc BPIClarityr;
	record BPIWeightVc BPIWeightr;
	record BPICutVc BPICutr;
	record BPIStoneVc BPIStoner;
	record BPIStrapVc BPIStrapr;
	record BPIOdourVc BPIOdourr;
	record ConsCompBlock CCB;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	Array string 255 astr;
  Integer acnt,strlen,y;
	record IdINSNOneBlock IINSNOb;
	row IdINSNOneBlock IINSNOrw;
	string 255 SNOneNumber, compstr, comp, consItcode;
	val SNMiddleval, strval;
	boolean Catef,TrHs2,locompcritemf;
	array string 100 asnt;
	integer check,curcomp;
	record ConsItemVc CI2r,CIr;
	vector string 255 companies;
	boolean CompFlag;
	record BarCodeVc BCr;
	record PIVc PIr;
	vector boolean BarVector,INConsCodef,VEcodeVector;
	vector integer rowBarCode, rowVECode;
	record BTRxMaterialVc BTRxMaterialr, OldBTRxMaterialr;
	record BTRxColourVc BTRxColorr, OldBTRxColorr;
	record BTRxStoneVc BTRxStoner, OldBTRxStoner;
	record BtrxWatchMechanVc BtrxWatchMechanr;
	record BtrxPowerReserveVc BtrxPowerReserver;
	record BtrxFillingVc BtrxFillingr;
	record BtrxTypeVc BtrxTyper;
	record BtrxWaterResistantVc BtrxWatResr;
	record BtrxComplicationsVc BtrxComplicationsr;
	record BtrxMicrowaveProtectVc BtrxMicrowaveProtectr;
	record BtrxStoveCompatVc BtrxStoveCompatr;
	record BtrxAllMaterialsVc BtrxAllMaterialsr;
	
	
	BlockLoad(Compb);
		
	curcomp = currentcompany;
	BlockLoad(CCB);
	NewValidClassif = false;
  res = 0;
  insertmode = 1;
  updatemode = 2;
  BlockLoad(NCCHb);
  
  CompQty = matrowcnt(Compb);
	oldComp = currentcompany;
  matrowget(newINr,0,newINrw);
  if(NCCHb.ClassifCheck==1 and newINr.Brand!="BRND0046" and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4) )then begin
		if(blank(newINr.Group))then begin
			RecordCheckError(1058,"",-1,"Group");      
			res = -1; 
			goto LNewINVcRecordCheck;
		end;
		if(blank(newINr.Brand))then begin
			RecordCheckError(1058,"",-1,"Brand");      
			res = -1; 
			goto LNewINVcRecordCheck;
		end;
  end;
	
  if (newINr.OKFlag==1) then begin		//Edit----------------------Dima  09.03.2016
    rowGroupf = false;
		
		mtrw = matrowcnt(newINr);
		for (i=0;i<mtrw;i=i+1) begin
			GroupCode = "";
			matrowget(newINr,i,newINrw);
			GroupCode = newINr.Group;
			if(nonblank(newINrw.Group))then begin
				GroupCode = newINrw.Group;
			end;
			if((NewINrw.ConsgType==3 or NewINrw.ConsgType==4) and (GroupCode!="ЗСС" and GroupCode!="МОВ" and GroupCode!="НМА" and GroupCode!="ПОС" and GroupCode!="ТРС"))then begin
				res = -1;
				RecordCheckError(36306,"",i,"Group");
				goto LNewINVcRecordCheck;
			end;
			if(blank(newINrw.Group) and blank(newINr.Group)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
				res = -1;
				RecordCheckError(36307,"",i,"Group");
				goto LNewINVcRecordCheck;
			end;
			 // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:40 28.12.2020
			// if(blank(newINrw.BTRxGroup) and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
				// res = -1;
				// RecordCheckError(36307,"",i,"BTRxGroup");
				// goto LNewINVcRecordCheck;
			// end;
			 // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:40 28.12.2020
			if(newINrw.ConsgType==1) then begin
				newINrw.ConsgType = 0;
				matrowput(newINr,i,newINrw);
				matrowget(newINr,i,newINrw);
			end;
		end;
		
    switch (CurrentCompany) begin
		  case 9: insertDispNameNotCode = true;
		end;
    if(NCCHb.ClassifCheck==0)then begin
			BlockLoad(DiCb); //Edit***************************Sasha2,16:53 07.12.2015 {
			
			mtrw = MatRowCnt(DiCb);
			if (mtrw>0) then begin
				for (i=0;i<mtrw;i=i+1) begin
					MatRowGet(DiCb,i,DiCbw);
					if (NonBlank(DiCbw.DiCode) and NonBlank(DiCbw.DiType)) then begin
						diCheckTypes[DiCbw.DiCode] = DiCbw.DiType;
					end;
				end;
			end; //Edit***************************Sasha2,16:53 07.12.2015 }
    end;
    group = "";
  	if (NonBlank(newINr.Brand)) then begin
  	  DIr.Code = newINr.Brand;
  		readfirstmain(DIr,1,true);
  		ITr.Comment = DIr.Name;
  		if(readlastkey("Comment",ITr,1,true))then begin
  			group = ITr.Code;
  	  end;
  	end;
    // ___________________________________ABR Barcode VE code Check 20.12.19    
    mtrw = matrowcnt(newINr);
		for (i=0;i<mtrw;i=i+1) begin
			matrowget(newINr,i,newINrw);
			if(nonblank(newINrw.NewBarCode)) then begin
				if(BarVector[newINrw.NewBarCode]) then begin
					res = -1;
					RecordCheckError(36330,"в строках " & i+1 & " и " & rowBarCode[newINrw.NewVECode],i,"NewBarCode");
					goto LNewINVcRecordCheck;
				end;
				BarVector[newINrw.NewBarCode] = true;
				rowBarCode[newINrw.NewBarCode] = i+1;
			end;	
			if(nonblank(newINrw.NewVECode)) then begin
				if(BarVector[newINrw.NewVECode]) then begin
					res = -1;
					RecordCheckError(36330,"в строках " & i & " и " & rowBarCode[newINrw.NewVECode],i,"NewVECode");
					goto LNewINVcRecordCheck;
				end;
				BarVector[newINrw.NewVECode] = true;
				rowBarCode[newINrw.NewVECode] = i+1;
			end;	
			if(currentcompany==18 and nonblank(newINrw.VendorCode)) then begin
				if(VEcodeVector[newINrw.VendorCode]) then begin
					res = -1;
					RecordCheckError(36330,"в строках " & i & " и " & rowVECode[newINrw.VendorCode],i,"VendorCode");
					goto LNewINVcRecordCheck;
				end;
				VEcodeVector[newINrw.VendorCode] = true;
				rowVECode[newINrw.VendorCode] = i+1;
			end;	
		end;
		
		for (i=0;i<mtrw;i=i+1) begin
			CompFlag = true;
			matrowget(newINr,i,newINrw);
			if(CCB.OKFlag!=0) then begin
				for (j=0;j<CompQty;j=j+1)begin
					matrowget(Compb,j,Comprw);
					if(Comprw.ActiveStatus==0 and j+1!=10 and j+1!=6 and j+1!=32 and j+1!=33)then begin
						SetCompany(j+1,false);
						tmpINr.Code = newINrw.VendorCode;
						if(ReadFirstMain(tmpINr,1,true)) then begin
							if(tmpINr.BPIBrand==newINr.Brand) then begin
									CompFlag = false;
									if(blank(companies[newINrw.VendorCode])) then begin
										companies[newINrw.VendorCode] = Comprw.ShortName;
									end else begin
										companies[newINrw.VendorCode] = companies[newINrw.VendorCode] & "," & Comprw.ShortName;
									end;	
							end else begin
								if(blank(tmpINr.BPIBrand)) then begin
									res = -1;
									RecordCheckError(31228," \"BRAND\": не заполнена!  Компания " & Comprw.ShortName,i,"VendorCode");
									goto LNewINVcRecordCheck;
								end;
							end;
						end;
						tmpINr.Code = newINrw.Code;
						if(ReadFirstMain(tmpINr,1,true)) then begin
							if(tmpINr.BPIBrand==newINr.Brand) then begin
									CompFlag = false;
									if(blank(companies[newINrw.Code])) then begin
										companies[newINrw.Code] = Comprw.ShortName;
									end else begin
										companies[newINrw.Code] = companies[newINrw.Code] & "," & Comprw.ShortName;
									end;	
							end else begin
								if(blank(tmpINr.BPIBrand)) then begin
									res = -1;
									RecordCheckError(31228," \"BRAND\": не заполнена!  Компания " & Comprw.ShortName,i,"VendorCode");
									goto LNewINVcRecordCheck;
								end;
							end;
						end;
					end;
				end;
				SetCompany(oldComp,false);
			end;
		end;
				
		if(NCCHb.ClassifCheck==1 and newINr.Brand!="BRND0046" and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4) and CurrentCompany!=29)then begin
			testf = false;
			if(nonblank(newINr.Brand))then begin
				Brandr.Code = newINr.Brand;
				if(ReadFirstMain(Brandr,1,true))then begin
					testf = true;
				end else begin
					Brandr.Name = newINr.Brand;
					if(ReadFirstKey("Name",Brandr,1,true))then begin
						testf = true;
					end;
				end;
				if(!testf)then begin
					res = -1;
					RecordCheckError(31228," \"BRAND\": неверное значение!",-1,"Brand");
					goto LNewINVcRecordCheck;
				end;
				if(Brandr.Closed!=0) then begin
					res = -1;
					RecordCheckError(31228," \"BRAND\": закрыта!",-1,"Brand");
					goto LNewINVcRecordCheck;
				end;
			end;
		
			for (i=0;i<mtrw;i=i+1) begin
				CompFlag = true;
				matrowget(newINr,i,newINrw);
				

				clearvector(AllSetTypes);
				clearvector(vclasstipecode);
				clearvector(vclassification);
				cleararray(aTipeClass);
				clearvector(vclassificationfield);
				clearvector(vclassification);
				
				newINrw.BrandSC = NewINr.Brand;
				t = 0;
				vclassification["BRAND"] = NewINrw.BrandSC;
				Brandr.Code = NewINrw.BrandSC;
				if(nonblank(Brandr.Code) and !readfirstmain(Brandr,1,true)  and newINrw.ConsgType!=3)then begin
					res = -1;
					RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: BRAND",i,"BrandSC");
					goto LNewINVcRecordCheck;
				end;
				if(nonblank(Brandr.Code) and Brandr.Closed!=0  and newINrw.ConsgType!=3)then begin
					res = -1;
					RecordCheckError(31228," " & vclassification["BRAND"] & " Закрыта: BRAND",i,"BrandSC");
					goto LNewINVcRecordCheck;
				end;
				aTipeClass[t] = "CATEGORY";
				vclassificationfield[aTipeClass[t]] = "classif31";
				vclassification["CATEGORY"] = NewINrw.classif31;
				BPICategoryr.Name = NewINrw.classif31;
				if (!readfirstkey("Name", BPICategoryr,1,true)) then begin
					BPICategoryr.Code = NewINrw.classif31;
					if(nonblank(BPICategoryr.Code) and !readfirstmain(BPICategoryr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: CATEGORY",i,"classif31");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.classif31 = BPICategoryr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["CATEGORY"] = NewINrw.classif31;
				end;
				aTipeClass[t+=1] = "CLARITY";
				vclassificationfield[aTipeClass[t]] = "ClaritySC";
				vclassification["CLARITY"] = NewINrw.ClaritySC;			
				BPIClarityr.Name = NewINrw.ClaritySC;
				if (!readfirstkey("Name", BPIClarityr,1,true)) then begin
					BPIClarityr.Code = NewINrw.ClaritySC;
					if(nonblank(BPIClarityr.Code) and !readfirstmain(BPIClarityr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: CLARITY",i,"ClaritySC");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.ClaritySC = BPIClarityr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["CLARITY"] = NewINrw.ClaritySC;			
				end;
				
				if(blank(NewINrw.Collection))then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 21 10 2020 y. at 9:41:07 AM
					res = -1;
					RecordCheckError(1058," Коллекция должна быть заполнена",i,"Collection");
					goto LNewINVcRecordCheck;
				end;
				
				vclassification["COLLECT"] = NewINrw.Collection;
				Collectr.Name = NewINrw.Collection;
				if (!readfirstkey("Name", Collectr,1,true)) then begin
					Collectr.Code = NewINrw.Collection;
					if(nonblank(Collectr.Code) and !readfirstmain(Collectr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: COLLECT",i,"Collection");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.Collection = Collectr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["COLLECT"] = NewINrw.Collection;			
				end;
				
				aTipeClass[t+=1] = "COLOR";
				vclassificationfield[aTipeClass[t]] = "Color";
				vclassification["COLOR"] = NewINrw.Color;
				BPIColorr.Name = NewINrw.Color;
				if (!readfirstkey("Name", BPIColorr,1,true)) then begin
					BPIColorr.Code = NewINrw.Color;
					if(nonblank(BPIColorr.Code) and !readfirstmain(BPIColorr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: COLOR",i,"Color");
						goto LNewINVcRecordCheck;
					end;
					BPIColorr.Code = NewINrw.Color;
					if (nonblank(BPIColorr.Code) and readfirstmain(BPIColorr,1,true)) then begin
						CheckCreateBtrxClass("COLOR",BPIColorr.Name);
					end;
				end else begin
					CheckCreateBtrxClass("COLOR",NewINrw.Color);
					NewINrw.Color = BPIColorr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["COLOR"] = NewINrw.Color;			
				end;
				
				aTipeClass[t+=1] = "CUT";
				vclassificationfield[aTipeClass[t]] = "CutCl";
				vclassification["CUT"] = NewINrw.CutCl;
				BPICutr.Name = NewINrw.CutCl;
				if (!readfirstkey("Name", BPICutr,1,true)) then begin
					BPICutr.Code = NewINrw.CutCl;
					if(nonblank(BPICutr.Code) and !readfirstmain(BPICutr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: CUT",i,"CutCl");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.CutCl = BPICutr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["CUT"] = NewINrw.CutCl;
				end;
				
				vclassification["GROUP"] = NewINrw.GroupCl;
				Groupr.Name = NewINrw.GroupCl;
				if (!readfirstkey("Name", Groupr,1,true)) then begin
					Groupr.Code = NewINrw.GroupCl;
					if(nonblank(Groupr.Code) and !readfirstmain(Groupr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: GROUP",i,"GroupCl");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.GroupCl = Groupr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["GROUP"] = NewINrw.GroupCl;
				end;
				
				aTipeClass[t+=1] = "MATERIAL";
				vclassificationfield[aTipeClass[t]] = "Material";
				vclassification["MATERIAL"] = NewINrw.Material;				
				BPIMaterialr.Name = NewINrw.Material;
				if (!readfirstkey("Name", BPIMaterialr,1,true)) then begin
					BPIMaterialr.Code = NewINrw.Material;
					if(nonblank(BPIMaterialr.Code) and !readfirstmain(BPIMaterialr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: MATERIAL",i,"Material");
						goto LNewINVcRecordCheck;
					end;
					BPIMaterialr.Code = NewINrw.Material;
					if (nonblank(BPIMaterialr.Code) and readfirstmain(BPIMaterialr,1,true)) then begin
						CheckCreateBtrxClass("MATERIAL",BPIMaterialr.Name);
					end;
				end else begin
					CheckCreateBtrxClass("MATERIAL",NewINrw.Material);
					NewINrw.Material = BPIMaterialr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["MATERIAL"] = NewINrw.Material;		
				end;
				
				
				aTipeClass[t+=1] = "ODOUR";
				vclassificationfield[aTipeClass[t]] = "OdourCl";
				vclassification["ODOUR"] = NewINrw.OdourCl;				
				
				BPIOdourr.Name = NewINrw.OdourCl;
				if (!readfirstkey("Name", BPIOdourr,1,true)) then begin
					BPIOdourr.Code = NewINrw.OdourCl;
					if(nonblank(BPIOdourr.Code) and !readfirstmain(BPIOdourr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: ODOUR",i,"OdourCl");
						goto LNewINVcRecordCheck;
					end;
					BPIOdourr.Code = NewINrw.OdourCl;
					if (nonblank(BPIOdourr.Code) and readfirstmain(BPIOdourr,1,true)) then begin
						CheckCreateBtrxClass("ODOUR",BPIOdourr.Name);
					end;
				end else begin
					CheckCreateBtrxClass("ODOUR",NewINrw.OdourCl);
					NewINrw.OdourCl = BPIOdourr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["ODOUR"] = NewINrw.OdourCl;				
				end;
				
				aTipeClass[t+=1] = "PLATING";
				vclassificationfield[aTipeClass[t]] = "PlatingCl";
				vclassification["PLATING"] = NewINrw.PlatingCl;				
				BPIPlatingr.Name = NewINrw.PlatingCl;
				if (!readfirstkey("Name", BPIPlatingr,1,true)) then begin
					BPIPlatingr.Code = NewINrw.PlatingCl;
					if(nonblank(BPIPlatingr.Code) and !readfirstmain(BPIPlatingr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: PLATING",i,"PlatingCl");
						goto LNewINVcRecordCheck;
					end;
					BPIPlatingr.Code = NewINrw.PlatingCl;
					if (nonblank(BPIPlatingr.Code) and readfirstmain(BPIPlatingr,1,true)) then begin
						CheckCreateBtrxClass("PLATING",BPIPlatingr.Name);
					end;
				end else begin
					CheckCreateBtrxClass("PLATING",NewINrw.OdourCl);
					NewINrw.PlatingCl = BPIPlatingr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["PLATING"] = NewINrw.PlatingCl;				
				end;
								
				aTipeClass[t+=1] = "SEX";
				vclassificationfield[aTipeClass[t]] = "SexCl";
				vclassification["SEX"] = NewINrw.SexCl;
				BPISexr.Name = NewINrw.SexCl;
				if (!readfirstkey("Name", BPISexr,1,true)) then begin
					BPISexr.Code = NewINrw.SexCl;
					if(nonblank(BPISexr.Code) and !readfirstmain(BPISexr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: SEX",i,"SexCl");
						goto LNewINVcRecordCheck;
					end;
					BPISexr.Code = NewINrw.SexCl;
					if (nonblank(BPISexr.Code) and readfirstmain(BPISexr,1,true)) then begin
						CheckCreateBtrxClass("SEX",BPISexr.Name);
					end;
				end else begin
					CheckCreateBtrxClass("SEX",NewINrw.SexCl);
					NewINrw.SexCl = BPISexr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["SEX"] = NewINrw.SexCl;
				end;
								
				aTipeClass[t+=1] = "SHAPE";
				vclassificationfield[aTipeClass[t]] = "ShapeCut";
				vclassification["SHAPE"] = NewINrw.ShapeCut;
				BPIShaper.Name = NewINrw.ShapeCut;
				if (!readfirstkey("Name", BPIShaper,1,true)) then begin
					BPIShaper.Code = NewINrw.ShapeCut;
					if(nonblank(BPIShaper.Code) and !readfirstmain(BPIShaper,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: SHAPE",i,"ShapeCut");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.ShapeCut = BPIShaper.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["SHAPE"] = NewINrw.ShapeCut;
				end;
				
				aTipeClass[t+=1] = "SIZE";
				vclassificationfield[aTipeClass[t]] = "SizeCl";
				vclassification["SIZE"] = NewINrw.SizeCl;
				BPISizer.Name = NewINrw.SizeCl;
				if (!readfirstkey("Name", BPISizer,1,true)) then begin
					BPISizer.Code = NewINrw.SizeCl;
					if(nonblank(BPISizer.Code) and !readfirstmain(BPISizer,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: SIZE",i,"SizeCl");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.SizeCl = BPISizer.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["SIZE"] = NewINrw.SizeCl;
				end;
				
				aTipeClass[t+=1] = "STRAP";
				vclassificationfield[aTipeClass[t]] = "Strap";
				vclassification["STRAP"] = NewINrw.Strap;
				BPIStrapr.Name = NewINrw.Strap;
				if (!readfirstkey("Name", BPIStrapr,1,true)) then begin
					BPIStrapr.Code = NewINrw.Strap;
					if(nonblank(BPIStrapr.Code) and !readfirstmain(BPIStrapr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: STRAP",i,"Strap");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.Strap = BPIStrapr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["STRAP"] = NewINrw.Strap;
				end;
				
				aTipeClass[t+=1] = "STONE";
				vclassificationfield[aTipeClass[t]] = "StoneCl";
				vclassification["STONE"] = NewINrw.StoneCl;
				BPIStoner.Name = NewINrw.StoneCl;
				if (!readfirstkey("Name", BPIStoner,1,true)) then begin
					BPIStoner.Code = NewINrw.StoneCl;
					if(nonblank(BPIStoner.Code) and !readfirstmain(BPIStoner,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: STONE",i,"StoneCl");
						goto LNewINVcRecordCheck;
					end;
					BPIStoner.Code = NewINrw.StoneCl;
					if (nonblank(BPIStoner.Code) and readfirstmain(BPIStoner,1,true)) then begin
						CheckCreateBtrxClass("STONE",BPIStoner.Name);
					end;
				end else begin
					CheckCreateBtrxClass("STONE",NewINrw.StoneCl);
					NewINrw.StoneCl = BPIStoner.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["STONE"] = NewINrw.StoneCl;
				end;
				
				
				aTipeClass[t+=1] = "WEIGHT";
				vclassificationfield[aTipeClass[t]] = "WeightCl";
				vclassification["WEIGHT"] = NewINrw.WeightCl;
				BPIWeightr.Name = NewINrw.WeightCl;
				if (!readfirstkey("Name", BPIWeightr,1,true)) then begin
					BPIWeightr.Code = NewINrw.WeightCl;
					if(nonblank(BPIWeightr.Code) and !readfirstmain(BPIWeightr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: WEIGHT",i,"WeightCl");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.WeightCl = BPIWeightr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["WEIGHT"] = NewINrw.WeightCl;
				end;
				vclassification["SUBGROUP"] = NewINrw.SubGroupCl;
				SGroupr.Name = NewINrw.SubGroupCl;
				if (!readfirstkey("Name", SGroupr,1,true)) then begin
					SGroupr.Code = NewINrw.SubGroupCl;
					if(nonblank(SGroupr.Code) and !readfirstmain(SGroupr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: SUBGROUP",i,"SubGroupCl");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.SubGroupCl = SGroupr.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["SUBGROUP"] = NewINrw.SubGroupCl;
				end;
				
				
				aTipeClass[t+=1] = "USE";
				vclassificationfield[aTipeClass[t]] = "UseCl";
				vclassification["USE"] = NewINrw.UseCl;
				BPIUser.Name = NewINrw.UseCl;
				if (!readfirstkey("Name", BPIUser,1,true)) then begin
					BPIUser.Code = NewINrw.UseCl;
					if(nonblank(BPIUser.Code) and !readfirstmain(BPIUser,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: USE",i,"UseCl");
						goto LNewINVcRecordCheck;
					end;
				end else begin
					NewINrw.UseCl = BPIUser.Code;
					matrowput(NewINr,i,NewINrw);
					vclassification["USE"] = NewINrw.UseCl;
				end;

				tcnt = t + 1;
				
				TrHs = true;
				NCSr.Group = "";
				while (loopmain(NCSr,1,TrHs)) begin
					if(NCSr.Type==vclassification["SUBGROUP"]  and newINrw.ConsgType!=3)then begin
						rwcnt = matrowcnt(NCSr);
						for (j=0;j<rwcnt;j=j+1)begin
							matrowget(NCSr,j,NCSrw);
							AllSetTypes[NCSrw.CType] = true;
							if(blank(vclassification[NCSrw.CType])  and newINrw.ConsgType!=3)then begin
								res = -1;
								RecordCheckError(31228," с типом: " & NCSrw.CType & " должна быть заполнена!",i,vclassificationfield[NCSrw.CType]);
								goto LNewINVcRecordCheck;
							end else begin
								vclasstipecode[NCSrw.CType & NCSrw.CCode] = true;
							end;
						end;
						BCSr.Type = newINrw.ProductNameCode;
						if (ReadFirstMain(BCSr,1,true)) then begin
							rwcnt = matrowcnt(BCSr);
							for (j=0;j<rwcnt;j=j+1)begin
								matrowget(BCSr,j,BCSrw);
								if (BCSrw.CType=="MATERIALS") then begin BCSrw.CType = "MATERIAL"; end;
								if (nonblank(vclassificationfield[BCSrw.CType])) then begin
									AllSetTypes[BCSrw.CType] = true;
								end;
							end;
						end;
						for (j=0;j<rwcnt;j=j+1)begin
							matrowget(NCSr,j,NCSrw);
							if(!vclasstipecode[NCSrw.CType & vclassification[NCSrw.CType]]  and newINrw.ConsgType!=3)then begin
								res = -1;
								RecordCheckError(31228," " & vclassification[NCSrw.CType] & " недопустима для данного типа классификации: " & NCSrw.CType,i,vclassificationfield[NCSrw.CType]);
								goto LNewINVcRecordCheck;
							end;
						end;
						for (j=0;j<rwcnt;j=j+1)begin
							matrowget(NCSr,j,NCSrw);
							vclasstipecode[NCSrw.CType & NCSrw.CCode] = false;
						end;
						TrHs = false;
					end;
				end;
				ResetLoop(NCSr);

				for (t=0;t<tcnt;t=t+1) begin
					if(nonblank(vclassification[aTipeClass[t]]) and AllSetTypes[aTipeClass[t]]==false  and newINrw.ConsgType!=3)then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа: " & aTipeClass[t],i,vclassificationfield[aTipeClass[t]]);
						goto LNewINVcRecordCheck;
					end;
				end;
				
				clearvector(AllSetTypes);
				clearvector(vclasstipecode);
				
				if (nonblank(NewINrw.ProductNameCode)) then begin
					cleararray(aTipeClass);
					clearvector(vclassificationfield);
					clearvector(vclassification);
					
					BtrxTyper.Name = NewINrw.ProductNameCode;
					if (readfirstkey("Name",BtrxTyper,1,true)) then begin
						NewINrw.ProductNameCode = BtrxTyper.Code;
						matrowput(NewINr,i,NewINrw);
					end;
					
					
					t=0;
					
					aTipeClass[t] = "LENGTH";
					vclassificationfield[aTipeClass[t]] = "Length2";
					if (nonblank(NewINrw.Length2)) then begin
						vclassification["LENGTH"] = NewINrw.Length2;
						strval = stringToVal(newINrw.Length2,M4Val);
						newINrw.Length2 = strval;
						newINrw.Length2 = left (newINrw.Length2,len(newINrw.Length2)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: LENGTH",i,"Length2");
							goto LNewINVcRecordCheck;
						end;
					end;
					aTipeClass[t+=1] = "WIDTH";
					vclassificationfield[aTipeClass[t]] = "Width2";
					if (nonblank(NewINrw.Width2)) then begin
						vclassification["WIDTH"] = NewINrw.Width2;
						strval = stringToVal(newINrw.Width2,M4Val);
						newINrw.Width2 = strval;
						newINrw.Width2 = left (newINrw.Width2,len(newINrw.Width2)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: WIDTH",i,"Width2");
							goto LNewINVcRecordCheck;
						end;
					end;
					aTipeClass[t+=1] = "HEIGHT";
					vclassificationfield[aTipeClass[t]] = "Height2";
					if (nonblank(NewINrw.Height2)) then begin
						vclassification["HEIGHT"] = NewINrw.Height2;
						strval = stringToVal(newINrw.Height2,M4Val);
						newINrw.Height2 = strval;
						newINrw.Height2 = left (newINrw.Height2,len(newINrw.Height2)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: HEIGHT",i,"Height2");
							goto LNewINVcRecordCheck;
						end;
					end;
					
					aTipeClass[t+=1] = "DIAMETER";
					vclassificationfield[aTipeClass[t]] = "Diameter2";
					if (nonblank(NewINrw.Diameter2)) then begin
						vclassification["DIAMETER"] = NewINrw.Diameter2;
						strval = stringToVal(newINrw.Diameter2,M4Val);
						newINrw.Diameter2 = strval;
						newINrw.Diameter2 = left (newINrw.Diameter2,len(newINrw.Diameter2)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: DIAMETER",i,"Diameter2");
							goto LNewINVcRecordCheck;
						end;
					end;
					
					aTipeClass[t+=1] = "VOLUME";
					vclassificationfield[aTipeClass[t]] = "Volume2";
					if (nonblank(NewINrw.Volume2)) then begin
						vclassification["VOLUME"] = NewINrw.Volume2;
						strval = stringToVal(newINrw.Volume2,M4Val);
						newINrw.Volume2 = strval;
						newINrw.Volume2 = left (newINrw.Volume2,len(newINrw.Volume2)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: VOLUME",i,"Volume2");
							goto LNewINVcRecordCheck;
						end;
					end;
					
					aTipeClass[t+=1] = "WEIGHT";
					vclassificationfield[aTipeClass[t]] = "WeightCl";
					if (nonblank(NewINrw.WeightCl)) then begin
						vclassification["WEIGHT"] = NewINrw.WeightCl;
						strval = stringToVal(newINrw.WeightCl,M4Val);
						newINrw.WeightCl = strval;
						newINrw.WeightCl = left (newINrw.WeightCl,len(newINrw.WeightCl)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: WEIGHT",i,"WeightCl");
							goto LNewINVcRecordCheck;
						end;
					end;
					
					aTipeClass[t+=1] = "IT_SIZE";
					vclassificationfield[aTipeClass[t]] = "ItemSize";
					if (nonblank(NewINrw.ItemSize)) then begin
						vclassification["IT_SIZE"] = NewINrw.ItemSize;
						strval = stringToVal(newINrw.ItemSize,M4Val);
						newINrw.ItemSize = strval;
						newINrw.ItemSize = left (newINrw.ItemSize,len(newINrw.ItemSize)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: IT_SIZE",i,"ItemSize");
							goto LNewINVcRecordCheck;
						end;
					end;
					
					aTipeClass[t+=1] = "ALL_MAT";
					vclassificationfield[aTipeClass[t]] = "AllMaterials";
					vclassification["ALL_MAT"] = NewINrw.AllMaterials;
					BtrxAllMaterialsr.Name = NewINrw.AllMaterials;
					if (!readfirstkey("Name", BtrxAllMaterialsr,1,true)) then begin
						BtrxAllMaterialsr.Code = NewINrw.AllMaterials;
						if(nonblank(BtrxAllMaterialsr.Code) and !readfirstmain(BtrxAllMaterialsr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: ALL_MAT",i,"AllMaterials");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.AllMaterials = BtrxAllMaterialsr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["ALL_MAT"] = NewINrw.AllMaterials;
					end;					
					
					aTipeClass[t+=1] = "C_IN_SET";
					vclassificationfield[aTipeClass[t]] = "CountInSet";
					if (nonblank(NewINrw.CountInSet)) then begin
						vclassification["C_IN_SET"] = NewINrw.CountInSet;
						strval = stringToVal(newINrw.CountInSet,M4Val);
						newINrw.CountInSet = strval;
						newINrw.CountInSet = left (newINrw.CountInSet,len(newINrw.CountInSet)-3);
						if((strval<1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: C_IN_SET",i,"CountInSet");
							goto LNewINVcRecordCheck;
						end;
					end;
					aTipeClass[t+=1] = "CARAT";
					vclassificationfield[aTipeClass[t]] = "DiamondsCarat";
					if (nonblank(NewINrw.DiamondsCarat)) then begin
						vclassification["CARAT"] = NewINrw.DiamondsCarat;
						strval = stringToVal(newINrw.DiamondsCarat,M4Val);
						newINrw.DiamondsCarat = strval;
						newINrw.DiamondsCarat = left(newINrw.DiamondsCarat,len(newINrw.DiamondsCarat)-1);
						if(((strval<0.1 or strval>5) and newINrw.DiamondsCarat!=">5") and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: CARAT",i,"DiamondsCarat");
							goto LNewINVcRecordCheck;
						end;
					end;
					aTipeClass[t+=1] = "COMPLICAT";
					vclassificationfield[aTipeClass[t]] = "Complications";
					vclassification["COMPLICAT"] = NewINrw.Complications;
					BtrxComplicationsr.Name = NewINrw.Complications;
					if (!readfirstkey("Name", BtrxComplicationsr,1,true)) then begin
						BtrxComplicationsr.Code = NewINrw.Complications;
						if(nonblank(BtrxComplicationsr.Code) and !readfirstmain(BtrxComplicationsr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: COMPLICAT",i,"Complications");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.Complications = BtrxComplicationsr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["COMPLICAT"] = NewINrw.Complications;
					end;
					
					
					aTipeClass[t+=1] = "BAND_COL";
					vclassificationfield[aTipeClass[t]] = "StrapColourCode";
					vclassification["BAND_COL"] = NewINrw.StrapColourCode;
					BTRxColorr.Name = NewINrw.StrapColourCode;
					if (!readfirstkey("Name", BTRxColorr,1,true)) then begin
						BTRxColorr.Code = NewINrw.StrapColourCode;
						if(nonblank(BTRxColorr.Code) and !readfirstmain(BTRxColorr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: BAND_COL",i,"StrapColourCode");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.StrapColourCode = BTRxColorr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["BAND_COL"] = NewINrw.StrapColourCode;
					end;
					
					
					aTipeClass[t+=1] = "BAND_MAT";
					vclassificationfield[aTipeClass[t]] = "StrapMat";
					vclassification["BAND_MAT"] = NewINrw.StrapMat;
					BTRxMaterialr.Name = NewINrw.StrapMat;
					if (!readfirstkey("Name", BTRxMaterialr,1,true)) then begin
						BTRxMaterialr.Code = NewINrw.StrapMat;
						if(nonblank(BTRxMaterialr.Code) and !readfirstmain(BTRxMaterialr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: BAND_MAT",i,"StrapMat");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.StrapMat = BTRxMaterialr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["BAND_MAT"] = NewINrw.StrapMat;
					end;
					
					
					aTipeClass[t+=1] = "DIAL_COL";
					vclassificationfield[aTipeClass[t]] = "ClockFaceColourCode";
					vclassification["DIAL_COL"] = NewINrw.ClockFaceColourCode;
					BTRxColorr.Name = NewINrw.ClockFaceColourCode;
					if (!readfirstkey("Name", BTRxColorr,1,true)) then begin
						BTRxColorr.Code = NewINrw.ClockFaceColourCode;
						if(nonblank(BTRxColorr.Code) and !readfirstmain(BTRxColorr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: DIAL_COL",i,"ClockFaceColourCode");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.ClockFaceColourCode = BTRxColorr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["DIAL_COL"] = NewINrw.ClockFaceColourCode;
					end;
					
					
					aTipeClass[t+=1] = "DIAL_MAT";
					vclassificationfield[aTipeClass[t]] = "ClockFaceMaterialCode";
					vclassification["DIAL_MAT"] = NewINrw.ClockFaceMaterialCode;
					BTRxMaterialr.Name = NewINrw.ClockFaceMaterialCode;
					if (!readfirstkey("Name", BTRxMaterialr,1,true)) then begin
						BTRxMaterialr.Code = NewINrw.ClockFaceMaterialCode;
						if(nonblank(BTRxMaterialr.Code) and !readfirstmain(BTRxMaterialr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: DIAL_MAT",i,"ClockFaceMaterialCode");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.ClockFaceMaterialCode = BTRxMaterialr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["DIAL_MAT"] = NewINrw.ClockFaceMaterialCode;
					end;
					
					
					aTipeClass[t+=1] = "CASE_DIAM";
					vclassificationfield[aTipeClass[t]] = "CaseDiameter";
					if (nonblank(NewINrw.CaseDiameter)) then begin
						vclassification["CASE_DIAM"] = NewINrw.CaseDiameter;
						strval = stringToVal(newINrw.CaseDiameter,M4Val);
						newINrw.CaseDiameter = strval;
						newINrw.CaseDiameter = left (newINrw.CaseDiameter,len(newINrw.CaseDiameter)-1);
						if((strval<0.1 or strval>100) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: CASE_DIAM",i,"CaseDiameter");
							goto LNewINVcRecordCheck;
						end;
					end;
					
					aTipeClass[t+=1] = "WATCH_MECH";
					vclassificationfield[aTipeClass[t]] = "WatchMechanism";
					vclassification["WATCH_MECH"] = NewINrw.WatchMechanism;
					BtrxWatchMechanr.Name = NewINrw.WatchMechanism;
					if (!readfirstkey("Name", BtrxWatchMechanr,1,true)) then begin
						BtrxWatchMechanr.Code = NewINrw.WatchMechanism;
						if(nonblank(BtrxWatchMechanr.Code) and !readfirstmain(BtrxWatchMechanr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: WATCH_MECH",i,"WatchMechanism");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.WatchMechanism = BtrxWatchMechanr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["WATCH_MECH"] = NewINrw.WatchMechanism;
					end;
					
					aTipeClass[t+=1] = "POWER_RES";
					vclassificationfield[aTipeClass[t]] = "PowerReserve";
					vclassification["POWER_RES"] = NewINrw.PowerReserve;
					BtrxPowerReserver.Name = NewINrw.PowerReserve;
					if (!readfirstkey("Name", BtrxPowerReserver,1,true)) then begin
						BtrxPowerReserver.Code = NewINrw.PowerReserve;
						if(nonblank(BtrxPowerReserver.Code) and !readfirstmain(BtrxPowerReserver,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: POWER_RES",i,"PowerReserve");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.PowerReserve = BtrxPowerReserver.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["POWER_RES"] = NewINrw.PowerReserve;
					end;
					aTipeClass[t+=1] = "WATER_RES";
					vclassificationfield[aTipeClass[t]] = "WaterResistant";
					vclassification["WATER_RES"] = NewINrw.WaterResistant;
					BtrxWatResr.Name = NewINrw.WaterResistant;
					if (!readfirstkey("Name", BtrxWatResr,1,true)) then begin
						BtrxWatResr.Code = NewINrw.WaterResistant;
						if(nonblank(BtrxWatResr.Code) and !readfirstmain(BtrxWatResr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: WATER_RES",i,"WaterResistant");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.WaterResistant = BtrxWatResr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["WATER_RES"] = NewINrw.WaterResistant;
					end;
					
					aTipeClass[t+=1] = "PUNISH_C_G";
					vclassificationfield[aTipeClass[t]] = "StoneScattA2";
					if (nonblank(NewINrw.StoneScattA2)) then begin
						vclassification["PUNISH_C_G"] = NewINrw.StoneScattA2;
						strval = stringToVal(newINrw.StoneScattA2,M4Val);
						newINrw.StoneScattA2 = strval;
						newINrw.StoneScattA2 = left(newINrw.StoneScattA2,len(newINrw.StoneScattA2)-1);
						if(((strval<0.1 or strval>5) and newINrw.StoneScattA2!=">5") and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: PUNISH_C_G",i,"StoneScattA2");
							goto LNewINVcRecordCheck;
						end;
					end;
					
					aTipeClass[t+=1] = "ADD_PR_DES";
					vclassificationfield[aTipeClass[t]] = "AddProdDesc";
					vclassification["ADD_PR_DES"] = NewINrw.AddProdDesc;
					
					aTipeClass[t+=1] = "CARE";
					vclassificationfield[aTipeClass[t]] = "Care";
					vclassification["CARE"] = NewINrw.Care;
					
					aTipeClass[t+=1] = "PROD_FEAT";
					vclassificationfield[aTipeClass[t]] = "ProdFeat";
					vclassification["PROD_FEAT"] = NewINrw.ProdFeat;
					
					
					aTipeClass[t+=1] = "UN_OF_MEAS";
					vclassificationfield[aTipeClass[t]] = "UnitOfMeasurement";
					vclassification["UN_OF_MEAS"] = NewINrw.UnitOfMeasurement;
					
					
					
					aTipeClass[t+=1] = "FILLING";
					vclassificationfield[aTipeClass[t]] = "Filling";
					vclassification["FILLING"] = NewINrw.Filling;
					BtrxFillingr.Name = NewINrw.Filling;
					if (!readfirstkey("Name", BtrxFillingr,1,true)) then begin
						BtrxFillingr.Code = NewINrw.Filling;
						if(nonblank(BtrxFillingr.Code) and !readfirstmain(BtrxFillingr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: FILLING",i,"Filling");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.Filling = BtrxFillingr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["FILLING"] = NewINrw.Filling;
					end;
					
					
					aTipeClass[t+=1] = "MICRW_SAFE";
					vclassificationfield[aTipeClass[t]] = "MicrowaveSafe";
					vclassification["MICRW_SAFE"] = NewINrw.MicrowaveSafe;
					BtrxMicrowaveProtectr.Name = NewINrw.MicrowaveSafe;
					if (!readfirstkey("Name", BtrxMicrowaveProtectr,1,true)) then begin
						BtrxMicrowaveProtectr.Code = NewINrw.MicrowaveSafe;
						if(nonblank(BtrxMicrowaveProtectr.Code) and !readfirstmain(BtrxMicrowaveProtectr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: MICRW_SAFE",i,"MicrowaveSafe");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.MicrowaveSafe = BtrxMicrowaveProtectr.Code;
						matrowput(NewINr,i,NewINrw);
						vclassification["MICRW_SAFE"] = NewINrw.MicrowaveSafe;
					end;
					
					
					aTipeClass[t+=1] = "MATCH_STOV";
					vclassificationfield[aTipeClass[t]] = "MatchesKitchenStove";
					vclassification["MATCH_STOV"] = NewINrw.MatchesKitchenStove;
					BtrxStoveCompatr.Name = NewINrw.MatchesKitchenStove;
					if (!readfirstkey("Name", BtrxStoveCompatr,1,true)) then begin
						BtrxStoveCompatr.Code = NewINrw.MatchesKitchenStove;
						if(nonblank(BtrxStoveCompatr.Code) and !readfirstmain(BtrxStoveCompatr,1,true) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: MATCH_STOV",i,"MatchesKitchenStove");
							goto LNewINVcRecordCheck;
						end;
					end else begin
						NewINrw.MatchesKitchenStove = BtrxStoveCompatr.Code;
						matrowput(NewINr,1,NewINrw);
						vclassification["MATCH_STOV"] = NewINrw.MatchesKitchenStove;
					end;
					
					
					
					aTipeClass[t+=1] = "LIMITATION";
					vclassificationfield[aTipeClass[t]] = "LimitedGood";
					vclassification["LIMITATION"] = NewINrw.LimitedGood;
					if((nonblank(NewINrw.LimitedGood) and (NewINrw.LimitedGood!="YES" or NewINrw.LimitedGood!="NO"))and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: LIMITATION",i,"LimitedGood");
						goto LNewINVcRecordCheck;
					end;
					
					aTipeClass[t+=1] = "WARRANTY_I";
					vclassificationfield[aTipeClass[t]] = "Warranty";
					vclassification["WARRANTY_I"] = NewINrw.Warranty;
					if((nonblank(NewINrw.Warranty) and (NewINrw.Warranty!="YES" or NewINrw.Warranty!="NO")) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: WARRANTY_I",i,"Warranty");
						goto LNewINVcRecordCheck;
					end;
					
					aTipeClass[t+=1] = "SCTR_RES";
					vclassificationfield[aTipeClass[t]] = "Sctrchresistant";
					vclassification["SCTR_RES"] = NewINrw.Sctrchresistant;
					BtrxFillingr.Code = NewINrw.Sctrchresistant;
					if((nonblank(NewINrw.Sctrchresistant) and (NewINrw.Sctrchresistant!="YES" or NewINrw.Sctrchresistant!="NO")) and (newINrw.ConsgType!=3 and newINrw.ConsgType!=4))then begin
						res = -1;
						RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа классификации: SCTR_RES",i,"Sctrchresistant");
						goto LNewINVcRecordCheck;
					end;

					tcnt = t + 1;
					
					TrHs = true;
					BCSr.Type = NewINrw.ProductNameCode;
					logtext(0,BCSr.Type);
					if (ReadFirstMain(BCSr,1,true) and newINrw.ConsgType!=3) then begin
						rwcnt = matrowcnt(BCSr);
						for (j=0;j<rwcnt;j=j+1)begin
							matrowget(BCSr,j,BCSrw);
							if (nonblank(vclassificationfield[BCSrw.CType])) then begin
								AllSetTypes[BCSrw.CType] = true;
								logtext(0,AllSetTypes[BCSrw.CType]);
								if((blank(vclassification[BCSrw.CType]) or vclassification[BCSrw.CType]=="*") and newINrw.ConsgType!=3)then begin
									res = -1;
									RecordCheckError(31228," с типом: " & BCSrw.CType & " должна быть заполнена!",i,vclassificationfield[BCSrw.CType]);
									goto LNewINVcRecordCheck;
								end else begin
									vclasstipecode[BCSrw.CType & BCSrw.CCode] = true;
								end;
							end;
						end;
						for (j=0;j<rwcnt;j=j+1)begin
							matrowget(BCSr,j,BCSrw);
							if((!vclasstipecode[BCSrw.CType & vclassification[BCSrw.CType]] and nonblank(BCSrw.CCode)) and newINrw.ConsgType!=3)then begin
								res = -1;
								RecordCheckError(31228," " & vclassification[BCSrw.CType] & " недопустима для данного типа классификации: " & BCSrw.CType,i,vclassificationfield[BCSrw.CType]);
								goto LNewINVcRecordCheck;
							end;
						end;
						for (j=0;j<rwcnt;j=j+1)begin
							matrowget(BCSr,j,BCSrw);
							vclasstipecode[BCSrw.CType & BCSrw.CCode] = false;
						end;
					end;

					for (t=0;t<tcnt;t=t+1) begin
						if(nonblank(vclassification[aTipeClass[t]]) and AllSetTypes[aTipeClass[t]]==false  and newINrw.ConsgType!=3)then begin
							res = -1;
							RecordCheckError(31228," " & vclassification[aTipeClass[t]] & " не определена для данного типа: " & aTipeClass[t],i,vclassificationfield[aTipeClass[t]]);
							goto LNewINVcRecordCheck;
						end;
					end;
				end;
				clearvector(AllSetTypes);
				clearvector(vclasstipecode);
				clearvector(vclassification);
				cleararray(aTipeClass);
				clearvector(vclassificationfield);
				clearvector(vclassification);
			end;
		end;
		
		
    For(i=0;i<mtrw;i=i+1) begin
  	  matrowget(newINr,i,newINrw);
			if(nonblank(newINrw.BarCode)) then begin
				IN2r.BarCode = newINrw.BarCode;
				if(ReadFirstKey("BarCode",IN2r,1,true)) then begin
					if(IN2r.Code != newINrw.Code  and newINrw.ConsgType!=3) then begin
						RecordCheckError(31249," уже существует",i,"BarCode");      
						res = -1; 
						goto LNewINVcRecordCheck;
					end;	
				end;
			end;	
			if(blank(newINrw.Group)) then begin newINrw.Group = newINr.Group; end;
			
			if(currentcompany==28 and newINr.ItemMaterial==0) then begin
				if(blank(newINr.Brand)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4) then begin
					RecordCheckError(1058,"",-1,"Brand");      
					res = -1; 
					goto LNewINVcRecordCheck;
				end;
				if(blank(newINrw.GroupCl)) then begin newINrw.GroupCl = newINr.Group; end;
				if(blank(newINrw.BrandSC)) then begin newINrw.BrandSC = newINr.Brand; end;
				if(blank(newINrw.Name)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
					RecordCheckError(1058,"",i,"Name");      
					res = -1; 
					goto LNewINVcRecordCheck;
				end;	
				if(blank(newINr.Group)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
					RecordCheckError(1058,"",-1,"Group");      
					res = -1; 
					goto LNewINVcRecordCheck;
				end;	
				if(blank(newINrw.BrandSC)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
					RecordCheckError(1058,"",i,"BrandSC");      
					res = -1; 
					goto LNewINVcRecordCheck;
				end;	
				if(blank(newINrw.Category) and blank(newINrw.Code)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
					RecordCheckError(1058,"",i,"Category");      
					res = -1; 
					goto LNewINVcRecordCheck;
				end;	
				if(blank(newINrw.Unittext)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
					RecordCheckError(1058,"",i,"Unittext");      
					res = -1; 
					goto LNewINVcRecordCheck;
				end;	
			end;
			if(nonblank(newINrw.VendorCode)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4) then begin
				if(blank(newINr.Brand)) then begin
					RecordCheckError(1058,"",-1,"Brand");      
					res = -1; 
					goto LNewINVcRecordCheck;
				end;
			end;
			if(currentcompany==18 and blank(newINrw.VendorCode) and newINrw.ConsgType!=3 and newINrw.ConsgType!=4) then begin
				RecordCheckError(1058,"",i,"VendorCode");      
				res = -1; 
				goto LNewINVcRecordCheck;
			end;
			
  	  if(nonblank(newINrw.BrandSC) and currentcompany != 9 )then begin
				if(newINrw.BrandSC != newINr.Brand) then begin
					INr.Code = newINrw.Code;
					if(readfirstmain(INr,1,true))then begin
						if(nonblank(INr.BPIBrand)) then begin
							newINrw.BrandSC = INr.BPIBrand;
							matrowput(newINr,i,newINrw);
						end;	
					end;
					if(newINrw.BrandSC != newINr.Brand and nonblank(newINr.Brand)  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4) then begin
						logtext(0,newINrw.BrandSC);
						RecordCheckError(36209,"",i,"Code");      
						res = -1; 
						goto LNewINVcRecordCheck;
					end;
				end;	
  	  end;
			
  	  if(blank(newINrw.Code) and currentcompany!=28  and newINrw.ConsgType!=3 and newINrw.ConsgType!=4 and currentcompany!=18)then begin
  	  	RecordCheckError(1058,"",i,"Code");      
        res = -1; 
        goto LNewINVcRecordCheck;
  	  end;
	 
  	  upd = false;
  	  INr.Code = newINrw.Code;
  	  if(readfirstmain(INr,1,true))then begin
  	  	recordcopy(IN2r,INr);
  	  	upd = true;
  	  	stat1 = updatemode;
  	  	long41 = 1;
  	  	if(blank(newINr.Name) and blank(newINrw.Name) and newINr.PreOrderf==0)then begin
  	  		newINrw.Name = INr.Name;
  	  		matrowput(newINr,i,newINrw);
  	  		matrowget(newINr,i,newINrw);
  	  	end;
  	  end else begin
  	  	codestring = newINrw.Code;
  	  	NormalizeCodeName(codestring);
  	  	newINrw.Code = codestring;
  	  	matrowput(newINr,i,newINrw);
  	  	matrowget(newINr,i,newINrw);
  	  	recordnew(INr);
  	  	upd = false;
  	  	stat1 = insertmode;
        long41 = 1;
  	  	INr.Code = codestring;
  	  end;
  	  
  	  if(nonblank(newINr.DispGroups) and newINr.PreOrderf==0)then begin
  			pos = 0;
  			rawclass = newINr.DispGroups;
  			newINr.DispGroups = "";
  			ExtractObj(rawclass,pos,uloc);
  			while(nonblank(uloc)) begin
  				DIr.Code = uloc;
  				if(readfirstmain(DIr,1,true))then begin
  					newINr.DispGroups = newINr.DispGroups & DIr.Code & ",";
  				end else begin
  					DIr.Name = uloc;
  					if(readfirstkey("Name",DIr,1,true))then begin
  						newINr.DispGroups = newINr.DispGroups & DIr.Code & ",";
  					end else begin
  						newINr.DispGroups = newINr.DispGroups & uloc & ",";
  					end;
  				end;
  				ExtractObj(rawclass,pos,uloc);
  			end;
  			if(len(newINr.DispGroups)>0)then begin
  				if(mid(newINr.DispGroups,len(newINr.DispGroups)-1,1)==",")then begin
  					newINr.DispGroups = mid(newINr.DispGroups,0,len(newINr.DispGroups)-1);
  				end;			
  			end;
  		end;
  		
  		type = ""; //Edit***************************Sasha2,17:53 07.12.2015 { Special classifications for CATALOQUE
  	  if (nonblank(newINrw.Type) and len(diCheckTypes[newINrw.Type])>0 and newINr.PreOrderf==0 and newINrw.ConsgType!=4 and newINrw.ConsgType!=3) then begin 
        newdispstr = "";
        foundtypes = "";
  
  			if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Type,outdisps,ReturnFieldDIType("Type",false),mes)  and newINrw.ConsgType!=3) then begin
          RecordCheckError(9588,". " & mes,i,"Type");      
          res = -1; 
          goto LNewINVcRecordCheck;
        end else begin
          newINrw.Type = outdisps;
        end;
        type = newINrw.Type;
        
        if (NonBlank(newINr.Brand) and SetInSet(ReturnFieldDIType("Brand",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINr.Brand,outdisps,ReturnFieldDIType("Brand",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,-1,"Brand"); 
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            if (newINr.Brand!=outdisps) then begin
             newINr.Brand = outdisps; 
            end;
          end;
          HandleTypeField("Brand",newINr.Brand,diCheckTypes[type],newdispstr,foundtypes);
					
        end;
        
        if (NonBlank(newINrw.Collection) and SetInSet(ReturnFieldDIType("Collection",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Collection,outdisps,ReturnFieldDIType("Collection",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Collection");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Collection = outdisps;
          end;
          HandleTypeField("Collection",newINrw.Collection,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Style) and SetInSet(ReturnFieldDIType("Style",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Style,outdisps,ReturnFieldDIType("Style",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & ". " & mes,i,"Style");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Style = outdisps;
          end;
          HandleTypeField("Style",newINrw.Style,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //WatchType -> Warranty Card;
        if (NonBlank(newINrw.WatchType) and SetInSet(ReturnFieldDIType("WatchType",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.WatchType,outdisps,ReturnFieldDIType("WatchType",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"WatchType");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.WatchType = outdisps;
          end;
          HandleTypeField("WatchType",newINrw.WatchType,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.GenderSC) and SetInSet(ReturnFieldDIType("GenderSC",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.GenderSC,outdisps,ReturnFieldDIType("GenderSC",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"GenderSC");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.GenderSC = outdisps;
          end;
          HandleTypeField("GenderSC",newINrw.GenderSC,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Dial) and SetInSet(ReturnFieldDIType("Dial",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Dial,outdisps,ReturnFieldDIType("Dial",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Dial");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Dial = outdisps;
          end;
          HandleTypeField("Dial",newINrw.Dial,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Strap) and SetInSet(ReturnFieldDIType("Strap",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Strap,outdisps,ReturnFieldDIType("Strap",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Strap");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Strap = outdisps;
          end;
          HandleTypeField("Strap",newINrw.Strap,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Material) and SetInSet(ReturnFieldDIType("Material",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Material,outdisps,ReturnFieldDIType("Material",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Material");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Material = outdisps;
          end;
          HandleTypeField("Material",newINrw.Material,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //PrecStones -> Comment
        if (NonBlank(newINrw.PrecStones) and SetInSet(ReturnFieldDIType("PrecStones",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.PrecStones,outdisps,ReturnFieldDIType("PrecStones",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"PrecStones");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.PrecStones = outdisps;
          end;
          HandleTypeField("PrecStones",newINrw.PrecStones,diCheckTypes[type],newdispstr,foundtypes);
        end;
  
        if (NonBlank(newINrw.SerNrf)) then begin
          if (SetInSet(ReturnFieldDIType("SerNrf",false),diCheckTypes[type]) and newINrw.SerNrf==1) then begin
            HandleTypeField("SerNrf",newINrw.SerNrf,diCheckTypes[type],newdispstr,foundtypes);
          end else begin
            if (newINrw.SerNrf<0 or newINrw.SerNrf>1) then begin
              RecordCheckError(15093,". Should be \"1\" or \"0\" (\"Yes\" or \"No\")",i,"SerNrf");
              res = -1; 
              goto LNewINVcRecordCheck;
            end;
          end;
          
        end;
        
        if (NonBlank(newINrw.Mechanism) and SetInSet(ReturnFieldDIType("Mechanism",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Mechanism,outdisps,ReturnFieldDIType("Mechanism",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Mechanism");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Mechanism = outdisps;
          end;
          HandleTypeField("Mechanism",newINrw.Mechanism,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Function) and SetInSet(ReturnFieldDIType("Function",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Function,outdisps,ReturnFieldDIType("Function",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Function");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Function = outdisps;
          end;
          HandleTypeField("Function",newINrw.Function,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //WaterResist -> SAP
        if (NonBlank(newINrw.WaterResist) and SetInSet(ReturnFieldDIType("WaterResist",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.WaterResist,outdisps,ReturnFieldDIType("WaterResist",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"WaterResist");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.WaterResist = outdisps;
          end;
          HandleTypeField("WaterResist",newINrw.WaterResist,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Diameter) and SetInSet(ReturnFieldDIType("Diameter",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Diameter,outdisps,ReturnFieldDIType("Diameter",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Diameter");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Diameter = outdisps;
          end;
          HandleTypeField("Diameter",newINrw.Diameter,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Category) and SetInSet(ReturnFieldDIType("Category",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Category,outdisps,ReturnFieldDIType("Category",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Category");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Category = outdisps;
          end;
          HandleTypeField("Category",newINrw.Category,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Division) and SetInSet(ReturnFieldDIType("Division",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Division,outdisps,ReturnFieldDIType("Division",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Division");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Division = outdisps;
          end;
          HandleTypeField("Division",newINrw.Division,diCheckTypes[type],newdispstr,foundtypes);
        end;
                
        //Diamonds -> Category_A
        if (NonBlank(newINrw.Diamonds) and SetInSet(ReturnFieldDIType("Diamonds",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Diamonds,outdisps,ReturnFieldDIType("Diamonds",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Diamonds");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Diamonds = outdisps;
          end;
          HandleTypeField("Diamonds",newINrw.Diamonds,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.SolidStones05) and SetInSet(ReturnFieldDIType("SolidStones05",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.SolidStones05,outdisps,ReturnFieldDIType("SolidStones05",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"SolidStones05");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.SolidStones05 = outdisps;
          end;
          HandleTypeField("SolidStones05",newINrw.SolidStones05,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.PrecAndSemiPrec) and SetInSet(ReturnFieldDIType("PrecAndSemiPrec",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.PrecAndSemiPrec,outdisps,ReturnFieldDIType("PrecAndSemiPrec",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"PrecAndSemiPrec");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.PrecAndSemiPrec = outdisps;
          end;
          HandleTypeField("PrecAndSemiPrec",newINrw.PrecAndSemiPrec,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.RingSizes) and SetInSet(ReturnFieldDIType("RingSizes",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.RingSizes,outdisps,ReturnFieldDIType("RingSizes",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"RingSizes");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.RingSizes = outdisps;
          end;
          HandleTypeField("RingSizes",newINrw.RingSizes,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Carat) and SetInSet(ReturnFieldDIType("Carat",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Carat,outdisps,ReturnFieldDIType("Carat",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Carat");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Carat = outdisps;
          end;
          HandleTypeField("Carat",newINrw.Carat,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.ClaritySC) and SetInSet(ReturnFieldDIType("ClaritySC",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.ClaritySC,outdisps,ReturnFieldDIType("ClaritySC",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"ClaritySC");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.ClaritySC = outdisps;
          end;
          HandleTypeField("ClaritySC",newINrw.ClaritySC,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Color) and SetInSet(ReturnFieldDIType("Color",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Color,outdisps,ReturnFieldDIType("Color",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Color");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Color = outdisps;
          end;
          HandleTypeField("Color",newINrw.Color,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.ColorOfMat) and SetInSet(ReturnFieldDIType("ColorOfMat",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.ColorOfMat,outdisps,ReturnFieldDIType("ColorOfMat",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"ColorOfMat");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.ColorOfMat = outdisps;
          end;
          HandleTypeField("ColorOfMat",newINrw.ColorOfMat,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.ShapeCut) and SetInSet(ReturnFieldDIType("ShapeCut",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.ShapeCut,outdisps,ReturnFieldDIType("ShapeCut",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"ShapeCut");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.ShapeCut = outdisps;
          end;
          HandleTypeField("ShapeCut",newINrw.ShapeCut,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Description) and SetInSet(ReturnFieldDIType("Description",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Description,outdisps,ReturnFieldDIType("Description",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Description");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Description = outdisps;
          end;
          HandleTypeField("Description",newINrw.Description,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        if (NonBlank(newINrw.Art) and SetInSet(ReturnFieldDIType("Art",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.Art,outdisps,ReturnFieldDIType("Art",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"Art");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.Art = outdisps;
          end;
          HandleTypeField("Art",newINrw.Art,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif30 -> Coll_W
        if (NonBlank(newINrw.classif30) and SetInSet(ReturnFieldDIType("classif30",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif30,outdisps,ReturnFieldDIType("classif30",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"classif30");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif30 = outdisps;
          end;
          HandleTypeField("classif30",newINrw.classif30,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif31 -> Coll_A
        if (NonBlank(newINrw.classif31) and SetInSet(ReturnFieldDIType("classif31",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif31,outdisps,ReturnFieldDIType("classif31",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"classif31");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif31 = outdisps;
          end;
          HandleTypeField("classif31",newINrw.classif31,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif32 -> Style_A
        if (NonBlank(newINrw.classif32) and SetInSet(ReturnFieldDIType("classif32",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif32,outdisps,ReturnFieldDIType("classif32",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"classif32");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif32 = outdisps;
          end;
          HandleTypeField("classif32",newINrw.classif32,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif33 -> Material_W
        if (NonBlank(newINrw.classif33) and SetInSet(ReturnFieldDIType("classif33",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif33,outdisps,ReturnFieldDIType("classif33",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"classif33");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif33 = outdisps;
          end;
          HandleTypeField("classif33",newINrw.classif33,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        //classif34 -> Material_A
        if (NonBlank(newINrw.classif34) and SetInSet(ReturnFieldDIType("classif34",false),diCheckTypes[type])) then begin
          if (!DIsWithTypeExistsOrCreateSpecific(newINrw.classif34,outdisps,ReturnFieldDIType("classif34",false),mes)  and newINrw.ConsgType!=3) then begin
            RecordCheckError(9588,". " & mes,i,"classif34");      
            res = -1; 
            goto LNewINVcRecordCheck;
          end else begin
            newINrw.classif34 = outdisps;
          end;
          HandleTypeField("classif34",newINrw.classif34,diCheckTypes[type],newdispstr,foundtypes);
        end;
        
        pos = 0;
        rawclass = diCheckTypes[type];
        ExtractObj(rawclass,pos,uloc);
        while(nonblank(uloc)) begin
          if (!SetInSet(uloc,foundtypes) and newINrw.ConsgType!=3) then begin
            if (uloc=="BRAND") then begin
              RecordCheckError(1854,"",-1,"Brand");  
            end else begin
              RecordCheckError(1854,"",i,ReturnFieldDIType(uloc,true));
            end;  
            res = -1; 
            goto LNewINVcRecordCheck;
          end;
          ExtractObj(rawclass,pos,uloc);
  			end;
  			newINrw.DispGroups = type & "," & newdispstr;
  			matrowput(newINr,i,newINrw);
  	  end else begin //Edit***************************Sasha2,17:53 07.12.2015 }
  			newINrw.DispGroups = "";
  			newdispstr = "";
  			if(NCCHb.ClassifCheck!=1 and newINrw.ConsgType!=4 and newINrw.ConsgType!=3)then begin
  			//BrandSC -> Brand mes
					if (NonBlank(newINrw.BrandSC)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.BrandSC,outdisps,ReturnFieldDITypeNotJW("BrandSC"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"BrandSC");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.BrandSC = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end; 
					//classif30 -> Model
					if (NonBlank(newINrw.classif30)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.classif30,outdisps,ReturnFieldDITypeNotJW("classif30"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"classif30");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.classif30 = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//
					if (NonBlank(newINrw.Category)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.Category,outdisps,ReturnFieldDITypeNotJW("Category"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"Category");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.Category = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//classif31 -> Type of unit
					if (NonBlank(newINrw.classif31)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.classif31,outdisps,ReturnFieldDITypeNotJW("classif31"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"classif31");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.classif31 = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//
					if (NonBlank(newINrw.Collection)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.Collection,outdisps,ReturnFieldDITypeNotJW("Collection"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"Collection");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.Collection = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//
					if (NonBlank(newINrw.Metal)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.Metal,outdisps,ReturnFieldDITypeNotJW("Metal"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"Metal");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.Metal = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//
					if(currentcompany!=9)then begin
					if (NonBlank(newINrw.WeightOfMat)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.WeightOfMat,outdisps,ReturnFieldDITypeNotJW("WeightOfMat"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"WeightOfMat");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.WeightOfMat = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//
					if (NonBlank(newINrw.Carat)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.Carat,outdisps,ReturnFieldDITypeNotJW("Carat"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"Carat");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.Carat = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//
					end;
					if (NonBlank(newINrw.Size)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.Size,outdisps,ReturnFieldDITypeNotJW("Size"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"Size");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.Size = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
					//
					if (NonBlank(newINrw.Colour)) then begin
						if (!CheckDispAndCreateIfNeeded(newINrw.Colour,outdisps,ReturnFieldDITypeNotJW("Colour"),mes) and newINrw.ConsgType!=3) then begin
							RecordCheckError(9588,". " & mes,i,"Colour");      
							res = -1; 
							goto LNewINVcRecordCheck;
						end else begin
							newINrw.Colour = outdisps;
							newdispstr = newdispstr & outdisps & ",";
						end;
					end;
  			end;
  			switch (CurrentCompany) begin
  			  case 9: newdispstr = "GOODS," & newdispstr;
  			  case 28: newdispstr = "GOODS," & newdispstr;
  			end;
  			
  			newINrw.DispGroups = newdispstr;
  			if(len(newINrw.DispGroups)>0)then begin
  				if(Right(newINrw.DispGroups,1)==",")then begin
  					newINrw.DispGroups = mid(newINrw.DispGroups,0,len(newINrw.DispGroups)-1);
  				end;			
  			end;
  			matrowput(newINr,i,newINrw);
  		end;
  		
  		if(currentcompany==13)then begin
  		  if(nonblank(newINrw.DispGroups))then begin INr.DispGroups = newINrw.DispGroups;  end;	
  		end;
  		
  	  if(blank(newINrw.Name) and blank(newINr.Name) and newINr.PreOrderf==0 and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
  	  	RecordCheckError(1058,"",i,"Name");      
        res = -1; 
        goto LNewINVcRecordCheck;
  	  end;
  	  if(blank(newINrw.VATCode) and blank(newINr.VATCode) and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin
  	  	RecordCheckError(1058,"",i,"VATCode");      
        res = -1; 
        goto LNewINVcRecordCheck;
  	  end;
		end;
		mtrw = matrowcnt(newINr);
		For(i=0;i<mtrw;i=i+1) begin
			blockload(IINSNOb);
  	  matrowget(newINr,i,newINrw);
  	  type = newINrw.Type;
  	  upd = false;
			if(CurrentCompany==28 and newINr.OKFlag!=0 ) then begin
				if(!CheckAndPasteName(i,newINrw)) then begin
					res = -1; 
					goto LNewINVcRecordCheck;
				end;
			end;
			if(CurrentCompany==28 and blank(newINrw.Code) and nonblank(newINrw.Category)) then begin
				if(newINrw.ConsgType==0) then begin
					newINrw.SerNrf = 2;
				end else begin
					newINrw.SerNrf = 0;
				end;	
				INCatSClassArrayOnOpen(astr,acnt);
				for (j=0;j<acnt;j=j+1) begin
					if(left(astr[j],4)==newINrw.Category)then begin
						rwcnt = matrowcnt(IINSNOb);
						for (y=rwcnt;y>=0;y=y-1) begin
							matrowget(IINSNOb,y-1,IINSNOrw);
							if(IINSNOrw.Category==newINrw.Category)then begin
								Catef = true;
								SNMiddleval = IINSNOrw.SNMiddle + 1;
								IINSNOrw.SNMiddle = IINSNOrw.SNMiddle + 1;
								IINSNOrw.Category = newINrw.Category;
								matrowput(IINSNOb,rwcnt,IINSNOrw);
								SNOneNumber = ValToString(SNMiddleval,M4val,"","",1);
								SNOneNumber = left(SNOneNumber,len(SNOneNumber)-2);
								for (k=0;k<5;k=k+1) begin
									strlen = len(SNOneNumber);
									if(strlen<5)then begin 
										SNOneNumber = "0" & SNOneNumber;
									end else begin
										k = 5;
									end;
								end;
								newINrw.Code = newINrw.Category & "-" & SNOneNumber & "-1";
								matrowput(newINr,i,newINrw);
								BlockStore(IINSNOb);
								y=0;
							end;
						end;
						if (!Catef) then begin
							IINSNOrw.SNMiddle = 0;
							SNMiddleval = IINSNOrw.SNMiddle;
							IINSNOrw.Category = newINrw.Category;
							matrowput(IINSNOb,rwcnt,IINSNOrw);
							SNOneNumber = ValToString(SNMiddleval,M4val,"","",1);
							SNOneNumber = left(SNOneNumber,len(SNOneNumber)-2);
							for (k=0;k<5;k=k+1) begin
								strlen = len(SNOneNumber);
								if(strlen<5)then begin 
									SNOneNumber = "0" & SNOneNumber;
								end else begin
									k = 5;
								end;
							end;
							newINrw.Code = newINrw.Category & "-" & SNOneNumber & "-1";
							matrowput(newINr,i,newINrw);
							BlockStore(IINSNOb);
						end;
					end;
				end;
			end;		
			if(currentcompany==18) then begin
				if(stat==2) then begin
					if(newINr.OKFlag!=0 and newIN2r.OKFlag==0) then begin
						CheckItemCCBeforCreate(newINr,i);
					end;
				end;
				if(stat==1) then begin
						if(newINr.OKFlag!=0) then begin
						CheckItemCCBeforCreate(newINr,i);
					end;
				end;
				matrowget(newINr,i,newINrw);
				if(blank(newINrw.Code))then begin
					RecordCheckError(1058,"",i,"Code");      
					res = -1; 
					goto LNewINVcRecordCheck;
  	  end;
				INr.Code = newINrw.Code;
				if(readfirstmain(INr,1,true))then begin
					if(nonblank(INr.BPIBrand)) then begin
						newINrw.BrandSC = INr.BPIBrand;
						matrowput(newINr,i,newINrw);
					end;	
				end;
				if(nonblank(newINrw.NewVECode)) then begin
					Brandr.Code = newINr.Brand;
					if(ReadFirstMain(Brandr,1,true)) begin
						if(blank(Brandr.Vendor)) then begin
							RecordCheckError(36304,"",-1,"Brand"); 
							goto LNewINVcRecordCheck;
						end;
						PIr.VECode = Brandr.Vendor;
						PIr.VEItemCode = newINrw.NewVECode;
						if(ReadFirstKey("VEItemCode",PIr,4,true)) then begin
							if(PIr.ItemCode!=NewINrw.Code) then begin
								RecordCheckError(36210,"",i,"NewVECode"); 
								res = -1;
								goto LNewINVcRecordCheck;
							end;	
						end;
					end;	
				end;	
				if(nonblank(NewINrw.NewBarCode)) then begin
					BCr.Barcode = NewINrw.NewBarCode;
					if(ReadFirstMain(BCr,1,true)) then begin
						if(BCr.Itemcode!=NewINrw.Code) then begin
							res = -1;
						end;	
					end;
					INr.BarCode = NewINrw.NewBarCode;
					if(ReadFirstKey("BarCode",INr,1,true)) then begin
						if(INr.Code!=NewINrw.Code) then begin
							res = -1;
						end;	
					end;
					INr.AlternativeCode = NewINrw.NewBarCode;
					if(ReadFirstKey("AlternativeCode",INr,1,true)) then begin
						if(INr.Code!=NewINrw.Code) then begin
							res = -1;
						end;	
					end;
					if(res==-1) then begin
						RecordCheckError(36210,"",i,"NewBarCode"); 
						goto LNewINVcRecordCheck;
					end;	
				end;
				CompQty = matrowcnt(Compb);
				for (j=0;j<CompQty;j=j+1)begin
					matrowget(Compb,j,Comprw);
					if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(j+1) or j+1==3) and j+1!=33)then begin
						SetCompany(j+1,false);
						testINr.Code = newINrw.VendorCode;
						if(ReadFirstMain(testINr,1,true))then begin
							if(nonblank(newINrw.NewVECode)) then begin
								PIr.VECode = Brandr.Vendor;
								PIr.VEItemCode = newINrw.NewVECode;
								if(ReadFirstKey("VEItemCode",PIr,4,true)) then begin
									if(PIr.ItemCode!=NewINrw.VendorCode) then begin
										RecordCheckError(36210," в компании " & Comprw.ShortName,i,"NewVECode"); 
										res = -1;
										goto LNewINVcRecordCheck;
									end;	
								end;
							end;
							if(nonblank(NewINrw.NewBarCode)) then begin
								BCr.Barcode = NewINrw.NewBarCode;
								if(ReadFirstMain(BCr,1,true)) then begin
									if(BCr.Itemcode!=NewINrw.VendorCode) then begin
										res = -1;
									end;	
								end;
								INr.BarCode = NewINrw.NewBarCode;
								if(ReadFirstKey("BarCode",INr,1,true)) then begin
									if(INr.Code!=NewINrw.VendorCode) then begin
										res = -1;
									end;	
								end;
								INr.AlternativeCode = NewINrw.NewBarCode;
								if(ReadFirstKey("AlternativeCode",INr,1,true)) then begin
									if(INr.Code!=NewINrw.VendorCode) then begin
										res = -1;
									end;	
								end;
								if(res==-1) then begin
									RecordCheckError(36210," в компании " & Comprw.ShortName,i,"NewBarCode"); 
									goto LNewINVcRecordCheck;
								end;	
							end;
						end;	
					end;	
				end;
				ResetCompany(curcomp);
			end;	
			INr.Code = NewINrw.Code;
  	  if(readfirstmain(INr,1,true))then begin
  	  	recordcopy(IN2r,INr);
  	  	upd = true;				
  	  end else begin
  	  	codestring = newINrw.Code;
  	  	recordnew(INr);
  	  	upd = false;
  	  	INr.Code = codestring;
				INr.Group=newINrw.Group;
  	  end;
  	  FullFillINVc(INr,newINr,newINrw,group,type,insertDispNameNotCode);
			if(stat==1)then begin
				if(newINr.OKFlag==1)then begin
					INr.Group=newINrw.Group;
					if(upd)then begin
						INr.ConsgType = newINrw.ConsgType;
						if (recordupdate(IN2r,INr,true)!=0) then begin
						  res = -1; 
							goto LNewINVcRecordCheck;
						end;
					end else begin
						INr.ConsgType = newINrw.ConsgType;
						if(recordStore(INr,true)==false)then begin
							res = -1; 
							RecordCheckError(1058,"",i,"Name"); 
							goto LNewINVcRecordCheck;
						end;
					end;
				end;
			end;
			if(stat==2)then begin
				if(newINr.OKFlag==1 and newIN2r.OKFlag==0)then begin
					INr.Group=newINrw.Group;
					if(upd)then begin
						INr.ConsgType = newINrw.ConsgType;
						if (recordupdate(IN2r,INr,true)!=0) then begin
						  res = -1; 
							goto LNewINVcRecordCheck;
						end;
					end else begin
						INr.ConsgType = newINrw.ConsgType;
						if(recordStore(INr,true)==false)then begin
							res = -1; 
							goto LNewINVcRecordCheck;
						end;
					end;
				end;
			end;
			//Create or update item in Consolidate Company ABR Start
			if(newINrw.ConsgType!=3 and newINrw.ConsgType!=4) then begin
				SetCompany(18,false);
				CI2r.LocCode = NewINrw.Code;
				CI2r.BrandCode = NewINr.Brand;
				if(readfirstKey("LocCodeBrand",CI2r,2,true))then begin
					INConsr.Code = CI2r.Code;
					readfirstmain(INConsr,1,true);
					upd = true;
				end else begin
					INConsr.Code = newINrw.Code;
					if(readfirstmain(INConsr,1,true)) then begin upd = true;
						recordNew(CIr);
						CIr.Code = INConsr.Code;
						CIr.LocCode = INConsr.AlternativeCode;
						CIr.BrandCode = INConsr.BPIBrand;
						recordStore(CIr,true);
						logtext(0,"recordStore(CIr,true) 1" & CIr.LocCode);
					end else begin
						codestring = newINrw.Code;
						OldConsINr.Code = "IN_9999999";
						TrHs2 = true;
						while (LoopBackKey("Code",OldConsINr,1,TrHs2)) begin
							codestring = OldConsINr.Code;
							TrHs2 = false;
						end;
						
						NextM4SerialNumber(codestring,CI2r.Code);
						ResetLoop(OldConsINr);
						recordnew(INConsr);
						recordNew(CIr);
						CIr.Code = CI2r.Code;
						upd = false;
						newINrw.VendorCode = NewINrw.Code;
						INConsr.Code = CI2r.Code;
						INConsr.Group=newINrw.Group;
					end;	
				end;
				FullGlobalINBtrx(INConsr,newINr,newINrw);
				FullFillCCINVc(INConsr,newINr,newINrw,group,type,insertDispNameNotCode);
				if(stat==1)then begin
					if(newINr.OKFlag==1)then begin
						INConsr.Group=newINrw.Group;
						if(upd)then begin
							INConsr.ConsgType = newINrw.ConsgType;
							if (!recordStore(INConsr,true)) then begin
								res = -1; 
								goto LNewINVcRecordCheck;
							end;
						end else begin
							if(nonblank(INConsr.BPIBrand))then begin
								INConsr.ConsgType = newINrw.ConsgType;
								CIr.LocCode = INr.Code;
								CIr.BrandCode = newINr.Brand;
								recordStore(CIr,true);
								logtext(0,"recordStore(CIr,true) 2");
								if(recordStore(INConsr,true)==false)then begin
									res = -1; 
									RecordCheckError(1058,"",i,"Name"); 
									goto LNewINVcRecordCheck;
								end;
							end;	
						end;
					end;
				end;
				if(stat==2)then begin
					if(newINr.OKFlag==1 and newIN2r.OKFlag==0)then begin
						INConsr.Group=newINrw.Group;
						if(upd)then begin
							INConsr.ConsgType = newINrw.ConsgType;
							if (!recordStore(INConsr,true)) then begin
								res = -1; 
								goto LNewINVcRecordCheck;
							end;
						end else begin
							if(nonblank(INConsr.BPIBrand))then begin
								CIr.LocCode = INr.Code;
								CIr.BrandCode = newINr.Brand;
								recordStore(CIr,true);
								logtext(0,"recordStore(CIr,true) 3");
								INConsr.ConsgType = newINrw.ConsgType;
								if(recordStore(INConsr,true)==false)then begin
									res = -1; 
									goto LNewINVcRecordCheck;
								end;
							end;
						end;
					end;
				end;
			end;	
			
			if(curcomp==18 and newINrw.ConsgType!=3 and newINrw.ConsgType!=4)then begin  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:55 17.09.2019
				consItcode = INConsr.Code;
				pos = 0;
				compstr = newINr.UserStr5;
				ExtractObj(compstr,pos,comp);
				locompcritemf = false;
				while (nonblank(comp)) begin
					if(!SetInSet(comp,companies[newINrw.VendorCode]) and !SetInSet(comp,companies[newINrw.Code])) then begin
						compNumber = 0;
						for (k=0;k<CompQty;k=k+1) begin
							matrowget (Compb,k,Comprw);
							if(Comprw.ShortName==comp)then begin
								compNumber = k + 1;
								k = CompQty;
							end;
						end;
						if(Comprw.ActiveStatus==0 and compNumber!=10 and compNumber!=0 and compNumber!=32 and compNumber!=18 and compNumber!=33)then begin
							if (SetCompanyCode(Comprw.CompCode,false)) then begin
								testINr.Code = newINrw.VendorCode;
								if(ReadFirstMain(testINr,1,true))then begin
									INConsCodef[Comprw.CompCode & newINrw.VendorCode] = true;
								end;
								ResetCompany(curcomp);
							end;
						end;	
					end;	
					ExtractObj(compstr,pos,comp);
				end;
				ResetCompany(curcomp);
				pos = 0;
				compstr = newINr.UserStr5;
				ExtractObj(compstr,pos,comp);
				InJwSavedf = false;
				while (nonblank(comp)) begin
					testf2 = true;
					compNumber = 0;
					for (k=0;k<CompQty;k=k+1) begin
						matrowget (Compb,k,Comprw);
						if(Comprw.ShortName==comp)then begin
							compNumber = k + 1;
							k = CompQty;
						end;
					end;
					if(!SetInSet(comp,companies[newINrw.VendorCode]) and !SetInSet(comp,companies[newINrw.Code]) and Comprw.ActiveStatus==0 and compNumber!=33 and compNumber!=10 and compNumber!=32 and compNumber!=18 and compNumber!=0) then begin
						logtext(0,"SetCompanyCode(Comprw.CompCode, " & Comprw.CompCode);
						if (SetCompanyCode(Comprw.CompCode,false)) then begin
							if(InJwSavedf and CompanyIsJWLikeCompany(CurrentCompany))then begin testf2 = false; end;
							newINr.LastPurchCurncyCode = "";
							newINrw.LastPurchCurncyCode = "";
							newINrw.LastPurchPrice2 = 0;
							FullFillINVc(INConsr,newINr,newINrw,group,type,insertDispNameNotCode);
							FullGlobalINBtrx(INConsr,newINr,newINrw);
							if(!INConsCodef[Comprw.CompCode & newINrw.VendorCode])then begin
								recordNew(UINr);
								INConsr.Code = newINrw.VendorCode;
								INConsr.UUID = UINr.UUID;
							end else begin
								INConsr.Code = newINrw.Code;
								INConsr.AlternativeCode = newINrw.VendorCode;
							end;
							if(testf2)then begin
								if(recordStore(INConsr,true))then begin 
									locompcritemf = true;
									if(CompanyIsJWLikeCompany(CurrentCompany)) then begin
										InJwSavedf = true;
									end;
									ResetCompany(curcomp);
									CIr.Code = consItcode;
									CIr.LocCode = newINrw.VendorCode;
									CIr.BrandCode = INConsr.BPIBrand;
									recordStore(CIr,true);
									logtext(0,"recordStore(CIr,true) 4" & CIr.LocCode);
								end;
							end;
							ResetCompany(curcomp);
						end;
					end;	
					ExtractObj(compstr,pos,comp);
				end;
				
				InJwSavedf = false;
				for (k=0;k<CompQty;k=k+1) begin
					matrowget (Compb,k,Comprw);
					testf2 = true;
					if(SetInSet(Comprw.ShortName,companies[newINrw.VendorCode]) or SetInSet(Comprw.ShortName,companies[newINrw.Code]) or Comprw.ShortName==companies[newINrw.VendorCode] or Comprw.ShortName==companies[newINrw.Code])then begin
						if(Comprw.ActiveStatus==0 and k+1!=10 and k+1!=32 and k+1!=33)then begin
							SetCompany(k+1,false);
							if(InJwSavedf and CompanyIsJWLikeCompany(CurrentCompany))then begin testf2 = false; end;
							if(testf2)then begin
								INr.Code = NewINrw.VendorCode;
								if(ReadFirstMain(INr,1,true) and INr.BPIBrand==newINr.Brand) then begin
									recordcopy(IN2r,INr);
									NewINrw.Code = INr.Code;
									newINr.LastPurchCurncyCode = "";
									newINrw.LastPurchCurncyCode = "";
									newINrw.LastPurchPrice2 = 0;
									FullFillINVc(INr,newINr,newINrw,group,type,insertDispNameNotCode);
									if(newINr.OKFlag==1)then begin
										INr.Group=newINrw.Group;
										INr.ConsgType = newINrw.ConsgType;
										FullGlobalINBtrx(INr,newINr,newINrw);
										if (recordupdate(IN2r,INr,true)!=0) then begin
											res = -1; 
											goto LNewINVcRecordCheck;
										end;
									end;
								end;
								INr.Code = NewINrw.Code;
								if(ReadFirstMain(INr,1,true) and INr.BPIBrand==newINr.Brand) then begin
									recordcopy(IN2r,INr);
									NewINrw.Code = INr.Code;
									newINr.LastPurchCurncyCode = "";
									newINrw.LastPurchCurncyCode = "";
									newINrw.LastPurchPrice2 = 0;
									FullFillINVc(INr,newINr,newINrw,group,type,insertDispNameNotCode);
									if(newINr.OKFlag==1)then begin
										INr.Group=newINrw.Group;
										INr.ConsgType = newINrw.ConsgType;
										FullGlobalINBtrx(INr,newINr,newINrw);
										if (recordupdate(IN2r,INr,true)!=0) then begin
											res = -1; 
											goto LNewINVcRecordCheck;
										end;
									end;
								end;
							end;	
						end;	
					end;
				end;		
			end;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:55 17.09.2019
			
			//Create or update item in Consolidate Company ABR End
			SetCompany(curcomp,false);
  	end;
	end; 
	

	if (newINr.SerNr==-1) then begin
      newINr.SerNr = NextSerNr("NewINVc",currentdate,-1,false,""); 
  end;
	
LNewINVcRecordCheck:;
	logtext(0,CurrentCompany & Chr(9) & "Saved NewINVc");
  NewINVcRecordCheck = res;
  RETURN;
END;






global
updating function LongInt IDEANewINVcRecordCheck(var record IDEANewINVc IDEAnewINr,record IDEANewINVc IDEAnewIN2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row IDEANewINVc IDEAnewINrw;
	record INVc tmpINr,OldConsINr;
  record INVc INr,IN2r,INConsr,IN3r, testINr, UINr;
  record ITVc ITr;
  integer mtrw,i,insertmode,updatemode,j, compNumber; //Edit***************************Sasha2,17:50 07.12.2015
  integer pos,rwcnt, t,tcnt,oldComp,CompQty,k;
  string 20 type; //Edit***************************Sasha2,10:34 08.12.2015
	record ConsCompBlock CCB;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	Array string 255 astr;
  Integer acnt,strlen,y;
	record IdINSNOneBlock IINSNOb;
	row IdINSNOneBlock IINSNOrw;
	string 255 SNOneNumber, compstr, comp, consItcode;
	val SNMiddleval, strval;
	boolean Catef,TrHs2,locompcritemf;
	array string 100 asnt;
	integer check,curcomp;
	record ConsItemVc CI2r,CIr;
	vector string 255 companies;
	boolean CompFlag;
	record BarCodeVc BCr;
	record PIVc PIr;
	vector boolean BarVector,INConsCodef,VEcodeVector;
	vector integer rowBarCode, rowVECode;
	boolean ConsCompf;
	
	BlockLoad(Compb);
		
	curcomp = currentcompany;
	BlockLoad(CCB);
  res = 0;
  insertmode = 1;
  updatemode = 2;
  
	oldComp = currentcompany;
  matrowget(IDEAnewINr,0,IDEAnewINrw);
	
  if (IDEAnewINr.OKFlag==1) then begin		
	
    mtrw = matrowcnt(IDEAnewINr);
		for (i=0;i<mtrw;i=i+1) begin
			matrowget(IDEAnewINr,i,IDEAnewINrw);
			
			if (oldComp!=28) then begin  SetCompany(28,false); end;
			
			blockload(IINSNOb);
			if(CurrentCompany==28 and blank(IDEAnewINrw.Code) and nonblank(IDEAnewINrw.Category)) then begin
				if(IDEAnewINrw.ConsgType==0) then begin
					IDEAnewINrw.SerNrf = 2;
				end else begin
					IDEAnewINrw.SerNrf = 0;
				end;	
				INCatSClassArrayOnOpen(astr,acnt);
				for (j=0;j<acnt;j=j+1) begin
					if(left(astr[j],4)==IDEAnewINrw.Category)then begin
						rwcnt = matrowcnt(IINSNOb);
						for (y=rwcnt;y>=0;y=y-1) begin
							matrowget(IINSNOb,y-1,IINSNOrw);
							if(IINSNOrw.Category==IDEAnewINrw.Category)then begin
								Catef = true;
								SNMiddleval = IINSNOrw.SNMiddle + 1;
								IINSNOrw.SNMiddle = IINSNOrw.SNMiddle + 1;
								IINSNOrw.Category = IDEAnewINrw.Category;
								matrowput(IINSNOb,rwcnt,IINSNOrw);
								SNOneNumber = ValToString(SNMiddleval,M4val,"","",1);
								SNOneNumber = left(SNOneNumber,len(SNOneNumber)-2);
								for (k=0;k<5;k=k+1) begin
									strlen = len(SNOneNumber);
									if(strlen<5)then begin 
										SNOneNumber = "0" & SNOneNumber;
									end else begin
										k = 5;
									end;
								end;
								IDEAnewINrw.SNOne = IDEAnewINrw.Category & "-" & SNOneNumber;
								IDEAnewINrw.SN = IDEAnewINrw.SNOne & "-" & IDEAnewINrw.CompletCode;
								IDEAnewINrw.VendorCode = IDEAnewINrw.SNOne & "-" & IDEAnewINrw.CompletCode;
								ResetCompany(oldComp);
								matrowput(IDEAnewINr,i,IDEAnewINrw);
								SetCompany(28,false);
								BlockStore(IINSNOb);
								y=0;
							end;
						end;
						if (!Catef) then begin
							IINSNOrw.SNMiddle = 0;
							SNMiddleval = IINSNOrw.SNMiddle;
							IINSNOrw.Category = IDEAnewINrw.Category;
							matrowput(IINSNOb,rwcnt,IINSNOrw);
							SNOneNumber = ValToString(SNMiddleval,M4val,"","",1);
							SNOneNumber = left(SNOneNumber,len(SNOneNumber)-2);
							for (k=0;k<5;k=k+1) begin
								strlen = len(SNOneNumber);
								if(strlen<5)then begin 
									SNOneNumber = "0" & SNOneNumber;
								end else begin
									k = 5;
								end;
							end;
							IDEAnewINrw.SNOne = IDEAnewINrw.Category & "-" & SNOneNumber;
							IDEAnewINrw.SN = IDEAnewINrw.SNOne & "-" & IDEAnewINrw.CompletCode;
							IDEAnewINrw.VendorCode = IDEAnewINrw.SNOne & "-" & IDEAnewINrw.CompletCode;
							ResetCompany(oldComp);
							matrowput(IDEAnewINr,i,IDEAnewINrw);
							SetCompany(28,false);
							BlockStore(IINSNOb);
						end;
					end;
				end;
			end;
			
			ResetCompany(oldComp);
			
			
			if(nonblank(IDEAnewINrw.NewBarCode)) then begin
				if(BarVector[IDEAnewINrw.NewBarCode]) then begin
					res = -1;
					RecordCheckError(36330,"в строках " & i+1 & " и " & rowBarCode[IDEAnewINrw.NewVECode],i,"NewBarCode");
					goto LIDEANewINVcRecordCheck;
				end;
				BarVector[IDEAnewINrw.NewBarCode] = true;
				rowBarCode[IDEAnewINrw.NewBarCode] = i+1;
			end;	
			if(nonblank(IDEAnewINrw.NewVECode)) then begin
				if(BarVector[IDEAnewINrw.NewVECode]) then begin
					res = -1;
					RecordCheckError(36330,"в строках " & i & " и " & rowBarCode[IDEAnewINrw.NewVECode],i,"NewVECode");
					goto LIDEANewINVcRecordCheck;
				end;
				BarVector[IDEAnewINrw.NewVECode] = true;
				rowBarCode[IDEAnewINrw.NewVECode] = i+1;
			end;	
			if(currentcompany==18 and nonblank(IDEAnewINrw.VendorCode)) then begin
				// if(VEcodeVector[IDEAnewINrw.VendorCode]) then begin
					// res = -1;
					// RecordCheckError(36330,"в строках " & i & " и " & rowVECode[IDEAnewINrw.VendorCode],i,"VendorCode");
					// goto LIDEANewINVcRecordCheck;
				// end;
				// VEcodeVector[IDEAnewINrw.VendorCode] = true;
				// rowVECode[IDEAnewINrw.VendorCode] = i+1;
			end;	
		end;
		

		
		
		
    For(i=0;i<mtrw;i=i+1) begin
  	  matrowget(IDEAnewINr,i,IDEAnewINrw);
			if(nonblank(IDEAnewINrw.BarCode)) then begin
				IN2r.BarCode = IDEAnewINrw.BarCode;
				if(ReadFirstKey("BarCode",IN2r,1,true)) then begin
					if(IN2r.Code != IDEAnewINrw.Code  and IDEAnewINrw.ConsgType!=3) then begin
						RecordCheckError(31249," уже существует",i,"BarCode");      
						res = -1; 
						goto LIDEANewINVcRecordCheck;
					end;	
				end;
			end;	
			if(blank(IDEAnewINrw.Group)) then begin IDEAnewINrw.Group = IDEAnewINr.Group; end;
		
			if(blank(IDEAnewINrw.Name)  and IDEAnewINrw.ConsgType!=3 and IDEAnewINrw.ConsgType!=4)then begin
				RecordCheckError(1058,"",i,"Name");      
				res = -1; 
				goto LIDEANewINVcRecordCheck;
			end;	
			if(blank(IDEAnewINr.Group)  and IDEAnewINrw.ConsgType!=3 and IDEAnewINrw.ConsgType!=4)then begin
				RecordCheckError(1058,"",-1,"Group");      
				res = -1; 
				goto LIDEANewINVcRecordCheck;
			end;	
			if(blank(IDEAnewINrw.Category) and blank(IDEAnewINrw.Code)  and IDEAnewINrw.ConsgType!=3 and IDEAnewINrw.ConsgType!=4)then begin
				RecordCheckError(1058,"",i,"Category");      
				res = -1; 
				goto LIDEANewINVcRecordCheck;
			end;	
			if(currentcompany==18 and blank(IDEAnewINrw.VendorCode) and IDEAnewINrw.ConsgType!=3 and IDEAnewINrw.ConsgType!=4) then begin
				RecordCheckError(1058,"",i,"VendorCode");      
				res = -1; 
				goto LIDEANewINVcRecordCheck;
			end;
  		
  	  if(blank(IDEAnewINrw.Name) and IDEAnewINr.PreOrderf==0 and IDEAnewINrw.ConsgType!=3 and IDEAnewINrw.ConsgType!=4)then begin
  	  	RecordCheckError(1058,"",i,"Name");      
        res = -1; 
        goto LIDEANewINVcRecordCheck;
  	  end;
		end;
		mtrw = matrowcnt(IDEAnewINr);
		For(i=0;i<mtrw;i=i+1) begin
  	  matrowget(IDEAnewINr,i,IDEAnewINrw);
  	end;
	end; 
	

	if (IDEAnewINr.SerNr==-1) then begin
      IDEAnewINr.SerNr = NextSerNr("IDEANewINVc",currentdate,-1,false,""); 
  end;
	
LIDEANewINVcRecordCheck:;
	logtext(0,CurrentCompany & Chr(9) & "Saved IDEANewINVc");
  IDEANewINVcRecordCheck = res;
  RETURN;
END;
