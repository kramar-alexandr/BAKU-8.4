external function string 60 AddStringToStringList(string,string);
external procedure AutomatedSales(string,Integer);
external updating function Boolean IVCreateAndAttachSVNeInvoice(record IVVc);
external updating function Boolean IVCreateAndAttachFinvoice(record IVVc);
external updating procedure IVUpdateCashupHist(record IVVc);
external updating procedure DeletePlannedPayment(string,LongInt,LongInt);
external updating procedure InvalidatePlannedPayment(string,LongInt);
external updating procedure IVCreatePlannedPayment(record IVVc);
external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external updating procedure UpdateSHFromInv(record IVVc);
external procedure AddPortugueseSAFTHashToIV(var record IVVc);
external updating procedure DeleteSimulation(LongInt,string);
external updating procedure CancelGSXEnrollmentContracts(record IVVc);
external updating procedure UpdateRetFromInv(LongInt,record IVVc,Boolean);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external updating procedure UpdateXsrsFromInv(record IVVc,record IVVc);
external updating procedure DeleteXSrsVcs(record IVVc);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external procedure FindNextIVVcOfficialSerialNr(var record IVVc);
external updating procedure IVVc_LoyaltyCardPointsRedemption(record IVVc,Boolean);
external updating procedure DeletePointsHist(LongInt,string);
external updating procedure AddPointsHist(LongInt,string,integer);
external procedure TaxMatrixConvertB1ToB2(record TaxMatrixVc,var val,var val,var val,var val);
external function Boolean ShouldInvoiceRowUpdateStock(record IVVc,row IVVc);
external updating procedure DeleteItemHistVc(string,LongInt,Integer);
external function Boolean ItemHistExists(string,LongInt);
external updating procedure UpdateRecalcStockNeeded(Integer);
external procedure CalcPrice(val,val,val,var val,Integer);
external updating procedure IVCreateBuyBack(record IVVc);
external updating procedure IVUpdateCredMan(record IVVc,var record CredManEventVc,Boolean,Boolean);
external function string 255 FindTaxAuthID(string,record IVVc);
external function string 255 FindTaxAuthIDControlCode(string,record IVVc);
external updating procedure UpdateLiqInfoFromCreditNote(LongInt,val,string,val,LongInt,LongInt,Boolean);
external updating procedure DeleteLiqInfoFromOrg(LongInt,Integer);
//external updating procedure UpdateCUServiceIV(record IVVc,string,LongInt,Date);
external function Boolean IsSessionOpen(string,string,Date,Time);
external updating procedure IVUpdateCostPrice(record IVVc);
external function Integer ArtCodePrimaryCostModel(string);
external updating procedure IVUpdateStock(record IVVc,Boolean);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure BAEMailFromCreditNote(record IVVc);
external updating procedure IVUpdateItemHist(record IVVc);
external updating procedure IVUpdateSerialNr(record IVVc,Boolean,Boolean);
external procedure IVVc_CalculatePayDate(var record IVVc);
external function string 255 FindINObjects(string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure ReverseString(string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer InString2(string,string);
external updating function Boolean EInvoiceQueTransaction(record IVVc,string,Integer,LongInt);
external procedure RecalculetWeightVolumeIVVc(var record IVVc,Boolean);
external updating procedure InvalidateJob(Record IVVc);
external updating procedure UpdatePRFromIV2(record IVVc,record IVVc);
external updating function LongInt PUFromCreditNote(var record IVVc,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure SetFinRef(record IVVc);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure TestSalesPerson(record IVVc);
external updating procedure TestArts(record IVVc);
external updating procedure TestCust(record IVVc);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external updating procedure DeleteTransaction(LongInt,Integer);
external updating procedure ReverseInvoice(record IVVc);
external updating procedure InvalidateTR(Integer,LongInt);
external updating procedure InvOK(record IVVc,Boolean,Boolean);
external updating procedure SalesmanStats(record IVVc,record IVVc,Boolean);
external updating procedure MakeActFromSubSys_IVVc(var record IVVc,Boolean);
external updating function Boolean BatchStat(record IVVc,Boolean,Boolean);
external updating procedure OnSaveInvoice(record IVVc);
external updating procedure UpdateTBIVFromCredInv(record IVVc);
external updating function val NextLocOKNr(string);
external updating procedure DeleteCOIVs(record IVVc);
external updating procedure UpdateCOIV(record IVVc);
external updating procedure PRInvoiceRemoved(record IVVc);
external updating procedure UpdateQTFromIV(record IVVc,Boolean,record IVVc,Boolean);
external updating procedure UpdateJobFromIV(record IVVc,Boolean,record IVVc,Boolean);
external updating procedure UpdatePRFromIV(record IVVc,Boolean,record IVVc,Boolean);
external updating function Boolean UpdateSVOOrderFromInv_Remove(record IVVc);
external updating procedure UpdateSVOOrderFromInv(record IVVc,record IVVc);
external updating procedure UpdateOrderFromInv(record IVVc,Boolean,record IVVc,Boolean);
external procedure GetSalesGroup(string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure IVSumup(var record IVVc,Boolean);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external updating procedure DeleteRentIVs(LongInt);
external updating procedure AddToTheCustomerAccount(string,date,string,LongInt,val);
external procedure InvVat(Integer,Integer,Integer,Integer,string,val,var val,var val,var val,var val,var val);
external function Boolean PDFFileForCustomerEInvoice(string,string);
external updating procedure RoyaltyIVRemoved(record IVVc);
external function Boolean FindSubString( string, string); //Edit----------------------Dima  27.02.2015
external updating procedure UnOk_IVVc(var record IVVc);	//Edit----------------------Dima  24.12.2015
external function roundmode SetRoundModeD(Integer);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 February 2018 12:14:12
remote updating procedure ORLClassGreenColour(longint);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetFirstItem(var string,var record INVc);
remote updating procedure RecalcORMn(record RcVc);
external function LongInt ORVcRecordRemoveTest(var record ORVc,record ORVc,LongInt,LongInt);
external function LongInt ORVcRecordRemove(var record ORVc,record ORVc,LongInt,LongInt);


//Проверка на коммисию
SetLangMode(LangRussian,"RUS",0);


global updating procedure CheckIVForOldCommision(record IVVc IVr)
begin
	row IVVc IVrw;
	record IVVc oldIVr;
	integer i,rwcnt;
	boolean foundoldcomiss;
	integer typeres,curcomp;
	record ActVc Actr;
	record ARPayVc ARPayr;
	Record IPVc IPr;
	record GCVc GCr;
	record GCRVc GCRr;
	record GCSVc GCSr;
	record CompaniesBlock CBb;
	row CompaniesBlock CBrw;
	record ORVc ORr;
	record ARPayHistVc ARHistr;
	record CheckTaskUsersBlock CheckTaskUsersr;
	row CheckTaskUsersBlock CheckTaskUsersrw;
	
	if(IVr.InvType==kInvoiceTypeCredit)then begin
		oldIVr.SerNr = IVr.CredInv;
		if(readfirstmain(oldIVr,1,true))then begin
			if(oldIVr.InvDate<stringtodate("1/10/2019"))then begin
				foundoldcomiss = true; //Возврат товара проданного по старым правилам коммисии
				typeres = 1; //Тип для связки документов
				goto lCheckIVForOldCommision;
			end;
		end;
	end;
	
	rwcnt = matrowcnt(IVr);
	for(i=0;i<rwcnt;i=i+1)begin
		matrowget(IVr,i,IVrw);
		if(IVrw.Quant<0)then begin
			if(IVrw.IVForRetNr>-1)then begin
				oldIVr.SerNr = IVrw.IVForRetNr;
				if(readfirstmain(oldIVr,1,true))then begin
					if(oldIVr.InvDate<stringtodate("1/10/2019"))then begin
						foundoldcomiss = true; //Возврат товара проданного по старым правилам коммисии
						typeres = 1; //Тип для связки документов
						goto lCheckIVForOldCommision;
					end;
				end;
			end;
		end;
		
		if(IVrw.stp==kInvoiceRowTypePrepayment)then begin
			ARHistr.CUPNr = IVrw.CUPNr;
			ARHistr.FileName = "IPVc";
			if(readfirstmain(ARHistr,2,true))then begin
				if(ARHistr.TransDate<stringtodate("1/10/2019"))then begin
					if(ARHistr.SerNr>-1)then begin
						IPr.SerNr = ARHistr.SerNr;
						if(readfirstmain(IPr,1,true))then begin
							foundoldcomiss = true; //Возврат товара проданного по старым правилам коммисии
							typeres = 2; //Тип для связки документов
							goto lCheckIVForOldCommision;
						end;
					end;
				end;
			end;
		end;
		
		if(IVrw.stp==kInvoiceRowTypeDownpayment)then begin
			ORr.SerNr = stringtolongint(IVrw.Spec);
			if(ReadFirstMain(ORr,1,true))then begin
				if(ORr.OrdDate<stringtodate("1/10/2019"))then begin
					foundoldcomiss = true; //Возврат товара проданного по старым правилам коммисии
					typeres = 3; //Тип для связки документов
					goto lCheckIVForOldCommision;
				end;
			end;
		end;
		
		
		if(IVrw.stp==kInvoiceRowTypeGiftVoucherPayment)then begin
			GCSr.SerNr = IVrw.GCNr;
			if (ReadFirstMain(GCSr,1,true)) then begin
				oldIVr.SerNr = GCSr.InvSerNr;
				if(readfirstmain(oldIVr,1,true))then begin
					if(oldIVr.InvDate<stringtodate("1/10/2019"))then begin
						foundoldcomiss = true; //Обналичивание старого подарочного снртификата
						typeres = 1; //Тип для связки документов
						goto lCheckIVForOldCommision;
					end;
				end;
			end;			
		end;
		
		
	end;
	
	lCheckIVForOldCommision:;
	
	if(foundoldcomiss)then begin
		blockload(CBb);
		curcomp = currentcompany;
		if(currentcompany==1)then begin
			blockload(CheckTaskUsersr);
		end else begin
			setcompany(1,false);
			blockload(CheckTaskUsersr);
			resetcompany(curcomp);
		end;
		
		if(matrowcnt(CheckTaskUsersr)>=currentcompany)then begin
			matrowget(CheckTaskUsersr,currentcompany-1,CheckTaskUsersrw);
		end;
		matrowget(CBb,currentcompany-1,CBrw);
		
		recordNew(Actr);
		Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
		Actr.TodoFlag = 1; 
		Actr.StartTime = CurrentTime;
		Actr.TransDate = Currentdate;
		Actr.MainPersons = "SA,SA1";
		if(nonblank(CheckTaskUsersrw.Users))then begin
			Actr.MainPersons = Actr.MainPersons & "," & CheckTaskUsersrw.Users;
		end;
		Actr.Comment = "Проверить документы на коммиссию " & CBrw.CompName;
		Actr.AlarmType = 1;
		recordstore(Actr,true);
		createrecordlink(Actr,currentcompany,IVr,currentcompany);
		createrecordlink(IVr,currentcompany,Actr,currentcompany);
		if(typeres==1)then begin
			createrecordlink(Actr,currentcompany,oldIVr,currentcompany);
			createrecordlink(oldIVr,currentcompany,Actr,currentcompany);
		end;
		if(typeres==2)then begin
			createrecordlink(Actr,currentcompany,IPr,currentcompany);
			createrecordlink(IPr,currentcompany,Actr,currentcompany);
		end;
		if(typeres==3)then begin
			createrecordlink(Actr,currentcompany,ORr,currentcompany);
			createrecordlink(ORr,currentcompany,Actr,currentcompany);
		end;
	end;
	
return;
end;


global updating procedure CreateGlobalGift(record IVVc IVr)
begin
	record GlobalGiftVaucherVc GGVr;
	row GlobalGiftVaucherVc GGVrw;
	row IVVc IVrw;
	integer i,mtrw;
	record BaseCurBlock BCb;
	
	logtext (0,"111");
	mtrw = matrowcnt(IVr);
	For(i=0;i<mtrw;i=i+1) begin
	  matrowget(IVr,i,IVrw);
	  if(IVrw.ArtCode=="GLOBALGIFTCARD")then begin
	  	GGVr.BarCode = IVrw.SerialNr;
	  	GGVr.Program = "FIRST";
	  	if(readfirstkey("BarCode",GGVr,2,true))then begin
				GGVr.Bal = GGVr.Bal + IVrw.Price;
				GGVr.TotBalance = GGVr.TotBalance + IVrw.Price;
				if(blankdate(GGVr.StartDate) or blankdate(GGVr.EndDate))then begin
					GGVr.StartDate = IVr.InvDate;
					GGVr.EndDate = addyear(IVr.InvDate,1);
				end;
				GGVrw.CompNr = currentcompany;
				GGVrw.InvoiceNr = IVr.SerNr;
				GGVrw.Sum = IVrw.Price;
				GGVrw.Location = IVr.Location;
				matrowput(GGVr,matrowcnt(GGVr),GGVrw);
				if(GGVr.OnceUsed==1)then begin
					GGVr.Closed = 0;
				end;
				RECORDSTORE(GGVr,true);
	  	end;/* else begin
	  		GGVr.SerNr = NextSerNr("GlobalGiftVaucherVc",CurrentDate,-1,false,"");  
	  		GGVr.BarCode = IVrw.SerialNr;
				GGVr.Program = "FIRST";
	  		GGVr.Bal = IVrw.Price;
				GGVr.TotBalance = IVrw.Price;
				GGVr.StartDate = IVr.InvDate;
				GGVr.EndDate = addyear(IVr.InvDate,1);
				
				GGVrw.CompNr = currentcompany;
				GGVrw.InvoiceNr = IVr.SerNr;
				GGVrw.Sum = IVrw.Price;
				matrowput(GGVr,0,GGVrw);
				RECORDSTORE(GGVr,true);
	  	end;*/
	  end;
	  if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
	  	if(IVrw.Comment=="FIRST" and nonblank(IVrw.SerialNr))then begin 
				GGVr.BarCode = IVrw.SerialNr;
				GGVr.Program = "FIRST";
				if(readfirstkey("BarCode",GGVr,2,true))then begin
					BlockLoad(BCb);
					if(GGVr.OnceUsed==1)then begin
							GGVr.Closed = 1;
					end;
					if(IVrw.CurncyCode!=BCb.BaseCur1)then begin
						IVrw.Sum = round(IVrw.Sum/IVrw.FrRate*IVrw.ToRateB1,SetRoundModeD(2));
					end;
					GGVr.Bal = GGVr.Bal - IVrw.Sum;
					GGVrw.CompNr = currentcompany;
					GGVrw.InvoiceNr = IVr.SerNr;
					GGVrw.Sum = -IVrw.Sum;
					GGVrw.Location = IVr.Location;
					matrowput(GGVr,matrowcnt(GGVr),GGVrw);
					recordstore(GGVr,true);
				end;
	  	end;
	  end;
	end; 

return;
end;






global procedure RecalcOnePlusOneGift(var record OnePOneRebVc MyOPORebr)
begin
	record OnePOneRebVc OPORebr;
	row OnePOneRebVc OPORebrrw, MyOPORebrw;
	row IVVc IVrw;
	integer i,mtrw,j,OPOmtrw;
	boolean TrHs, testf;
	vector integer vOPORebTableQty, vPairQty;
	vector boolean vItmUsedf, vCollumnFlag, vOPOTablef;
	vector val vOPOTableSum, vPairSum, vCurrTable;
	val sum, d;
	record INVc INr;
	
	mtrw = matrowcnt(MyOPORebr);
	for (i=0;i<mtrw;i=i+1) begin
		matrowget(MyOPORebr,i,MyOPORebrw);
		if(nonblank(MyOPORebrw.FirstItmCode))then begin
			if (GetFirstItem(MyOPORebrw.FirstItmCode,INr)) then begin    
				MyOPORebrw.FirstItmCode = INr.Code;
				matrowput(MyOPORebr,i,MyOPORebrw);
			end;
		end;
		if(nonblank(MyOPORebrw.SecondItmCode))then begin
			if (GetFirstItem(MyOPORebrw.SecondItmCode,INr)) then begin    
				MyOPORebrw.SecondItmCode = INr.Code;
				matrowput(MyOPORebr,i,MyOPORebrw);
			end;
		end;
		MyOPORebrw.PairsumPrice = blankval;
		MyOPORebrw.OPORebTableSerNr = 0;
		matrowput(MyOPORebr,i,MyOPORebrw);
		if(nonblank(MyOPORebrw.FirstItmCode)/* and nonblank(MyOPORebrw.SecondItmCode)*/)then begin
			OPORebr.SerNr = 999999999;
			TrHs = true;
			while (loopbackkey("SerNr",OPORebr,1,TrHs)) begin
				if(OPORebr.FromDate<=MyOPORebr.ToDate and OPORebr.ToDate>=MyOPORebr.ToDate)then begin
					OPOmtrw = matrowcnt(OPORebr);
					vCollumnFlag["1"] = false;
					vCollumnFlag["2"] = false;
					vCollumnFlag["XY"] = false;
					for (j=0;j<OPOmtrw;j=j+1) begin
						matrowget(OPORebr,j,OPORebrrw);
						if(nonblank(MyOPORebrw.FirstItmCode) and MyOPORebrw.FirstItmCode==OPORebrrw.AssembledItmCode)then begin
							vCollumnFlag["XY"] = true;
						end;
						if(nonblank(MyOPORebrw.FirstItmCode) and MyOPORebrw.FirstItmCode==OPORebrrw.FirstItmCode)then begin
							vCollumnFlag["1"] = true;
						end;
						if(nonblank(MyOPORebrw.FirstItmCode) and MyOPORebrw.FirstItmCode==OPORebrrw.SecondItmCode)then begin
							vCollumnFlag["2"] = true;
						end;
						if(nonblank(MyOPORebrw.SecondItmCode) and MyOPORebrw.SecondItmCode==OPORebrrw.FirstItmCode)then begin
							vCollumnFlag["1"] = true;
						end;
						if(nonblank(MyOPORebrw.SecondItmCode) and MyOPORebrw.SecondItmCode==OPORebrrw.SecondItmCode)then begin
							vCollumnFlag["2"] = true;
						end;
						if((vCollumnFlag["1"] and vCollumnFlag["2"] and !vCollumnFlag["XY"]) or (!vCollumnFlag["1"] and vCollumnFlag["XY"] and !vCollumnFlag["2"]))then begin
							TrHs = false;
							vOPORebTableQty[OPORebr.SerNr] = vOPORebTableQty[OPORebr.SerNr] + 1;
							MyOPORebrw.OPORebTableSerNr = OPORebr.SerNr;
							sum = 0;
							if(vOPORebTableQty[OPORebr.SerNr]==1)then begin sum = OPORebr.vra0; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra0; end;
							if(vOPORebTableQty[OPORebr.SerNr]==2)then begin sum = OPORebr.vra1 / 2; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra1; end;
							if(vOPORebTableQty[OPORebr.SerNr]==3)then begin sum = OPORebr.vra2 / 3; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra2; end;
							if(vOPORebTableQty[OPORebr.SerNr]==4)then begin sum = OPORebr.vra3 / 4; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra3; end;
							if(vOPORebTableQty[OPORebr.SerNr]==5)then begin sum = OPORebr.vra4 / 5; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra4; end;
							if(vOPORebTableQty[OPORebr.SerNr]==6)then begin sum = OPORebr.vra5 / 6; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra5; end;
							if(vOPORebTableQty[OPORebr.SerNr]==7)then begin sum = OPORebr.vra6 / 7; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra6; end;
							if(vOPORebTableQty[OPORebr.SerNr]==8)then begin sum = OPORebr.vra7 / 8; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra7; end;
							if(vOPORebTableQty[OPORebr.SerNr]==9)then begin sum = OPORebr.vra8 / 9; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra8; end;
							if(vOPORebTableQty[OPORebr.SerNr]==10)then begin sum = OPORebr.vra9 / 10; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra9; end;
							if(vOPORebTableQty[OPORebr.SerNr]>10)then begin sum = OPORebr.vra10 / 11; vCurrTable[OPORebr.SerNr & "_" & vOPORebTableQty[OPORebr.SerNr]] = OPORebr.vra10; end;
							MyOPORebrw.PairsumPrice = StringToVal(ValToString(sum,M40Val,"",".",1),M4Val);
							if(MyOPORebrw.PairsumPrice>sum)then begin MyOPORebrw.PairsumPrice = MyOPORebrw.PairsumPrice - 1; end;
							matrowput(MyOPORebr,i,MyOPORebrw);
							j = OPOmtrw;
						end;
					end;
				end;
			end;
			ResetLoop(OPORebr);
		end;
	end;
	mtrw = matrowcnt(MyOPORebr);
	sum = 0;
	for (i=mtrw-1;i>=0;i=i-1) begin
		matrowget(MyOPORebr,i,MyOPORebrw);
		if(vOPOTablef[MyOPORebrw.OPORebTableSerNr]) then begin
			MyOPORebrw.PairsumPrice = vOPOTableSum[MyOPORebrw.OPORebTableSerNr];
			matrowput(MyOPORebr,i,MyOPORebrw);
		end else begin
			vOPOTableSum[MyOPORebrw.OPORebTableSerNr] = MyOPORebrw.PairsumPrice;
			vOPOTablef[MyOPORebrw.OPORebTableSerNr] = true;
		end;
		vPairQty[MyOPORebrw.OPORebTableSerNr] = vPairQty[MyOPORebrw.OPORebTableSerNr] + 1;
		vPairSum[MyOPORebrw.OPORebTableSerNr] = vPairSum[MyOPORebrw.OPORebTableSerNr] + MyOPORebrw.PairsumPrice;
		if(vPairQty[MyOPORebrw.OPORebTableSerNr]==vOPORebTableQty[MyOPORebrw.OPORebTableSerNr])then begin
			d = 0;
			if(vPairSum[MyOPORebrw.OPORebTableSerNr]<vCurrTable[MyOPORebrw.OPORebTableSerNr & "_" & vOPORebTableQty[MyOPORebrw.OPORebTableSerNr]])then begin
				d = vCurrTable[MyOPORebrw.OPORebTableSerNr & "_" & vOPORebTableQty[MyOPORebrw.OPORebTableSerNr]] - vPairSum[MyOPORebrw.OPORebTableSerNr];
				MyOPORebrw.PairsumPrice = vOPOTableSum[MyOPORebrw.OPORebTableSerNr] + d;
				matrowput(MyOPORebr,i,MyOPORebrw);
			end;
		end;
		sum = sum + MyOPORebrw.PairsumPrice;
	end;
	MyOPORebr.vra0 = sum;
return;
end;





global updating procedure DeleteGlobalGift(record IVVc IVr)
begin
	record GlobalGiftVaucherVc GGVr;
	row GlobalGiftVaucherVc GGVrw;
	row IVVc IVrw;
	integer i,mtrw,j,gmtrw;
	record BaseCurBlock BCb; 
	
	mtrw = matrowcnt(IVr);
	For(i=0;i<mtrw;i=i+1) begin
	  matrowget(IVr,i,IVrw);
	  if(IVrw.ArtCode=="GLOBALGIFTCARD")then begin
	  	GGVr.BarCode = IVrw.SerialNr;
	  	GGVr.Program = "FIRST";
	  	if(readfirstkey("BarCode",GGVr,2,true))then begin
				if(GGVr.OnceUsed==1)then begin
					GGVr.Closed = 1;
				end;
				GGVr.Bal = GGVr.Bal - IVrw.Price;
				GGVr.TotBalance = GGVr.TotBalance - IVrw.Price;
				gmtrw = matrowcnt(GGVr);
				For(j=0;j<gmtrw;j=j+1) begin
					matrowget(GGVr,j,GGVrw);
					if(GGVrw.CompNr==CurrentCompany and GGVrw.InvoiceNr==IVr.SerNr and GGVrw.Sum==IVrw.Price)then begin
						matrowdelete(GGVr,j);
						j=j-1;
						gmtrw = gmtrw - 1;
					end;
				end; 
	  		recordstore(GGVr,true);
	  	end;
	  end;
    if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
	  	if(IVrw.Comment=="FIRST" and nonblank(IVrw.SerialNr))then begin 
	  			BlockLoad(BCb);
					
					if(IVrw.CurncyCode!=BCb.BaseCur1)then begin
						IVrw.Sum = round(IVrw.Sum/IVrw.FrRate*IVrw.ToRateB1,SetRoundModeD(2));
					end;
	  			GGVr.BarCode = IVrw.SerialNr;
					GGVr.Program = "FIRST";
					if(readfirstkey("BarCode",GGVr,2,true))then begin
						if(GGVr.OnceUsed==1)then begin
							GGVr.Closed = 0;
						end;
						GGVr.Bal = GGVr.Bal + IVrw.Sum;
						gmtrw = matrowcnt(GGVr);
						For(j=0;j<gmtrw;j=j+1) begin
	  					matrowget(GGVr,j,GGVrw);
	  					if(GGVrw.CompNr==CurrentCompany and GGVrw.InvoiceNr==IVr.SerNr and GGVrw.Sum==-IVrw.Sum)then begin
	  						matrowdelete(GGVr,j);
	  						gmtrw = gmtrw - 1;
	  					end;
						end; 
						recordstore(GGVr,true);
					end;
	  	end;
	  end;
	end; 

return;
end;


updating procedure AddToCustomerAccount(record IVVc IVr)
begin
  record CUAccountSettBlock CUAccountSettb;
  row IVVc IVrw;
  Integer rwcnt,i;
  val vatprc,vatval,vatexclprc,vatinclprc,rowtax;
  val s,t,t2,v;
  
  s = 0;
  BlockLoad(CUAccountSettb);
  if (nonblank(CUAccountSettb.AccountItem)) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.ArtCode==CUAccountSettb.AccountItem) then begin
        InvVat(1,IVr.InclVAT,IVr.NoTAXonVAT,IVr.ExportFlag,IVrw.VATCode,IVrw.Sum,vatprc,vatval,vatexclprc,vatinclprc,rowtax);
        s = s + IVrw.Sum + vatval;
      end;
    end;
  end;
  if (s!=0) then begin
    if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      s = -s;
    end;
    AddToTheCustomerAccount(IVr.CustCode,IVr.TransDate,"IVVc",IVr.SerNr,s);
  end;
  return;
end;

updating procedure RemoveFromCustomerAccount(record IVVc IVr)
begin
  record CUAccountHistVc CUAccountHistr;
  
  CUAccountHistr.CustCode = IVr.CustCode;
  CUAccountHistr.TransDate = IVr.TransDate;
  CUAccountHistr.FileName = "IVVc";
  CUAccountHistr.SerNr = IVr.SerNr;
  if (ReadFirstMain(CUAccountHistr,4,true)) then begin
    RecordDelete(CUAccountHistr);
  end;
  return;
end;

updating procedure UpdateRentChrFromIV(LongInt InvNr,LongInt oldInvNr)
begin
 record RentChrgVc RentCharger;
 record RentChrgVc oldRentCharger;
 Integer cnt;
 Boolean TrHs;
 
 TrHs = true;
 RentCharger.InvNr = InvNr;
 while (LoopKey("FillUpCharge",RentCharger,1,TrHs)) begin
   if (TrHs) then begin
     if (RentCharger.InvNr <> InvNr) then begin
       TrHs = false;
     end;
   end;
   if (TrHs) then begin
     RecordCopy(oldRentCharger,RentCharger);
     RentCharger.InvNr = oldInvNr;
     if (RecordUpdate(oldRentCharger,RentCharger,false)==0) then begin
     end;
     if (oldInvNr>0) then begin
       StepBack(RentCharger);
     end;
   end;
 end;
  RETURN;
END;

// Moved to IVVcRecAction.hal

updating procedure CheckCUBalDate(string cucode,Date TransDate)
BEGIN
  record CUBalVc CUBalr;
  
  CUBalr.CUCode = cucode;
  if (ReadLastMain(CUBalr,1,true)) then begin
    if (CUBalr.TransDate<=TransDate) then begin
      RecordDelete(CUBalr);
    end;
  end;
  RETURN;
END;

global
function LongInt IVVcRecordReset(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  IVr.OKFlag = 0;
  IVVcRecordReset = res;
  RETURN;
END;

global
function LongInt IVVcRecordImportTest(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  res = 1;
  if (IVr.SerNr==-1) then begin res = 0; end;
  IVVcRecordImportTest = res;
  RETURN;
END;



global
updating function LongInt IVVcRecordRemove(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record CredManEventVc CredManEventr;
	record RcVc RepSpec;
	record ORVc ORr, oldORr;// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 30 12 2020 y. at 1:23:31 PM
	longint lon;
	
  if (IVr.Invalid==0) then begin
    if (IVr.OrderNr!=-1) then begin
      UpdateOrderFromInv(IV2r,false,IVr,true);
    end;
    UpdateRetFromInv(IVr.OrderNr,IVr,true);
    if (IVr.SVONr!=-1) then begin
      if (UpdateSVOOrderFromInv_Remove(IVr)) then begin end;
    end;
    UpdateRentChrFromIV(IVr.SerNr,-1);
    UpdatePRFromIV(IV2r,false,IVr,true);
    UpdateQTFromIV(IV2r,false,IVr,true);
    UpdateJobFromIV(IV2r,false,IVr,true);
    if (IVr.OKFlag==0) then begin
      CancelGSXEnrollmentContracts(IVr);
    end;
    PRInvoiceRemoved(IVr);
    DeleteCOIVs(IVr);    
    DeleteRentIVs(IVr.SerNr);  
    DeleteXSrsVcs(IVr);    
    RemoveFromCustomerAccount(IVr);
    InvalidateJob(IVr);
    IVUpdateCredMan(IVr,CredManEventr,false,true);
    if (nonblank(IVr.OfficialSerNr)) then begin 
      DeleteOffSerNr(IVr.SerNr,"IVVc");
    end;
    if (IVr.RoyaltyIVFlag!=0) then begin
      RoyaltyIVRemoved(IVr);
    end;
		if(IVr.InvType==kInvoiceTypeCredit)then begin
			RepSpec.f1 = IVr.OrderNr;
			RepSpec.flags[1] = 1;
			RepSpec.flags[0] = 0;
			RepSpec.flags[2] = 0;
			RepSpec.ArtMode = 0;
			logtext(0,"RecalcORMn");
			RecalcORMn(RepSpec);
		end;
  end;
  
  ORr.OfficialSerNr = "RESFROM" & ":" & IVr.SerNr;
	if(readfirstkey("OfficialSerNr",ORr,1,true))then begin
		if(ORr.Reserved==1)then begin
			recordcopy(oldORr,ORr);
			ORr.Reserved = 0;
			if(recordupdate(oldORr,ORr,true)==0)then begin
				if(ORVcRecordRemoveTest(ORr,oldORr,lon,lon)==1)then begin
					ORVcRecordRemove(ORr,oldORr,lon,lon);
					recorddelete(ORr);
				end else begin
					
				end;
			end;
		end else begin
			if(ORVcRecordRemoveTest(ORr,oldORr,lon,lon)==1)then begin
				ORVcRecordRemove(ORr,oldORr,lon,lon);
				recorddelete(ORr);
			end else begin

			end;
		end;
	end;
  
LIVVcRecordRemove:;
  IVVcRecordRemove = res; 
  RETURN;
END;

global
updating procedure IVCreateAndAttachPdf(record IVVc IVr)
begin
  string 255 fname,docname;
  record RcVc RepSpec;
  transaction Boolean gIVCreateAndAttachPdf;

  fname = "tmp/" & IVr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  docname = "InvForm";
  if(currentcompany==28)then begin
		if(IVr.Sum4<0)then begin
			docname = "CredInvForm";
		end;
	end;
  if (IVr.InvType==kInvoiceTypeCash) then begin docname = "CashInvForm"; end;
  if (IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin docname = "CashInvRecPRTForm"; end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin docname = "CredInvForm"; end;
  if (IVr.InvType==kInvoiceTypeInterest) then begin docname = "IIInvForm"; end;
  if ((nonblank(IVr.PRCode)) and (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales)) then begin
    docname = "ProjInvForm";
  end;
  gIVCreateAndAttachPdf = true;

  ReportDefaults(RepSpec,"IVRClass");
  RepSpec.OnlyUnprntd = 2;
  IVr.Prntdf = 0;
  PrintDocumentWithSpec(IVr,docname,false,RepSpec);
  //PrintDocument(IVr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,IVr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);
  gIVCreateAndAttachPdf = false;
  
  return;
end;

global
updating procedure RecreateEInvoiceAttachments(record IVVc IVr)
begin
  Integer filenr;
  record RLinkVc RLr;
  record Attach2Vc Attach2r;
  string 255 ivnr;
    
  if (HasLocalization("FIN,NOR,SVN,SWE")) then begin
    ivnr = IVr.SerNr;
    filenr = 1;
    while (ReadRecordLink(IVr,filenr,Attach2r,RLr)) begin
      if (Left(Attach2r.FileName,len(ivnr))==ivnr or InString(Attach2r.FileName,"envelope")!=0) then begin
        if (Right(Attach2r.FileName,4)==".pdf" or Right(Attach2r.FileName,4)==".xml") then begin
//      if (Attach2r.FileName==IVr.SerNr & ".xml") or (Attach2r.FileName==IVr.SerNr & ".pdf") then begin
          RecordDelete(Attach2r);
          RecordDelete(RLr);
        end else begin
          filenr = filenr + 1;
        end;
      end else begin
        filenr = filenr + 1;
      end;
    end;
    if (HasLocalization("FIN,NOR,SWE")) then begin
      IVCreateAndAttachFinvoice(IVr);
    end;
    if (HasLocalization("SVN")) then begin
      IVCreateAndAttachSVNeInvoice(IVr);
    end;
    IVCreateAndAttachPdf(IVr);
  end;
  return;
end;

global
function string 20 GetNextOfficialSerNr_IV(record IVVc IVr)		//Edit----------------------Dima  01.04.2015
begin
// This function returns OfficialSerNr in the format:   yyyy/mm/nnnnn   (2015/04/00102)

	string 20 OfficialSerNr,lastOffSerNr,lastDate;
	string 10 month, SerNumber;
	integer year;
	longint lastNumber;

	record PDVc PDr;
	record IVVc IVloop;
	string 200 normalPayments,cashPayments;
	boolean TrHs;
	
	normalPayments = "";
	cashPayments = "";
	
	While(LoopMain(PDr,1,true)) begin
		if (PDr.PDType == kInvoiceTypeNormal) then begin
				normalPayments = normalPayments & PDr.Code & ",";
		end;
		if (PDr.PDType == kInvoiceTypeCash) then begin
				cashPayments = cashPayments & PDr.Code & ",";
		end;		
	end;
	
	OfficialSerNr = "";
	lastOffSerNr="00000";
	year = GetYear(IVr.TransDate);
	lastDate = "31/12/" & year;
			
	IVloop.TransDate = StringToDate(lastDate);
	TrHs = true;
	
	While(LoopBackKey("TransDate",IVloop,1,TrHs)) begin	
		if (GetYear(IVloop.TransDate)!=year) then begin TrHs = false; end;	
	
		if (TrHs and IVr.SerNr!=IVloop.SerNr) then begin
	
			if (IVr.CurncyCode != "EUR" and IVr.InvType!=kInvoiceTypeCredit and IVloop.InvType!=kInvoiceTypeCredit) then begin
				if (IVr.Sum4 < 0) then begin
					if (IVloop.CurncyCode != "EUR" and SetInSet(IVloop.PayDeal,cashPayments) and nonblank(IVloop.OfficialSerNr)) then begin
						lastOffSerNr = IVloop.OfficialSerNr;
						TrHs = false;
					end;
				end else begin
					if (IVloop.CurncyCode != "EUR" and SetInSet(IVloop.PayDeal,normalPayments) and nonblank(IVloop.OfficialSerNr)) then begin
						lastOffSerNr = IVloop.OfficialSerNr;
						TrHs = false;
					end;
				end;
			end;
		
			if (IVr.CurncyCode == "EUR" and IVr.InvType!=kInvoiceTypeCredit and IVloop.InvType!=kInvoiceTypeCredit) then begin
				if (IVloop.CurncyCode == "EUR" and SetInSet(IVloop.PayDeal,normalPayments) and nonblank(IVloop.OfficialSerNr)) then begin
					lastOffSerNr = IVloop.OfficialSerNr;
					TrHs = false;
				end;
			end;
		
			if(IVr.InvType==kInvoiceTypeCredit and IVloop.InvType==kInvoiceTypeCredit)then begin
				lastOffSerNr = IVloop.OfficialSerNr;
				TrHs = false;
			end;
	
		end;
				
	end;
	
	
		
	if (IVr.CurncyCode != "EUR") then begin
		lastNumber = StringToInt(Right(lastOffSerNr,5)) + 1;
		SerNumber = Right("00000" & lastNumber,5);
	end else begin
		lastNumber = StringToInt(Right(lastOffSerNr,3)) + 1;
		SerNumber = Right("000" & lastNumber,3);
	end;
	if(IVr.InvType==kInvoiceTypeCredit)then begin
		lastNumber = StringToInt(Right(lastOffSerNr,5)) + 1;
		SerNumber = Right("00000" & lastNumber,5);
	end;
	
	month = Right("0" & GetMonth(IVr.TransDate),2);
	
	if (IVr.CurncyCode != "EUR") then begin
		if (IVr.Sum4<0) then begin 
			OfficialSerNr = "ZW/" & year & "/" & month & "/" & SerNumber;
		end else begin	
			OfficialSerNr = year & "/" & month & "/" & SerNumber;
		end;
	end else begin	
		OfficialSerNr = "WDT/" & year & "/" & month & "/M1/" & SerNumber;
	end;
	if(IVr.InvType==kInvoiceTypeCredit)then begin
		OfficialSerNr = "FK/" & year & "/" & month & "/" & SerNumber;
	end;

GetNextOfficialSerNr_IV = OfficialSerNr;
return;
end;

global
updating function LongInt IVVcRecordSave(var record IVVc IVr,record IVVc IV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;
  record ModuleBlock Modb;
  record AccBlock ARAb;
  row IVVc IVrw;
  Integer i,rwcnt;
  record EInvoiceBlock EIb;
  row LegalInvNrBlock LINrbrw;
  
	logtext(0,"IVVcRecordSave");
	if(matrowcnt(IVr)==0 and IVr.SerNr<0)then begin
  	logtext(0,"Start Check IV V&B Receipt   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  " & IVr.SerNr);
  end;
  IVr.DiscSum = blankval;
  IVr.DiscPerc = blankval;
  if (blankdate(IVr.RegDate)) then begin
    IVr.RegDate = CurrentDate;
  end;
  if (blanktime(IVr.RegTime)) then begin
    IVr.RegTime = CurrentTime;
  end;
  if (IVr.Invalid==0) then begin
    BlockLoad(Modb);
    BlockLoad(ARAb);
    if (Modb.PUFromCredUpdStock!=0) and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      IVr.UpdStockFlag = 0;
    end;
    if ((IVr.OKFlag!=0) and (IVr.UpdStockFlag!=0) and (IVr.OrderNr==-1) and (IVr.SVONr==-1)) then begin
//locationperrow    
      IVr.LocOKNr = NextLocOKNr(IVr.Location);
    end;
    if (blankdate(IVr.ServiceDelDate)) then begin
      IVr.ServiceDelDate = IVr.InvDate;
    end;
    if (ARAb.DueDateBasedOnServDelDate!=0) then begin
      IVVc_CalculatePayDate(IVr);
    end;
    if (IVr.OKFlag!=0) then begin
      if (IVr.Status==4 or IVr.Status==5) then begin
        AddPortugueseSAFTHashToIV(IVr);
      end;
    end;    
    OnSaveInvoice(IVr);
    UpdateQTFromIV(IVr,true,IV2r,false);
    UpdateJobFromIV(IVr,true,IV2r,false);
    UpdatePRFromIV(IVr,true,IV2r,false);
    if (IVr.OKFlag!=0) then begin  
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        UpdateTBIVFromCredInv(IVr);
      end;
      if (PDFFileForCustomerEInvoice(IVr.CustCode,IVr.CurncyCode)) then begin 
        IVCreateAndAttachPdf(IVr);
      end;
      if (HasLocalization("FIN,NOR,SWE")) then begin
        if (IVCreateAndAttachFinvoice(IVr)) then begin
          IVr.FInvExpFlag = 1;
        end;
      end;
      if (HasLocalization("SVN")) then begin
        if (IVCreateAndAttachSVNeInvoice(IVr)) then begin
          IVr.FInvExpFlag = 1;
        end;
      end;
    end;  
    RecalculetWeightVolumeIVVc(IVr,false);
  end;
  if (blank(IVr.OfficialSerNr)) then begin
    if (HasLocalization("HRV")==false or IVr.FiscalFlag!=0) then begin
      if (HasLocalization("ARG")==false) then begin
        FindNextIVVcOfficialSerialNr(IVr); //should be done in recordcheck
      end;    
    end;
  end;
  
  if (CurrentCompany==10) then begin //Dupont
 		if ((IVr.OKFlag>0) and blank(IVr.OfficialSerNr)) then begin 
			IVr.OfficialSerNr = GetNextOfficialSerNr_IV(IVr);	//Edit----------------------Dima  01.04.2015
		end;	
	end;
	
	if(matrowcnt(IVr)==0 and IVr.SerNr<0)then begin
  	logtext(0,"End Check IV V&B Receipt   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  " & IVr.SerNr);
  end;
	
LIVVcRecordSave:;
  IVVcRecordSave = res; 
  RETURN;
END;

global
updating procedure SetKPIsStatus(string updmodule,Integer status)
begin
  record KPIDefVc KPIr;
  record KPIDefVc oldKPIr;
  Boolean found;
  string 255 modulestr;
  
  if (IsStandardProduct) and (BuildProductCode!="StandardCRM") and (BuildProductCode!="StandardExpenses") then begin
    KPIr.SerNr = -1;
    ResetLoop(KPIr);
    found = true;
    while (LoopMain(KPIr,1,found)) begin
      if (found) then begin
        switch (KPIr.Type) begin
          case kKPITypeAR: modulestr = "modSL";
          case kKPITypeAP: modulestr = "modPL";
          case kKPITypeARDue: modulestr = "modSL";
          case kKPITypeARDueNoDisputed: modulestr = "modSL";
          case kKPITypeAPDue: modulestr = "modPL";
          case kKPITypeORNr: modulestr = "modSO";
          case kKPITypeORStock: modulestr = "modSO";
          case kKPITypeQTNr: modulestr = "modQT";
          case kKPITypeQTStock: modulestr = "modQT";
          case kKPITypeSalesInclVAT: modulestr = "modSL";
          case kKPITypeSalesExclVAT: modulestr = "modSL";
          case kKPITypeCost: modulestr = "modIN";
          case kKPITypeGPPrc: modulestr = "modSL";
          case kKPITypeIP: modulestr = "modSL";
        end;
//        if (modulestr==updmodule) and (KPIr.Status!=status) and (KPIr.AutoCalculated!=0) then begin
        if (modulestr==updmodule) and (KPIr.Status!=status) then begin
          RecordCopy(oldKPIr,KPIr);
          KPIr.Status = status;
          RecordUpdate(oldKPIr,KPIr,false);
        end;
      end;
    end;
  end;
  return;
end;

global
updating function LongInt IVVcRecordSaveAfter(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Boolean testf;
  record IVTBlock IVTb;
  record EInvoiceBlock EIb;
  string 255 autmsgfunciontags;
  row IVVc IVrw;// Edit ************************** Tuesday, 26 February 2013 17:15:51
	integer i,mtrw,vinr,OldComp;// Edit ************************** Tuesday, 26 February 2013 17:16:00
	boolean redempt;// Edit ************************** Tuesday, 26 February 2013 17:17:32
  boolean foundflag;// Edit ************************** Tuesday, 16 May 2017 14:53:09
	record CUVc CUr; // edited by BPI
  record ORVc ORr;
	record VIVc VIr, OldVIr;
	record RLinkVc RLr;
  record UsedRebateCardsVc URCr;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 8 May 2019 16:44:30
  record IVTaxTrVc IVTaxTr;// Edit ************************** BPI Ukraine - KramarAlexandr - 06, 24 10 2020 y. at 6:39:37 PM
  record RcVc RepSpec;
	
  IVTaxTr.SerNr = IVr.SerNr;// Edit ************************** BPI Ukraine - KramarAlexandr - 06, 24 10 2020 y. at 6:41:19 PM
  if(readfirstmain(IVTaxTr,1,true))then begin
  	IVTaxTr.TaxTransactionCode = IVr.TaxTransactionCode;
  	recordstore(IVTaxTr,true);
  end else begin
  	 IVTaxTr.SerNr = IVr.SerNr;
  	 IVTaxTr.TaxTransactionCode = IVr.TaxTransactionCode;
  	 recordstore(IVTaxTr,true);
  end;
  
  if (IVr.ECOMMERCEOrdf==1) then begin
		RepSpec.f1 = IVr.OrderNr;
		RepSpec.flags[1] = 1;
		RepSpec.flags[0] = 1;
		RepSpec.flags[2] = 0;
		RepSpec.ArtMode = 0;
		logtext(0,"RecalcORMn");
		RecalcORMn(RepSpec);
	end;
  
	if(firstinrange(IVr.RebateVaucher,10)=="BAKUCARD")then begin
		if(IVr.OKFlag!=0)then begin// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 8 May 2019 16:56:44
			if(nonblank(IVr.RebateVaucher))then begin
				URCr.Code = IVr.RebateVaucher;
				if(readfirstmain(URCr,1,true)==false)then begin
					URCr.Code = IVr.RebateVaucher;
					URCr.Compnr = currentcompany;
					URCr.InvoiceNr = IVr.SerNr;
					recordstore(URCr,true);
				end;
			end;
		end;
	end;
  // Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 16 May 2017 14:42:24
	
	foundflag = false;
  if(IVr.OKFlag==1)then begin
  	mtrw = matrowcnt(IVr);
  	For(i=0;i<mtrw;i=i+1) begin
			matrowget(IVr,i,IVrw);
			if(IVrw.UsedBirthRebate==1 and IVrw.stp==1)then begin
				foundflag = true;
			end;	  
		end; 
  	if(foundflag)then begin
  		CUr.Code = IVr.CustCode;
  		if(readfirstmain(CUr,1,true))then begin
  			if(blank(CUr.BirthRebateLastDate) or CUr.BirthRebateLastDate<=IVr.InvDate)then begin
  				CUr.BirthRebateLastDate = IVr.InvDate;
  				CUr.BirthRebateInComp = CurrentCompany;
  				CUr.BirthRebateTransNr = IVr.SerNr;
  				recordstore(CUr,true);
  			end;
  		end;
  	end;
  end;
  
	// Edit End ---------------------------------------------- Edit End

  if (IVr.Invalid==0) then begin
    if (IVr.OKFlag!=0) then begin
    	CreateGlobalGift(IVr);
      IVUpdateItemHist(IVr);
      IVUpdateCashupHist(IVr);
      IVUpdateSerialNr(IVr,false,true);
      CheckCUBalDate(IVr.CustCode,IVr.TransDate);
      if (BatchStat(IVr,false,false)) then begin end;
      SalesmanStats(IVr,IV2r,false);
      MakeActFromSubSys_IVVc(IVr,false);  
      AddToCustomerAccount(IVr);
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        res = PUFromCreditNote(IVr,true);
      end;
      IVCreateBuyBack(IVr);
      IVCreatePlannedPayment(IVr);
      BlockLoad(EIb);
      testf = true;
      if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        if (EIb.CashNotes==0) then begin
          testf = false;
        end;
      end;
      if (IVr.FiscalFlag!=0) or (IVr.NoEInvoice!=0) then begin
        testf = false;
      end;
      if (HasLocalization("EST")) then begin
        if (EIb.WhomEInvoices==2) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (EInvoiceQueTransaction(IVr,USetStr(1150),0,0)) then begin
          IVr.Prntdf = 1; // This isn't working very well... This is SaveAFTER, meaning this change will just get lost.... and you MUST NOT update IVr in this function...
        end;
      end;
      BAEMailFromCreditNote(IVr);
      SetKPIsStatus("modSL",kKPIStatusInvalid);
      if (IsStandardProduct) then begin 
        BlockLoad(IVTb);
        if (IVr.Sum3==0) then begin
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasVATZone+OK_IVVc");
        end;
        autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasIntegratedNL,HasEInvoicing");
        if (IVr.CustCode==IVTb.DefCustCode) then begin
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModPOS+OK_IVVc");
        end;
      end;
      switch (IVr.InvType) begin
        case kInvoiceTypeCash:
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModCL+OK_IVVc");
        case kInvoiceTypeCredit:
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasReturnedGoods+OK_IVVc");
      end;
      autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModSO");
    end;
    UpdateRetFromInv(IVr.OrderNr,IVr,false);
  end;
  if (nonblank(IVr.OfficialSerNr)) then begin
    UpdateOffSerNr(IVr.SerNr,"IVVc",IVr.InvType,IVr.OfficialSerNr,false);
  end;
  if (nonblank(IVr.OfficialSerNr2)) then begin
    UpdateOffSerNr(IVr.SerNr,"IVVc2",IVr.InvType,IVr.OfficialSerNr2,false);
  end;
  
  // Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 26 February 2013 17:18:02
	
  redempt = false;
	mtrw = matrowcnt(IVr);
	For(i=0;i<mtrw;i=i+1) begin
		matrowget(IVr,i,IVrw);
		if(IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)then begin
			if (CurrentCompany!=25) then begin
			  IVr.Points=0;
			end;
			redempt = true;
		end;	  
	end; 
  
  /*if(redempt)then begin
  		if (IVr.OKFlag!=0) then begin
				IVVc_LoyaltyCardPointsRedemption(IVr,false);  //causes problems with points return if invoice is unoked. DeletePointsHist(...) finds wrong PointsHistVc record.
  		end;
  end;*/
  
	// Edit End ---------------------------------------------- Edit End
	
  if (IVr.OKFlag!=0) then begin
		if (nonblank(IVr.LoyaltyCardNr)) then begin // edited by BPI {
    	if(/*IVr.Points!=0*/true)then begin
				AddPointsHist(IVr.SerNr,"IVVc",IVr.InvType);
      end; // edited by BPI }
      IVVc_LoyaltyCardPointsRedemption(IVr,false);
    end;
  end;
	if(CurrentCompany==29)then begin
		ORLClassGreenColour(IVr.OrderNr);
	end;
	if(IVr.ECOMMERCEOrdf==1)then begin
		if (IVr.OKFlag==1) then begin
			OldComp = CurrentCompany;
			SetCompany(29,false);
			ORr.SerNr = IVr.CustOrdNr;
			if(ReadFirstMain(ORr,1,true))then begin
				vinr = 1;
				while (ReadRecordLink(ORr,vinr,VIr,RLr)) begin
					RecordCopy(OldVIr,VIr);
					VIr.OKFlag = 1;
					RecordUpdate(OldVIr,VIr,true);
					vinr = vinr + 1;
				end;
			end;
			ResetCompany(OldComp);
		end;
	end;
  
  
  if (IVr.OKFlag!=0) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 25 05 2020 y. at 10:45:02 AM
		CheckIVForOldCommision(IVr);
  end;

LIVVcRecordSaveAfter:;
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  IVVcRecordSaveAfter = res; 
  return;
end;

procedure IVVcConvertB1ToB2(record IVVc IVr,string curncy,val fr,var val to1,var val to2,var val br1,var val br2)
begin
  row IVVc IVrw;
  val t;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    B1ToB2Val(IVrw.rowGP,br1,br2,t);
    IVrw.rowGP = t;
    B1ToB2Val(IVrw.BasePrice,br1,br2,t);
    IVrw.BasePrice = t;
    B1ToB2ValRM(IVrw.FIFO,br1,br2,t,GetCostRoundModeRB);
    IVrw.FIFO = t;
    B1ToB2ValRM(IVrw.FIFORowVal,br1,br2,t,GetCostRoundModeRB);
    IVrw.FIFORowVal = t;
    B1ToB2Val(IVrw.BasePriceB2,br2,br1,t);
    IVrw.BasePriceB2 = t;
    MatRowPut(IVr,i,IVrw);
  end;
  return;
end;

global
procedure IVRowInsertValues(record IVVc IVp,row IVVc ivrp,Integer UseDiscount)
begin
  record INVc INr;
  Boolean calcpricef;
  val t,s,rowsum,price,reb,tax2prc,p;
  string 255 curitemname,salesacc,tax2code,location,taxtemplatecode;
  Boolean dummyf;
  record TaxMatrixVc TMr;
  
  if (GetFirstItem(ivrp.ArtCode,INr)) then begin
    ivrp.ArtCode = INr.Code;
    location = ivrp.Location;
    if (blank(location)) then begin
      location = IVp.Location;
    end;
    if (GetItemPriceDiscount3(ivrp.ArtCode,ivrp.Quant,INr,IVp.CurncyCode,
                IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,
                IVp.LangCode,IVp.CustCat,IVp.PriceList,IVp.RebCode,
                price,curitemname,reb,
                ivrp.VATCode,t,salesacc,IVp.ExportFlag,calcpricef,IVp.TransDate,IVp.TransTime,IVp.CustCode,true,dummyf,IVp.PayDeal,tax2code,tax2prc,IVp.Region,location,taxtemplatecode)) then begin
                
      if (blank(ivrp.Price)) then begin
        ivrp.Price = price;
      end;
      if (blank(ivrp.vRebate)) then begin
        ivrp.vRebate = reb;
      end;
      if (blank(ivrp.BasePrice)) then begin
        ivrp.BasePrice = t;
      end;
      if (blank(ivrp.Spec)) then begin
        ivrp.Spec = curitemname;
      end;
      if (blank(ivrp.SalesAcc)) then begin
        ivrp.SalesAcc = salesacc;
      end;
      if (nonblank(IVp.CustVATCode)) then begin
        ivrp.VATCode = IVp.CustVATCode;
      end;
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        ivrp.Recepy = INr.Recepy;
      end else begin
        ivrp.Recepy = "";
      end;
      ivrp.Objects = FindINObjects(INr.Objects,INr.Group);
      p = ivrp.Price; 
      CalcPrice(ivrp.BasePrice,ivrp.PriceFactor,ivrp.vRebate,p,UseDiscount);
      ivrp.Price = p;  
      CalcSum(ivrp.Quant,ivrp.Price,ivrp.PriceFactor,ivrp.vRebate,s,UseDiscount);
      ivrp.Sum = s;
      ivrp.PriceFactor = INr.PriceFactor;
      t = ivrp.Quant*ivrp.BasePrice;   /* cost  */
      if (ivrp.PriceFactor!=0) then begin
        t = t/ivrp.PriceFactor;
      end;
      s = MulRateToBase1(IVp.CurncyCode,ivrp.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
      UnpackRowFieldMatrix(ivrp,"TaxMatrix",TMr);
      FindSalesExVat(TMr,ivrp.VATCode,s,IVp.InclVAT,IVp.NoTAXonVAT,rowsum);
      ivrp.rowGP = rowsum - t;          /* GP    */
    end;
  end;
  return;
end;

procedure ReadIVFunctions(var record IVVc IVp)
begin
  record AccBlock ARAb;
  Integer i,rwcnt;
  row IVVc IVrw;
  
  BlockLoad(ARAb);
  if (IVp.InvType<=0) then begin
    IVp.InvType = kInvoiceTypeNormal;
  end;
  if (IVp.InvType>=kInvoiceTypeMax) then begin
    IVp.InvType = kInvoiceTypeNormal;
  end;
  if (blank(IVp.ARAcc)) then begin
    IVp.ARAcc = ARAb.ARAcc; /*&& CustCat dependent */
  end;
  if (blank(IVp.Sum4)) then begin
    IVSumup(IVp,true);
  end;
  if (IVp.OKFlag>1) then begin
    IVp.OKFlag = 1;
  end;
  if (IVp.OKFlag<>0 and blank(IVp.CalcFinRef)) then begin
    SetFinRef(IVp);
  end;
  if (blankdate(IVp.PayDate)) then begin
    PastePDInInv(IVp,"",false);
  end;
  if (HasLocalization("PRT")==false) then begin
    if (blank(IVp.TaxAuthID)) then begin
      IVp.TaxAuthID = FindTaxAuthID("",IVp);
    end;
  end;
  if (HasLocalization("BOL")) then begin
    if (blank(IVp.TaxAuthIDCC)) then begin
      IVp.TaxAuthIDCC = FindTaxAuthIDControlCode("",IVp);
    end;
  end;
  if (IVp.NoTAXonVAT==-1) then begin
    IVp.NoTAXonVAT = ARAb.NoTAXonVAT;
  end;
  return;
end;

procedure CalculateTotGP(var record IVVc IVr)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.ovst==0) then begin
      IVr.TotGP = IVr.TotGP + IVrw.rowGP;
    end;
  end;
  return;
end;

global
updating function LongInt IVVcRecordImport(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  row IVVc IVrw;
  Integer i,rwcnt;
  record IVVc locIVr;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  string 10 curncy;
  val fr,to1,to2,br1,br2,t;
  string 255 tstr;
  row LegalInvNrBlock LINrbrw;

  if (IVr.SerNr==-99) then begin
    IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,IVr.LangCode);
  end;
  ReadIVFunctions(IVr);
  if (ImportingRegisterTag=="IVVc3") then begin
    if (IVr.GPProc==0 or blank(IVr.GPProc)) then begin
      if (IVr.InclVAT==0) then begin
        IVr.GPProc = IVr.TotGP/IVr.Sum1;
      end else begin
        IVr.GPProc = IVr.TotGP/(IVr.Sum1-IVr.Sum3);
      end; 
      IVr.GPProc = IVr.GPProc*100;
    end;
  end;
  locIVr.SerNr = IVr.SerNr;
  if ((ReadFirstMain(locIVr,1,true)==false) or (Importing==false)) then begin
    BlockLoad(cvm);
    if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
    if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
    if (gToDualBase) then begin
      curncy = IVr.CurncyCode;
      fr = IVr.FrRate;
      to1 = IVr.ToRateB1;
      to2 = IVr.ToRateB2;
      br1 = IVr.BaseRate1;
      br2 = IVr.BaseRate2;
      t = IVr.Sum4;
      ConvertToDualBase(curncy,IVr.TransDate,fr,to1,to2,br1,br2,t,true);
      IVr.CurncyCode = curncy;
      IVr.FrRate = fr;
      IVr.ToRateB1 = to1;
      IVr.ToRateB2 = to2;
      IVr.BaseRate1 = br1;
      IVr.BaseRate2 = br2;
      IVr.Sum4 = t;
    end;
    if (gBase1ToBase2) then begin
      to1 = IVr.ToRateB1;
      to2 = IVr.ToRateB2;
      br1 = IVr.BaseRate1;
      br2 = IVr.BaseRate2;
      IVVcConvertB1ToB2(IVr,IVr.CurncyCode,IVr.FrRate,to1,to2,br1,br2);
      IVr.ToRateB1 = to1;
      IVr.ToRateB2 = to2;
      IVr.BaseRate1 = br1;
      IVr.BaseRate2 = br2;
      CalculateTotGP(IVr);
      IVr.BaseSum4 = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    end;
    if (IVr.Invalid==0) then begin
//      if (gTBmark==false) then begin//HAL
//        TestCust(IVr);
//        TestArts(IVr);
//        TestSalesPerson(IVr);
//      end;
    end;
    if (IVr.TotGP==0) then begin
      CalculateTotGP(IVr);
    end;
    if (IVr.Invalid==0) then begin
      if (IVr.OKFlag!=0) then begin
        InvOK(IVr,false,false);
      end;
//      UpdatePRFromIV(IVr,true,IV2r,false); PR record contains all necessery data, we store all on pr record when save
//      UpdateQTFromIV(IVr,true,IV2r,false);
// we cannot update quotation records on import!
//      UpdateJobFromIV(IVr,true,IV2r,false);
// we cannot create nor delete shop basket records on import!

/*
      if (IVr.OKFlag!=0) then begin  
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          UpdateTBIVFromCredInv(IVr);
        end;
      end;  
*/
    end;
  end;
  if (blank(IVr.OfficialSerNrSerie)) then begin
    GetLegalInvNrRow(IVr.OfficialSerNr,LINrbrw);
    IVr.OfficialSerNrSerie = GetLegalInvoiceNrSerie(LINrbrw,IVr.OfficialSerNr);
  end;
  if (blank(IVr.OfficialSerNr2Serie)) then begin
    GetLegalInvNrRow(IVr.OfficialSerNr2,LINrbrw);
    IVr.OfficialSerNr2Serie = GetLegalInvoiceNrSerie(LINrbrw,IVr.OfficialSerNr2);
  end;
LIVVcRecordImport:;
  IVVcRecordImport = res; 
  RETURN;
END;

global
updating function LongInt IVVcRecordImportAfter(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  Integer err;
  record IVVc locIVr;
  Boolean overridef;

  if (IVr.Invalid==0) then begin
    if (IVr.OKFlag!=0) then begin
      locIVr.SerNr = IVr.SerNr;
      overridef = ReadFirstMain(locIVr,1,true);
      if (overridef==false) or (ImportingTextBackup) then begin
        IVUpdateSerialNr(IVr,false,true);
        if (BatchStat(IVr,false,false)) then begin end;
    end else begin
        if (BatchStat(locIVr,true,true)) then begin end;
        if (BatchStat(IVr,false,false)) then begin end;
      end;
      SalesmanStats(IVr,IV2r,false);
      if (ImportingTextBackup==false) and (overridef==false) then begin
        if (CanOKStockRecord(err)==true) then begin
          IVUpdateItemHist(IVr);
          IVUpdateCashupHist(IVr);
          IVUpdateStock(IVr,false);
        end;
      end;
    end;
  end;
LIVVcRecordImportAfter:;
  IVVcRecordImportAfter = res; 
  return;
end;

global
updating function LongInt IVVcRecordUpdate(var record IVVc IVr,record IVVc IV2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record AccBlock ARAb;
  Integer i,rwcnt;
  row IVVc IVrw;
  Boolean ihef,testf;
  
  logtext(0,"IVVcRecordUpdate");
  
  SetFinRef(IVr);
  ihef = ItemHistExists("IVVc",IVr.SerNr);  
  if ((IVr.OKFlag!=0) and (IV2r.OKFlag!=0)) then begin
  end else begin
    if ((IV2r.Invalid==0) and (IVr.Invalid==0)) then begin
      if (HasLocalization("PRT")==false) then begin
        IVr.TaxAuthID = FindTaxAuthID("",IVr);
      end;
      if (HasLocalization("BOL")) then begin
        if (blank(IVr.TaxAuthIDCC)) then begin
          IVr.TaxAuthIDCC = FindTaxAuthIDControlCode("",IVr);
        end;
      end;
      BlockLoad(ARAb);
      if (blankdate(IVr.ServiceDelDate)) then begin
        IVr.ServiceDelDate = IVr.InvDate;
      end;
      if (ARAb.DueDateBasedOnServDelDate!=0) then begin      
        IVVc_CalculatePayDate(IVr);
      end;
    end;
  end;
  //logtext(0,"IVVcRecordUpdate 1 ");
  if ((IV2r.Invalid==0) and (IVr.Invalid==0)) then begin
    if ((IVr.OKFlag!=0) and (IV2r.OKFlag==0)) then begin
      if (IVr.Status==4 or IVr.Status==5) then begin
        AddPortugueseSAFTHashToIV(IVr);
      end;
      if (ihef==false) then begin
//        if ((IVr.UpdStockFlag!=0) and (IVr.OrderNr==-1) and (IVr.SVONr==-1)) then begin
        testf = false;
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (ShouldInvoiceRowUpdateStock(IVr,IVrw)) then begin
            testf = true;
            i = rwcnt;
          end;
        end;  
        if (testf) then begin
          IVr.LocOKNr = NextLocOKNr(IVr.Location);
        end;
      end;
      //logtext(0,"IVVcRecordUpdate 2");
      IVr.Prntdf = 0;
      InvOK(IVr,true,true);
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        UpdateTBIVFromCredInv(IVr);
      end;                  
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        res = PUFromCreditNote(IVr,true);
      end;      
      /*
      if (PDFFileForCustomerEInvoice(IVr.CustCode,IVr.CurncyCode)) then begin 
        IVCreateAndAttachPdf(IVr);
      end;
      if (HasLocalization("FIN,NOR,SWE")) then begin 
        if (IVCreateAndAttachFinvoice(IVr)) then begin
          IVr.FInvExpFlag = 1;
        end;
      end;
      */
      //logtext(0,"IVVcRecordUpdate 3");
      
      if (HasLocalization("SVN")) then begin
        if (IVCreateAndAttachSVNeInvoice(IVr)) then begin
          IVr.FInvExpFlag = 1;
        end;
      end;
    end;
    RecalculetWeightVolumeIVVc(IVr,false);
  end;
  
  //logtext(0,"IVVcRecordUpdate 4");
  if ((IV2r.Invalid==0) and (IVr.Invalid!=0)) then begin
    if (IV2r.OKFlag!=0) then begin
      IVr.InvalidDate = CurrentDate;
      IVr.InvalidTime = CurrentTime;
      IVr.InvalidBy = CurrentUser;
      if (IVr.UpdStockFlag!=0) then begin
        IVr.InvalidLocOKNr = NextLocOKNr(IVr.Location);
      end;
      switch (IVr.InvType)  begin
        case kInvoiceTypeCreditSpecialSales: 
          goto LkInvoiceTypeCredit;
        case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
          if (IVr.CredInv>0) then begin            
            UpdateLiqInfoFromCreditNote(IVr.CredInv,-IVr.Sum4,IVr.CurncyCode,-IVr.BaseSum4,IVr.SerNr,-1,true);
          end;
      end;
    end;
  end;
  
  //logtext(0,"IVVcRecordUpdate 5");
  if ((IVr.OKFlag==0) and (IV2r.OKFlag!=0)) then begin//unok
      switch (IVr.InvType)  begin
        case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
        case kInvoiceTypeCredit:
          LkInvoiceTypeCredit:;
          if (IVr.CredInv>0) then begin            
            UpdateLiqInfoFromCreditNote(IVr.CredInv,-IVr.Sum4,IVr.CurncyCode,-IVr.BaseSum4,IVr.SerNr,-1,true);
          end;
      end;
      IVr.Prntdf = 0;
      UnOk_IVVc(IVr);//Edit----------------------Dima  24.12.2015
  end;
  
  //logtext(0,"IVVcRecordUpdate 6");
  
  if (CurrentCompany==10) then begin //Dupont
 		if ((IVr.OKFlag>0) and (IV2r.OKFlag==0) and blank(IVr.OfficialSerNr)) then begin 
			IVr.OfficialSerNr = GetNextOfficialSerNr_IV(IVr);	//Edit----------------------Dima  01.04.2015
		end;	
	end;
	
LIVVcRecordUpdate:;

	//logtext(0,"IVVcRecordUpdate end");

  IVVcRecordUpdate = res; 
  return;
end;

updating procedure ARInstallmentDelete(record IVVc IVp)
begin
  record ARInstallVc ARIr;
  Boolean found;
  
  found = true;
  ARIr.InvoiceNr = IVp.SerNr;
  while (LoopKey("InvoiceNr",ARIr,1,found)) begin
    if (ARIr.InvoiceNr!=IVp.SerNr) then begin
      found = false;
    end;
    if (found) then begin
      RecordDelete(ARIr);
      StepBack(ARIr);
    end;
  end;
  return;
end;

global
updating procedure UnOKInvoice(record IVVc IVr,record IVVc IV2r,Boolean deltrf)
begin
  record CredManEventVc CredManEventr;

  ReverseInvoice(IVr);
  if (IVr.OrderNr!=-1) then begin
//        UpdateOrderFromInv(IV2r,false,IVr,true);
  end;
//      UpdatePRFromIV(IV2r,false,IVr,true);//we should not update downpaysent when unoking
//  UpdateQTFromIV(IV2r,false,IVr,true); unoking should not update quote, deeleting should
  UpdateJobFromIV(IV2r,false,IVr,true);
  ARInstallmentDelete(IVr);
  IVUpdateCredMan(IVr,CredManEventr,false,false);
  if (BatchStat(IVr,true,true)) then begin end;
  StoreUnOKHistory("IVVc",IVr.SerNr,CurrentDate,CurrentTime,CurrentUser);
  DeleteLiqInfoFromOrg(IVr.SerNr,IVYc);
//  UpdateCUServiceIV(IVr,"IVVc",IVr.SerNr,IVr.PayDate); //moved to ahansamail
  RemoveFromCustomerAccount(IVr);
  SalesmanStats(IVr,IV2r,true);
  UpdateRecalcStockNeeded(1);
  if (IVr.UpdStockFlag==0) then begin  
    DeleteItemHistVc("IVVc",IVr.SerNr,-1);
  end;
  if (deltrf) then begin
    DeleteTransaction(IVr.SerNr,IVYc);
    DeleteSimulation(IVr.SerNr,"IVVc");
  end;
  return;
end;

global
updating function LongInt IVVcRecordUpdateAfter(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record ARVc ARr;
  record ARVc oldARr;
  Boolean testf;
  record IVTBlock IVTb;
  record EInvoiceBlock EIb;
  record CredManEventVc CredManEventr;
  Boolean ihef;
  record IVVc orgIVr;
  record SVOVc SVOr;
  record RLinkVc RLinkr;
  record RLinkVc oldRLinkr;
  Integer notenr, vinr, OldComp;
  string 255 autmsgfunciontags;
  row IVVc IVrw;// Edit ************************** Tuesday, 26 February 2013 17:15:51
  integer i,mtrw;// Edit ************************** Tuesday, 26 February 2013 17:16:00
  boolean redempt,foundflag;// Edit ************************** Tuesday, 26 February 2013 17:17:32
  record CUVc CUr;// Edit ************************** Tuesday, 16 May 2017 14:53:10
  record RcVc RepSpec;
	record ORVc ORr;
	record VIVc VIr, OldVIr;
	record UsedRebateCardsVc URCr;// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 8 May 2019 16:44:30
	record VaucherHistVc VHr,NewVHr;
	record VaucherVc Vr;
	record IVTaxTrVc IVTaxTr;// Edit ************************** BPI Ukraine - KramarAlexandr - 06, 24 10 2020 y. at 6:39:37 PM
  
  //logtext(0,"IVVcRecordUpdateAfter");

  IVTaxTr.SerNr = IVr.SerNr;// Edit ************************** BPI Ukraine - KramarAlexandr - 06, 24 10 2020 y. at 6:41:19 PM
  if(readfirstmain(IVTaxTr,1,true))then begin
  	IVTaxTr.TaxTransactionCode = IVr.TaxTransactionCode;
  	recordstore(IVTaxTr,true);
  end else begin
  	 IVTaxTr.SerNr = IVr.SerNr;
  	 IVTaxTr.TaxTransactionCode = IVr.TaxTransactionCode;
  	 recordstore(IVTaxTr,true);
  end;
  
	if (IVr.ECOMMERCEOrdf==1) then begin
		RepSpec.f1 = IVr.OrderNr;
		RepSpec.flags[1] = 1;
		RepSpec.flags[0] = 1;
		RepSpec.flags[2] = 0;
		RepSpec.ArtMode = 0;
		logtext(0,"RecalcORMn");
		RecalcORMn(RepSpec);
	end;
  
  if(firstinrange(IVr.RebateVaucher,10)=="BAKUCARD")then begin
		if (IVr.OKFlag!=0) and (IV2r.OKFlag==0) then begin
			if(nonblank(IVr.RebateVaucher))then begin
				URCr.Code = IVr.RebateVaucher;
				if(readfirstmain(URCr,1,true)==false)then begin
					URCr.Code = IVr.RebateVaucher;
					URCr.Compnr = currentcompany;
					URCr.InvoiceNr = IVr.SerNr;
					recordstore(URCr,true);
				end;
			end;
		end;
		if (IVr.OKFlag==0) and (IV2r.OKFlag!=0) then begin	
			if(nonblank(IVr.RebateVaucher))then begin
				URCr.Code = IVr.RebateVaucher;
				if(readfirstmain(URCr,1,true))then begin
					recorddelete(URCr);
				end;
			end;
		end;
	end;
  	
  ihef = ItemHistExists("IVVc",IVr.SerNr);
  if (IVr.OKFlag==1) then begin
    if (ihef==false) then begin
      CheckCUBalDate(IVr.CustCode,IVr.TransDate);    
      SalesmanStats(IVr,IV2r,true);
    end;
  end;  
  if (IVr.OKFlag!=0) and (IV2r.OKFlag==0) then begin
    if (ihef==false) then begin
      BAEMailFromCreditNote(IVr);
    end;
		
		
  end;
	
	if(IVr.InvType==kInvoiceTypeCredit and IVr.OKFlag!=IV2r.OKFlag and nonblank(IVr.OrderNr))then begin
		RepSpec.f1 = IVr.OrderNr;
		RepSpec.flags[1] = 1;
		RepSpec.flags[0] = 0;
		RepSpec.flags[2] = 0;
		RepSpec.ArtMode = 0;
		logtext(0,"RecalcORMn");
		RecalcORMn(RepSpec);
	end;
  
  // Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 16 May 2017 14:42:24
	foundflag = false;
  if(IVr.OKFlag==1 and IV2r.OKFlag==0)then begin
  	mtrw = matrowcnt(IVr);
  	For(i=0;i<mtrw;i=i+1) begin
			matrowget(IVr,i,IVrw);
			if(IVrw.UsedBirthRebate==1 and IVrw.stp==1)then begin
				foundflag = true;
			end;	  
		end; 
  	if(foundflag)then begin
  		CUr.Code = IVr.CustCode;
  		if(readfirstmain(CUr,1,true))then begin
  			if(blank(CUr.BirthRebateLastDate) or CUr.BirthRebateLastDate<=IVr.InvDate)then begin
  				CUr.BirthRebateLastDate = IVr.InvDate;
  				CUr.BirthRebateInComp = CurrentCompany;
  				CUr.BirthRebateTransNr = IVr.SerNr;
  				recordstore(CUr,true);
  			end;
  		end;
  	end;
  end;
  if(IVr.OKFlag==0 and IV2r.OKFlag==1)then begin
		mtrw = matrowcnt(IVr);
  	For(i=0;i<mtrw;i=i+1) begin
			matrowget(IVr,i,IVrw);
			if(IVrw.UsedBirthRebate==1 and IVrw.stp==1)then begin
				foundflag = true;
			end;	  
		end; 
  	/*if(foundflag)then begin// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 16 April 2019 14:20:50
  		CUr.Code = IVr.CustCode;
  		if(readfirstmain(CUr,1,true))then begin
  			if(CUr.BirthRebateInComp==CurrentCompany and CUr.BirthRebateTransNr==IVr.SerNr)then begin
  				CUr.BirthRebateLastDate = "";
  				CUr.BirthRebateInComp = 0;
  				CUr.BirthRebateTransNr = -1;
  				recordstore(CUr,true);
  			end;
  		end;
  	end;*/
  end;
  
	// Edit End ---------------------------------------------- Edit End
	if ((IVr.OKFlag!=0) and (IV2r.OKFlag==0)) then begin
		if(nonblank(IVr.VaucherCode)) then begin
			Vr.BarCode = IVr.VaucherCode;
			if(ReadFirstMain(Vr,1,true)) then begin
				if(Vr.OnceUsed) then begin
					Vr.Closed = 1;
					RecordStore(Vr,true);
				end;
			end;
			VHr.VaucherCode = IVr.VaucherCode;
			VHr.IVNr = IVr.SerNr;
			VHr.CompNr = CurrentCompany;
			if(!ReadFirstMain(VHr,3,true)) then begin
				RecordNew(NewVHr);
				NewVHr.VaucherCode = IVr.VaucherCode;
				NewVHr.IVNr = IVr.SerNr;
				NewVHr.CompNr = CurrentCompany;
				RecordStore(NewVHr,true);
			end;
		end;	
		CreateGlobalGift(IVr);// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 29 January 2018 17:11:48 
	end;
	if ((IVr.OKFlag==0) and (IV2r.OKFlag!=0)) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 29 January 2018 17:22:53
		Vr.BarCode = IVr.VaucherCode;
		if(ReadFirstMain(Vr,1,true)) then begin
			if(Vr.OnceUsed) then begin
				Vr.Closed = 0;
				RecordStore(Vr,true);
			end;
		end;
		VHr.VaucherCode = IVr.VaucherCode;
		VHr.IVNr = IVr.SerNr;
		VHr.CompNr = CurrentCompany;
		if(ReadFirstMain(VHr,3,true)) then begin
			RecordDelete(VHr);
		end;
		DeleteGlobalGift(IVr);
	end;
	
  if ((IV2r.Invalid==0) and (IVr.Invalid==0)) then begin
    if (IVr.OrderNr!=-1) then begin
      UpdateOrderFromInv(IVr,true,IV2r,true);
    end;
    UpdateRetFromInv(IV2r.OrderNr,IV2r,true);
    UpdateRetFromInv(IVr.OrderNr,IVr,false);
    UpdateXsrsFromInv(IVr,IV2r);
    if (ihef==false) then begin
      UpdateJobFromIV(IVr,true,IV2r,true);
      UpdatePRFromIV(IVr,true,IV2r,true);
      UpdatePRFromIV2(IVr,IV2r);
      UpdateSVOOrderFromInv(IVr,IV2r);
      UpdateQTFromIV(IVr,true,IV2r,true);
      if (IVr.SerNr!=IV2r.SerNr) then begin
        UpdateRentChrFromIV(IV2r.SerNr,IVr.SerNr);
      end;
    end;
    if ((IVr.OKFlag!=0) and (IV2r.OKFlag==0)) then begin     
      if (ihef==false) then begin
        UpdateCOIV(IVr);
        IVUpdateItemHist(IVr);
        IVUpdateCashupHist(IVr);
      end;
      if (BatchStat(IVr,false,false)) then begin end;
      IVUpdateSerialNr(IVr,false,true);
      MakeActFromSubSys_IVVc(IVr,false);   
//      UpdateSHFromInv(IVr); done in UpdateOrderFromInv
      if (ihef==false) then begin
//        UpdateCUServiceIV(IVr,"IVVc",IVr.SerNr,IVr.PayDate);  //moved to ahansamail
        AddToCustomerAccount(IVr);
        IVUpdateCredMan(IVr,CredManEventr,true,false);
        IVCreateBuyBack(IVr);
        IVCreatePlannedPayment(IVr);
      end;
      SetKPIsStatus("modSL",kKPIStatusInvalid);
      BlockLoad(EIb);
      testf = true;
      if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        if (EIb.CashNotes==0) then begin
          testf = false;
        end;
      end;
      if (IVr.FiscalFlag!=0) or (IVr.NoEInvoice!=0) then begin
        testf = false;
      end;
      if (HasLocalization("EST")) then begin
        if (EIb.WhomEInvoices==2) then begin
          testf = false;
        end;
      end;
      if (testf) then begin         
        if (EInvoiceQueTransaction(IVr,USetStr(1150),0,0)) then begin
          IVr.Prntdf = 1; // This isn't working very well... This is SaveAFTER, meaning this change will just get lost.... and you MUST NOT update IVr in this function...
        end;
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        if (IVr.CredInv>0) then begin
          orgIVr.SerNr = IVr.CredInv;
          if (ReadFirstMain(orgIVr,1,true)) then begin
            CreateRecordLink(orgIVr,CurrentCompany,IVr,CurrentCompany);  
            CreateRecordLink(IVr,CurrentCompany,orgIVr,CurrentCompany);  
            if (IVr.SVONr>0) then begin
              SVOr.SerNr = IVr.SVONr;    
              if (ReadFirstMain(SVOr,1,true)) then begin
                CreateRecordLink(SVOr,CurrentCompany,IVr,CurrentCompany);
                CreateRecordLink(IVr,CurrentCompany,SVOr,CurrentCompany);
              end;
            end;
            if (Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite") and (HasLocalization("POL")) then begin
              notenr = 1;
              while (ReadRecordToLink(orgIVr,notenr,IVr,RLinkr)) begin
                notenr = notenr + 1;
                RecordCopy(oldRLinkr,RLinkr);
                RLinkr.Comment = RLinkr.Comment & " - " & orgIVr.OfficialSerNr;
                RecordUpdate(oldRLinkr,RLinkr,false);
              end;

              notenr = 1;
              while (ReadRecordToLink(IVr,notenr,orgIVr,RLinkr)) begin
                notenr = notenr + 1;
                RecordCopy(oldRLinkr,RLinkr);
                RLinkr.Comment = RLinkr.Comment & " - " & IVr.OfficialSerNr;
                RecordUpdate(oldRLinkr,RLinkr,false);
              end;
            end;

          end;
        end;
      end;
      if (IsStandardProduct) then begin 
        BlockLoad(IVTb);
        if (IVr.Sum3==0) then begin
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasVATZone+OK_IVVc");
        end;
        autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasIntegratedNL,HasEInvoicing");
        if (IVr.CustCode==IVTb.DefCustCode) then begin
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModPOS+OK_IVVc");
        end;
      end;
      switch (IVr.InvType) begin
        case kInvoiceTypeCash:
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModCL+OK_IVVc");
        case kInvoiceTypeCredit:
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasReturnedGoods+OK_IVVc");
      end;
      autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModSO");
    end;
  end;
  if ((IVr.OKFlag!=0) and (IV2r.OKFlag==1)) then begin
    if (IVr.PayDate!=IV2r.PayDate) then begin
      ARr.InvoiceNr = IVr.SerNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        RecordCopy(oldARr,ARr);
        ARr.DueDate = IVr.PayDate;
        if (RecordUpdate(oldARr,ARr,false)==0) then begin
        end;
      end;
    end;
  end;  
  if ((IV2r.Invalid==0) and (IVr.Invalid!=0)) then begin//invalidate
    if (IV2r.OKFlag!=0) then begin
//same as UnOKInvoice ?     
      if (IVr.OrderNr!=-1) then begin
        UpdateOrderFromInv(IVr,false,IV2r,true);
      end;
      UpdateRetFromInv(IV2r.OrderNr,IV2r,true);
      UpdateQTFromIV(IVr,false,IV2r,true);
      UpdateJobFromIV(IVr,false,IV2r,true);
      UpdatePRFromIV(IVr,false,IV2r,true);
      PRInvoiceRemoved(IV2r);
      ARInstallmentDelete(IVr);
      if (BatchStat(IVr,true,false)) then begin end;
      InvalidateTR(IVYc,IVr.SerNr);
      DeleteXSrsVcs(IVr);    
      ReverseInvoice(IVr);
      InvalidateJob(IVr);
      IVUpdateCredMan(IVr,CredManEventr,false,true);
      IVUpdateCostPrice(IVr);
      DeleteLiqInfoFromOrg(IVr.SerNr,IVYc);
//      UpdateCUServiceIV(IVr,"IVVc",IVr.SerNr,IVr.PayDate);//moved to ahansamail
      RemoveFromCustomerAccount(IVr);
      IVVc_LoyaltyCardPointsRedemption(IVr,true);
      CancelGSXEnrollmentContracts(IVr);
      InvalidatePlannedPayment("IVVc",IVr.SerNr);
    end;
  end;
  if ((IVr.Invalid==0) and (IV2r.Invalid==0)) then begin
    if ((IVr.OKFlag==0) and (IV2r.OKFlag!=0)) then begin//unok
      UnOKInvoice(IVr,IV2r,true);
      DeletePlannedPayment("IVVc",IVr.SerNr,-1);
    end;
  end;
  if (ihef==false) then begin
    if (nonblank(IVr.OfficialSerNr)) then begin
      if (IVr.OfficialSerNr!=IV2r.OfficialSerNr) then begin
        UpdateOffSerNr(IVr.SerNr,"IVVc",IVr.InvType,IVr.OfficialSerNr,true);
      end;
    end else begin
      if (nonblank(IV2r.OfficialSerNr)) then begin
        DeleteOffSerNr(IV2r.SerNr,"IVVc");
      end;
    end;
    if (nonblank(IVr.OfficialSerNr2)) then begin
      if (IVr.OfficialSerNr2!=IV2r.OfficialSerNr2) then begin
        UpdateOffSerNr(IVr.SerNr,"IVVc2",IVr.InvType,IVr.OfficialSerNr2,true);
      end;
    end else begin
      if (nonblank(IV2r.OfficialSerNr2)) then begin
        DeleteOffSerNr(IV2r.SerNr,"IVVc2");
      end;
    end;
  end;
    // Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 26 February 2013 17:18:02
	
  redempt = false;
	mtrw = matrowcnt(IVr);
	For(i=0;i<mtrw;i=i+1) begin
		matrowget(IVr,i,IVrw);
		if(IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)then begin
			if (CurrentCompany!=25) then begin //Edit***************************Sasha2,17:55 26.07.2017
			  IVr.Points=0;
			end;
			redempt = true;
		end;	  
	end; 
	/*logtext(0,"redempt " & redempt);
  if ((IVr.OKFlag!=0) and (IV2r.OKFlag==0)) then begin
		if(redempt)then begin
				IVVc_LoyaltyCardPointsRedemption(IVr,false); //causes problems with points return if invoice is unoked. DeletePointsHist(...) finds wrong PointsHistVc record.
		end;
  end;
  if ((IVr.OKFlag==0) and (IV2r.OKFlag!=0)) then begin
		if(redempt)then begin
				IVVc_LoyaltyCardPointsRedemption(IVr,true);
		end;
  end;*/
  
	// Edit End ---------------------------------------------- Edit End

  if (nonblank(IVr.LoyaltyCardNr) or nonblank(IVr.LinkLoyaltyCardNr)) then begin  //  by Ira
    if ((IVr.OKFlag!=0) and (IV2r.OKFlag==0)) then begin
    	if(/*IVr.Points!=0*/true)then begin
				AddPointsHist(IVr.SerNr,"IVVc",IVr.InvType);
      end;
      IVVc_LoyaltyCardPointsRedemption(IVr,false);
    end;
    if ((IVr.OKFlag==0) and (IV2r.OKFlag!=0)) then begin
    	if(IVr.Points!=0)then begin
				DeletePointsHist(IVr.SerNr,"IVVc");
      end;
      IVVc_LoyaltyCardPointsRedemption(IVr,true);
    end; 
    if ((IVr.Invalid>0) and (IV2r.Invalid==0)) then begin// Edit ************************** Thursday, 20 April 2017 09:40:18
    	if(IVr.Points!=0)then begin
				DeletePointsHist(IVr.SerNr,"IVVc");
    	end;
      IVVc_LoyaltyCardPointsRedemption(IVr,true);
      
    end;   
  end;
	if(CurrentCompany==29)then begin
		ORLClassGreenColour(IVr.OrderNr);
	end;
	if(IVr.ECOMMERCEOrdf==1)then begin
		if ((IVr.OKFlag==1) and (IV2r.OKFlag==0)) then begin
			OldComp = CurrentCompany;
			SetCompany(29,false);
			ORr.SerNr = IVr.CustOrdNr;
			if(ReadFirstMain(ORr,1,true))then begin
				vinr = 1;
				while (ReadRecordLink(ORr,vinr,VIr,RLinkr)) begin
					RecordCopy(OldVIr,VIr);
					VIr.OKFlag = 1;
					RecordUpdate(OldVIr,VIr,true);
					vinr = vinr + 1;
				end;
			end;
			ResetCompany(OldComp);
		end;
	end;
	
	
	if (IVr.OKFlag!=0 and IV2r.OKFlag==0) then begin// Edit ************************** BPI Ukraine - KramarAlexandr - 01, 25 05 2020 y. at 10:45:02 AM
		CheckIVForOldCommision(IVr);
  end;
	
LIVVcRecordUpdateAfter:;
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  
  logtext(0,"IVVcRecordUpdateAfter End");
  
  IVVcRecordUpdateAfter = res; 
  RETURN;
END;

global function boolean BDRebateIsUsed(string customer, var string warntext)
begin
	record IVVc IVr;
	boolean res,TrHs,testf;
	date thydat;
	
	res = false;
	
	IVr.CustCode = customer;
	IVr.InvDate = addday(currentdate,-30);
	TrHs = true;
	while(loopkey("CustDate",IVr,2,TrHs))begin
		testf = true;
		if(IVr.CustCode!=customer)then begin TrHs = false; testf = false; end;
		if(IVr.Invalid==1)then begin testf = false; end;
		if(testf)then begin
			if(IVr.UsedBirthRebateH==1)then begin				
				warntext = " сч/ф №" & IVr.SerNr;
				res = true;
			end;
		end;
	end;
	
BDRebateIsUsed = res;
return;
end;