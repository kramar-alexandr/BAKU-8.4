//server-only
external function longint DateDiff(date,date);
external updating procedure CreatePLActivityMn(record RcVc);
remote function boolean CompanyIsJWLikeCompany(Integer);
external updating procedure GruppoCoinParseAndReplaceInputFiles(string);
external updating procedure GruppoCoinParseAndReplaceOutputFiles();
external updating procedure CreateTRCurDifMn(record RcVc);////////////////////////KONVERTACIYA
external updating procedure PasteRebCodeLCVCMn();
external updating procedure SendVisitstoCRM();
remote updating procedure CreateStockMvFromRetStock();
external updating procedure RecalcDiscMn();
remote updating procedure AlarmECMessageMn(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger15:00 12.03.2019
remote updating procedure CleanStocksInGlobalItemMn(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger10:27 19.03.2019
external updating procedure WebSyncCustomerSales();
external updating procedure SyncAllIVtoCRM();
external updating procedure WebDelVECUID();
external updating procedure RDBBuildAllDataMn();
external procedure RDBCheckAllDataMn();
remote procedure SendRemoteImpRequestMn();
external updating procedure RecalcDiscBackMn(var area);
external procedure GetPriceItem(string,var val,var val); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:31 11.07.2019
external updating procedure GlobalItemVcRecStPrMn(record RcVc);
external updating procedure UpdateGlSABINAInstock(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 12:06 24.10.2019
external procedure CollectVIDaySaleMn(record RcVc);
remote function Boolean GetTempItemPrice(var val,string,var string, date,var string); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- ABR 14:18 24.03.2020
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
remote updating procedure ImportAddClassFromFolderIn(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 10:23 04.05.2020
remote updating procedure ImportAddClassFromFolderQueuedIn(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 10:23 04.05.2020
remote updating procedure ImportAddClassWithJSONFromFolderQueuedIn();  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 17:51 20.07.2020
remote updating procedure ImportAddTPExtVendItemsFromFolderQueuedIn ();  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 9:27 14.12.2020
remote updating procedure ImportAddExtVendItemsFromFolderQueuedIn (); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 14:13 13.10.2020
remote updating procedure ImportGlobalSetsQueuedIn (); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 19:08 19.02.2021
remote updating procedure CollectXMLNovasItems (); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 13:22 05.08.2021
remote updating procedure DownloadFTPimportFile ();  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 15:01 05.08.2021
external procedure CollectXMLItems();// 
external procedure CollectXMLZOOMagItems();//  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 18:52 15.10.2020
external procedure CollectXMLECAZMagItems(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 10:02 21.01.2021
external updating procedure ReserveDelMn();
external updating procedure ColelctPaymentsCCAndOthersMn(record RcVc);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 05 11 2020 y. at 10:24:14 AM
external function LongInt CountWorkingDays(Date,Date,string,string);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 05 11 2020 y. at 10:33:02 AM
external procedure GlobalItemClassInStock(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:21 25.11.2020
external procedure RebAnalizRnAuto();// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 02 12 2020 y. at 2:24:19 PM
external function roundmode SetRoundModeD(Integer);
external procedure ImportRefCodesByClassQueuedIn(); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 12:11 18.02.2021
remote updating procedure ReserveRecalcAutoMn();
remote updating procedure UpdateStockInSetGlobalItem(string); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:32 22.02.2021
remote updating procedure TROperMn(record RcVc);
external updating procedure AddNevComissionMn(record RcVc);
external procedure GIWasUpdated(record GlobalItemVc,record GlobalItemVc,string);	//Edit **********************************************Vas-P	14/07/2021
external function string 50 TimeToString(time,string,boolean); 	//Edit **********************************************Vas-P	20/07/2021

global updating procedure AutoUnGroupIV()
begin
record IVVc IVr;
date todate;
boolean TrHs,testf;

  todate = addday(currentdate,-16);
  IVr.InvDate = addday(currentdate,-1);
  if(CompanyIsJWLikeCompany(currentcompany))then begin
  	IVr.InvDate = currentdate;	
  end;
  TrHs = true;
  while(loopbackkey("InvDate",IVr,1,TrHs))begin
  	testf = true;
    if(IVr.InvDate<todate)then begin TrHs = false; testf = false; end;
    if(IVr.OKFlag==0)then begin testf = false;  end;
    
    if(testf)then begin
      if(nonblank(IVr.SalesGroup))then begin
        IVr.SalesGroup = "";
        recordStore(IVr,true);
      end;
    end;
    
  end;

return;
end;


global updating procedure CUUpdateLoyaltyRebCode()
begin
  record CUVc CUr,oldCUr;
  record LCMLevelSetBlock LCMLevelSetBl;
  row LCMLevelSetBlock LCMLevelSetrw;
  Integer i,rwcnt;
  record LoyaltyCardVc LoyaltyCardr;
  boolean testf;
  record RebVc Rebr,Reb2r;
  string 20 rebcode;
  string 20 clevel;
  val reb,reb2,points;
  
  Logtext(0,"CUUpdateLoyaltyRebCode");
  
  blockload(LCMLevelSetBl);
  rwcnt = matrowcnt(LCMLevelSetBl);
  
  LoyaltyCardr.SerNr = "";
  while(loopmain(LoyaltyCardr,1,true))begin
    reb = 0;
    reb2 = 0;
    
    testf = true;
    if(LoyaltyCardr.Closed>0)then begin testf = false; end;
    
    if(testf)then begin
      CUr.Code = LoyaltyCardr.CustCode;
      if(readfirstmain(CUr,1,true) and left(CUr.Code,2)!="CC")then begin
				points = LoyaltyCardr.PointsBalance;
				clevel = LoyaltyCardr.LCMLevel;
				rebcode = "";
				for (i=0;i<rwcnt;i=i+1) begin
					MatRowGet(LCMLevelSetBl,i,LCMLevelSetrw);
					if ((points>=LCMLevelSetrw.FromPoints) and ((points<=LCMLevelSetrw.ToPoints) or (LCMLevelSetrw.ToPoints==0)) and (clevel==LCMLevelSetrw.LCMLevel)) then begin
						rebcode = LCMLevelSetrw.RebCode;
						i = rwcnt;
					end;
				end;  
				if(nonblank(rebcode))then begin
					Rebr.Code = rebcode;
					readfirstmain(Rebr,1,true);
					reb = Rebr.vra0;
					if(nonblank(CUr.RebCode))then begin
						Reb2r.Code = CUr.RebCode;
						readfirstmain(Reb2r,1,true);
						reb2 = Reb2r.vra0;
					end;
				
					if(reb>reb2)then begin
						Logtext(0,"CUUpdateLoyaltyRebCode changed " & CUr.Code & " for LC " & LoyaltyCardr.SerNr);
						Logtext(0,"CUUpdateLoyaltyRebCode changed " &reb & " <- " & reb2);
						recordcopy(oldCUr,CUr);
						CUr.RebCode = Rebr.Code;
						recordUpdate(oldCUr,CUr,true);
					end;
				end;
      end;
    end;
  end;
  
return;
end;


global webpublic updating procedure WebCUUPdate()
begin
	
	setcompany(1,false);
	logtext(0,"WebCUUPdate");
	CUUpdateLoyaltyRebCode;

return;
end;





global updating procedure AutoCetRebCodeCU()
begin
record CUVc CUr,oldCUr;
record RebTableBlock RTb;
row RebTableBlock RTrw;
record NewRebTableBlock NRTb;
row NewRebTableBlock NRTrw;
boolean testf,TrHs,done;
integer mtrw,nmtrw,i;
record RebVc Rebr,Reb2r;
date limdate;
string 20 oldrebcode;

limdate.year = 2015;
limdate.day = 1;
limdate.month = 1;

	blockload(RTb);
	blockload(NRTb);
	mtrw = matrowcnt(RTb);
	nmtrw = matrowcnt(NRTb);
	
	if(mtrw>0)then begin
		Trhs = true;
		CUr.Code = "";
		CUr.EmployeeType = 1;
		while(loopkey("EmployeeActCode",CUr,2,TrHs))begin
			recordcopy(oldCUr,CUr);
			oldrebcode = CUr.RebCode;
			done = false;
			testf = true;
			
			if(CUr.EmployeeType==0)then begin TrHs = false; testf = false; end;
			if(blank(CUr.DateCreated))then begin testf = false; end;
			
			if(testf)then begin
				if(CUr.DateCreated<limdate)then begin
					for(i=0;i<mtrw;i=i+1)begin
						matrowget(RTb,i,RTrw);
						if(datediff(currentdate,CUr.DateCreated)>=RTrw.Days)then begin
							CUr.RebCode = RTrw.RebCode;
							/*if(nonblank(CUr.RebCode))then begin
								Rebr.Code = CUr.RebCode;
								if(readfirstmain(Rebr,1,true))then begin
									Reb2r.Code = RTrw.RebCode;
									if(readfirstmain(Reb2r,1,true))then begin
										if(Reb2r.vra0>Rebr.vra0)then begin
											CUr.RebCode = RTrw.RebCode;
											done = true;
										end;
									end;
								end else begin
									if(CUr.RebCode!=RTrw.RebCode)then begin
										CUr.RebCode = RTrw.RebCode;
										done = true;
									end;
								end;
							end else begin
								if(CUr.RebCode!=RTrw.RebCode)then begin
									CUr.RebCode = RTrw.RebCode;
									done = true;
								end;
							end;*/
						end;
					end;
					if(CUr.RebCode!=oldrebcode)then begin
								done = true;
					end;			
				end else begin
					for(i=0;i<nmtrw;i=i+1)begin
						matrowget(NRTb,i,NRTrw);
						if(datediff(currentdate,CUr.DateCreated)>=NRTrw.Days)then begin
							CUr.RebCode = NRTrw.RebCode;
							/*if(nonblank(CUr.RebCode))then begin
								Rebr.Code = CUr.RebCode;
								if(readfirstmain(Rebr,1,true))then begin
									Reb2r.Code = RTrw.RebCode;
									if(readfirstmain(Reb2r,1,true))then begin
										if(Reb2r.vra0>Rebr.vra0)then begin
											CUr.RebCode = RTrw.RebCode;
											done = true;
										end;
									end;
								end else begin
									if(CUr.RebCode!=RTrw.RebCode)then begin
										CUr.RebCode = RTrw.RebCode;
										done = true;
									end;
								end;
							end else begin
								if(CUr.RebCode!=RTrw.RebCode)then begin
									CUr.RebCode = RTrw.RebCode;
									done = true;
								end;
							end;*/
						end;
					end;
					if(CUr.RebCode!=oldrebcode)then begin
						done = true;
					end;
				end;
				
				if(blank(CUr.PLCode))then begin
					CUr.PLCode = "RRP";
					done = true;
				end;
				//CUr.CurncyCode = "";
				//done = true;
				if(blank(CUr.Classification))then begin
					CUr.Classification = "IDEMPLOYEE";
					done = true;
				end;
				if(done)then begin
					recordupdate(oldCUr,CUr,true);
				end;
				
			end;
			
			
		end;
	end;


return;
end;


global 
updating procedure DateOfCheckAndPriceChange() // Edit ************************** Ihor Trubachov 21*05*2021
BEGIN
	record PrChActSettBlock PCASb;
	
	BlockLoad(PCASb);
	PCASb.CurDateReNew = CurrentDate;
	PCASb.CurTimeReNew = CurrentTime;
	BlockStore(PCASb);
	
return;
END;



global updating procedure TimeAutoRunMinutes()
begin
	record CompaniesBlock CBb;
	integer i,mtrw;
	record RcVc RepSpec;
	record NewClassifChBlock NCb;
	record DateRnBlock DRB;
	record PrChActSettBlock PCASb; // Edit ************************** Ihor Trubachov 21*05*2021
	
	blockload(CBb);
	BlockLoad(DRB);
	
	
	mtrw = matrowcnt(CBb);
	For(i=1;i<mtrw+1;i=i+1) begin
		if(CompanyIsJWLikeCompany(i) or i==1 or i==2 or i==4 or i==5 or i==6 or i==7 or i==8 or i==9 or i==25 or i==16)then begin
			if (SetCompany(i,false)) then begin
				BlockLoad(PCASb);
				if(PCASb.CurDateReNew != CurrentDate)then begin 
					logtext(0,"CreatePLActivityMn in " & i);
					CreatePLActivityMn(RepSpec);
				end;
			end;
		end;
	end; 
	ResetCompany(1);  
	
	
	if(getminute(currenttime)==0 and gethour(currenttime)<=23 and gethour(currenttime)>=8)then begin
		logtext(0,"RDBCheckAllDataMn in " & currenttime);
		RDBCheckAllDataMn;
	end;
	
	if(gethour(currenttime)==4 and DRB.DateRn!=CurrentDate) then begin //__________________________________ABR 13.05.19
		logtext(0,"RDBBuildAllDataMn in " & getminute(currenttime));
		RDBBuildAllDataMn;
		DRB.DateRn = CurrentDate;
		BlockStore(DRB);
	end;
	
	if(gethour(currenttime)==23 and getminute(currenttime)==35) then begin //__________________________________ABR 13.05.19
		logtext(0,"TROperMn in " & getminute(currenttime));
		recordnew(RepSpec);
		TROperMn(RepSpec);
	end;
return;
end;


global updating procedure UpdateDBLockBlock()
begin
	integer curcom,i,rwcnt;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  record DBLockBlock BDb;
  
	curcom = currentcompany;
	BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(Compb,i,Comprw);
    if (SetServerCompanyCode(Comprw.CompCode)) then begin
    	blockload(BDb);
    	if(nonblankdate(BDb.TRLock))then begin
    		BDb.TRLock = addday(currentdate,-3);
    		BDb.OtherLock = addday(currentdate,-3);
    		BDb.SLLock = addday(currentdate,-3);
    		BDb.PLLock = addday(currentdate,-3);
    		BDb.PLLock = addday(currentdate,-3);
    		blockstore(BDb);
    	end;
    end;
  end;
  resetcompany(curcom);

return;
end;

global updating procedure TimeAutoRun()
begin

return;
end;


global updating procedure TimeAutoRunAfterBackup()
begin
	integer SWAROVSKI,LLADRO,Jewelry,Villeroy,Rosental,Baccarat,Ambience,IvDelorme,Creative,CassaCoin,Xtravaganza;
	record RcVc RepSpec;
	integer i,CompQty;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record DateRnBlock DateRnb;
	integer days;
	date sdate;
	
  logtext(0,"TimeAutoRun");
	SWAROVSKI = 1;
	LLADRO = 2;
	Jewelry = 3;
	Villeroy = 4;
	Rosental = 5;
	Baccarat = 6;
	Ambience = 7;
	IvDelorme = 8;
	Creative = 9;
	CassaCoin = 25;
	Xtravaganza = 16;

	UpdateDBLockBlock;	
	CleanStocksInGlobalItemMn;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger10:26 19.03.2019
	
	if(getday(currentdate)==1)then begin
	  RecordNew(RepSpec);
    RepSpec.d1 = addday(currentdate,-1);
    AddNevComissionMn(RepSpec);
	end;
	
	// WebSyncCustomerSales;
	
	BlockLoad(Compb);
	
	
	CompQty = matrowcnt(Compb);
	
		
	ReserveDelMn; //__________________________________ABR 21.09.2020 16:35
	
	//RebAnalizRnAuto;// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 02 12 2020 y. at 2:24:37 PM
	
	RecordNew(RepSpec);
	if (SetCompany(SWAROVSKI,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoCetRebCodeCU start");
		AutoCetRebCodeCU;
		logtext(0,"AutoCetRebCodeCU end");
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		logtext(0,"CUUpdateLoyaltyRebCode start");
		CUUpdateLoyaltyRebCode;
		logtext(0,"CUUpdateLoyaltyRebCode end");
		logtext(0,"PasteRebCodeLCVCMn start");
		PasteRebCodeLCVCMn;
		logtext(0,"PasteRebCodeLCVCMn end");
		ResetCompany(SWAROVSKI);  
  end;
  if (SetCompany(LLADRO,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(LLADRO);  
  end;
  if (SetCompany(Jewelry,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(Jewelry);  
  end;
  
  if (SetCompany(17,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(17);  
  end;
  if (SetCompany(19,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		//CreatePLActivityMn(RepSpec);
		ResetCompany(19);  
  end;
	if (SetCompany(29,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		/*logtext(0,"CreateStockMvFromRetStock start");
    CreateStockMvFromRetStock;
	logtext(0,"CreateStockMvFromRetStock end");*/
		ResetCompany(29);  
	end;
  if (SetCompany(20,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(20);  
  end;
  if (SetCompany(21,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(21);  
  end;
  if (SetCompany(22,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(22);  
  end;
  if (SetCompany(23,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(23);  
  end;
  if (SetCompany(24,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		//AutoUnGroupIV;
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(24);  
  end;
  
  
  if (SetCompany(Villeroy,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		/*logtext(0,"CreatePLActivityMn start");
		CreatePLActivityMn(RepSpec);
		logtext(0,"CreatePLActivityMn end");*/
		ResetCompany(Villeroy);  
  end;
  if (SetCompany(Rosental,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(Rosental);  
  end;
  if (SetCompany(Baccarat,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(Baccarat);  
  end;
  if (SetCompany(Ambience,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(Ambience);  
  end;
  if (SetCompany(IvDelorme,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(IvDelorme);  
  end;
  if (SetCompany(Creative,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(Creative);  
  end;
  if (SetCompany(CassaCoin,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(CassaCoin);
  end;
  if (SetCompany(Xtravaganza,false)) then begin
		logtext(0,"Company num - " & currentcompany);
		logtext(0,"AutoUnGroupIV start");
		AutoUnGroupIV;
		logtext(0,"AutoUnGroupIV end");
		ResetCompany(Xtravaganza);
  end;
  
  if (SetCompany(1,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    for(i=1;i<8;i=i+1)begin
    	RecordClear(RepSpec);
			RepSpec.sStartDate = StringToDate("08/10/18");
			RepSpec.sEndDate = AddDay(currentdate,-1);
			RepSpec.ObjStr = "SW" & i;
			logtext(0,"CreateTRCurDifMn start");
			CreateTRCurDifMn(RepSpec);
			logtext(0,"CreateTRCurDifMn end");
    end;
	end;
	if (SetCompany(2,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("11/11/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
	logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
  if (SetCompany(3,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sStartDate = addmonth(currentdate,-3);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 26 12 2019 y. at 5:58:57 PM
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(4,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "VB1";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "VB2";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "KARE_S";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(5,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("28/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(6,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("28/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(7,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "AMBIANCE";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("08/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "DISTRIBUZI";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	
	if (SetCompany(8,false)) then begin
		logtext(0,"Company num - " & currentcompany);
			RecordClear(RepSpec);
			RepSpec.sStartDate = StringToDate("01/11/19");
			RepSpec.sEndDate = AddDay(currentdate,-1);
			RepSpec.ObjStr = "YD1";
			logtext(0,"CreateTRCurDifMn start");
		CreateTRCurDifMn(RepSpec);
		logtext(0,"CreateTRCurDifMn end");
		logtext(0,"Company num - " & currentcompany);
			RecordClear(RepSpec);
			RepSpec.sStartDate = StringToDate("01/11/19");
			RepSpec.sEndDate = AddDay(currentdate,-1);
			RepSpec.ObjStr = "FRETTE";
			logtext(0,"CreateTRCurDifMn start");
		CreateTRCurDifMn(RepSpec);
		logtext(0,"CreateTRCurDifMn end");
	end;
	
	if (SetCompany(9,false)) then begin
		logtext(0,"Company num - " & currentcompany);
			RecordClear(RepSpec);
			RepSpec.sStartDate = StringToDate("07/10/18");
			RepSpec.sEndDate = AddDay(currentdate,-1);
			logtext(0,"CreateTRCurDifMn start");
		CreateTRCurDifMn(RepSpec);
		logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(13,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("17/9/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(16,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("21/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "EXTRAVAGANZA";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("21/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "EXTRAVAGANZA_2";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("21/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "EXTRAVAGANZA_3";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("01/01/2020");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "DENIZ_MALL";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	
	end;
  if (SetCompany(17,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(18,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("4/01/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	
	
	blockload(DateRnb);
	logtext(0,"ColelctPaymentsCCAndOthersMn begin");
	logtext(0,"getmonth(DateRnb.CPCCAndOthers)<getmonth(currentdate) " & (getmonth(DateRnb.CPCCAndOthers)<getmonth(currentdate)));
	if(getmonth(DateRnb.CPCCAndOthers)<getmonth(currentdate) or getYear(DateRnb.CPCCAndOthers)<getYear(currentdate))then begin
		sdate = currentdate;
		sdate.day = 1;
		days = CountWorkingDays(sdate,currentdate,"","AZ");
		logtext(0,"days " & days);
		if(days>=4)then begin
			RepSpec.d1 = sdate;
			ColelctPaymentsCCAndOthersMn(RepSpec);
			DateRnb.CPCCAndOthers = currentdate;
			blockstore(DateRnb);
			logtext(0,"ColelctPaymentsCCAndOthersMn end");
		end;
	end;
	
	end;
  if (SetCompany(19,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
  if (SetCompany(20,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
  if (SetCompany(21,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
  if (SetCompany(22,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
  if (SetCompany(23,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
  if (SetCompany(24,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("16/7/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(25,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("22/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "COINCASA";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("22/10/18");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "COINCASA2";
    CreateTRCurDifMn(RepSpec);
	end;
	if (SetCompany(28,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("01/01/2019");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	
	if (SetCompany(29,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("01/01/2018");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	
	if (SetCompany(30,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.ObjStr = "PD";
    RepSpec.sStartDate = StringToDate("01/01/2019");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(31,false)) then begin
		logtext(0,"Company num - " & currentcompany);
			RecordClear(RepSpec);
			RepSpec.ObjStr = "BANG_O";
			RepSpec.sStartDate = StringToDate("01/01/2019");
			RepSpec.sEndDate = AddDay(currentdate,-1);
			logtext(0,"CreateTRCurDifMn start");
		CreateTRCurDifMn(RepSpec);
		logtext(0,"CreateTRCurDifMn end");
	end;
	if (SetCompany(33,false)) then begin
	logtext(0,"Company num - " & currentcompany);
    RecordClear(RepSpec);
    RepSpec.sStartDate = StringToDate("31/12/2019");
    RepSpec.sEndDate = AddDay(currentdate,-1);
    RepSpec.ObjStr = "";
    logtext(0,"CreateTRCurDifMn start");
	CreateTRCurDifMn(RepSpec);
	logtext(0,"CreateTRCurDifMn end");
	end;
	/*if (SetCompany(18,false)) then begin
		logtext(0,"Company num - " & currentcompany);
			RecordClear(RepSpec);
			RepSpec.ObjStr = "STORE";
			RepSpec.sStartDate = StringToDate("01/07/19");
			RepSpec.sEndDate = AddDay(currentdate,-1);
			logtext(0,"CreateTRCurDifMn start");
		CreateTRCurDifMn(RepSpec);
		logtext(0,"CreateTRCurDifMn end");
	end;*/
	RepSpec.sStartDate = addday(currentdate,-3);
	RepSpec.sEndDate = addday(currentdate,-1);
	CollectVIDaySaleMn(RepSpec);

return;
end;


global updating procedure updateGIrAuto(record GlobalItemVc GIr)
begin
	record CoinSettingsBlock CoinSb;
	string 255 path;
	integer compnr,CompQty,i,j,stop,oldCompany,startCompany;
	record WebReportChBlock WRChb;
	record BtrxReportChBlock BRChb;
	area req,reply;
	json jsresponse;
	string 100 host;
	longint port;
	record NewClassifChBlock NCb;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record ECAutoRetSMBlock ECARSMb;
	area text,replyPr,text2;
	record GlobalItemVc mainGIr,TPCPGIr,DupGlobalItem,LogGIr;
	boolean TrHs,testf,testf1, TrHs2;
	val ITRebate,price;
	record INVc INr;
	vector boolean compCh;
	boolean OldItemf,needtostore,storef;
	vector val ItemOldPrice, ItemOldRebate, NewItemPrice, NewItemRebate, DifferPrices, DifferRebates,ItemPriceComp,ItemRebComp;
	array string 255 ItemCodes, DiffItemCodes,tags;
	longint DiffItemsCnt;
	val oldPrice;
	val oldReb;
	record ItemStatusVc ISr;
	string 255 file1,file2,obj,crn,tpcurrency;
	val fr,to1,to2,br1,br2,TempItemPrice,tprice;  
	date td,tdp;
	record ItemDuplicatesVc IDr;
	
	startCompany = currentCompany;
  blockload(WRChb);
	blockload(Compb);
	
	CompQty = matrowcnt(Compb);
	
	testf = true;
	DiffItemsCnt = 0;
	OldItemf = false;
	ClearVector(compCh);
	ClearVector(ItemPriceComp);
	ClearVector(ItemRebComp);
	if(testf) then begin
		recordcopy(LogGIr,GIr);
		if(GIr.Rebate>0 and left(GIr.Code,4)=="BRND") then begin
			needtostore = true;
			GIr.Rebate = 0;
			// GIWasUpdated(GIr,LogGIr," GIWasUpdatedlog 42");
			// RecordStore(GIr,true);
		end;
		for (i=0;i<CompQty;i=i+1)begin
			if(stop==100) then begin
				if(fileexists("stop"))then begin
					TrHs = false;
				end;
			end;	
			if(stop==100) then begin stop=0; end;
			stop = stop+1;
			matrowget(Compb,i,Comprw);
			if(SetInSet(i+1,"1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,34")) then begin	
				if(Comprw.ActiveStatus==0 and i+1!=10 and i+1!=32)then begin
					SetCompany(i+1,false);
					price = blankval;
					tprice = blankval;
					INr.Code = GIr.HansaCode;
					if(!(CurrentCompany==29 and blank(INr.Group))) then begin
						if (ReadFirstMain(INr,1,true) and INr.BPIBrand==left(GIr.Code,8)) then begin
							GetPriceItem(INr.Code,price,ITRebate);
							ISr.Code = INr.Code;
							ISr.Location = ";;;";
							tdp = currentdate;
							if (GetTempItemPrice(TempItemPrice,INr.Code,tpcurrency,tdp,obj)) then begin
								if(tpcurrency!="AZN")then begin
									crn = tpcurrency;
									td = tdp;
									fr = 0;
									to1 = 0;
									to2 = 0;
									br1 = 0;
									br2 = 0;
									GetFullCurncyRate(crn,td,fr,to1,to2,br1,br2);
									tprice = TempItemPrice/fr*to1;
								end else begin
									tprice = TempItemPrice;
								end;
								ITRebate = 0;
								if(tprice!=blankval)then begin
									price = tprice;
								end;
								//if(tprice>price) then begin price = tprice; end;
							end;	
							if(ReadFirstMain(ISr,2,true)) then begin 
								if(ISr.Instock>0) then begin
									if(!OldItemf and (price!=GIr.Price or GIr.Rebate!=ITRebate))then begin
										OldItemf = true;
									end;
									if(price!=GIr.Price)then begin
										DiffItemsCnt = DiffItemsCnt + 1;
									end;
									if(DiffItemsCnt>0) then begin
										compCh[i+1] = true;
									end;	
									ItemPriceComp[GIr.Code & "_" & i+1] = price;
									ItemRebComp[GIr.Code & "_" & i+1] = ITRebate;
								end;	
							end;	
						end;
					end;	
					IDr.OrigCode = INr.Code;
					TrHs2 = true;
					while(loopMain(IDr,1,TrHs2))begin
						if (IDr.OrigCode!=INr.Code) then begin TrHs2 = false; end;
						if (IDr.OrigBrandCode==left(GIr.Code,8) and TrHs2) then begin
							price = blankval;
							tprice = blankval;
							INr.Code = IDr.DupCode;
							if(!(CurrentCompany==29 and blank(INr.Group))) then begin
								if (ReadFirstMain(INr,1,true) and INr.BPIBrand==left(GIr.Code,8)) then begin
									GetPriceItem(INr.Code,price,ITRebate);
									ISr.Code = INr.Code;
									ISr.Location = ";;;";
									tdp = currentdate;
									if (GetTempItemPrice(TempItemPrice,INr.Code,tpcurrency,tdp,obj)) then begin
										if(tpcurrency!="AZN")then begin
											crn = tpcurrency;
											td = tdp;
											fr = 0;
											to1 = 0;
											to2 = 0;
											br1 = 0;
											br2 = 0;
											GetFullCurncyRate(crn,td,fr,to1,to2,br1,br2);
											tprice = TempItemPrice/fr*to1;
										end else begin
											tprice = TempItemPrice;
										end;
										ITRebate = 0;
										if(tprice!=blankval)then begin
											price = tprice;
										end;
										//if(tprice>price) then begin price = tprice; end;
									end;	
									if(ReadFirstMain(ISr,2,true)) then begin 
										if(ISr.Instock>0) then begin
											if(!OldItemf and (price!=GIr.Price or GIr.Rebate!=ITRebate))then begin
												OldItemf = true;
											end;
											if(price!=GIr.Price)then begin
												DiffItemsCnt = DiffItemsCnt + 1;
											end;
											if(DiffItemsCnt>0) then begin
												compCh[i+1] = true;
											end;	
											if ((ItemPriceComp[GIr.Code & "_" & i+1] - (ItemPriceComp[GIr.Code & "_" & i+1]/100*ItemRebComp[GIr.Code & "_" & i+1]))<(price - (price / 100 * ITRebate))) then begin 
												ItemPriceComp[GIr.Code & "_" & i+1] = price;
												ItemRebComp[GIr.Code & "_" & i+1] = ITRebate;
											end;
										end;	
									end;	
								end;
							end;
						end;
					end;
					ResetLoop(IDr);
				end;
			end;
		end;
		if(OldItemf) then begin
			price = 0;
			ITRebate = 0;
			oldPrice = GIr.Price;
			oldReb = GIr.Rebate;
			blockload(Compb);
			for(i=1;i<=matrowcnt(Compb);i=i+1) begin
				if(DiffItemsCnt>1 and compCh[i]) then begin
					matrowget(Compb,i-1,Comprw);
					AddTextToArea(GIr.Code & chr(9) & ItemPriceComp[GIr.Code & "_" & i] & chr(9) & ItemRebComp[GIr.Code & "_" & i] & chr(9) & Comprw.CompName & chr(13),text2);
				end;
				if((ItemPriceComp[GIr.Code & "_" & i] - (ItemPriceComp[GIr.Code & "_" & i]/100*ItemRebComp[GIr.Code & "_" & i]))>(price - (price / 100 * ITRebate))) then begin
					price = ItemPriceComp[GIr.Code & "_" & i];
					ITRebate = ItemRebComp[GIr.Code & "_" & i];
					GIr.Price = Round(ItemPriceComp[GIr.Code & "_" & i],SetRoundModeD(0));
					GIr.Rebate = ItemRebComp[GIr.Code & "_" & i];
					compnr = i;
				end;
			end;
			if(GIr.Price!=oldPrice or GIr.Rebate!=oldReb) then begin
				matrowget(Compb,compnr-1,Comprw);
				GIr.PriceFromComp = Comprw.CompName;
				TPCPGIr.Code = "CP_" & GIr.Code;
				if (ReadFirstMain(TPCPGIr,1,true)) then begin
					TPCPGIr.Price = Round(GIr.Price,SetRoundModeD(0));
					TPCPGIr.Rebate = GIr.Rebate;
					TPCPGIr.PriceFromComp = Comprw.CompName;
					GIWasUpdated(GIr,LogGIr," GIWasUpdatedlog 43");
					RecordStore(TPCPGIr,true);
				end;
				GIWasUpdated(GIr,LogGIr," GIWasUpdatedlog 44");
				storef = true;
				RecordStore(GIr,true);
				UpdateStockInSetGlobalItem(GIr.Code);
			end;	
		end;
		if(needtostore and storef==false)then begin
			GIWasUpdated(GIr,LogGIr," GIWasUpdatedlog 44.1");
			RecordStore(GIr,true);
			UpdateStockInSetGlobalItem(GIr.Code);
		end;
	end;
	ResetCompany(startCompany);
	
return;
end;


global  procedure RecalcPriceRebateMn(record RcVc RepSpec)  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 13:34 11.07.2019
begin
	record CoinSettingsBlock CoinSb;
  string 255 path;
  integer compnr,CompQty,i,j,stop,oldCompany,startCompany;
  record WebReportChBlock WRChb;
	record BtrxReportChBlock BRChb;
  area req,reply;
  json jsresponse;
  string 100 host;
  longint port;
  record NewClassifChBlock NCb;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record ECAutoRetSMBlock ECARSMb;
  area text,replyPr,text2;
	record GlobalItemVc GIr,mainGIr,TPCPGIr;
	boolean TrHs,testf,testf1;
	val ITRebate,price;
	record INVc INr;
	vector boolean compCh;
  boolean OldItemf;
	vector val ItemOldPrice, ItemOldRebate, NewItemPrice, NewItemRebate, DifferPrices, DifferRebates,ItemPriceComp,ItemRebComp;
	array string 255 ItemCodes, DiffItemCodes,tags;
	longint DiffItemsCnt;
	val oldPrice;
	val oldReb;
	record ItemStatusVc ISr;
	string 255 file1,file2,obj,crn,tpcurrency;
	val fr,to1,to2,br1,br2,TempItemPrice,tprice;  
	date td,tdp;
	
	startCompany = currentCompany;
  blockload(WRChb);
	blockload(Compb);
	
	CompQty = matrowcnt(Compb);
	AddTextToArea	("Code" & chr(9) & "Price old" & chr(9) & "Price new" & chr(9) & "Dif Price" & chr(9) & "Reb old" & chr(9) & "Reb new" & chr(9) & "Reb diff" & chr(9) & "Company name" & chr(13),text);
	AddTextToArea	("Code" & chr(9) & "Price" & chr(9) & "Rebate" & chr(9) & "Company name" & chr(13),text2);
	logtext(0,"Company num - " & currentcompany);
	logtext(0,"RecalcPriceRebateMn start");
	
	ResetLoop(GIr);
	GIr.Code = "";
	stop = 0;
	matrowget(Compb,currentcompany-1,Comprw);
	
	if(nonblank(RepSpec.f1))then begin
		GIr.Code = RepSpec.f1;
		if(ReadFirstMain(GIr,1,true))then begin 
			queued.updateGIrAuto(GIr);
			MilliSleep(100);
		end;
	end;
	
	TrHs = true;
	if(nonblank(RepSpec.f2) and blank(RepSpec.f1)) then begin
		testf = false;
		oldCompany = currentCompany;
		SetCompany(stringToInt(RepSpec.f2),false);
		INr.Code = "";
		while(loopMain(INr,1,true)) begin
			ISr.Code = INr.Code;
			testf1 = true;
			ISr.Location = ";;;";
			if(nonblank(RepSpec.f3)) then begin
				if(INr.LastPurchCurncyCode!=RepSpec.f3) then begin
					testf1 = false;
				end;
			end;
			if(testf1 and ReadFirstMain(ISr,2,true)) then begin 
				if(ISr.Instock>0) then begin
					GIr.Code = INr.GlobalArtCode;
					if(ReadFirstMain(GIr,1,true))then begin
						queued.updateGIrAuto(GIr);
						MilliSleep(100);
					end;
				end;
			end;
		end;
		ResetCompany(oldCompany);
	end else begin
		if(blank(RepSpec.f1)) then begin
			while(loopmain(GIr,1,TrHs)) begin	
				queued.updateGIrAuto(GIr);
				MilliSleep(100);
			end;
		end;
	end;
	logtext(0,"RecalcPriceRebateMn end");
	
	
	
	if(blank(RepSpec.f1) and blank(RepSpec.f2)) then begin
		file1 = "PriceChanges" & Datetostring(currentdate,"DD.MM.YYYY") & ".txt";
		file2 = "PriceDiff" & Datetostring(currentdate,"DD.MM.YYYY")  & ".txt";
		
		WriteAreaToFile(text,file1,0);
		WriteAreaToFile(text2,file2,0);
		logtext(0,file1);
		if(fileexists(file1))then begin
			setareazerosize(text);
			addtexttoarea("{",text);
			addtexttoarea("\"host\":\"smtp.gmail.com\",",text);
			addtexttoarea("\"port\":465,",text);
			addtexttoarea("\"secure\":true,",text);
			addtexttoarea("\"user\":\"IDReporSender@gmail.com\",",text);
			addtexttoarea("\"pass\":\"c2h5ohc2h5oh\",",text);
			addtexttoarea("\"from\":\"IDReportSender@gmail.com\",",text);
			addtexttoarea("\"to\":\"" & "forfun942@gmail.com" & "\",",text);
			addtexttoarea("\"subject\":\"" & USetStr(36260) & " " & CurrentDate & "\",",text);
			addtexttoarea("\"plaintext\":\"notblank\",",text);			
			addtexttoarea("\"filename\":\"" & file1 & "\",",text);			
			addtexttoarea("\"path\":\"/usr/local/bin/StandardERPServer/" & file1 & "\"",text);
			addtexttoarea("}",text);
			// logtext(0,file1);
			logtext(0,"reply length " & getarealength(replyPr));

			SendWebRequest("127.0.0.1",1071,-1,false,"POST","/sendMail","application/json","",false,text,replyPr,5);
			MilliSleep(2000);
		end;	
		
		
		if(fileexists(file2))then begin
			setareazerosize(text2);
			addtexttoarea("{",text2);
			addtexttoarea("\"host\":\"smtp.gmail.com\",",text2);
			addtexttoarea("\"port\":465,",text2);
			addtexttoarea("\"secure\":true,",text2);
			addtexttoarea("\"user\":\"IDReporSender@gmail.com\",",text2);
			addtexttoarea("\"pass\":\"c2h5ohc2h5oh\",",text2);
			addtexttoarea("\"from\":\"IDReportSender@gmail.com\",",text2);
			addtexttoarea("\"to\":\"" & "forfun942@gmail.com" & "\",",text2);
			addtexttoarea("\"subject\":\"" & USetStr(36260) & " " & CurrentDate & "\",",text2);
			addtexttoarea("\"plaintext\":\"notblank\",",text2);			
			addtexttoarea("\"filename\":\""& file2 & "\",",text2);			
			addtexttoarea("\"path\":\"/usr/local/bin/StandardERPServer/" &  file2  & "\"",text2);
			addtexttoarea("}",text2);
			logtext(0,file2);
			logtext(0,"reply length " & getarealength(replyPr));

			SendWebRequest("127.0.0.1",1071,-1,false,"POST","/sendMail","application/json","",false,text2,replyPr,5);
			MilliSleep(2000);
		end;	
	end;
	ResetCompany(startCompany);
return;
end;



global  updating procedure RecalcPriceRebateMn2(record RcVc RepSpec)  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 13:34 11.07.2019
begin
	record CoinSettingsBlock CoinSb;
  string 255 path;
  integer compnr,CompQty,i,j,stop,oldCompany,startCompany;
  record WebReportChBlock WRChb;
	record BtrxReportChBlock BRChb;
  area req,reply;
  json jsresponse;
  string 100 host;
  longint port;
  record NewClassifChBlock NCb;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record ECAutoRetSMBlock ECARSMb;
  area text,replyPr,text2;
	record GlobalItemVc GIr,mainGIr,TPCPGIr;
	boolean TrHs,testf,testf1;
	val ITRebate,price;
	record INVc INr;
	vector boolean compCh;
  boolean OldItemf;
	vector val ItemOldPrice, ItemOldRebate, NewItemPrice, NewItemRebate, DifferPrices, DifferRebates,ItemPriceComp,ItemRebComp;
	array string 255 ItemCodes, DiffItemCodes,tags;
	longint DiffItemsCnt;
	val oldPrice;
	val oldReb;
	record ItemStatusVc ISr;
	string 255 file1,file2,obj,crn,tpcurrency;
	val fr,to1,to2,br1,br2,TempItemPrice,tprice;  
	date td,tdp;
	
	startCompany = currentCompany;
  blockload(WRChb);
	blockload(Compb);
	
	CompQty = matrowcnt(Compb);
	AddTextToArea	("Code" & chr(9) & "Price old" & chr(9) & "Price new" & chr(9) & "Dif Price" & chr(9) & "Reb old" & chr(9) & "Reb new" & chr(9) & "Reb diff" & chr(9) & "Company name" & chr(13),text);
	AddTextToArea	("Code" & chr(9) & "Price" & chr(9) & "Rebate" & chr(9) & "Company name" & chr(13),text2);
	logtext(0,"Company num - " & currentcompany);
	logtext(0,"RecalcPriceRebateMn start");
	
	ResetLoop(GIr);
	GIr.Code = "";
	stop = 0;
	matrowget(Compb,currentcompany-1,Comprw);
	
	if(nonblank(RepSpec.f1))then begin
		GIr.Code = RepSpec.f1;
		if(ReadFirstMain(GIr,1,true))then begin 
			updateGIrAuto(GIr);
		end;
	end;
	
	TrHs = true;
	if(nonblank(RepSpec.f2) and blank(RepSpec.f1)) then begin
		testf = false;
		oldCompany = currentCompany;
		SetCompany(stringToInt(RepSpec.f2),false);
		INr.Code = "";
		while(loopMain(INr,1,true)) begin
			ISr.Code = INr.Code;
			testf1 = true;
			ISr.Location = ";;;";
			if(nonblank(RepSpec.f3)) then begin
				if(INr.LastPurchCurncyCode!=RepSpec.f3) then begin
					testf1 = false;
				end;
			end;
			if(testf1 and ReadFirstMain(ISr,2,true)) then begin 
				if(ISr.Instock>0) then begin
					GIr.Code = INr.GlobalArtCode;
					if(ReadFirstMain(GIr,1,true))then begin
						updateGIrAuto(GIr);
					end;
				end;
			end;
		end;
		ResetCompany(oldCompany);
	end else begin
		if(blank(RepSpec.f1)) then begin
			while(loopmain(GIr,1,TrHs)) begin	
				updateGIrAuto(GIr);
			end;
		end;
	end;
	logtext(0,"RecalcPriceRebateMn end");
	
	
	
	if(blank(RepSpec.f1) and blank(RepSpec.f2)) then begin
		file1 = "PriceChanges" & Datetostring(currentdate,"DD.MM.YYYY") & ".txt";
		file2 = "PriceDiff" & Datetostring(currentdate,"DD.MM.YYYY")  & ".txt";
		
		WriteAreaToFile(text,file1,0);
		WriteAreaToFile(text2,file2,0);
		logtext(0,file1);
		if(fileexists(file1))then begin
			setareazerosize(text);
			addtexttoarea("{",text);
			addtexttoarea("\"host\":\"smtp.gmail.com\",",text);
			addtexttoarea("\"port\":465,",text);
			addtexttoarea("\"secure\":true,",text);
			addtexttoarea("\"user\":\"IDReporSender@gmail.com\",",text);
			addtexttoarea("\"pass\":\"c2h5ohc2h5oh\",",text);
			addtexttoarea("\"from\":\"IDReportSender@gmail.com\",",text);
			addtexttoarea("\"to\":\"" & "forfun942@gmail.com" & "\",",text);
			addtexttoarea("\"subject\":\"" & USetStr(36260) & " " & CurrentDate & "\",",text);
			addtexttoarea("\"plaintext\":\"notblank\",",text);			
			addtexttoarea("\"filename\":\"" & file1 & "\",",text);			
			addtexttoarea("\"path\":\"/usr/local/bin/StandardERPServer/" & file1 & "\"",text);
			addtexttoarea("}",text);
			// logtext(0,file1);
			logtext(0,"reply length " & getarealength(replyPr));

			SendWebRequest("127.0.0.1",1071,-1,false,"POST","/sendMail","application/json","",false,text,replyPr,5);
			MilliSleep(2000);
		end;	
		
		
		if(fileexists(file2))then begin
			setareazerosize(text2);
			addtexttoarea("{",text2);
			addtexttoarea("\"host\":\"smtp.gmail.com\",",text2);
			addtexttoarea("\"port\":465,",text2);
			addtexttoarea("\"secure\":true,",text2);
			addtexttoarea("\"user\":\"IDReporSender@gmail.com\",",text2);
			addtexttoarea("\"pass\":\"c2h5ohc2h5oh\",",text2);
			addtexttoarea("\"from\":\"IDReportSender@gmail.com\",",text2);
			addtexttoarea("\"to\":\"" & "forfun942@gmail.com" & "\",",text2);
			addtexttoarea("\"subject\":\"" & USetStr(36260) & " " & CurrentDate & "\",",text2);
			addtexttoarea("\"plaintext\":\"notblank\",",text2);			
			addtexttoarea("\"filename\":\""& file2 & "\",",text2);			
			addtexttoarea("\"path\":\"/usr/local/bin/StandardERPServer/" &  file2  & "\"",text2);
			addtexttoarea("}",text2);
			// logtext(0,file2);
			// logtext(0,"reply length " & getarealength(replyPr));

			SendWebRequest("127.0.0.1",1071,-1,false,"POST","/sendMail","application/json","",false,text2,replyPr,5);
			MilliSleep(2000);
		end;	
	end;
	ResetCompany(startCompany);
return;
end;

//Edit ******************************Vas-P	05/08/2021
global webpublic procedure WebFillItemsInfoInFile()
begin
	area fillitems;
	string 150 fn;
	record INVc INr;
	integer CompQty,i,startCompany;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	boolean TrHs,testf,isfirst;
	val ITRebate,price;
	vector val ItemPriceComp,ItemRebComp;
	vector string 255 ItemCompname,ItemLocations,ItemInstock,ItemName;
	record ItemStatusVc ISr;
	string 255 obj,crn,tpcurrency;
	val fr,to1,to2,br1,br2,TempItemPrice,tprice;  
	date td,tdp;
	record LocationVc Locr;
	
	logtext(0,"WebFillItemsInfoInFile");
	
	startCompany = currentCompany;
	blockload(Compb);
	
	CompQty = matrowcnt(Compb);
	
	ClearVector(ItemPriceComp);
	ClearVector(ItemRebComp);
	
	for (i=0;i<CompQty;i=i+1)begin
		matrowget(Compb,i,Comprw);
		SetCompany(i+1,false);
		if(SetInSet(i+1,"1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,34")) then begin
			if((CurrentCompany!=18 or CurrentCompany!=28 or CurrentCompany!=29)) then begin
				addtexttoarea("{\"company\":\"" & Comprw.CompName & "\"," & chr(13) & chr(10),fillitems);
				
				while(loopmain(Locr,1,true))begin
					addtexttoarea("\"location\":\"" & Locr.Code & "\"," & chr(13) & chr(10),fillitems);	
				end;
				ResetLoop(Locr);
				price = blankval;
				tprice = blankval;
				TrHs = true;
				addtexttoarea("\"items\":\[" & chr(13) & chr(10),fillitems);
				while(loopmain(INr,1,TrHs))begin
					testf = true;
					if(blank(INr.GlobalArtCode))then begin testf = false; end;
					if(testf)then begin
						if(isfirst)then begin
							WebOutString(",");
						end;
						isfirst = true;
						addtexttoarea("\"" & INr.Code & "\"",fillitems);
						// GetPriceItem(INr.Code,price,ITRebate);
						// tdp = currentdate;
						// if (GetTempItemPrice(TempItemPrice,INr.Code,tpcurrency,tdp,obj)) then begin
							// if(tpcurrency!="AZN")then begin
								// crn = tpcurrency;
								// td = tdp;
								// fr = 0;
								// to1 = 0;
								// to2 = 0;
								// br1 = 0;
								// br2 = 0;
								// GetFullCurncyRate(crn,td,fr,to1,to2,br1,br2);
								// tprice = TempItemPrice/fr*to1;
							// end else begin
								// tprice = TempItemPrice;
							// end;
							// ITRebate = 0;
							// if(tprice!=blankval)then begin
								// price = tprice;
							// end;
						// end;	
						
						// ItemPriceComp[INr.Code & "_" & i+1] = price;
						// ItemRebComp[INr.Code & "_" & i+1] = ITRebate;
						// ItemName[INr.Code & "_" & i+1] = INr.Name;
						
						// addtexttoarea(ItemPriceComp[INr.Code & "_" & i+1] & ";" & chr(13) & chr(10),fillitems);
						// addtexttoarea(ItemRebComp[INr.Code & "_" & i+1] & ";" & chr(13) & chr(10),fillitems);
						// addtexttoarea(ItemName[INr.Code & "_" & i+1] & ";" & chr(13) & chr(10),fillitems);
						// ISr.Code = INr.Code;
						// ISr.Location = ";;;";
						// if(ReadFirstMain(ISr,2,true)) then begin 
							// if(ISr.Instock>0) then begin
								// ItemInstock[INr.Code & "_" & i+1] = ISr.Code;
								// addtexttoarea(ItemInstock[INr.Code & "_" & i+1] & ";" & chr(13) & chr(10),fillitems);
							// end;	
						// end;	
					end;	
				end;
				addtexttoarea("]" & chr(13) & chr(10),fillitems);
				resetloop(INr);
			end;
		end;
	end;
	fn = "fillitems.txt";
	if (fileexists(fn)) then begin
		delete_file(fn);
	end;
	WriteAreaToFile(fillitems,fn,1);
	
return;
end;


global updating procedure BackgroundOperations()
begin
  Time InTransmissionBegin,InTransmissionEnd,
       OutTransmissionBegin,OutTransmissionEnd;
  record CoinSettingsBlock CoinSb;
  string 255 path;
  integer compnr,CompQty,i;
  record WebReportChBlock WRChb;
	record BtrxReportChBlock BRChb;
  area req,reply;
  json jsresponse;
  string 100 host;
  longint port;
  record NewClassifChBlock NCb;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record ECAutoRetSMBlock ECARSMb;
  area text,replyPr;
  record RcVc RepSpec;
   blockload(WRChb);
	
	
	logtext(0,"BackgroundOperations");
	//SyncAllIVtoCRM;
	// WebSyncCustomerSales;
		
		
		if(gethour(currenttime)==2)then begin
			if(getminute(currenttime)==0)then begin
				TimeAutoRunAfterBackup;
			end;
		end;
		
		blockload(Compb);
		CompQty = matrowcnt(Compb);
		if(gethour(currenttime)==7 and getminute(currenttime)>=25 and getminute(currenttime)<=30/* and fileexists("demoserver")*/)then begin
			logtext(0,"CollectXMLItems");
			CollectXMLItems;	
		end;
		if(gethour(currenttime)==8 and getminute(currenttime)>=06 and getminute(currenttime)<=15/* and fileexists("demoserver")*/)then begin
			logtext(0,"CollectXMLZOOMagItems");
			CollectXMLZOOMagItems;	
		end;
		
		if(gethour(currenttime)==22 and getminute(currenttime)>=45 and getminute(currenttime)<=50/* and fileexists("demoserver")*/)then begin
			logtext(0,"CollectXMLNovasItems");
			CollectXMLNovasItems;	
		end;
		
		if(gethour(currenttime)==8 and getminute(currenttime)>=50 and getminute(currenttime)<=55/* and fileexists("demoserver")*/)then begin
			logtext(0,"CollectXMLECAZMagItems");
			CollectXMLECAZMagItems;	
		end;
		
		
		if(gethour(currenttime)==7 and getminute(currenttime)>=20 and getminute(currenttime)<=25/* and fileexists("demoserver")*/)then begin
			logtext(0,"GlobalItemClassInStock");
			if (!fileexists("/mnt/database/Ecommerce/GlobalItemReports/GlobalItemClassInStockTMP")) then begin
				CreateFile("/mnt/database/Ecommerce/GlobalItemReports/GlobalItemClassInStockTMP");
				queued.GlobalItemClassInStock;	
			end;
		end;
		
		
		// if(gethour(currenttime)==23 and getminute(currenttime)>=25 and getminute(currenttime)<=35 and !fileexists("SYNCCRMPROCESS"))then begin // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 9:33 14.07.2020
			// logtext(0,"SyncAllIVtoCRM");
			// SyncAllIVtoCRM;	
		// end;
		
	
		if(gethour(currenttime)==3 and getminute(currenttime)>=0 and getminute(currenttime)<=10)then begin // Recalculating prices and rebates in global items 
			recordnew(RepSpec);
			logtext(0,"GlobalItemVcRecStPrMn");
			GlobalItemVcRecStPrMn(RepSpec);
			// logtext(0,"RecalcPriceRebateMn2"); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 12:07 15.03.2021
			// RecalcPriceRebateMn2(RepSpec); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 13:32 11.07.2019
		end;	
		
		if(gethour(currenttime)==7 and getminute(currenttime)>=0 and getminute(currenttime)<=10)then begin // Recalculating prices and rebates in global items 
			recordnew(RepSpec);
			logtext(0,"ReserveRecalcAutoMn");
			ReserveRecalcAutoMn;
		end;	
		
		// ImportAddClassFromFolderIn;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:38 08.05.2020
		// queued.ImportAddClassFromFolderQueuedIn;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 16:38 08.05.2020
		
		if (gethour(currenttime)>=9 and gethour(currenttime)<=23) then begin
			DownloadFTPimportFile;
			queued.ImportAddClassWithJSONFromFolderQueuedIn;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 14:55 31.07.2020
			queued.ImportAddTPExtVendItemsFromFolderQueuedIn;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 9:25 14.12.2020
			queued.ImportRefCodesByClassQueuedIn; // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 12:09 18.02.2021
			queued.ImportGlobalSetsQueuedIn;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 18:48 19.02.2021
			queued.ImportAddExtVendItemsFromFolderQueuedIn;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 14:14 13.10.2020
		end;
		
		
		for (i=0;i<CompQty;i=i+1) begin
			matrowget(Compb,i,Comprw);
			if (gethour(currenttime)>=9 and gethour(currenttime)<=23) then begin
				if(Comprw.ActiveStatus==0 and /*(getminute(currenttime)==0 or getminute(currenttime)==30)*/(Right(getminute(currenttime),1)=="0" or Right(getminute(currenttime),1)=="5"))then begin
					SetCompany(i+1,false);
					AlarmECMessageMn;
				end;
				
				if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(i+1) or (i+1)==3))then begin
					SetCompany(i+1,false);
					blockload(NCb);
					if(NCb.Update!=0 and Right(getminute(currenttime),1)=="0") then begin
						logtext(0,"Item Discount update " & getminute(currenttime));
						NCb.Update = 0;
						BlockStore(NCb);
						// RecalcDiscMn;
					end;	
				end;
			end;
			if((i+1)==29)then begin
				SetCompany(i+1,false);
				blockload(ECARSMb);
				if(gethour(currenttime)==8 and getminute(currenttime)>=0 and getminute(currenttime)<=5)then begin
					if(ECARSMb.AutoSMf==1 and ECARSMb.AutoSM==1)then begin
						logtext(0,"CreateStockMvFromRetStock start");
						CreateStockMvFromRetStock;
						logtext(0,"CreateStockMvFromRetStock end");
						ECARSMb.AutoSMf = 0;
						BlockStore(ECARSMb);
					end;
					logtext(0,"UpdateGlSABINAInstock start");
					UpdateGlSABINAInstock;
					logtext(0,"UpdateGlSABINAInstock end");
				end else begin
					if(ECARSMb.AutoSMf==0 and gethour(currenttime)>=7 and gethour(currenttime)<=23)then begin
						ECARSMb.AutoSMf = 1;
						BlockStore(ECARSMb);
					end;
				end;
			end;
		end;	
	
  compnr = currentcompany;
  
  logtext(0,"BackgroundOperations");
  
  if(getminute(currenttime)==0 and gethour(currenttime)>=9 and gethour(currenttime)<=23)then begin
  	SendVisitstoCRM;
		logtext(0,"SendRemoteImpRequestMn");
		SendRemoteImpRequestMn;
		logtext(0,"SendRemoteImpRequestMn_end");
  end;
  
  
  InTransmissionBegin = stringtotime("11:25:00");
  InTransmissionEnd = stringtotime("11:30:00");
  OutTransmissionBegin = stringtotime("23:15:00");
  OutTransmissionEnd = stringtotime("23:20:00");
  TimeAutoRunMinutes;
    
  if (CurrentTime>=InTransmissionBegin) and (CurrentTime<=InTransmissionEnd) then begin
    if (SetCompany(25,false)) then begin
    	BlockLoad(CoinSb);
  		path = CoinSb.inDir;
      GruppoCoinParseAndReplaceInputFiles(path);
    end;
  end;
  
  if (CurrentTime >= OutTransmissionBegin) and (CurrentTime <= OutTransmissionEnd) then begin
    if (SetCompany(25,false)) then begin
      GruppoCoinParseAndReplaceOutputFiles;
    end;
  end;
  
  //setcompany(1,false);
  /*blockload(BRChb);
	if(BRChb.WabUPDstockf==1 and BRChb.WEBCheck==1)then begin
		BRChb.WabUPDstockf = 0;
		BlockStore(BRChb);
		logtext(0,"************************************************************WEB UPD Stock flag false*****************");
		port = 443;
		logtext(0,"SendWebRequest " & BRChb.PathSinc & ":" & port & BRChb.PageSinc);
		SendWebRequest(BRChb.PathSinc,port,-1,true,"GET",BRChb.PageSinc,"text/xml","",false,req,reply,1);
	end;*/
	
  logtext(0,"BackgroundOperations END");
  
  ResetCompany(compnr);  
end;


global updating procedure BrandTimeStampsMn()	//Edit **********************************************Vas-P	26/07/2021
begin
	record GlobalItemVc GIr;
  record RcVc RepSpec;
	string 150 brand;

	SetCompany(1,false);
	logtext(0,"WebFillBrandTimeStamps");

	brand = RepSpec.f1;
	while(loopmain(GIr,1,true))begin
		if(GIr.BPIBrand==brand)then begin
			GIr.TimeStamp = StringToLongInt(DateToString(CurrentDate,"YYMMDD") & TimeToString(CurrentTime,"HHMM",false));
			recordstore(GIr,true);
		end;
	end;
	
return;
end;


