//server-only
external updating procedure DeleteTransaction(LongInt,Integer);
external procedure GetObjs(string,string,var string);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure TRVc_PasteCurDebVal(var record TRVc,Integer);
external procedure TRVc_PasteCurncy(var record TRVc,Integer);
external procedure TRDDefault(var record TRVc,Integer,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function Boolean TRVc_PasteAccNumber(var record TRVc,Integer,Integer,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure TRSumup(var record TRVc,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
//external procedure ExtractObjectsByType(string ,string,var array string,var integer);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure LogProcTime(string,longint);
external function boolean OTCodeMatch(string, string);
external procedure ExtractObj(string,var Integer,var string);



global
procedure CustExtractObjectsByType(string objstr, string type, var array string res, var integer i,array string addobj)
begin
  integer pos;
  string 50 tstr;
  integer j;
  
  i = 0;
  pos = 0;
  ExtractObj(objstr,pos,tstr);
  while (nonblank(tstr)) begin
    if (OTCodeMatch(tstr,type)) then begin
    	for(j=0;j<addobj.length;j=j+1)begin
    		if(nonblank(addobj[j]))then begin
    			if(setinset(addobj[j],objstr))then begin
    				tstr = tstr & "," & addobj[j];
    			end;
    		end;
    	end;
      res[i] = tstr;
      i = i + 1;
    end;
    ExtractObj(objstr,pos,tstr);
  end;
  
  if(currentcompany!=2 and currentcompany!=9 and currentcompany!=4 and currentcompany!=5 and currentcompany!=6 and currentcompany!=28 and currentcompany!=29)then begin
	
	end else begin
		for(j=0;j<addobj.length;j=j+1)begin
			if(nonblank(addobj[j]))then begin
				if(setinset(addobj[j],objstr))then begin
					tstr = addobj[j];
					res[i] = tstr;
					i = i + 1;
				end;
			end;
		end;
	end;
  return;
end;

procedure CountEndSaldoInBase(string accnum, date enddate, var vector val saldo, integer serviceIntYc, var longint corrTRrNum, var array string CurencyList, var array string ObjectList,array string addobj,array string addobjsubdi)
begin
  boolean TrHs;
  record FBVc FBr;
  record MainVc mainr;
  record TRVc TRr;
  row TRVc TRrw;
  row FBVc FBrw;
  integer i,rwcnt,CLi,OLi,oscnt,j,oldstyle,oscntsubdi;
  string 20 objstore,crn;
  array string 20 objstores,objstoressubdi;
  string 255 t;
  boolean fillobjf;
  vector boolean CurInArr,ObjInArr;
  val diff;
  
  TRr.Number = 9999999;
  TRr.IntYc = serviceIntYc;
  TrHs = true;
  while (LoopBackKey("Number",TRr,2,TrHs)) begin
    if (TRr.IntYc==serviceIntYc) then begin
      TrHs = false;
      corrTRrNum = TRr.Number;
    end;
  end;
  resetloop(TRr);
  if (ObjectList.length==0) then begin fillobjf = true; end;
  resetloop(mainr);
  mainr.AccNumber = accnum;
  mainr.TransDate = "1/1/1900";
  TrHs = true;
  while (LoopMain(mainr,2,TrHs)) begin
    if ((mainr.AccNumber!=accnum) or (mainr.TransDate>enddate)) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (mainr.FileName=="TRVc") then begin
        TRr.Number = mainr.TransNr;
        TRr.IntYc = mainr.IntYc;
        if (ReadFirstMain(TRr,2,true)) then begin
          if (mainr.TransDate == TRr.TransDate) then begin
            rwcnt = MatRowCnt(TRr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if ((TRrw.AccNumber == accnum) and (TRrw.ovst <> 1) and (TRrw.stp==1)) then begin
                objstoressubdi[0] = "";
                CustExtractObjectsByType(TRrw.Objects,"STORE",objstores,oscnt,addobj);
                CustExtractObjectsByType(TRrw.Objects,"SUBDI",objstoressubdi,oscntsubdi,addobjsubdi);
                if (oscnt==0) then begin
                  objstores[oscnt] = "BLANK";
                  oscnt = 1;
                end;
                //if(fileexists("demoserver"))then begin
                if(currentcompany==18)then begin
									if(nonblank(objstoressubdi[0]))then begin
										if(nonblank(objstores[0]))then begin
											objstores[0] = objstores[0] & "," & objstoressubdi[0];
										end;
									end;
									objstoressubdi[0] = "";
									CustExtractObjectsByType(TRrw.Objects,"BANK",objstoressubdi,oscntsubdi,addobjsubdi);
									if(nonblank(objstoressubdi[0]))then begin
										if(nonblank(objstores[0]))then begin
											objstores[0] = objstores[0] & "," & objstoressubdi[0];
										end;
									end;
                end;
                for (j=0;j<oscnt;j=j+1) begin
                  if (fillobjf) then begin
                    if (!ObjInArr[objstores[j]]) then begin
                      ObjectList[OLi] = objstores[j];
                      ObjInArr[ObjectList[OLi]] = true;
                      OLi = OLi + 1;
                    end;
                    if (blank(TRrw.Curncy)) then begin
                      TRrw.Curncy = "BLANK";
                    end;
                    if (!CurInArr[TRrw.Curncy]) then begin
                      CurencyList[CLi] = TRrw.Curncy;
                      CurInArr[CurencyList[CLi]] = true;
                      CLi = CLi + 1;
                    end;
                    if(currentcompany!=2 and currentcompany!=9 and currentcompany!=4 and currentcompany!=5 and currentcompany!=6 and currentcompany!=28 and currentcompany!=29)then begin
											t = accnum & ":" & objstores[j];// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 2 October 2018 19:49:13
                    end else begin
											t = accnum & ":" & TRrw.Curncy & ":" & objstores[j];// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 2 October 2018 19:49:13
                    end;
                    saldo[t] = saldo[t] + TRrw.DebVal - TRrw.CredVal;
                    saldo[t & ":incur"] = saldo[t & ":incur"] + TRrw.CurDebVal - TRrw.CurCredVal;
                  end else begin
                    if (objstores[j]==ObjectList[0]) then begin
                      if (!CurInArr[TRrw.Curncy]) then begin
                        CurencyList[CLi] = TRrw.Curncy;
                        CurInArr[CurencyList[CLi]] = true;
                        CLi = CLi + 1;
                      end;
                      t = accnum & ":" & TRrw.Curncy & ":" & objstores[j];
                      saldo[t] = saldo[t] + TRrw.DebVal - TRrw.CredVal;
                      crn = TRrw.Curncy;
                      if (TRrw.Curncy=="BLANK") then begin
                        crn = "";
                      end;
                      switch (TypeOfCurncy(crn,oldstyle)) begin
                        case 0:
                          diff = TRrw.CurDebVal - TRrw.CurCredVal;
                        case 1:
                          diff = TRrw.DebVal - TRrw.CredVal;
                        case 2:
                          diff = TRrw.DebVal2 - TRrw.CredVal2;
                      end;
                      saldo[t & ":incur"] = saldo[t & ":incur"] + diff;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
      if (mainr.FileName=="FBVc") then begin
        FBr.SerNr = mainr.TransNr;
        if (ReadFirstMain(FBr,1,true)) then begin
          if (mainr.TransDate==FBr.TransDate) then begin
            rwcnt = MatRowCnt(FBr);
            objstore= "";
            GetObjs("STORE",FBr.Objects,objstore);
            if (FBr.Objects==objstore) then begin
              if (fillobjf) then begin
              	if(currentcompany==2 or currentcompany==9 or currentcompany==4 or currentcompany==5 or currentcompany==6 or currentcompany==28 or currentcompany==29)then begin
									if(blank(objstore))then begin// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 2 October 2018 19:47:15
										objstore = "BLANK";
									end;
              	end;
                if (!ObjInArr[objstore]) then begin
                  ObjectList[OLi] = objstore;
                  ObjInArr[ObjectList[OLi]] = true;
                  OLi = OLi + 1;
                end;
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(FBr,i,FBrw);
                  if (blank(FBrw.CurncyCode)) then begin
                    FBrw.CurncyCode = "BLANK";
                  end;
                  if (!CurInArr[FBrw.CurncyCode]) then begin
                    CurencyList[CLi] = FBrw.CurncyCode;
                    CurInArr[CurencyList[CLi]] = true;
                    CLi = CLi + 1;
                  end;
                  if (FBrw.AccNumber == accnum) then begin
                    t = accnum & ":" & FBrw.CurncyCode & ":" & objstore;
                    saldo[t] = saldo[t] + FBrw.DebVal - FBrw.CredVal;
                    crn = FBrw.CurncyCode;
                    if (FBrw.CurncyCode=="BLANK") then begin
                      crn = "";
                    end;
                    switch (TypeOfCurncy(crn,oldstyle)) begin
                      case 0:
                        diff = FBrw.CurDebVal - FBrw.CurCredVal;
                      case 1:
                        diff = FBrw.DebVal - FBrw.CredVal;
                      case 2:
                        diff = FBrw.Deb2Val - FBrw.Cred2Val;
                    end;
                    saldo[t & ":incur"] = saldo[t & ":incur"] + diff;
                  end;
                end;
              end else begin
                if (objstore==ObjectList[0]) then begin
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(FBr,i,FBrw);
                    if (blank(FBrw.CurncyCode)) then begin
                      FBrw.CurncyCode = "BLANK";
                    end;
                    if (!CurInArr[FBrw.CurncyCode]) then begin
                      CurencyList[CLi] = FBrw.CurncyCode;
                      CurInArr[CurencyList[CLi]] = true;
                      CLi = CLi + 1;
                    end;
                    if (FBrw.AccNumber == accnum) then begin
                      t = accnum & ":" & FBrw.CurncyCode & ":" & objstore;
                      saldo[t] = saldo[t] + FBrw.DebVal - FBrw.CredVal;
                      crn = FBrw.CurncyCode;
                      if (FBrw.CurncyCode=="BLANK") then begin
                        crn = "";
                      end;
                      switch (TypeOfCurncy(crn,oldstyle)) begin
                        case 0:
                          diff = FBrw.CurDebVal - FBrw.CurCredVal;
                        case 1:
                          diff = FBrw.DebVal - FBrw.CredVal;
                        case 2:
                          diff = FBrw.Deb2Val - FBrw.Cred2Val;
                      end;
                      saldo[t & ":incur"] = saldo[t & ":incur"] + diff;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  
  return;
end;

global
updating procedure CreateFixingTRMn(record RcVc RepSpec)
begin
  record TRVc corrTRr;
  row TRVc corrTRrw;
  integer i,rownr,serviceIntYc,pos,ai;
  val tmpval;
  vector val saldo;
  array string 255 tags;
  array string 255 tmp1,tmp2;
  boolean TrHs;
  string 255 t,comment,addobjtypes,addaccount;
  string 20 crn,objstore,tstr;
  array string 5 accnumber;
  longint corrTRrNum;
  longint curtick;
  record ObjVc Objr;
  array string 20 addobj,addobjsubdi;
	
	
	curtick = getcurtick();
  serviceIntYc = 300;
  if nonblank(RepSpec.f1) then begin
    accnumber[0] = RepSpec.f1;
  end else begin
    accnumber[ai] = "50"; ai = ai + 1;
    accnumber[ai] = "52"; ai = ai + 1;
    accnumber[ai] = "52/2"; ai = ai + 1;
    accnumber[ai] = "53"; ai = ai + 1;
    accnumber[ai] = "58"; ai = ai + 1;
    accnumber[ai] = "59"; ai = ai + 1;
    accnumber[ai] = "59/1"; ai = ai + 1;
    accnumber[ai] = "59/2"; ai = ai + 1;
    accnumber[ai] = "59/3"; ai = ai + 1;
  end;
  if (blankdate(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
  RepSpec.ObjStr = UpperCase(RepSpec.ObjStr);
  
  for (ai=0;ai<accnumber.length;ai=ai+1) begin
    comment = USetStr(35148) & " " & accnumber[ai];
    if nonblank(RepSpec.ObjStr) then begin
      comment = comment & " " & RepSpec.ObjStr;
    end;
    resetloop(corrTRr);
    corrTRr.Comment = comment;
    corrTRr.IntYc = serviceIntYc;
    resetloop(corrTRr);
    TrHs = true;
    while(loopkey("Comment",corrTRr,1,TrHs)) begin
      if (corrTRr.IntYc!=serviceIntYc) then begin TrHs = false; end;
      if (corrTRr.Comment!=comment) then begin TrHs = false; end;
      if (TrHs) and (corrTRr.TransDate==RepSpec.d1) then begin
        DeleteTransaction(corrTRr.Number,corrTRr.IntYc);
        stepback(corrTRr);
      end;
    end;
  end;
  for (ai=0;ai<accnumber.length;ai=ai+1) begin
    comment = USetStr(35148) & " " & accnumber[ai];
    if nonblank(RepSpec.ObjStr) then begin
      comment = comment & " " & RepSpec.ObjStr;
    end;
    RecordClear(corrTRr);
    ClearArray(tmp1);
    ClearArray(tmp2);
    corrTRrNum = -1;
    CountEndSaldoInBase(accnumber[ai],RepSpec.d1,saldo,serviceIntYc,corrTRrNum,tmp1,tmp2,addobj,addobjsubdi);
    if (corrTRrNum<0) then begin
      corrTRrNum = 0;
    end;
    corrTRrNum = corrTRrNum + 1;
    getvectortags(saldo,tags);
    for(i=0;i<tags.length;i=i+1)begin
      pos = 0;
      crn = "";
      objstore = "";
      ExtractObjWithSeparator(":",tags[i],true,pos,tstr);
      if (tstr==accnumber[ai]) then begin
        tstr = "";
        ExtractObjWithSeparator(":",tags[i],true,pos,crn);
        ExtractObjWithSeparator(":",tags[i],true,pos,objstore);
        ExtractObjWithSeparator(":",tags[i],true,pos,tstr);
				
				logtext(0,crn & " crn!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
				
        if (crn=="BLANK") then begin
          crn = "";
        end;
        if (objstore=="BLANK") then begin
          objstore = "";
        end;
        if ((objstore==RepSpec.ObjStr) or blank(RepSpec.ObjStr)) and (tstr!="incur") then begin
          t = accnumber[ai] & ":" & crn & ":" & objstore;
          if ((saldo[t]!=blankval) and (saldo[t]!=0)) or ((saldo[t & ":incur"]!=blankval) and (saldo[t & ":incur"]!=0)) then begin
            if (MatRowCnt(corrTRr)==0) then begin
              RecordNew(corrTRr);
              corrTRr.TransDate = RepSpec.d1;
              corrTRr.IntYc = serviceIntYc;
              corrTRr.Number = corrTRrNum;
              corrTRr.Comment = comment;
              corrTRr.RegDate = CurrentDate;
              corrTRr.RegTime = CurrentTime;
            end;
            ClearRow(corrTRr,corrTRrw,1);
            rownr = MatRowCnt(corrTRr);
            corrTRrw.AccNumber = accnumber[ai];
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteAccNumber(corrTRr,1,rownr,true);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Curncy = crn;
            MatRowPut(corrTRr,rownr,corrTRrw);
            TRVc_PasteCurncy(corrTRr,rownr);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Objects = objstore;
            corrTRrw.CredVal = round(saldo[t],SetRoundModeD(2));
            corrTRrw.CurCredVal = round(saldo[t & ":incur"],SetRoundModeD(2));
            MatRowPut(corrTRr,rownr,corrTRrw);
            
            rownr = MatRowCnt(corrTRr);
            corrTRrw.CredVal = 0;
            corrTRrw.CurCredVal = 0;
            corrTRrw.CurDebVal = round(saldo[t & ":incur"],SetRoundModeD(2));
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteCurDebVal(corrTRr,rownr);
          end;
        end;
      end;
    end;
    if (MatRowCnt(corrTRr)!=0) then begin
      TRSumup(corrTRr,tmpval);
      if (corrTRr.DiffVal!=0) then begin
        ClearRow(corrTRr,corrTRrw,1);
        rownr = MatRowCnt(corrTRr);
        corrTRrw.AccNumber = "00";
        MatRowInsert(corrTRr,rownr,corrTRrw);
        TRVc_PasteAccNumber(corrTRr,1,rownr,true);
        MatRowGet(corrTRr,rownr,corrTRrw);
        TRDDefault(corrTRr,rownr,"");
      end;
      RecordInsert(corrTRr,true);
    end;
  end;
  LogProcTime("CreateFixingTRMn",getcurtick() - curtick);
  return;
end;

global
updating procedure CreateTRCurDifMn(record RcVc RepSpec)
begin
  record BaseCurBlock bcur;
  record FBVc FBr;
  record MainVc mainr;
  record TRVc TRr,corrTRr;
  row TRVc TRrw,corrTRrw;
  row FBVc FBrw;
  integer i,rwcnt,CLi,OLi,rownr,serviceIntYc,COi,pos,ai,oscnt,j,oldstyle,k,oscntsubdi;
  val fr,to1,to2,b1,b2,tmpval;
  vector val rate,saldo,corr;
  vector boolean ObjInArr,CurInArr;
  array string 20 CurencyList,ObjectList;
  array string 100 COList;
  array string 255 tags;
  boolean TrHs,foundf;
  date curdate,td;
  string 100 t,comment,addobjtypes,addaccount;
  string 20 crn,tstr,objstore,objstoresubdi;
  array string 20 objstores,objstoressubdi;
  array string 5 accnumber;
  longint corrTRrNum;
  longint curtick;
  record ObjVc Objr;
  array string 100 addobj,addobjsubdi;	
	
	addobjtypes = RepSpec.f2;
	addaccount = RepSpec.f3;
	
	if(nonblank(RepSpec.f1))then begin
		addaccount = RepSpec.f1;
	end;
	if(nonblank(addobjtypes))then begin
		Objr.OTCode = addobjtypes;
		TrHs = true;
		while(loopkey("OTCode",Objr,1,TrHs))begin
			if(Objr.OTCode!=addobjtypes)then begin
				TrHs = false;
			end;
			if(TrHs)then begin
				addobj[addobj.length] = Objr.Code;
				//logtext(0,"Additiuonal objects  " & Objr.Code);
			end;
		end;
	end;
	
	curtick = getcurtick();
  BlockLoad(bcur);
  serviceIntYc = 300;
  //logtext(0,"CreateTRCurDifMn " & currentcompany);
  
  if(currentcompany!=18)then begin
		if (RepSpec.sStartDate<StringToDate("16/07/2018")) then begin
			RepSpec.sStartDate = StringToDate("16/07/2018");
		end;
  end;
	  
  if (CurrentCompany==1 and RepSpec.sStartDate<StringToDate("08/10/18")) then begin
			RepSpec.sStartDate = StringToDate("08/10/18");
	end;
	if (CurrentCompany==2 and RepSpec.sStartDate<StringToDate("11/11/18")) then begin
			RepSpec.sStartDate = StringToDate("11/11/18");
	end;
 	if (CurrentCompany==3 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
	if (CurrentCompany==4 and RepSpec.sStartDate<StringToDate("08/10/18")) then begin
			RepSpec.sStartDate = StringToDate("08/10/18");
	end;
	if (CurrentCompany==5 and RepSpec.sStartDate<StringToDate("28/10/18")) then begin
			RepSpec.sStartDate = StringToDate("28/10/18");
	end;
	if (CurrentCompany==6 and RepSpec.sStartDate<StringToDate("28/10/18")) then begin
			RepSpec.sStartDate = StringToDate("28/10/18");
	end;
	if (CurrentCompany==7 and RepSpec.sStartDate<StringToDate("08/10/18")) then begin
			RepSpec.sStartDate = StringToDate("08/10/18");
	end;
	if (CurrentCompany==8 and RepSpec.sStartDate<StringToDate("01/11/19")) then begin
			RepSpec.sStartDate = StringToDate("01/11/19");
	end;
	if (CurrentCompany==9 and RepSpec.sStartDate<StringToDate("08/10/18")) then begin
			RepSpec.sStartDate = StringToDate("07/10/18");
	end;
	if (CurrentCompany==13 and RepSpec.sStartDate<StringToDate("17/9/18")) then begin
			RepSpec.sStartDate = StringToDate("17/9/18");
	end;
	if (CurrentCompany==16 and RepSpec.sStartDate<StringToDate("21/10/18")) then begin
			RepSpec.sStartDate = StringToDate("21/10/18");
	end;
  if (CurrentCompany==17 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
	
  if (CurrentCompany==19 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
  if (CurrentCompany==20 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
 	if (CurrentCompany==21 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
  if (CurrentCompany==22 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
  if (CurrentCompany==23 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
  if (CurrentCompany==24 and RepSpec.sStartDate<StringToDate("16/07/18")) then begin
			RepSpec.sStartDate = StringToDate("16/07/18");
	end;
	if (CurrentCompany==25 and RepSpec.sStartDate<StringToDate("22/10/18")) then begin
			RepSpec.sStartDate = StringToDate("22/10/18");
	end;
	if (CurrentCompany==28 and RepSpec.sStartDate<StringToDate("01/01/19")) then begin
			RepSpec.sStartDate = StringToDate("01/01/19");
	end;
	if (CurrentCompany==29 and RepSpec.sStartDate<StringToDate("01/01/18")) then begin
			RepSpec.sStartDate = StringToDate("01/01/18");
	end;
	if (CurrentCompany==30 and RepSpec.sStartDate<StringToDate("01/01/19")) then begin
			RepSpec.sStartDate = StringToDate("01/02/19");
	end;
	if (CurrentCompany==31 and RepSpec.sStartDate<StringToDate("01/01/19")) then begin
			RepSpec.sStartDate = StringToDate("01/02/19");
	end;	
	
	if (CurrentCompany==18 and RepSpec.sStartDate==StringToDate("4/01/18")) then begin
			RepSpec.sStartDate = StringToDate("4/01/18");
			RepSpec.flags[0] = 1;
	end;
	if (CurrentCompany==33 and RepSpec.sStartDate==StringToDate("31/12/19")) then begin
			RepSpec.sStartDate = StringToDate("31/12/19");
			RepSpec.flags[0] = 1;
	end;
		
	if(RepSpec.flags[0]==0)then begin
		if(addmonth(currentdate,-3)>RepSpec.sStartDate)then begin
			RepSpec.sStartDate = addmonth(currentdate,-3);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 30 01 2020 y. at 11:05:20 AM
		end;
	end;
	
	
	
  if (blank(RepSpec.ObjStr)) then begin
    switch (currentcompany) begin
      case 3: RepSpec.ObjStr = "RCOL1";
      case 13: RepSpec.ObjStr = "CB1";
      case 17: RepSpec.ObjStr = "GRAFFLOC";
      case 19: RepSpec.ObjStr = "CARTLOC";
      //case 18: RepSpec.ObjStr = "HOLDING";
      case 20: RepSpec.ObjStr = "ELLUXUS";
      case 21: RepSpec.ObjStr = "GLAMP_J";
      case 22: RepSpec.ObjStr = "GLAMP_T";
      case 23: RepSpec.ObjStr = "CHOPARDM";
      case 24: RepSpec.ObjStr = "RCOL2";
      
      case 30: RepSpec.ObjStr = "PD";
      case 31: RepSpec.ObjStr = "BANG_O";
    end;
  end;
  
  if nonblank(RepSpec.f1) then begin
    accnumber[0] = RepSpec.f1;
  end else begin
  	if(setinset("50",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "50"; ai = ai + 1; end;
    if(setinset("52",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "52"; ai = ai + 1; end;
    if(setinset("52/2",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "52/2"; ai = ai + 1; end;
    if(setinset("53",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "53"; ai = ai + 1; end;
    if(setinset("58",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "58"; ai = ai + 1; end;
    if(setinset("59",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "59"; ai = ai + 1; end;
    if(setinset("59/1",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "59/1"; ai = ai + 1; end;
    if(setinset("59/2",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "59/2"; ai = ai + 1; end;
    if(setinset("59/3",addaccount) or blank(addaccount))then begin
    accnumber[ai] = "59/3"; ai = ai + 1; end;
    /*if(fileexists("demoserver"))then begin
    	if(setinset("60",addaccount) or blank(addaccount))then begin
    	accnumber[ai] = "60"; ai = ai + 1; end;
    	if(setinset("61",addaccount) or blank(addaccount))then begin
    	accnumber[ai] = "61"; ai = ai + 1; end;
    	if(setinset("64",addaccount) or blank(addaccount))then begin
			accnumber[ai] = "64"; ai = ai + 1; end;
    end;*/
  end;
  RepSpec.ObjStr = UpperCase(RepSpec.ObjStr);
  for (ai=0;ai<accnumber.length;ai=ai+1) begin
    comment = USetStr(35147) & " " & accnumber[ai];
    if nonblank(RepSpec.ObjStr) then begin
      comment = comment & " " & RepSpec.ObjStr;
    end;
    corrTRr.Comment = comment;
    corrTRr.IntYc = serviceIntYc;
    resetloop(corrTRr);
    TrHs = true;
    while(loopkey("Comment",corrTRr,2,TrHs)) begin
      if (corrTRr.IntYc!=serviceIntYc) then begin TrHs = false; end;
      if (corrTRr.Comment!=comment) then begin TrHs = false; end;
      if (TrHs) and (corrTRr.TransDate>=RepSpec.sStartDate) and (corrTRr.TransDate<=RepSpec.sEndDate) then begin
        DeleteTransaction(corrTRr.Number,corrTRr.IntYc);
        stepback(corrTRr);
      end;
    end;
  end;
  
  for (ai=0;ai<accnumber.length;ai=ai+1) begin
    comment = USetStr(35147) & " " & accnumber[ai];
    if nonblank(RepSpec.ObjStr) then begin
      comment = comment & " " & RepSpec.ObjStr;
    end;
    
    curdate = AddDay(RepSpec.sStartDate,-1);
    for (CLi=0;Cli<CurencyList.length;CLi=CLi+1) begin
       CurInArr[CurencyList[CLi]] = false;
    end;
    for (CLi=0;Cli<ObjectList.length;CLi=CLi+1) begin
       ObjInArr[ObjectList[CLi]] = false;
    end;
    ClearArray(CurencyList);
    ClearArray(ObjectList);
    if nonblank(RepSpec.ObjStr) then begin
      ObjectList[0] = RepSpec.ObjStr;
    end;
    CountEndSaldoInBase(accnumber[ai],curdate,saldo,serviceIntYc,corrTRrNum,CurencyList,ObjectList,addobj,addobjsubdi);
    
    for (CLi=0;Cli<CurencyList.length;CLi=CLi+1) begin
      if (CurencyList[CLi]=="BLANK") then begin
        CurencyList[CLi] = "";
      end;
       CurInArr[CurencyList[CLi]] = true;
    end;
    CLi = CurencyList.length;
    for (OLi=0;OLi<ObjectList.length;OLi=OLi+1) begin
    	//logtext(0,"ObjectList " & ObjectList[OLi]);
      ObjInArr[ObjectList[OLi]] = true;
    end;
    OLi = ObjectList.length;
    if (corrTRrNum<0) then begin
      corrTRrNum = 0;
    end;
    corrTRrNum = corrTRrNum + 1;
    curdate = RepSpec.sStartDate;
    
    //logtext(0,"start");
    //logtext(0,"50:EUR:RCOL2:incur " & saldo["50:EUR:RCOL2:incur"]);
		//logtext(0,"50:EUR:RCOL2 " & saldo["50:EUR:RCOL2"]);
    //logtext(0,"endstart");
    while (curdate<=RepSpec.sEndDate) begin
      resetloop(mainr);
      mainr.AccNumber = accnumber[ai];
      mainr.TransDate = curdate;
      TrHs = true;
      while (LoopMain(mainr,2,TrHs)) begin
        if ((mainr.AccNumber!=accnumber[ai]) or (mainr.TransDate!=curdate)) then begin
          TrHs = false;
        end;
        if (TrHs) then begin
          if (mainr.FileName=="TRVc") then begin
            TRr.Number = mainr.TransNr;
            TRr.IntYc = mainr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin
              if (mainr.TransDate == TRr.TransDate) then begin
                rwcnt = MatRowCnt(TRr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(TRr,i,TRrw);
                  if ((TRrw.AccNumber == accnumber[ai]) and (TRrw.ovst <> 1) and (TRrw.stp==1) and (TRrw.Curncy!=bcur.BaseCur1)) then begin
                  	foundf = true;
                  	if(nonblank(RepSpec.ObjStr) and !setinset(RepSpec.ObjStr,TRrw.Objects))then begin foundf = false; end;
                  	
                  	if(foundf)then begin
											//logtext(0,"TRrw.AccNumber " & TRrw.AccNumber);
											if (!CurInArr[TRrw.Curncy]) then begin
												CurencyList[CLi] = TRrw.Curncy;
												CurInArr[CurencyList[CLi]] = true;
												CLi = CLi + 1;
											end;
											objstoressubdi[0] = "";
											CustExtractObjectsByType(TRrw.Objects,"STORE",objstores,oscnt,addobj);
											CustExtractObjectsByType(TRrw.Objects,"SUBDI",objstoressubdi,oscntsubdi,addobjsubdi);
											if (oscnt==0) then begin
												objstores[oscnt] = "BLANK";
												oscnt = 1;
											end;
											
											//if(fileexists("demoserver"))then begin
											if(currentcompany==18)then begin
												if(nonblank(objstoressubdi[0]))then begin
													if(nonblank(objstores[0]))then begin
														objstores[0] = objstores[0] & "," & objstoressubdi[0];
													end;
												end;
												
												objstoressubdi[0] = "";
												CustExtractObjectsByType(TRrw.Objects,"BANK",objstoressubdi,oscntsubdi,addobjsubdi);
												if(nonblank(objstoressubdi[0]))then begin
													if(nonblank(objstores[0]))then begin
														objstores[0] = objstores[0] & "," & objstoressubdi[0];
													end;
												end;
												
												
											end;
											
											for (j=0;j<oscnt;j=j+1) begin
												if (!ObjInArr[objstores[j]]) then begin
													ObjectList[OLi] = objstores[j];
													ObjInArr[ObjectList[OLi]] = true;
													OLi = OLi + 1;
												end;
												t = accnumber[ai] & ":" & TRrw.Curncy & ":" & objstores[j];
												//logtext(0,t);
												saldo[t] = saldo[t] + TRrw.DebVal - TRrw.CredVal;
												crn = TRrw.Curncy;
												switch (TypeOfCurncy(crn,oldstyle)) begin
													case 0:
														tmpval = TRrw.CurDebVal - TRrw.CurCredVal;
													case 1:
														tmpval = TRrw.DebVal - TRrw.CredVal;
													case 2:
														tmpval = TRrw.DebVal2 - TRrw.CredVal2;
												end;
												saldo[t & ":incur"] = saldo[t & ":incur"] + tmpval;
											end;
                    end;
                  end;
                end;
              end;
            end;
          end;
          if (mainr.FileName=="FBVc") then begin
            FBr.SerNr = mainr.TransNr;
            if (ReadFirstMain(FBr,1,true)) then begin
              if (mainr.TransDate==FBr.TransDate) then begin
                rwcnt = MatRowCnt(FBr);
                objstore= "";
                objstoresubdi = "";
                GetObjs("STORE",FBr.Objects,objstore);
                GetObjs("SUBDI",FBr.Objects,objstoresubdi);
                
                //if(fileexists("demoserver"))then begin
                if(currentcompany==18)then begin
									if(nonblank(objstoresubdi))then begin
										if(nonblank(objstoresubdi))then begin
											objstore = objstore & "," & objstoresubdi;
										end;
									end;
									objstoresubdi = "";
									GetObjs("BANK",FBr.Objects,objstoresubdi);
									if(nonblank(objstoresubdi))then begin
										if(nonblank(objstoresubdi))then begin
											objstore = objstore & "," & objstoresubdi;
										end;
									end;
								end;
                
                if (FBr.Objects==objstore) then begin
                  if (objstore=="") then begin
                    objstore = "BLANK";
                  end;
                  if (!ObjInArr[objstore]) then begin
                    ObjectList[OLi] = objstore;
                    ObjInArr[ObjectList[OLi]] = true;
                    OLi = OLi + 1;
                  end;
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(FBr,i,FBrw);
                    if ((FBrw.AccNumber == accnumber[ai]) and (FBrw.CurncyCode!=bcur.BaseCur1)) then begin
                      if (!CurInArr[FBrw.CurncyCode]) then begin
                        CurencyList[CLi] = FBrw.CurncyCode;
                        CurInArr[CurencyList[CLi]] = true;
                        CLi = CLi + 1;
                      end;
                      t = accnumber[ai] & ":" & FBrw.CurncyCode & ":" & objstore;
                      saldo[t] = saldo[t] + FBrw.DebVal - FBrw.CredVal;
                      crn = FBrw.CurncyCode;
                      switch (TypeOfCurncy(crn,oldstyle)) begin
                        case 0:
                          tmpval = FBrw.CurDebVal - FBrw.CurCredVal;
                        case 1:
                          tmpval = FBrw.DebVal - FBrw.CredVal;
                        case 2:
                          tmpval = FBrw.Deb2Val - FBrw.Cred2Val;
                      end;
                      saldo[t & ":incur"] = saldo[t & ":incur"] + tmpval;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
      //logtext(0,"****************" & curdate);
      for (CLi=0;Cli<CurencyList.length;CLi=CLi+1) begin
        rate[CurencyList[CLi]] = 1;
        crn = CurencyList[CLi];
        td = curdate;
        fr = 0; to1 = 0; to2 = 0; b1 = 0; b2 = 0;
        GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
        rate[CurencyList[CLi]] = to1/fr;
        if (rate[CurencyList[CLi]]==0) then begin
          rate[CurencyList[CLi]] = 1;
        end;
        for (OLi=0;OLi<ObjectList.length;OLi=OLi+1) begin
          t = CurencyList[CLi] & ":" & ObjectList[OLi];
          //logtext(0,accnumber[ai] & ":" & t & ":incur" & " " & saldo[accnumber[ai] & ":" & t & ":incur"]);
          //logtext(0,accnumber[ai] & ":" & t & ":incur" & " " & saldo[accnumber[ai] & ":" & t & ":incur"]*rate[CurencyList[CLi]]);
          //logtext(0,accnumber[ai] & ":" & t & " " & saldo[accnumber[ai] & ":" & t]);
          corr[t] = round(saldo[accnumber[ai] & ":" & t & ":incur"]*rate[CurencyList[CLi]] - saldo[accnumber[ai] & ":" & t],SetRoundModeD(2));
          //logtext(0,"corr[t]" & corr[t]);
          if (corr[t]!=0) then begin
            COList[COi] = t;
            COi = COi +1;
          end;
        end;
      end;
      if (COi>0) then begin
        RecordClear(corrTRr);
        RecordNew(corrTRr);
        corrTRr.TransDate = curdate;
        corrTRr.IntYc = serviceIntYc;
        corrTRr.Number = corrTRrNum;
        corrTRrNum = corrTRrNum + 1;
        corrTRr.Comment = comment;
        corrTRr.RegDate = CurrentDate;
        corrTRr.RegTime = CurrentTime;
        for (i=0;i<COi;i=i+1) begin
          if (corr[COList[i]]!=blankval) and (corr[COList[i]]!=0) then begin
            crn = "";
            objstore = "";
            pos = 0;
            ExtractObjWithSeparator(":",COList[i],true,pos,crn);
            ExtractObjWithSeparator(":",COList[i],true,pos,objstore);
            if (objstore=="BLANK") then begin
              objstore = "";
            end;
            ClearRow(corrTRr,corrTRrw,1);
            rownr = MatRowCnt(corrTRr);
            corrTRrw.AccNumber = accnumber[ai];
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteAccNumber(corrTRr,1,rownr,true);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Curncy = crn;
            corrTRrw.Objects = objstore;
            if (corr[COList[i]]>0) then begin
              corrTRrw.DebVal = corr[COList[i]];
              corrTRrw.CurDebVal = 0;
            end else begin
              corrTRrw.CredVal = -corr[COList[i]];
              corrTRrw.CurCredVal = 0;
            end;
            MatRowPut(corrTRr,rownr,corrTRrw);
            
            ClearRow(corrTRr,corrTRrw,1);
            rownr = MatRowCnt(corrTRr);
            corrTRrw.AccNumber = "84/03";
            MatRowInsert(corrTRr,rownr,corrTRrw);
            TRVc_PasteAccNumber(corrTRr,1,rownr,true);
            MatRowGet(corrTRr,rownr,corrTRrw);
            corrTRrw.Curncy = bcur.BaseCur1;
            corrTRrw.Objects = objstore;
            if (corr[COList[i]]>0) then begin
              corrTRrw.CredVal = corr[COList[i]];
              corrTRrw.CurCredVal = corrTRrw.CredVal;
            end else begin
              corrTRrw.DebVal = -corr[COList[i]];
              corrTRrw.CurDebVal = corrTRrw.DebVal;
            end;
            MatRowPut(corrTRr,rownr,corrTRrw);
          end;
        end;
        TRSumup(corrTRr,tmpval);
        RecordInsert(corrTRr,true);
        rwcnt = MatRowCnt(corrTRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(corrTRr,i,corrTRrw);
          if ((corrTRrw.AccNumber == accnumber[ai]) and (corrTRrw.ovst <> 1) and (corrTRrw.stp==1)) then begin
            objstore= "";
            objstoresubdi = "";
            GetObjs("STORE",corrTRrw.Objects,objstore);
            GetObjs("SUBDI",corrTRrw.Objects,objstoresubdi);
            if(currentcompany==2 or currentcompany==9 or currentcompany==4 or currentcompany==5 or currentcompany==6 or currentcompany==28 or currentcompany==29)then begin
							if(blank(objstore))then begin
								objstore = "BLANK";
							end;
            end;
            
            //if(fileexists("demoserver"))then begin
            if(currentcompany==18)then begin
							if(nonblank(objstore))then begin
								if(nonblank(objstoresubdi))then begin
									objstore = objstore & "," & objstoresubdi;
								end;
							end;
							objstoresubdi = "";
							GetObjs("BANK",corrTRrw.Objects,objstoresubdi);
							if(nonblank(objstore))then begin
								if(nonblank(objstoresubdi))then begin
									objstore = objstore & "," & objstoresubdi;
								end;
							end;
							
						end;
            
            if (!ObjInArr[objstore]) then begin
              ObjectList[OLi] = objstore;
              ObjInArr[ObjectList[OLi]] = true;
              OLi = OLi + 1;
            end;
            if (!CurInArr[corrTRrw.Curncy]) then begin
              CurencyList[CLi] = corrTRrw.Curncy;
              CurInArr[CurencyList[CLi]] = true;
              CLi = CLi + 1;
            end;
            saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore] = saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore] + corrTRrw.DebVal - corrTRrw.CredVal;
            //logtext(0,"NewSldo " & accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore & "   " & saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore]);
            crn = corrTRrw.Curncy;
            switch (TypeOfCurncy(crn,oldstyle)) begin
              case 0:
                tmpval = corrTRrw.CurDebVal - corrTRrw.CurCredVal;
              case 1:
                tmpval = corrTRrw.DebVal - corrTRrw.CredVal;
              case 2:
                tmpval = corrTRrw.DebVal2 - corrTRrw.CredVal2;
            end;
            saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore & ":incur"] = saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore & ":incur"] + tmpval;
            //logtext(0,"NewSldo " & accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore & ":incur" & "   " & saldo[accnumber[ai] & ":" & corrTRrw.Curncy & ":" & objstore & ":incur"]);

          end;
        end;
        COi = 0;
      end;
      curdate = AddDay(curdate,1);
    end;
  end;
  LogProcTime("CreateTRCurDifMn",getcurtick() - curtick);
  return;
end;

global
updating procedure DeleteServiceTRMn(record RcVc RepSpec)
begin
  boolean TrHs;
  record TRVc TRr;
  integer serviceIntYc;
  row TRVc TRrw;
  record CompaniesBlock Compb;
  record INVc INr;
  integer oldcompany,i,rwcnt;
  
  record PMBlock PMb;
  row PMBlock PMrw;
  vector boolean PMoutf;
  integer j,rwcnt2;
  
  record POShipmDataVc POSDr;
  
  record RcVc RepSpec2;
  longint curtick;
	curtick = getcurtick();
  /*oldcompany = CurrentCompany;
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb); 
	for (i=0;i<rwcnt;i=i+1) begin
    SetCompany(i+1,false);
    BlockLoad(PMb);
    rwcnt2 = MatRowCnt(PMb); 
    for (j=0;j<rwcnt2;j=j+1) begin
      MatRowGet(PMb,j,PMrw);
      if (!PMoutf[PMrw.Code]) then begin
        PMoutf[PMrw.Code] = true;
      end;
    end;
  end;
	
	ResetCompany(oldcompany);*/
  
  //--------------------------------------------
  
  /*oldcompany = CurrentCompany;
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb); 
	for (i=0;i<rwcnt;i=i+1) begin
    SetCompany(i+1,false);
    resetloop(INr);
    INr.Code = "";
    while loopmain(INr,1,true) begin
      if len(INr.Code)<5 then begin
        logtext(0,i+1 & " " & INr.Code);
      end;
    end;
  end;
	
	ResetCompany(oldcompany);*/
  
  //--------------------------------------------
  
  /*resetloop(POSDr);
  TrHs = true;
  while(loopmain(POSDr,1,TrHs)) begin
    logtext(0,POSDr.POSerNr);
    RecordDelete(POSDr);
    StepBack(POSDr);
  end;
  */
  
  //--------------------------------------------
  
  serviceIntYc = 300;
  
  TRr.IntYc = serviceIntYc;
  resetloop(TRr);
  TrHs = true;
  while(loopmain(TRr,1,TrHs)) begin
    if (TRr.IntYc==serviceIntYc) then begin
			if(nonblank(RepSpec.f1)) then begin
				rwcnt = matrowcnt(TRr);
				for(i=0;i<rwcnt;i=i+1) begin
					matrowget(TRr,i,TRrw);
					if(RepSpec.f1 == TRrw.AccNumber) then begin
						DeleteTransaction(TRr.Number,TRr.IntYc);
						stepback(TRr);
					end;	
				end;
			end else begin
				DeleteTransaction(TRr.Number,TRr.IntYc);
				stepback(TRr);
			end;	
    end;
  end;
  
  //--------------------------------------------
  
  /*if (SetCompany(3,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;
  if (SetCompany(17,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;
  if (SetCompany(19,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;
  if (SetCompany(20,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;
  if (SetCompany(21,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;
  if (SetCompany(22,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;
  if (SetCompany(23,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;
  if (SetCompany(24,false)) then begin
    RecordClear(RepSpec2);
    RepSpec2.sStartDate = StringToDate("16/7/18");
    RepSpec2.sEndDate = AddDay(currentdate,-1);
    CreateTRCurDifMn(RepSpec2);
	end;*/
  LogProcTime("DeleteServiceTRMn",getcurtick() - curtick);
  return;
end;