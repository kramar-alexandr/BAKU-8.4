external procedure HTItem(string,var string);
external procedure HTArtGroup(string, var string);
external procedure HTItemClass(string,var string);
external function Boolean HasItemClassification();
external function Boolean HasItemGroups();
external function Boolean SetInSet2(string,string);
external procedure HTLocationClassification(string,string,var string);
external procedure HTLocationGroup(string,string,var string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure HTDetailLevel(Integer, var string);
external procedure HTCusts(string, string, var string);
external procedure HTOKF(Integer, Integer, var string); 
external procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external procedure HT2Per(Date, Date , var string);
external procedure LogProcTime(string,longint);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function longint DateDiff(date,date);
external function string 255 PTCCandIDNames(string);

SetLangMode(LangRussian,"RUS",0);




global
procedure ECSldItRn(record RcVc RepSpec) // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 15:20 17.10.2019
begin
  Integer i,rwcnt,j,pos;
	record SHVc SHr;
  row SHVc SHrw;
	record RetVc Retr;
	row RetVc Retrw;
	record ORVc ORr, LocORr, ComplORr;
	row ORVc ORrw;
  Boolean testf, TrHs, OrdInf;
  string 20 frit,toit;
  string 20 frin,toin;
  record INVc INr;
  string 255 tstr;
  string 255 itsz,mask,subsets,mskrep,NMStr,CPHStr,EmailStr;
	vector val vRetItems, vRetOutItems;
	vector boolean vInPerReturns;
	val SaleTotal, Total, TotQty;
	record ARVc ARr;
	date SHDate, firstORDate;
	val ORSum, RetSum, PaySum, SHFRV, SHSHIP;
	record IPVc IPr;
	row IPVc IPrw;
	vector string 255 IVPayDeal, PMComments;
	record PMBlock PMb;
	row PMBlock PMrw;
	string 255 IVPM, stocks, PDComment, ORSerNr;
	record IVVc IVr, CredIVr;
	Boolean TrHs2, testf2, SHFlag;
	record PDVc PDr;
	record GlobalItemVc GIr;
	record ExpProvItemRegVc EPIr;
	record CUVc CUr;
	record BtrxBrandVc BBr;
	record RLinkVc RLr;
	array string 255 vtags;
	vector integer complOr;
	vector boolean ORf;
	record BtrxFourthLevelCatVc FourthLCr;
	record BtrxThirdLevelCatVc ThirdLCr;
	record BtrxFirstLevelCatVc FirstLCr;
	BlockLoad(PMb);

	StartReportnoheaderjob("Отчет по продажам Е-Коммерс");
	// startformat(15);
		// outstring(0,0,"Отгр. №",false);
		// outstring(70,0,"Дата",false);
		// outstring(220,0,"№ сч.Btrx",false);
		// outstring(300,0,"Код. кл",false);
		// outstring(340,0,"Наименование",false);
		// outstring(340,0,"Оплачен",false);
		// outstring(340,0,"Способ оплаты",false);
		// outstring(340,0,"Бутик",false);
		// outstring(340,0,"Всего",false);
	// endformat;
	
	
	if (blankdate(RepSpec.sStartDate) and nonblank(RepSpec.f1)) then begin
		pos = 0;
		ExtractObjWithSeparator(",",RepSpec.f1,true,pos,ORSerNr);
		while (nonblank(ORSerNr)) begin
			ORr.SerNr = StringToLongInt(ORSerNr);
			if (ReadFirstMain(ORr,1,true)) then begin
				if (blank(firstORDate)) then begin 
					firstORDate = ORr.OrdDate; 
				end else begin 
					if (firstORDate>ORr.OrdDate) then begin 
						firstORDate = ORr.OrdDate;
					end;
				end;	
			end;
			ExtractObjWithSeparator(",",RepSpec.f1,true,pos,ORSerNr);
		end;
		if(nonblankdate(firstORDate)) then begin RepSpec.sStartDate = firstORDate; end;
		if(nonblankdate(RepSpec.sStartDate)) then begin RepSpec.sEndDate = CurrentDate; end;
	end;
	
	
	for (i=0;i<matrowcnt(PMb);i=i+1) begin
		matrowget(PMb,i,PMrw);
		PMComments[PMrw.Code] = PMrw.Comment;
	end;
	
	TrHs = true;
	IPr.TransDate = RepSpec.sStartDate;
	while (loopKey("TransDate",IPr,1,TrHs)) begin
		// if (IPr.TransDate > RepSpec.sEndDate) then begin TrHs = false; end;
		if (TrHs) then begin
			for (i=0;i<matrowcnt(IPr);i=i+1) begin
				matrowget(IPr,i,IPrw);
				if (nonblank(IPrw.InvoiceNr)) then begin
					IVPayDeal[IPrw.InvoiceNr] = PMComments[IPr.PayMode];
				end;
			end;
		end;
	end;
	
	Resetloop(IPr);
	TrHs = true;
	IPr.SerNr = 0;
	while (loopmain(IPr,1,TrHs)) begin
		for (i=0;i<matrowcnt(IPr);i=i+1) begin
			matrowget(IPr,i,IPrw);
			if (nonblank(IPrw.InvoiceNr)) then begin
				IVr.SerNr = IPrw.InvoiceNr;
				if (ReadFIrstMain(IVr,1,true)) then begin
					ORr.SerNr = IVr.CustOrdNr;
					if (ReadFIrstMain(ORr,1,true)) then begin
						ORf[ORr.SerNr] = true;
						complOr[ORr.ECCUCode] = complOr[ORr.ECCUCode] + 1;
					end;
				end;
			end;
		end;
	end;
	
	
	
	Total = 0;
	TrHs = true;
	SHr.ShipDate = RepSpec.sStartDate;
	while (loopkey("ShipDate",SHr,1,TrHs))begin
		testf = true;
		if(SHr.ShipDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
		if(SHr.OKFlag==0)then begin testf = false; end;
		if(nonblank(RepSpec.f1) and !SetInSet(SHr.OrderNr,RepSpec.f1)) then begin testf = false; end;
		if(testf)then begin
			Retr.SHNr = SHr.SerNr;
			SaleTotal = 0;
			TrHs2 = true;
			while(LoopKey("SHNr",Retr,1,TrHs2)) begin
				// if(Retr.Location!="RETURN")then begin
					// if (Retr.SHNr==SHr.SerNr) then begin
						// if (Retr.TransDate<=RepSpec.sEndDate) then begin
							// vInPerReturns [Retr.SerNr] = true;
							// for (i=0;i<matrowcnt(Retr);i=i+1) begin
								// matrowget(Retr,i,Retrw);
								// vRetItems [Retrw.ArtCode & "_" & SHr.SerNr] = Retrw.Quant;
							// end;
						// end;
					// end else begin
						// TrHs2 = false;
					// end;
				// end;
			end;
			Resetloop(Retr);
			TotQty = 0;
			ORr.SerNr = SHr.OrderNr;
			PDComment = "";
			if(ReadFirstMain(ORr,1,true))then begin
				PDr.Code = ORr.PayDeal;
				if (ReadFirstMain(PDr,1,true)) then begin
					PDComment = PDr.pdComment;
				end;
				if (nonblank(ORr.ECBTRxPaymentDeal)) then begin
					switch (ORr.ECBTRxPaymentDeal) begin
						case "TU": PDComment = "Терминал Unibank";
						case "TP": PDComment = "Терминал PashaBank";
					end;
				end else begin
					switch (ORr.PayDeal) begin
						case "PP": PDComment = "Оплата наличными";
						case "O": PDComment = "Онлайн оплата на сайте";
					end;
				end;
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					if(vRetItems [ORrw.ArtCode & "_" & SHr.SerNr]==blankval)then begin
						vRetItems [ORrw.ArtCode & "_" & SHr.SerNr] = 0;
					end;
					SaleTotal = SaleTotal + (ORrw.Sum / ORrw.Quant * (ORrw.Quant - vRetItems [ORrw.ArtCode & "_" & SHr.SerNr]));
					TotQty = TotQty + (ORrw.Quant - vRetItems [ORrw.ArtCode & "_" & SHr.SerNr]);
				end;
				PaySum = 0;
				IVr.OrderNr = ORr.SerNr;
				IVPM = "";
				if (ReadFirstKey("OrderNr",IVr,1,true)) then begin
					ARr.InvoiceNr = IVr.SerNr;
					if (IVr.OKFlag==1) then begin
						PaySum = IVr.Sum4;
						if (ReadFirstMain(ARr,1,true)) then begin
							PaySum = PaySum - ARr.RVal;
						end;
						if (IVr.Sum4 > ARr.RVal or ARr.RVal==blankval) then begin
							IVPM = IVPayDeal[IVr.SerNr];
						end;
					end;
				end;
				RetSum = 0;
				TrHs2 = true;
				CredIVr.OrderNr = ORr.SerNr;
				while (LoopKey("OrderNr",CredIVr,1,TrHs2)) begin
					testf2 = true;
					if (CredIVr.OrderNr!=ORr.SerNr) then begin TrHs2 = false; testf2 = false; end;
					if (CredIVr.SerNr==IVr.SerNr) then begin testf2 = false; end;
					if (CredIVr.OKFlag!=1) then begin testf2 = false; end;
					if (CredIVr.TransDate>RepSpec.sEndDate) then begin testf2 = false; end;
					if (testf2) then begin
						RetSum = RetSum + CredIVr.Sum4;
					end;
				end;
				resetloop(CredIVr);
				stocks = "";
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					if (!SetInSet(ORrw.ECReservStock,stocks)) then begin
						if (nonblank(stocks)) then begin stocks = stocks & ","; end;
						stocks = stocks & ORrw.ECReservStock;
					end;
				end;
			end;
			if (TotQty>0) then begin
				Total = Total + SaleTotal;
				// startformat(15);
					// outstring(70,0,SHr.ShipDate,false);
					// ORr.SerNr = SHr.OrderNr;
					// if(ReadFirstMain(ORr,1,true))then begin
						// outstring(220,0,ORr.SerNr,false);
					// end else begin
						// outstring(220,0,"",false);
					// end;
					// outstring(300,0,SHr.CustCode,false);
					// outstring(340,0,SHr.Addr0,false);
					// outstring(340,0,PaySum - RetSum,false);
					// outstring(340,0,IVPM,false);
					// outstring(340,0,stocks,false);
					// outstring(340,0,SaleTotal,false);
				// endformat;
				
				// startformat(15);
					// outstring(0,0,"Товар",false);
					// outstring(70,0,"Наимен.",false);
					// outstring(220,0,"Сер.№",false);
					// outstring(300,0,"Кол.",false);
					// outstring(340,0,"Цена",false);
					// outstring(340,0,"Арт.К.И.",false);
					// outstring(340,0,"Скидка",false);
					// outstring(340,0,"Сумма",false);
				// endformat;

				ORr.SerNr = SHr.OrderNr;
				if(ReadFirstMain(ORr,1,true))then begin
					startformat(15);
						outstring(70,0," ",false);
					endformat;
					startformat(15);
						outstring(70,0,"Дата продажи",false);
						outstring(220,0,"Номер заказа Битрикс",false);
						outstring(220,0,"Дата заказа Битрикс",false);
						outstring(300,0,"Артикулы товаров",false);
						outstring(340,0,"Название товара",false);
						outstring(340,0,"Бренд",false);
						outstring(340,0,"Категория 1 уровня",false);
						outstring(340,0,"Имя стороннего поставщика",false);
						outstring(340,0,"Бутик",false);
						outstring(340,0,"Количество",false);
						outstring(340,0,"Цена товаров",false);
						outstring(340,0,"Себестоимость товара",false);
						outstring(340,0,"Себест. товара с НДС",false);
						outstring(340,0,"Способы оплаты",false);
						outstring(340,0,"Общая сумма заказа",false);
						outstring(340,0,"Оплачено",false);
						outstring(340,0,"Категории товаров в заказе",false);
						outstring(340,0,"ФИО клиента,",false);
						outstring(340,0,"Номер телефона клиента",false);
						outstring(340,0,"E-mail",false);
						outstring(340,0,"Количество завершенных заказов клиента",false);
					endformat;
	
					OrdInf = true;
					for (i=0;i<matrowcnt(ORr);i=i+1) begin
						matrowget(ORr,i,ORrw);
						if(ORrw.Quant - vRetItems [ORrw.ArtCode & "_" & SHr.SerNr] > 0)then begin
							SHFRV = blankval;
							SHSHIP = blankval;
							for (j=0;j<matrowcnt(SHr);j=j+1) begin
								matrowget(SHr,j,SHrw);
								if (SHrw.OrdRow==i) then begin
									SHFRV = SHrw.FIFORowVal;
									SHSHIP = SHrw.Ship;
								end;
							end;
							if (SHSHIP>0) then begin
								startformat(15);
								if (OrdInf) then begin
									outstring(70,0,SHr.ShipDate,false);
									ORr.SerNr = SHr.OrderNr;
									if(ReadFirstMain(ORr,1,true))then begin
										outstring(220,0,ORr.SerNr,false);
										outstring(220,0,ORr.OrdDate,false);
									end else begin
										outstring(220,0,"",false);
										outstring(220,0,"",false);
									end;
								end else begin
									outstring(70,0,"",false);
									outstring(220,0,"",false);
									outstring(220,0,"",false);
								end;
								
								GIr.Code = ORrw.GlobalItemArtCode;
								if (ReadFirstMain(GIr,1,true)) then begin // brtxbrandvc
									outstring(0,0,GIr.HansaCode,false);
								end else begin
									GIr.HansaCode = ORrw.ArtCode;  // by Ira	
									readfirstkey("HansaCode",GIr,1,true);  //
									outstring(0,0,ORrw.ArtCode,false);	
								end;
								outstring(70,0,ORrw.Spec,false);
								BBr.Code = GIr.BPIBrand; //
								if(readfirstmain(BBr,1,true)) then begin //			
									outstring(0,0,BBr.Name,false);
								end else begin
									outstring(0,0,"",false);
								end;
								FirstLCr.Code = GIr.BTRxFirstLevCat; //
								if(readfirstmain(FirstLCr,1,true)) then begin //			
									outstring(0,0,FirstLCr.Name,false);
								end else begin
									outstring(0,0,"",false);
								end;
								if (GIr.ExtProwItRegulations>0) then begin
									EPIr.SerNr = GIr.ExtProwItRegulations;
									if (ReadFIrstMain(EPIr,1,true)) then begin
										CUr.Code = EPIr.Comment;
										if (ReadFIrstMain(CUr,1,true)) then begin
											outstring(70,0,CUr.Name,false);
										end else begin
											outstring(70,0,"",false);
										end;
									end;
								end else begin
									outstring(70,0,"",false);
								end;
								outstring(70,0,ORrw.ECReservStock,false);
								outstring(300,0,ORrw.Quant - vRetItems [ORrw.ArtCode & "_" & SHr.SerNr],false);
								outstring(340,0,ORrw.Price,false);
								outstring(340,0,SHFRV/SHSHIP,false);
								outstring(340,0,GIr.DealPrice,false);
								if (OrdInf) then begin
									outstring(340,0,IVPayDeal[IVr.SerNr],false);
								end else begin
									outstring(340,0,"",false);
								end;
								outstring(340,0,ORrw.Sum / ORrw.Quant * (ORrw.Quant - vRetItems [ORrw.ArtCode & "_" & SHr.SerNr]),false);
								if (OrdInf) then begin
									outstring(340,0,PaySum-RetSum,false);
								end else begin
									outstring(340,0,"",false);
								end;
								if (nonblank(GIr.BTRxFourthLevCat)) then begin
									FourthLCr.Code = GIr.BTRxFourthLevCat;
									ReadFIrstMain(FourthLCr,1,true);
									outstring(340,0,FourthLCr.Name,false);
								end else begin
									ThirdLCr.Code = GIr.BTRxThirdLevCat;
									ReadFIrstMain(ThirdLCr,1,true);
									outstring(340,0,ThirdLCr.Name,false);
								end;
								if (OrdInf) then begin
									OrdInf = false;
									NMStr = "";
									CPHStr = "";
									EmailStr = "";
									CUr.Code = ORr.ECCUCode;
									if (ReadFIrstMain(CUr,1,true)) then begin
										if (nonblank(CUr.CRMLName)) then begin
											NMStr = CUr.CRMLName;
											if (nonblank(CUr.CRMName)) then begin
												NMStr = NMStr & " " & CUr.CRMName;
											end;
											if (nonblank(CUr.CRMPatr)) then begin
												NMStr = NMStr & " " & CUr.CRMPatr;
											end;
										end else begin
											NMStr = CUr.Name;
										end;
										if (nonblank(CUr.Phone)) then begin
											CPHStr = CUr.Phone;
										end;
										if (nonblank(CUr.Mobile) and blank(CPHStr)) then begin
											CPHStr = CUr.Mobile;
										end;
										if (nonblank(CUr.AltPhone) and blank(CPHStr)) then begin
											CPHStr = CUr.AltPhone;
										end;
										if (nonblank(CUr.Fax) and blank(CPHStr)) then begin
											CPHStr = CUr.Fax;
										end;
										if (nonblank(CUr.eMail)) then begin
											EmailStr = CUr.eMail;
										end;
									end;
									if (nonblank(NMStr)) then begin
										outstring(340,0,NMStr,false);
										if (nonblank(CPHStr)) then begin
											outstring(340,0,"Phone: " & CPHStr,false);
										end else begin
											outstring(340,0,"",false);
										end;
										outstring(340,0,EmailStr,false);
										outstring(340,0,complOr[CUr.Code],false);
									end else begin
										outstring(340,0,"",false);
										outstring(340,0,"",false);
										outstring(340,0,"",false);
										outstring(340,0,"",false);
									end;
								end else begin
									outstring(340,0,"",false);
									outstring(340,0,"",false);
									outstring(340,0,"",false);
									outstring(340,0,"",false);
								end;
								endformat;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
	Resetloop(SHr);
	TrHs = true;
	
	
	startformat(15);
		outstring(0,0," ",false);
	endformat;
	
	
	
	// startformat(15);
		// outstring(0,0,"Возвр. №",false);
		// outstring(70,0,"Дата",false);
		// outstring(220,0,"№ сч.Btrx",false);
		// outstring(300,0,"Код. кл",false);
		// outstring(340,0,"Наименование",false);
		// outstring(340,0,"Оплачен",false);
		// outstring(340,0,"Сепособ оплаты",false);
		// outstring(340,0,"Бутик",false);
		// outstring(340,0,"Всего",false);
	// endformat;
	
	
	Retr.TransDate = RepSpec.sStartDate;
	while (loopkey("TransDate",Retr,1,TrHs))begin
		testf = true;
		if(Retr.TransDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
		if(vInPerReturns [Retr.SerNr])then begin testf = false; end;
		if(Retr.OKFlag==0)then begin testf = false; end;
		if(nonblank(RepSpec.f1) and !SetInSet(Retr.OrdNr,RepSpec.f1)) then begin testf = false; end;
		if(testf)then begin
		
			for (i=0;i<matrowcnt(Retr);i=i+1) begin
				matrowget(Retr,i,Retrw);
				vRetOutItems[Retrw.ArtCode & "_" & Retr.SerNr] = Retrw.Quant;
			end;
		
			SaleTotal = 0;
			OrdInf = true;
		
			ORr.SerNr = Retr.OrdNr;
			if(ReadFirstMain(ORr,1,true))then begin
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					SaleTotal = SaleTotal + (ORrw.Sum / ORrw.Quant * vRetOutItems[ORrw.ArtCode & "_" & Retr.SerNr]);
				end;
				PDComment = "";
				PDr.Code = ORr.PayDeal;
				if (ReadFirstMain(PDr,1,true)) then begin
					PDComment = PDr.pdComment;
				end;
				if (nonblank(ORr.ECBTRxPaymentDeal)) then begin
					switch (ORr.ECBTRxPaymentDeal) begin
						case "TU": PDComment = "Терминал Unibank";
						case "TP": PDComment = "Терминал PashaBank";
					end;
				end else begin
					switch (ORr.PayDeal) begin
						case "PP": PDComment = "Оплата наличными";
						case "O": PDComment = "Онлайн оплата на сайте";
					end;
				end;
				
				PaySum = 0;
				IVr.OrderNr = ORr.SerNr;
				IVPM = "";
				if (ReadFirstKey("OrderNr",IVr,1,true)) then begin
					ARr.InvoiceNr = IVr.SerNr;
					if (IVr.OKFlag==1) then begin
						PaySum = IVr.Sum4;
						if (ReadFirstMain(ARr,1,true)) then begin
							PaySum = PaySum - ARr.RVal;
						end;
						if (IVr.Sum4 > ARr.RVal or ARr.RVal==blankval) then begin
							IVPM = IVPayDeal[IVr.SerNr];
						end;
					end;
				end;
				RetSum = 0;
				TrHs2 = true;
				CredIVr.OrderNr = ORr.SerNr;
				while (LoopKey("OrderNr",CredIVr,1,TrHs2)) begin
					testf2 = true;
					if (CredIVr.OrderNr!=ORr.SerNr) then begin TrHs2 = false; testf2 = false; end;
					if (CredIVr.SerNr==IVr.SerNr) then begin testf2 = false; end;
					if (CredIVr.OKFlag!=1) then begin testf2 = false; end;
					if (testf2) then begin
						RetSum = RetSum + CredIVr.Sum4;
					end;
				end;
				resetloop(CredIVr);
				stocks = "";
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					if (!SetInSet(ORrw.ECReservStock,stocks)) then begin
						if (nonblank(stocks)) then begin stocks = stocks & ","; end;
						stocks = stocks & ORrw.ECReservStock;
					end;
				end;
				
			end;
			
			Total = Total - SaleTotal;
			
			startformat(15);
				outstring(70,0," ",false);
			endformat;
			startformat(15);
				outstring(70,0,"Дата возврата",false);
				outstring(220,0,"Номер заказа Битрикс",false);
				outstring(220,0,"Дата заказа Битрикс",false);
				outstring(300,0,"Артикулы товаров",false);
				outstring(340,0,"Название товара",false);
				outstring(340,0,"Бренд",false);
				outstring(340,0,"Имя стороннего поставщика",false);
				outstring(340,0,"Бутик",false);
				outstring(340,0,"Количество",false);
				outstring(340,0,"Цена товаров",false);
				outstring(340,0,"Себестоимость товара",false);
				outstring(340,0,"Себест. товара с НДС",false);
				outstring(340,0,"Способы оплаты",false);
				outstring(340,0,"Общая сумма возврата",false);
				outstring(340,0,"Возвращено клиенту",false);
				outstring(340,0,"Категории товаров в заказе",false);
				outstring(340,0,"ФИО клиента,",false);
				outstring(340,0,"Номер телефона клиента",false);
				outstring(340,0,"E-mail",false);
				outstring(340,0,"Количество завершенных заказов клиента",false);
			endformat;
			
			
			// startformat(15);
				// outstring(0,0,Retr.SerNr,false);
				// outstring(70,0,Retr.TransDate,false);
				// ORr.SerNr = Retr.OrdNr;
				// if(ReadFirstMain(ORr,1,true))then begin
					// outstring(220,0,ORr.SerNr,false);
				// end else begin
					// outstring(220,0,"",false);
				// end;
				// outstring(300,0,Retr.CustCode,false);
				// outstring(340,0,Retr.CustName,false);
				// outstring(340,0,PaySum - RetSum,false);
				// outstring(340,0,IVPM,false);
				// outstring(340,0,stocks,false);
				// outstring(340,0,-SaleTotal,false);
			// endformat;
			
			// startformat(15);
				// outstring(0,0,"Товар",false);
				// outstring(70,0,"Наимен.",false);
				// outstring(220,0,"Сер.№",false);
				// outstring(300,0,"Кол.",false);
				// outstring(340,0,"Цена",false);
				// outstring(340,0,"Арт.К.И.",false);
				// outstring(340,0,"Скидка",false);
				// outstring(340,0,"Сумма",false);
			// endformat;
			ORr.SerNr = Retr.OrdNr;
			if(ReadFirstMain(ORr,1,true))then begin
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					if(vRetOutItems[ORrw.ArtCode & "_" & Retr.SerNr] > 0)then begin
							SHFRV = blankval;
							SHSHIP = blankval;
							SHr.OrderNr = ORr.SerNr;
							TrHs2 = true;
							while (loopkey("OrderKey",SHr,1,TrHs2)) begin
								if (SHr.OrderNr==ORr.SerNr) then begin
									for (j=0;j<matrowcnt(SHr);j=j+1) begin
										matrowget(SHr,j,SHrw);
										if (SHrw.OrdRow==i) then begin
											SHFRV = SHFRV + SHrw.FIFORowVal;
											SHSHIP = SHSHIP + SHrw.Ship;
										end;
									end;
								end else begin
									TrHs2 = false;
								end;
							end;
							resetLoop(SHr);
						// startformat(15);
							// outstring(0,0,ORrw.ArtCode,false);
							// outstring(70,0,ORrw.Spec,false);
							// outstring(220,0,ORrw.SerialNr,false);
							// outstring(300,0,-vRetOutItems[ORrw.ArtCode & "_" & Retr.SerNr],false);
							// outstring(340,0,ORrw.Price,false);
							// outstring(340,0,right(ORrw.GlobalItemArtCode,(len(ORrw.GlobalItemArtCode)-9)),false);
							// outstring(340,0,ORrw.vRebate,false);
							// outstring(340,0,-(ORrw.Sum / ORrw.Quant * vRetOutItems[ORrw.ArtCode & "_" & Retr.SerNr]),false);
						// endformat;
						if (SHSHIP>0) then begin
							startformat(15);
							if (OrdInf) then begin
								outstring(70,0,Retr.TransDate,false);
								ORr.SerNr = Retr.OrdNr;
								if(ReadFirstMain(ORr,1,true))then begin
									outstring(220,0,ORr.SerNr,false);
									outstring(220,0,ORr.OrdDate,false);
								end else begin
									outstring(220,0,"",false);
									outstring(220,0,"",false);
								end;
							end else begin
								outstring(70,0,"",false);
								outstring(220,0,"",false);
								outstring(220,0,"",false);
							end;
							GIr.Code = ORrw.GlobalItemArtCode;
							if (ReadFirstMain(GIr,1,true)) then begin // brtxbrandvc
								outstring(0,0,GIr.HansaCode,false);
							end else begin
								GIr.HansaCode = ORrw.ArtCode;  // by Ira	
								readfirstkey("HansaCode",GIr,1,true);  //
								outstring(0,0,ORrw.ArtCode,false);
							end;							
							outstring(70,0,ORrw.Spec,false);		
							BBr.Code = GIr.BPIBrand; //
							if(readfirstmain(BBr,1,true)) then begin //			
								outstring(0,0,BBr.Name,false);
							end else begin
								outstring(0,0,"",false);
							end;
							if (GIr.ExtProwItRegulations>0) then begin
								EPIr.SerNr = GIr.ExtProwItRegulations;
								if (ReadFIrstMain(EPIr,1,true)) then begin
									CUr.Code = EPIr.Comment;
									if (ReadFIrstMain(CUr,1,true)) then begin
										outstring(70,0,CUr.Name,false);
									end else begin
										outstring(70,0,"",false);
									end;
								end;
							end else begin
								outstring(70,0,"",false);
							end;
							outstring(70,0,ORrw.ECReservStock,false);
							outstring(300,0,-vRetOutItems[ORrw.ArtCode & "_" & Retr.SerNr],false);
							outstring(340,0,ORrw.Price,false);
							outstring(340,0,SHFRV/SHSHIP,false);
							outstring(340,0,GIr.DealPrice,false);
							if (OrdInf) then begin
								outstring(340,0,IVPayDeal[IVr.SerNr],false);
							end else begin
								outstring(340,0,"",false);
							end;
							outstring(340,0,-(ORrw.Sum / ORrw.Quant * vRetOutItems[ORrw.ArtCode & "_" & Retr.SerNr]),false);
							if (OrdInf) then begin
								outstring(340,0,RetSum,false);
							end else begin
								outstring(340,0,"",false);
							end;
							if (nonblank(GIr.BTRxFourthLevCat)) then begin
									FourthLCr.Code = GIr.BTRxFourthLevCat;
									ReadFIrstMain(FourthLCr,1,true);
									outstring(340,0,FourthLCr.Name,false);
							end else begin
								ThirdLCr.Code = GIr.BTRxThirdLevCat;
								ReadFIrstMain(ThirdLCr,1,true);
								outstring(340,0,ThirdLCr.Name,false);
							end;
							if (OrdInf) then begin
								OrdInf = false;
								NMStr = "";
								CPHStr = "";
								EmailStr = "";
								CUr.Code = ORr.ECCUCode;
								if (ReadFIrstMain(CUr,1,true)) then begin
									if (nonblank(CUr.CRMLName)) then begin
										NMStr = CUr.CRMLName;
										if (nonblank(CUr.CRMName)) then begin
											NMStr = NMStr & " " & CUr.CRMName;
										end;
										if (nonblank(CUr.CRMPatr)) then begin
											NMStr = NMStr & " " & CUr.CRMPatr;
										end;
									end else begin
										NMStr = CUr.Name;
									end;
									if (nonblank(CUr.Phone)) then begin
										CPHStr = CUr.Phone;
									end;
									if (nonblank(CUr.Mobile) and blank(CPHStr)) then begin
										CPHStr = CUr.Mobile;
									end;
									if (nonblank(CUr.AltPhone) and blank(CPHStr)) then begin
										CPHStr = CUr.AltPhone;
									end;
									if (nonblank(CUr.Fax) and blank(CPHStr)) then begin
										CPHStr = CUr.Fax;
									end;
									if (nonblank(CUr.eMail)) then begin
										EmailStr = CUr.eMail;
									end;
								end;
								if (nonblank(NMStr)) then begin
									outstring(340,0,NMStr,false);
									if (nonblank(CPHStr)) then begin
										outstring(340,0,"Phone: " & CPHStr,false);
									end else begin
										outstring(340,0,"",false);
									end;
									outstring(340,0,EmailStr,false);
									outstring(340,0,complOr[CUr.Code],false);
								end else begin
									outstring(340,0,"",false);
									outstring(340,0,"",false);
									outstring(340,0,"",false);
									outstring(340,0,"",false);
								end;
							end else begin
								outstring(340,0,"",false);
								outstring(340,0,"",false);
								outstring(340,0,"",false);
								outstring(340,0,"",false);
							end;
							endformat;
						end;
					end;
				end;
			end;
		end;
	end;
	
	startformat(15);
		outstring(0,0,"",false);
		outstring(70,0,"",false);
		outstring(220,0,"",false);
		outstring(300,0,"",false);
		outstring(340,0,"",false);
		outstring(340,0,"",false);
		outstring(340,0,"",false);
		outstring(340,0,"",false);
		outstring(340,0,"",false);
		outstring(340,0,"ИТОГО:",false);
		outstring(340,0,Total,false);
	endformat;
	
	endjob;
return;
end;








global
procedure ECOrderRn(record RcVc RepSpec)  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 17:02 24.12.2020
begin
  Integer i,rwcnt,j,pos;
	record SHVc SHr;
  row SHVc SHrw;
	record RetVc Retr;
	row RetVc Retrw;
	record ORVc ORr;
	row ORVc ORrw;
  Boolean testf, TrHs, OrdInf;
  string 20 frit,toit;
  string 20 frin,toin;
  record INVc INr;
  string 255 tstr;
  string 255 itsz,mask,subsets,mskrep;
	vector val vRetItems, vRetOutItems;
	vector boolean vInPerReturns;
	val SaleTotal, Total, TotQty;
	record ARVc ARr;
	date SHDate, firstORDate;
	val ORSum, RetSum, PaySum, SHFRV, SHSHIP;
	record IPVc IPr;
	row IPVc IPrw;
	vector string 255 IVPayDeal, PMComments;
	record PMBlock PMb;
	row PMBlock PMrw;
	string 255 IVPM, stocks, PDComment, ORSerNr;
	record IVVc IVr, CredIVr;
	Boolean TrHs2, testf2, SHFlag;
	record PDVc PDr;
	record GlobalItemVc GIr;
	record ExpProvItemRegVc EPIr;
	record CUVc CUr;

	
	BlockLoad(PMb);

	StartReportnoheaderjob("Отчет по заказам Е-Коммерс");
	
	
	TrHs = true;
	SHr.ShipDate = RepSpec.sStartDate;
	while (loopkey("ShipDate",SHr,1,TrHs))begin
		testf = true;
		if(SHr.ShipDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
		if(SHr.OKFlag==1)then begin testf = false; end;
		if(SHr.Sorting=="COMPLETED")then begin testf = false; end;
		if(SHr.ECOMMERCEOrdf!=1)then begin testf = false; end;
		if(testf)then begin
			ORr.SerNr = SHr.OrderNr;
			if(ReadFirstMain(ORr,1,true))then begin
				if (nonblanktime(RepSpec.sStartTime) and nonblanktime(RepSpec.sEndTime) and (TimeToVal(ORr.ECOrdConfirmTime)<TimeToVal(RepSpec.sStartTime) or TimeToVal(ORr.ECOrdConfirmTime)>TimeToVal(RepSpec.sEndTime))) then begin testf = false; end;
				if (nonblank(RepSpec.f1) and ORr.CustOrdNr!=RepSpec.f1) then begin testf = false; end;
				if (testf) then begin
					startformat(15);
						outstring(70,0," ",false);
					endformat;
					startformat(15);
						outstring(220,0,"Номер счета клиента",false);
						outstring(220,0,"Номер заказа Битрикс",false);
						outstring(220,0,"Дата заказа Битрикс",false);
						outstring(220,0,"Время заказа Битрикс",false);
						outstring(220,0,"Номер отгрузки",false);
						outstring(300,0,"Артикулы товаров",false);
						outstring(340,0,"Название товара",false);
						outstring(340,0,"Склад",false);
						outstring(340,0,"Количество",false);
					endformat;

					OrdInf = true;
					for (i=0;i<matrowcnt(SHr);i=i+1) begin
						matrowget(SHr,i,SHrw);
						if (OrdInf) then begin
							startformat(15);
								outstring(220,0,ORr.SerNr,false);
								outstring(220,0,ORr.CustOrdNr,false);
								outstring(220,0,SHr.ShipDate,false);
								outstring(220,0,ORr.ECOrdConfirmTime,false);
								outstring(300,0,SHr.SerNr,false);
								outstring(300,0,SHrw.ArtCode,false);
								outstring(340,0,SHrw.Spec,false);
								outstring(340,0,SHrw.Location,false);
								outstring(340,0,SHrw.Ship,false);
							endformat;
						end else begin
							startformat(15);
								outstring(220,0,"",false);
								outstring(220,0,"",false);
								outstring(220,0,"",false);
								outstring(220,0,"",false);
								outstring(300,0,SHr.SerNr,false);
								outstring(300,0,SHrw.ArtCode,false);
								outstring(340,0,SHrw.Spec,false);
								outstring(340,0,SHrw.Location,false);
								outstring(340,0,SHrw.Ship,false);
							endformat;
						end;
						OrdInf = false;
					end;
				end;
			end;
		end;
	end;
	Resetloop(SHr);
	
	endjob;

return;
end;

global
procedure ECPaymentsRn(record RcVc RepSpec) // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 15:20 17.10.2019
begin
  Integer i,rwcnt;
	record SHVc SHr;
  row SHVc SHrw;
	record RetVc Retr;
	row RetVc Retrw;
	record IVVc IVr, CredIVr;
	record ORVc ORr;
	row ORVc ORrw;
  Boolean testf, TrHs, TrHs2, testf2, SHFlag, IVFlag;
	record ARVc ARr;
	date SHDate;
	val ORSum, RetSum, PaySum, IVSum;
	record IPVc IPr;
	row IPVc IPrw;
	vector string 255 IVPayDeal, PMComments;
	record PMBlock PMb;
	row PMBlock PMrw;
	string 255 IVPM, stocks;
	
	BlockLoad(PMb);

	StartReportnoheaderjob("Отчет по оплатам заказов Е-Коммерс");
	startformat(15);
		outstring(0,0,"№ заказа",false);
		outstring(70,0,"Дата заказа",false);
		outstring(220,0,"Дата отгрузки",false);
		outstring(300,0,"Сумма заказа",false);
		outstring(340,0,"Сумма сч.ф",false);
		outstring(340,0,"Сумма возврата",false);
		outstring(340,0,"Оплачено",false);
		outstring(340,0,"Способ оплаты",false);
		outstring(340,0,"Бутик",false);
		outstring(340,0,"ФИО клиента",false);
	endformat;
	
	if (blank(RepSpec.sStartDate)) then begin RepSpec.sStartDate = StringToDate("08/10/18"); end;
	if (blank(RepSpec.sEndDate)) then begin RepSpec.sEndDate = CurrentDate;	end;
	
	for (i=0;i<matrowcnt(PMb);i=i+1) begin
		matrowget(PMb,i,PMrw);
		PMComments[PMrw.Code] = PMrw.Comment;
	end;
	
	
	TrHs = true;
	IPr.TransDate = RepSpec.sStartDate;
	while (loopKey("TransDate",IPr,1,TrHs)) begin
		// if (IPr.TransDate > RepSpec.sEndDate) then begin TrHs = false; end;
		if (TrHs) then begin
			for (i=0;i<matrowcnt(IPr);i=i+1) begin
				matrowget(IPr,i,IPrw);
				if (nonblank(IPrw.InvoiceNr)) then begin
					IVPayDeal[IPrw.InvoiceNr] = PMComments[IPr.PayMode];
				end;
			end;
		end;
	end;

	if (blank(RepSpec.f1)) then begin
		TrHs = true;
		ORr.OrdDate = RepSpec.sStartDate;
		while (loopKey("OrdDate",ORr,1,TrHs)) begin
			testf = true;
			if (ORr.OrdDate > RepSpec.sEndDate) then begin TrHs = false; testf = false; end;	
			if (testf) then begin
				ORSum = 0;
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					ORSum = ORSum + ORrw.Sum;
				end;				
				SHr.OrderNr = ORr.SerNr;
				SHFlag = false;
				if (ReadFirstKey("OrderKey",SHr,1,true)) begin
					if (SHr.OKFlag==1) then begin
						SHDate = SHr.ShipDate;
						SHFlag = true;
					end;
				end;
				TrHs2 = true;
				Retr.OrdNr = ORr.SerNr;
				while (LoopKey("OrdNr",Retr,1,TrHs2)) begin
					if (Retr.OrdNr!=ORr.SerNr) then begin TrHs2 = false; end;
					if (TrHs2) then begin
					
					end;
				end;
				Resetloop(Retr);
				PaySum = 0;
				IVSum = 0;
				IVr.OrderNr = ORr.SerNr;
				IVPM = "";
				IVFlag = false;
				if (ReadFirstKey("OrderNr",IVr,1,true)) then begin
					IVFlag = true;
					ARr.InvoiceNr = IVr.SerNr;
					if (IVr.OKFlag==1) then begin
						IVSum = IVr.Sum4;
						PaySum = IVr.Sum4;
						if (ReadFirstMain(ARr,1,true)) then begin
							PaySum = PaySum - ARr.RVal;
						end;
						if (IVr.Sum4 > ARr.RVal or ARr.RVal==blankval) then begin
							IVPM = IVPayDeal[IVr.SerNr];
						end;
					end;
				end;
				RetSum = 0;
				TrHs2 = true;
				CredIVr.OrderNr = ORr.SerNr;
				while (LoopKey("OrderNr",CredIVr,1,TrHs2)) begin
					testf2 = true;
					if (CredIVr.OrderNr!=ORr.SerNr) then begin TrHs2 = false; testf2 = false; end;
					if (CredIVr.SerNr==IVr.SerNr) then begin testf2 = false; end;
					if (CredIVr.OKFlag!=1) then begin testf2 = false; end;
					if (testf2) then begin
						RetSum = RetSum + CredIVr.Sum4;
					end;
				end;
				resetloop(CredIVr);
				stocks = "";
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					if (!SetInSet(ORrw.ECReservStock,stocks)) then begin
						if (nonblank(stocks)) then begin stocks = stocks & ","; end;
						stocks = stocks & ORrw.ECReservStock;
					end;
				end;
				if (SHFlag and IVFlag) then begin
					startformat(15);
						outstring(0,0,ORr.SerNr,false);
						outstring(70,0,ORr.OrdDate,false);
						if (SHFlag) then begin
							outstring(220,0,SHDate,false);
						end else begin
							outstring(220,0,"",false);
						end;
						outstring(300,0,ORSum,false);
						outstring(340,0,IVSum,false);
						outstring(340,0,RetSum,false);
						outstring(340,0,PaySum - RetSum,false);
						outstring(340,0,IVPM,false);
						outstring(340,0,stocks,false);
						outstring(340,0,ORr.Addr0,false);
					endformat;
				end;
			end;
		end;
		resetloop(ORr);
	end else begin
		ORr.SerNr = StringToLongInt(RepSpec.f1);
		if (ReadFirstMain(ORr,1,true)) then begin
			testf = true;
			if (ORr.OrdDate > RepSpec.sEndDate or ORr.OrdDate < RepSpec.sStartDate) then begin testf = false; end;	
			if (testf) then begin
				ORSum = 0;
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					ORSum = ORSum + ORrw.Sum;
				end;
				SHr.OrderNr = ORr.SerNr;
				SHFlag = false;
				if (ReadFirstKey("OrderKey",SHr,1,true)) begin
					if (SHr.OKFlag==1) then begin
						SHDate = SHr.ShipDate;
						SHFlag = true;
					end;
				end;
				TrHs2 = true;
				Retr.OrdNr = ORr.SerNr;
				while (LoopKey("OrdNr",Retr,1,TrHs2)) begin
					if (Retr.OrdNr!=ORr.SerNr) then begin TrHs2 = false; end;
					if (TrHs2) then begin
					
					end;
				end;
				Resetloop(Retr);
				PaySum = 0;
				IVSum = 0;
				IVr.OrderNr = ORr.SerNr;
				IVPM = "";
				IVFlag = false;
				if (ReadFirstKey("OrderNr",IVr,1,true)) then begin
					IVFlag = true;
					ARr.InvoiceNr = IVr.SerNr;
					if (IVr.OKFlag==1) then begin
						IVSum = IVr.Sum4;
						PaySum = IVr.Sum4;
						if (ReadFirstMain(ARr,1,true)) then begin
							PaySum = PaySum - ARr.RVal;
						end;
						if (IVr.Sum4 > ARr.RVal or ARr.RVal==blankval) then begin
							IVPM = IVPayDeal[IVr.SerNr];
						end;
					end;
				end;
				RetSum = 0;
				TrHs2 = true;
				CredIVr.OrderNr = ORr.SerNr;
				while (LoopKey("OrderNr",CredIVr,1,TrHs2)) begin
					testf2 = true;
					if (CredIVr.SerNr!=ORr.SerNr) then begin TrHs2 = false; testf2 = false; end;
					if (CredIVr.SerNr==IVr.SerNr) then begin testf2 = false; end;
					if (CredIVr.OKFlag!=1) then begin testf2 = false; end;
					if (testf2) then begin
						RetSum = RetSum + CredIVr.Sum4;
					end;
				end;
				resetLoop(CredIVr);
				stocks = "";
				for (i=0;i<matrowcnt(ORr);i=i+1) begin
					matrowget(ORr,i,ORrw);
					if (!SetInSet(ORrw.ECReservStock,stocks)) then begin
						if (nonblank(stocks)) then begin stocks = stocks & ","; end;
						stocks = stocks & ORrw.ECReservStock;
					end;
				end;
				if (SHFlag and IVFlag) then begin
					startformat(15);
						outstring(0,0,ORr.SerNr,false);
						outstring(70,0,ORr.OrdDate,false);
						if (SHFlag) then begin
							outstring(220,0,SHDate,false);
						end else begin
							outstring(220,0,"",false);
						end;
						outstring(300,0,ORSum,false);
						outstring(340,0,IVSum,false);
						outstring(340,0,RetSum,false);
						outstring(340,0,PaySum - RetSum,false);
						outstring(340,0,IVPM,false);
						outstring(340,0,stocks,false);
						outstring(340,0,ORr.Addr0,false);
					endformat;
				end;
			end;
		end;
	end;
	
	endjob;
return;
end;




procedure RepShip(record RcVc RepSpec,record SHVc SHp,var val ordtot,var val shptot)
begin
  Integer i,rwcnt;
  row SHVc SHrw;
  Boolean testf;
  string 20 frit,toit;
  string 20 frin,toin;
  record INVc INr;
  string 255 tstr;
  string 255 itsz,mask,subsets,mskrep;
  
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frin = FirstInRange(RepSpec.LastAcc,20);
  toin = LastInRange(RepSpec.LastAcc,20);  
  StartFormat(15);
  OutLongInt(0,"DblSHVc",SHp.SerNr,false);
  OutDate(60,0,SHp.ShipDate,false);
  OutLongInt(130,0,SHp.OrderNr,false);
  OutString(200,0,SHp.CustCode,false);
  OutString(300,0,SHp.Addr0,false);
  EndFormat;
  StartFormat(15);
  OutString(60,0,SHp.ShipMode,false);
  OutString(300,0,SHp.Addr1,false);
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(300,0,SHp.Addr2,false);
  EndFormat;
  StartFormat(15);
  OutString(300,0,SHp.Addr3,false);
  EndFormat;
  rwcnt = MatRowCnt(SHp);
  for (i = 0 ; i<rwcnt ; i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    testf = true;
    if (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.Stext) or (nonblank(RepSpec.f8))) then begin
      testf = ReadFirstItem(SHrw.ArtCode,INr,false,true);
    end;
    if (testf) then begin 
      if (nonblank(RepSpec.Stext)) then begin
        if (INr.Group<frit) or (INr.Group>toit) then begin 
          testf = false;              
        end; 
      end;
    end;
    if (testf) then begin 
      if (nonblank(RepSpec.LastAcc)) then begin
        if (FindItemVAR(INr.Code,itsz,mask,mskrep,subsets)) then begin
          if (RepSpec.LastAcc!=SHrw.ArtCode) and (RepSpec.LastAcc!=INr.Code) then begin 
            testf = false;              
          end; 
        end else begin
          if (INr.Code<frin) or (INr.Code>toin) then begin 
            testf = false;              
          end; 
        end;
      end;
    end;
    if (testf) then begin 
      if (nonblank(RepSpec.f8)) then begin
        testf = SetInSet2(RepSpec.f8,INr.DispGroups);         
      end;       
    end; 
    if (testf) then begin
      StartFormat(15);
      OutString(20,0,SHrw.ArtCode,false);
      OutString(120,0,SHrw.Spec,false);
      OutString(300,0,SHrw.SerialNr,false);
      OutValBiDi(420,0,SHrw.Ordered,M4UVal,true,460);
      OutValBiDi(480,0,SHrw.Ship,M4UVal,true,520);
      EndFormat;
      ordtot = ordtot + SHrw.Ordered;
      shptot = shptot + SHrw.Ship;
    end;
  end;
  return;
end;





global
procedure CCFinishedSHRn(record RcVc RepSpec)
begin
	record ORVc ORr;
	row ORVc ORrw;
	record SerBalVc SBr;
  record LocationVc Locr;
  Boolean TrHs;
  Boolean testf, testf2, stockTypePartShipmf;
  Integer i,j,k;
  Integer rwcnt, ordcnt, stockcnt;
  array string 255 StockName, OrNo;
	vector boolean Stockf, StockOrdNo;
	vector date Ordate;
	vector integer vItQty, AccumulatedItemsMinus;
	vector string 255 vOrType;
	record ItemStatusVc ISr;
	record CUVc CUr;
	string 255 CompName;
	
	StartReportnoheaderjob("Cписок заказов готовых к отгрузке");
	startformat(15);
		outstring(0,0,"Заказ №",false);
		outstring(70,0,"Магазин",false);
		outstring(220,0,"Дата закзаза",false);
		outstring(300,0,"Кол. тов",false);
		outstring(340,0,"Тип заказа",false);
	endformat;
	
	j = 0;
	k = 0;
	ORr.ShipFlag = 0;
	TrHs = true;
	while (LoopKey("ShipFlag",ORr,1,TrHs)) begin
		testf = true;
		if(ORr.ShipFlag!=0)then begin TrHs = false; testf = false; end;		
		if(testf)then begin
			rwcnt = matrowcnt(ORr);
			for (i=0;i<rwcnt;i=i+1) begin
				stockTypePartShipmf = false;
				matrowget(ORr,i,ORrw);
				SBr.Item = ORrw.ArtCode;
				SBr.Serial = ORr.OrderClass & ORr.SerNr;
				if(ReadFirstKey("ItemSerial",SBr,2,true))then begin
					if(ORrw.Quant>SBr.Quant)then begin testf = false; end;
				end else begin
					ISr.Code = ORrw.ArtCode;
					ISr.Location = ORr.Location;
					if(ReadFirstMain(ISr,2,true))then begin
						if(ISr.Instock>0)then begin
							SBr.Item = ORrw.ArtCode;
							SBr.Location = ORr.Location;
							testf2 = true;
							while (LoopKey("ItemQuant",SBr,2,testf2)) begin
								if(SBr.Location != ORr.Location)then begin testf2 = false; end;
								if(SBr.Item != ORrw.ArtCode)then begin testf2 = false; end;
								if(testf2)then begin
									ISr.Instock = ISr.Instock - SBr.Quant;
								end;
							end;
							resetloop(SBr);
						end;
						if(AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] > 0)then begin
							ISr.Instock = ISr.Instock - AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location];
						end;
						if(ORrw.Quant>ISr.Instock)then begin 
							if(ISr.Instock>0 and (ORr.OrderClass=="STOCK" or ORr.OrderClass=="S_IDE"))then begin  
								stockTypePartShipmf = true;
								AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] = AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] + ISr.Instock;
							end else begin
								testf = false;
							end;
						end else begin
							AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] = AccumulatedItemsMinus[ORrw.ArtCode & ORr.Location] + ORrw.Quant;
						end;
					end else begin
						testf = false;
					end;
				end;
				if(stockTypePartShipmf)then begin
					vItQty[ORr.SerNr] = vItQty[ORr.SerNr] + ISr.Instock;
				end else begin
					vItQty[ORr.SerNr] = vItQty[ORr.SerNr] + ORrw.Quant;
				end;
			end;
			if(testf)then begin
				if(!Stockf[ORr.CustCode])then begin
					Stockf[ORr.CustCode] = true;
					StockName[j] = ORr.CustCode;
					j=j+1;
				end;
				StockOrdNo[ORr.CustCode & ORr.SerNr] = true;
				OrNo[k] = ORr.SerNr;
				k = k + 1;
				Ordate[ORr.SerNr] = ORr.OrdDate;
				vOrType[ORr.SerNr] = ORr.OrderClass;
			end;
		end;
	end;
	
	ordcnt = k;
	stockcnt = j;
	
	for (j=0;j<stockcnt;j=j+1) begin	
		testf = true;
		if(nonblank(RepSpec.f1) and StockName[j]!=RepSpec.f1)then begin testf = false; end;
		if(testf)then begin
			for (k=0;k<ordcnt;k=k+1) begin
				if(StockOrdNo[StockName[j] & OrNo[k]])then begin
					CUr.Code = StockName[j];
					if(ReadFirstMain(CUr,1,true))then begin 
						CompName = CUr.Name; 
					end else begin 
						CompName = StockName[j]; 
					end;
					startformat(15);
						outstring(0,"DblORVc",OrNo[k],false);
						outstring(70,0,CompName,false);
						outstring(220,0,Ordate[OrNo[k]],false);
						outstring(300,0,vItQty[OrNo[k]],false);
						outstring(340,0,vOrType[OrNo[k]],false);
					endformat;
				end;
			end;
		end;
	end;
	
	
	
	
	
	endjob;
	return;
end;




global   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 11:48 13.02.2020
procedure CCPOListPaymPrior (val POSum, val PartSum, var val AllBalP, var val PPBal, var val PBSBal, var val PBal, val PPBalPrc, val PBSBalPrc, val PBalPrc, var boolean PPDLDatef, var boolean PBSDLDatef, var boolean PDLDatef)
begin
	val maxPPBal, maxPBSBal, maxPBal;

	if (PPBalPrc > 0) then begin
		PPDLDatef = true;
	end;
	if (PBSBalPrc > 0) then begin
		PBSDLDatef = true;
	end;
	if (PBalPrc > 0) then begin
		PDLDatef = true;
	end;

	maxPPBal = (POSum - PartSum) / 100 * PPBalPrc;
	maxPBSBal = (POSum - PartSum) / 100 * PBSBalPrc;
	maxPBal = (POSum - PartSum) / 100 * PBalPrc;

	// logtext(0,PayAm);
	// logtext(0,AllBalP);

	if (maxPBal < AllBalP) then begin
		PBal = maxPBal;
		AllBalP = AllBalP - maxPBal;
	end else begin
		PBal = AllBalP;
		AllBalP = 0;
	end;
	
	if (maxPBSBal < AllBalP) then begin
		PBSBal = maxPBSBal;
		AllBalP = AllBalP - maxPBSBal;
	end else begin
		PBSBal = AllBalP;
		AllBalP = 0;
	end;
	
	
	if (maxPPBal < AllBalP) then begin
		PPBal = maxPPBal;
		AllBalP = AllBalP - maxPPBal;
	end else begin
		PPBal = AllBalP;
		AllBalP = 0;
	end;
	
	
	
	
 return;
end;





global  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 17:21 29.10.2019
procedure CCPOListRn(record RcVc RepSpec)
begin
	record POVc POr, locPOr;
	row POVc POrw;
	record SerBalVc SBr;
  record LocationVc Locr;
  Boolean TrHs, TrHs2, testf3;
  Boolean testf, TrLf, locf, IVCredVithStatf,SMf, testf2, PPDLDatef, PBSDLDatef, PDLDatef;
  Integer i,j,k,intPOComp, StatusMargin, curcomp;
  longint locORserNr, intPOSerNr;
  Integer rwcnt, ordcnt, stockcnt, pos;
  array string 255 StockName, OrNo;
	vector boolean Stockf, StockOrdNo;
	vector date Ordate;
	vector integer vItQty, AccumulatedItemsMinus;
	vector string 255 vOrType, VendorBrandmngr, VendorPurchaser;
	record ItemStatusVc ISr;
	record CUVc CUr;
	string 255 CompName, locORrClient,ORrOFFser,POSerNr, POComp, TrackSet, IDlocORserNr, ClientName, VendCode, locORCustNr;
	record ORVc ORr, locORr;
	record RLinkVc RLr;
	date locORrDate, blnkDate, RecDate, lastPayDate;
	val Weight, Volume, PPSum, PSum, PartPSum, Sum, credPO, PartPaymentAmount, OldBalancePayment, OpenPPSum, CurPUSum, BalanceP, PreP, PaymntBefP, AllBalP, PUCustomsSum, PUShipSum, BrandCSum, Cost3CueBrVal;
	record POShipmDataVc POSDr;
	row POShipmDataVc POSDrw;
	record APPayHistVc APPayHistr;
	record VIVc VIr;
	row VIVc VIrw;
	record APVc APr;
	record PUVc PUr;
	row PUVc PUrw;
	longint lastPUSerNr;
	record OPPVc OPPr;
	record BPIBrandVc Brandr;
	record OPVc OPr;
	row OPVc OPrw;
	Boolean found;
  record OPrsVc OPrsr;
	
	
	curcomp = currentcompany;
	
	StartReportnoheaderjob("Отчет по статусам заказов поставщикам");
	startformat(15);
		outstring(48,0,"Local Order #",false);
		outstring(1,0,"Client order #",false);
		outstring(2,0,"Client Order date",false);
		outstring(3,0,"Client number",false);
		outstring(4,0,"Promised date",false);
		outstring(5,0,"Po number",false);
		outstring(6,0,"Manufacturer name",false);
		outstring(7,0,"Po date",false);
		outstring(34,0,"Project code",false);
		outstring(8,0,"Mfr finish date",false);
		outstring(9,0,"Invoice number",false);
		outstring(10,0,"Invoice date",false);
		outstring(11,0,"Order status",false);
		outstring(12,0,"Update Ord. Status Date",false);
		// outstring(13,0,"Order status margin",false);// -
		outstring(14,0,"Payment terms",false);
		outstring(15,0,"Currency code",false);
		outstring(16,0,"Order amount",false);
		// outstring(17,0,"Estimated date of payment",false);
		outstring(18,0,"Payment date",false); // последний платеж по заказу
		outstring(19,0,"Payment amount",false); 
	
		
		outstring(22,0,"Days for balance payment",false); //-
		outstring(35,0,"Prepayment",false);// 1
		outstring(37,0,"Prepayment deadline",false);
		// outstring(39,0,"Prepayment margin",false);// -
		outstring(36,0,"Payment before shipment",false); //2
		outstring(41,0,"Estimated date of payment Before shipment",false);
		outstring(38,0,"Payment before shipment deadline",false);
		// outstring(40,0,"Payment before shipment margin",false);// -
		outstring(24,0,"Balance payment amount",false);// 3
		outstring(42,0,"Estimated date of Balance payment",false);
		outstring(23,0,"Balance payment deadline",false);
		outstring(33,0,"Old balance payment",false);// 4
		outstring(43,0,"Old balance payment deadline",false);
		// outstring(25,0,"Margin for balance payment",false);// -
		outstring(26,0,"Reception date",false);
		outstring(27,0,"Freight",false);
		outstring(28,0,"Truck number",false);
		outstring(29,0,"Volume",false);
		outstring(30,0,"Weight",false);
		outstring(31,0,"Freight sum, AZN",false);
		outstring(32,0,"Customs sum, AZN",false);
		outstring(46,0,"Brand.costs",false);
		outstring(47,0,"Brand.costs bal",false);
		outstring(44,0,"Approximately deliver date",false);
		outstring(45,0,"Delivery date",false);   
		outstring(49,0,"Comment",false);   
	endformat;
	
	
	
	while (LoopMain(Brandr,1,true)) begin
		if (nonblank(Brandr.Vendor)) then begin
			if (nonblank(Brandr.BrndMngr)) then begin
				pos = 0;
				ExtractObjWithSeparator(",",Brandr.Vendor,true,pos,VendCode);
				while (nonblank(VendCode)) begin
					if (nonblank(VendorBrandmngr[VendCode])) then begin VendorBrandmngr[VendCode] = VendorBrandmngr[VendCode] & ","; end;
					VendorBrandmngr[VendCode] = VendorBrandmngr[VendCode] & Brandr.BrndMngr;
					ExtractObjWithSeparator(",",Brandr.Vendor,true,pos,VendCode);
				end;
			end;
			if (nonblank(Brandr.Puchaser)) then begin
				pos = 0;
				ExtractObjWithSeparator(",",Brandr.Vendor,true,pos,VendCode);
				while (nonblank(VendCode)) begin
					if (nonblank(VendorPurchaser[VendCode])) then begin VendorPurchaser[VendCode] = VendorPurchaser[VendCode] & ","; end;
					VendorPurchaser[VendCode] = VendorPurchaser[VendCode] & Brandr.Puchaser;
					ExtractObjWithSeparator(",",Brandr.Vendor,true,pos,VendCode);
				end;
			end;
		end;
	end;
	Resetloop(Brandr);
	
	
	TrHs = true;
	POr.TransDate = RepSpec.sStartDate;
	POr.SerNr = "";
	while (LoopKey("TransDate",POr,2,TrHs)) begin
		testf = true;
		// for (i=0;i<matrowcnt(POr);i=i+1) begin
			// matrowget(POr,i,POrw);
			// if(POrw.Shipd2 < POrw.Quant)then begin testf = true; end;
		// end;
		if(nonblank(RepSpec.f1) and !SetInSet(RepSpec.f1,VendorBrandmngr[POr.VECode]))then begin testf = false; end;
		if(nonblank(RepSpec.f3) and !SetInSet(RepSpec.f3,VendorPurchaser[POr.VECode]))then begin testf = false; end;
		if(nonblank(RepSpec.f2) and POr.IDStatus!=RepSpec.f2)then begin testf = false; end;
		if(nonblank(RepSpec.f5) and POr.IDPrjNum!=RepSpec.f5)then begin testf = false; end;
		// if(nonblank(RepSpec.f4) and POr.PayDeal!=RepSpec.f4)then begin testf = false; end;
		if(RepSpec.sStartDate > POr.TransDate)then begin testf = false; TrHs = false; end;  
		if(RepSpec.sEndDate < POr.TransDate and blank(RepSpec.f4))then begin testf = false; TrHs = false; end;
		locf = false;
		if(/*POr.POClass=="CLIEN" and */currentcompany==18)then begin
			locORserNr = 0;
			locORCustNr = "";
			locORrDate = blnkDate;
			locORrClient = "";
			ORr.SerNr = POr.OrdNr;
			if(nonblank(POr.OrdNr) and ReadFirstMain(ORr,1,true)) then begin
				ORrOFFser = ORr.OfficialSerNr;
				pos = 0;
				ExtractObjWithSeparator(":",ORrOFFser,true,pos,POSerNr);
				ExtractObjWithSeparator(":",ORrOFFser,true,pos,POComp);
				intPOSerNr = StringToInt(POSerNr);
				intPOComp = StringToInt(POComp);
				if(SetCompany(intPOComp,false))then begin
					locPOr.SerNr = intPOSerNr;
					if(ReadFirstMain(locPOr,1,true))then begin
						locORr.SerNr = locPOr.OrdNr;
						if(ReadFirstMain(locORr,1,true))then begin
							locORserNr = locORr.SerNr;
							locORCustNr = locORr.CustOrdNr;
							locORrDate = locORr.OrdDate;
							locORrClient = locORr.CustCode;
							locf = true;
						end;
					end;
				end;
				resetcompany(curcomp);
			end;
		end;
		
		
		if(currentcompany==28)then begin
			ORr.CustOrdNr = POr.IDRefPRNum;
			if(ReadFirstKey("CustOrdNr",ORr,1,true))then begin
				IDlocORserNr = ORr.CustOrdNr;
				locORrDate = ORr.OrdDate;
				locORrClient = ORr.CustCode;
				locORCustNr = ORr.CustOrdNr;
				locf = true;
			end;
		end;
		
		SMf = true;
		if(nonblank(POr.IDStatus))then begin
			StatusMargin = 0;
			switch (POr.IDStatus) begin
				case "PO On Enquiry": StatusMargin = datediff(addday(POr.UpdStatDate,5),currentdate);
				case "PO Confirmed": StatusMargin = datediff(addday(POr.UpdStatDate,2),currentdate);
				case "PO Goods On Manufacturing": StatusMargin = datediff(POr.IDMfrFinDate,currentdate);
				case "PO Goods Ready for Shipment": StatusMargin = datediff(addday(POr.UpdStatDate,3),currentdate);
				case "PO Goods Shipped": 
					StatusMargin = datediff(addday(POr.UpdStatDate,23),currentdate);
					if(left(POr.IDFreight,3)=="Air")then begin
						StatusMargin = datediff(addday(POr.UpdStatDate,7),currentdate);
					end;
				otherwise SMf = false;
			end;
		end;


		Weight = blankval;
		Volume = blankval;
		TrackSet = "";
		POSDr.POSerNr = POr.SerNr;
		TrLf = false;
		if(ReadFirstMain(POSDr,1,true))then begin
			for (i=0;i<matrowcnt(POSDr);i=i+1)begin
				matrowget(POSDr,i,POSDrw);
				if(nonblank(TrackSet))then begin TrackSet = TrackSet & ","; end;
				TrackSet = TrackSet & POSDrw.TruckNo;
				Weight = Weight + POSDrw.Weight;
				Volume = Volume + POSDrw.Volume;
				TrLf = true;
			end;
		end;
		
		CurPUSum = 0;
		RecDate = blnkDate;
		PUr.PONr = POr.SerNr;
		if(ReadLastKey("PONr",PUr,1,true))then begin
			RecDate = PUr.TransDate;
			lastPUSerNr = PUr.SerNr;
			for (i=0;i<matrowcnt(PUr);i=i+1) begin
				for (j=0;j<matrowcnt(POr);j=j+1) begin
					matrowget (PUr,i,PUrw);
					matrowget (POr,j,POrw);
					if(PUrw.ArtCode == POrw.ArtCode)then begin
						CurPUSum = CurPUSum + (PUrw.Quant * (POrw.Sum / POrw.Quant));
					end;
				end;
			end;
		end;
		
		PPSum = 0;
		PSum = 0;
		BrandCSum = 0;
		APPayHistr.OrderNr = POr.SerNr;
		TrHs2 = true;
		While(LoopKey("OrderNr",APPayHistr,1,TrHs2)) begin
			if (APPayHistr.OrderNr!=POr.SerNr) then begin TrHs2 = false; end;
			if (TrHs2 and APPayHistr.FileName=="OPVc") then begin
				PPSum = PPSum + APPayHistr.Val;
			end;
		end;
		Resetloop(APPayHistr);
		
		
		OpenPPSum = 0;
		OPPr.OrderNr = POr.SerNr;
		TrHs2 = true;
		While(LoopKey("OrderNr",OPPr,1,TrHs2)) begin
			if (OPPr.OrderNr!=POr.SerNr) then begin TrHs2 = false; end;
			if (TrHs2) then begin
				OpenPPSum = OpenPPSum + OPPr.PPVal;
			end;
		end;
		Resetloop(OPPr);
		
		
		
		
		lastPayDate = blnkDate;
		APPayHistr.OrderNr = POr.SerNr;
		TrHs2 = true;
		While(LoopBackKey("OrderNr",APPayHistr,1,TrHs2)) begin
			if (APPayHistr.OrderNr!=POr.SerNr) then begin TrHs2 = false; end;
			if (TrHs2 and APPayHistr.FileName=="OPVc") then begin
				OPr.SerNr = APPayHistr.SerNr;
				if (ReadFirstMain(OPr,1,true)) then begin
					for (i=0;i<matrowcnt(OPr);i=i+1) begin
						matrowget(OPr,i,OPrw);
						if (OPrw.OrderNr==POr.SerNr and nonblank(OPrw.PrepayNr)) then begin
							lastPayDate = APPayHistr.TransDate;
							TrHs2 = false;
						end;
					end;
				end;
			end;
		end;
		Resetloop(APPayHistr);
		
		IVCredVithStatf = false;
		credPO = 0;
		VIr.POSerNr = POr.SerNr;
		TrHs2 = true;
		While(LoopKey("POSerNr",VIr,1,TrHs2)) begin
			testf3 = true;
			if (VIr.POSerNr!=POr.SerNr) then begin TrHs2 = false; end;
			matrowget(VIr,0,VIrw);
			if(VIr.PayDeal=="CN" and blank(VIr.CredInv) and SetInSet("E101",VIr.Objects))then begin
				IVCredVithStatf = true;
			end;
			if(SetInSet("E101",VIr.Objects))then begin
				testf3 = false;
			end;
			if (testf3 and TrHs2 and VIrw.AccNumber!="44/21" and matrowcnt(VIr)>0 and blank(VIr.ExtraCostObj)) then begin
				OPrsr.VINr = VIr.SerNr;
				found = true;
				while (LoopKey("VIKey",OPrsr,1,found)) begin
					if (OPrsr.VINr!=VIr.SerNr) then begin found = false; end;
					if (found) then begin
						if (OPrsr.TransType==1) then begin
							OPr.SerNr = OPrsr.TransNr;
							if (ReadFirstMain(OPr,1,true)) then begin            
								if ((OPr.OrderedFlag!=0) and (OPr.RejectedFlag==0)) then begin
									if (lastPayDate<OPr.TransDate) then begin
										lastPayDate = OPr.TransDate;
									end;
								end;
							end;
						end;
					end;
				end;
				resetLoop(OPrsr);
			end;
			if (TrHs2 and VIr.ExtraCostObj=="cost3") then begin
				APr.SerNr = VIr.SerNr;
				if(ReadFirstMain(APr,1,true))then begin
					BrandCSum = BrandCSum + (VIr.PayVal - APr.RVal);
				end else begin
					if(VIr.OKFlag==1)then begin
						if(VIr.PayDeal!="CN")then begin
							BrandCSum = BrandCSum + VIr.PayVal;
						end else begin
							BrandCSum = BrandCSum - VIr.PayVal;
						end;
					end;
				end;
			end;
			if (matrowcnt(VIr)>0 and TrHs2 and VIrw.AccNumber!="44/21" and !IVCredVithStatf and testf3 and blank(VIr.ExtraCostObj)) then begin
				APr.SerNr = VIr.SerNr;
				if(ReadFirstMain(APr,1,true))then begin
					PSum = PSum + (VIr.PayVal - APr.RVal);
				end else begin
					if(VIr.OKFlag==1)then begin
						if(VIr.PayDeal!="CN")then begin
							PSum = PSum + VIr.PayVal;
						end else begin
							PSum = PSum - VIr.PayVal;
							credPO = credPO + VIr.PayVal;
						end;
					end;
				end;
			end;
		end;
		Resetloop(VIr);
		
		if(PSum>0)then begin
			Sum = PSum;
		end else begin
			Sum = PPSum;
		end;
		
		
		PUCustomsSum = 0;
		PUShipSum = 0;
		
		
		PartPaymentAmount = 0;
		TrHs2 = true;
		PUr.PONr = POr.SerNr;
		while (loopKey("PONr",PUr,1,TrHs2)) begin
			if(PUr.PONr != POr.SerNr)then begin TrHs2 = false; end;
			if(TrHs2)then begin
				PUCustomsSum = PUCustomsSum + PUr.CustomsCost;
				PUShipSum = PUShipSum + PUr.ShipCost;
			end;
			if(lastPUSerNr==PUr.SerNr)then begin  TrHs2 = false; end;
			if(TrHs2)then begin
				for (i=0;i<matrowcnt(PUr);i=i+1) begin
					for (j=0;j<matrowcnt(POr);j=j+1) begin
						matrowget (PUr,i,PUrw);
						matrowget (POr,j,POrw);
						if(PUrw.ArtCode == POrw.ArtCode)then begin
							PartPaymentAmount = PartPaymentAmount + (PUrw.Quant * (POrw.Sum / POrw.Quant));
						end;
					end;
				end;
			end;
		end;
		resetloop (PUr);
		
		
		OldBalancePayment = 0; 
		if(PartPaymentAmount > 0)then begin 
			Sum = 0;
			if(PSum<=PartPaymentAmount)then begin
				OldBalancePayment = PartPaymentAmount - PSum;
			end else begin
				OldBalancePayment = 0;
				Sum = PSum - PartPaymentAmount;
			end;
			if(OpenPPSum > 0)then begin
				Sum = Sum + OpenPPSum;
			end;
		end;
		
		if((CurPUSum + PartPaymentAmount)<POr.Sum4)then begin // Old balance in moment when we have confirmed partial purchase, but we didn`t have next partial purchase with last part of order.
			OldBalancePayment = OldBalancePayment + CurPUSum;
			if(Sum<=CurPUSum)then begin
				OldBalancePayment = OldBalancePayment - Sum;
				Sum = 0;
			end else begin
				OldBalancePayment = OldBalancePayment - CurPUSum;
				Sum = Sum - CurPUSum;
			end;
		end else begin
			CurPUSum = 0;
		end;
		
		AllBalP = POr.Sum4-Sum-PartPaymentAmount-CurPUSum;
		
		
		PreP = 0; // prepayment
		PaymntBefP = 0; // Payment before shipment
		BalanceP = 0;	// Balance payment
		PPDLDatef = false;// PP deadline flag
		PBSDLDatef = false;// PBSh deadline flag
		PDLDatef = false;// P deadline flag
		
		
		if(currentcompany!=28)then begin
			switch (POr.PayDeal) begin
						case "PA": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 100, 0, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PB": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 50, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PC": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 0, 50, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PD": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PE": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PF": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PG": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 40, 60, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PH": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 40, 60, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PI": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 30, 70, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PJ": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PK": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 70, 30, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PL": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 0, 50, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PM": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PN": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 30, 0, 70, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PO": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 100, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PQ": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 60, 40, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PR": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 0, 50, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PS": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 20, 80, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PT": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 35, 65, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PU": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 25, 75, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PV": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 75, 25, 0, PPDLDatef, PBSDLDatef, PDLDatef);
			end;
		end else begin
			switch (POr.PayDeal) begin
						case  "A": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 100, 0, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "50": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 50, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PC": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 0, 50, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PD": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PE": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PF": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "40": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 40, 60, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "30": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 30, 70, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PJ": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "70": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 70, 30, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PL": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 0, 50, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PM": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 0, 100, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PN": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 30, 0, 70, PPDLDatef, PBSDLDatef, PDLDatef);
						case "BS": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 0, 100, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "60": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 60, 40, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PR": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 50, 0, 50, PPDLDatef, PBSDLDatef, PDLDatef);
						case "20": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 20, 80, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PT": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 35, 65, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PU": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 25, 75, 0, PPDLDatef, PBSDLDatef, PDLDatef);
						case "PV": CCPOListPaymPrior (POr.Sum4, POr.PartDelSum4, AllBalP, PreP, PaymntBefP, BalanceP, 75, 25, 0, PPDLDatef, PBSDLDatef, PDLDatef);
			end;
		end;
		
		
		
		
		
		// if(currentcompany!=28)then begin
		
			// switch (POr.PayDeal) begin
						// case "PA": PreP = AllBalP;
						// case "PB": PreP = AllBalP/2;
											 // PaymntBefP = AllBalP/2;
						// case "PC": PreP = AllBalP/2;
											 // BalanceP = AllBalP/2;
						// case "PD": BalanceP = AllBalP;
						// case "PE": BalanceP = AllBalP;
						// case "PF": BalanceP = AllBalP;
						// case "PG": PreP = AllBalP*0.4;
											 // PaymntBefP = AllBalP*0.6;
						// case "PH": PreP = AllBalP*0.4;
											 // PaymntBefP = AllBalP*0.6;
						// case "PI": PreP = AllBalP*0.3;
											 // PaymntBefP = AllBalP*0.7;
						// case "PJ": BalanceP = AllBalP;
						// case "PK": PreP = AllBalP*0.7;
											 // PaymntBefP = AllBalP*0.3;
						// case "PL": PreP = AllBalP/2;
											 // BalanceP = AllBalP/2;
						// case "PM": BalanceP = AllBalP;
						// case "PN": PreP = AllBalP*0.3;
											 // BalanceP = AllBalP*0.7;
						// case "PO": PaymntBefP = AllBalP;
						// case "PQ": PreP = AllBalP*0.6;
											 // PaymntBefP = AllBalP*0.4;
						// case "PR": PreP = AllBalP/2;
											 // BalanceP = AllBalP/2;
						// case "PS": PreP = AllBalP*0.2;
											 // PaymntBefP = AllBalP*0.8;
						// case "PT": PreP = AllBalP*0.35;
											 // PaymntBefP = AllBalP*0.65;
						// case "PU": PreP = AllBalP*0.25;
											 // PaymntBefP = AllBalP*0.75;
						// case "PV": PreP = AllBalP*0.75;
											 // PaymntBefP = AllBalP*0.25;
			// end;
		// end else begin
			// switch (POr.PayDeal) begin
						// case "A": PreP = AllBalP;
						// case "50": PreP = AllBalP/2;
											 // PaymntBefP = AllBalP/2;
						// case "PC": PreP = AllBalP/2;
											 // BalanceP = AllBalP/2;
						// case "PD": BalanceP = AllBalP;
						// case "PE": BalanceP = AllBalP;
						// case "PF": BalanceP = AllBalP;
						// case "40": PreP = AllBalP*0.4;
											 // PaymntBefP = AllBalP*0.6;
						// case "30": PreP = AllBalP*0.3;
											 // PaymntBefP = AllBalP*0.7;
						// case "PJ": BalanceP = AllBalP;
						// case "70": PreP = AllBalP*0.7;
											 // PaymntBefP = AllBalP*0.3;
						// case "PL": PreP = AllBalP/2;
											 // BalanceP = AllBalP/2;
						// case "PM": BalanceP = AllBalP;
						// case "PN": PreP = AllBalP*0.3;
											 // BalanceP = AllBalP*0.7;
						// case "BS": PaymntBefP = AllBalP;
						// case "60": PreP = AllBalP*0.6;
											 // PaymntBefP = AllBalP*0.4;
						// case "PR": PreP = AllBalP/2;
											 // BalanceP = AllBalP/2;
						// case "20": PreP = AllBalP*0.2;
											 // PaymntBefP = AllBalP*0.8;
						// case "PT": PreP = AllBalP*0.35;
											 // PaymntBefP = AllBalP*0.65;
						// case "PU": PreP = AllBalP*0.25;
											 // PaymntBefP = AllBalP*0.75;
						// case "PV": PreP = AllBalP*0.75;
											 // PaymntBefP = AllBalP*0.25;
			// end;
		// end;
		
		if (nonblank(RepSpec.f4)) then begin
			switch (RepSpec.f4) begin
				case "Prepayment":
					if (PreP==0) then begin testf = false; end;
				case "Payment before shipment":
					if (PaymntBefP==0) then begin testf = false; end;
				case "Balance payment amount":
					if (BalanceP==0) then begin testf = false; end;
				case "Old balance payment":
					if (OldBalancePayment==0) then begin testf = false; end;
			end;
		end;
		
		if (nonblank(RepSpec.f4) and nonblank(RepSpec.sEndDate) and testf==true) then begin
			switch (RepSpec.f4) begin
				case "Prepayment":
					if (AddMonth(RepSpec.sEndDate,3)<AddDay(POr.TransDate,2)) then begin 
						testf = false; 
					end;
				case "Payment before shipment":
					testf = false; 
					if (!blankdate(POr.IDMfrFinDate) and AddDay(POr.IDMfrFinDate,2)<AddMonth(RepSpec.sEndDate,3)) then begin
						testf = true; 
					end;
					if (!blankdate(POr.IDMfrFinConfirmDate) and AddDay(POr.IDMfrFinConfirmDate,2)<AddMonth(RepSpec.sEndDate,3)) then begin
						testf = true; 
					end;
				case "Balance payment amount":
					testf = false; 
					if (!blankdate(POr.IDMfrFinDate) and AddDay(POr.IDMfrFinDate,POr.DaysForBallancePayment)<AddMonth(RepSpec.sEndDate,3)) then begin
						testf = true; 
					end;
					if (!blankdate(POr.IDMfrFinConfirmDate) and AddDay(POr.IDMfrFinConfirmDate,POr.DaysForBallancePayment)<AddMonth(RepSpec.sEndDate,3)) then begin
						testf = true; 
					end;
				case "Old balance payment":
					if (AddMonth(RepSpec.sEndDate,3)<AddDay(POr.IDOldMfrFinConfirmDate,POr.DaysForBallancePayment)) then begin 
						testf = false; 
					end;
			end;
		end;
		
		if(testf)then begin
			if (nonblank(RepSpec.f6) and StringToLongInt(RepSpec.f6)!=locORserNr and RepSpec.f6!=locORCustNr) then begin
				testf = false;
			end;
			if (nonblank(RepSpec.f7) and RepSpec.f7 !=locORrClient) then begin
				testf = false;
			end;
			/*
			if (nonblank(RepSpec.f7) and StringToLongInt(RepSpec.f7)!=locORserNr and RepSpec.f7!=locORCustNr) then begin
				testf = false;
			end;
			if (nonblank(RepSpec.f7) and StringToLongInt(RepSpec.f7)==locORserNr and RepSpec.f7!=locORCustNr and POr.POClass!="CLIEN") then begin
				testf = false;
			end;
			*/
		end;
		
		if(testf)then begin
			startformat(15);
				if (locORserNr>0) then begin
					if(currentcompany==28)then begin
						outstring(48,0,locORCustNr,false); // Client order #
					end else begin
						outstring(48,0,locORserNr,false); // Client order #
					end;
				end else begin
					outstring(48,0,"",false); // Client order #
				end;
				if(currentcompany!=28)then begin
					if(POr.OrdNr>0)then begin
						outstring(1,0,POr.OrdNr,false); // Client order #
					end else begin
						outstring(1,0,"",false); // Client order #
					end;
				end else begin
					outstring(1,0,IDlocORserNr,false);
				end;
				outstring(2,0,locORrDate,false); // Client Order date
				outstring(3,0,locORrClient,false); // Client number
				
				outstring(4,0,POr.PlanShipDate,false); //Promised date
				if(currentcompany!=28)then begin
					outstring(5,"DblPOVc",POr.SerNr,false);//Po number
				end else begin
					outstring(5,0,POr.Reference,false);//Po number
				end;
				outstring(6,0,POr.Addr0,false);//Manufacturer name
				outstring(7,0,POr.TransDate,false);//Po date
				outstring(34,0,POr.IDPrjNum,false);//Project code
				outdate(8,0,POr.IDMfrFinDate,false);//Mfr finish date
				outstring(9,0,POr.IDProfInvNum,false);//Invoice number
				outdate(10,0,POr.IDMfrFinConfirmDate,false);//Invoice date
				outstring(11,0,POr.IDStatus,false);//Order status
				outstring(12,0,POr.UpdStatDate,false);//Update Ord. Status Date
				if(SMf)then begin
					// outstring(13,0,StatusMargin,false); //Order status margin
				end else begin
					// outstring(13,0,"",false); //Order status margin
				end;
				outstring(14,0,PTCCandIDNames(POr.PayDeal),false);//Payment terms
				outstring(15,0,POr.CurncyCode,false);//Currency code
				outstring(16,0,POr.Sum4,false);//Order amount
				// outdate(17,0,POr.IDMfrFinDate,false);
				// outdate(18,0,POr.IDMfrFinConfirmDate,false);//Payment date 
				outdate(18,0,lastPayDate,false);
				outstring(19,0,Sum,false);// Payment amount- должен рассчитаться в зависимости от условия оплаты
				// outdate(20,0,AddDay(POr.IDPrepayDate,-1),false);
				// outdate(21,0,AddDay(POr.IDMfrFinConfirmDate,3),false);
				
				
				
				outstring(22,0,POr.DaysForBallancePayment,false);// Days for balance payment- цифра из новой ячейки
				outstring(35,0,PreP,false);//Prepayment
				if (PPDLDatef) then begin
					outdate(37,0,AddDay(POr.TransDate,2),false);//Prepayment deadline
				end else begin
					outstring(37,0,"",false);
				end;
				// outstring(39,0,datediff(AddDay(POr.TransDate,2),currentdate),false); //margin//Prepayment margin
				outstring(36,0,PaymntBefP,false);//Payment before shipment
				if (PBSDLDatef) then begin
					outdate(41,0,AddDay(POr.IDMfrFinDate,2),false); // Estimated date of payment Before shipment
					outdate(38,0,AddDay(POr.IDMfrFinConfirmDate,2),false);//Payment before shipment deadline
				end else begin
					outstring(41,0,"",false);
					outstring(38,0,"",false);
				end;
				// outstring(40,0,datediff(AddDay(POr.IDMfrFinDate,2),currentdate),false); //margin Payment before shipment margin
				outstring(24,0,BalanceP,false);//Balance payment amount
				if (PDLDatef) then begin
					outdate(42,0,AddDay(POr.IDMfrFinDate,POr.DaysForBallancePayment),false);
					outdate(23,0,AddDay(POr.IDMfrFinConfirmDate,POr.DaysForBallancePayment),false);
				end else begin
					outstring(42,0,"",false);
					outstring(23,0,"",false);
				end;
				outstring(33,0,OldBalancePayment,false);//Old balance payment
				outdate(43,0,AddDay(POr.IDOldMfrFinConfirmDate,POr.DaysForBallancePayment),false);//Old balance payment deadline
				// outstring(25,0,datediff(AddDay(POr.IDMfrFinConfirmDate,POr.DaysForBallancePayment),currentdate),false);//Margin for balance payment- Balance payment deadline- сегодня
				outstring(26,0,RecDate,false); // Reception date- дата последнего поступления заказа
				outstring(27,0,POr.IDFreight,false);//Freight
				if(TrLf)then begin
					outstring(28,0,TrackSet,false);//Truck number
					outstring(30,0,Volume,false);//Volume
					outstring(29,0,Weight,false);//Weight
				end else begin
					outstring(28,0,"",false);
					outstring(29,0,"",false);
					outstring(30,0,"",false);
				end;
				if(POr.ShipCost == 0 and POr.CustomsCost == 0)then begin
					outstring(31,0,PUShipSum,false);
					outstring(32,0,PUCustomsSum,false);
				end else begin
					outstring(31,0,POr.ShipCost,false);
					outstring(32,0,POr.CustomsCost,false);
				end;
				if (POr.CurncyCode!="AZN") then begin
					Cost3CueBrVal = POr.Cost3 * POr.FrRate / POr.ToRateB1;
					outstring(46,0,Cost3CueBrVal,false);
				end else begin
					outstring(46,0,POr.Cost3,false);
				end;
				outstring(47,0,BrandCSum,false);
				if(nonblankdate(POr.IDMfrFinDate))then begin
					if(POr.IDFreight=="Air Freight")then begin
						outstring(44,0,  addday(POr.IDMfrFinDate,10),false);
					end else begin if(POr.IDFreight=="Road Freight") then begin
						outstring(44,0,  addday(POr.IDMfrFinDate,28),false);
						end else begin outstring(44,0,  "",false); end;
					end;
				end else begin outstring(44,0,  "",false); end;
				
				if(nonblankdate(POr.IDMfrFinConfirmDate))then begin
					if(POr.IDFreight=="Air Freight")then begin
						outstring(45,0,  addday(POr.IDMfrFinConfirmDate,10),false);
					end else begin if(POr.IDFreight=="Road Freight") then begin
						outstring(45,0,  addday(POr.IDMfrFinConfirmDate, 28),false);
						end else begin outstring(45,0,  "",false); end;
					end;
				end else begin outstring(45,0,  "",false); end;
				outstring(49,0,POr.Comment,false); // by Ira
			endformat;
		end;
	end;
	
	endjob;
	return;
end;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 17:21 29.10.2019












global   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 17:21 09.12.2019
procedure UndeliverableGoodsRn(record RcVc RepSpec)
begin
	record POVc POr,locPOr;
	record IntORVc IntORr;
	row POVc POrw;
	row IntORVc IntORrw;
	boolean TrHs,testf,filter,TrHs2;
	integer i, j;
	string 255 Brand;
	record INVc INr;
	record BPIBrandVc Brndr; 
	record RetPUVc RPUr;
	row RetPUVc RPUrw;
	vector val retQty;
	vector boolean vRetSerNrs, vPurchBrandf;
	
	
	
	Brndr.Code = "";
	while (loopmain(Brndr,1,true)) begin
		if (nonblank(RepSpec.f2) and nonblank(Brndr.Puchaser) and SetInSet(Brndr.Puchaser,RepSpec.f2)) then begin
			vPurchBrandf[Brndr.Code] = true;
		end;
		if (blank(RepSpec.f2)) then begin
			vPurchBrandf[Brndr.Code] = true;
		end;
	end;
	
	resetLoop (Brndr);
	
	StartReportnoheaderjob("Товары в пути");
	startformat(15);
		outstring(1,0,"Код товара",false);
		outstring(1,0,"Штрих-код товара",false);
		outstring(1,0,"Код поставщика",false);
		outstring(2,0,"Название",false);
		outstring(3,0,"Бренд",false);
		outstring(4,0,"Количество",false);
		outstring(5,0,"Цена",false);
		outstring(6,0,"Номер зак. пост.",false);
		outstring(7,0,"Тип зак. пост.",false);
		outstring(34,0,"Дата зак. пост.",false);
		outstring(35,0,"Order status",false);
		outstring(36,0,"Mfr finish date",false);
		outstring(37,0,"Comment",false);
	endformat;
	
	TrHs = true;
	POr.PUFlag = 0;
	POr.SerNr = "";
	while (LoopKey("PUFlag",POr,2,TrHs)) begin
		testf = true;
		if(POr.PUFlag!=0)then begin TrHs = false; testf = false; end;
		if(testf)then begin
			for (i=0;i<matrowcnt(POr);i=i+1) begin
				matrowget(POr,i,POrw);
				TrHs2 = true;
				RPUr.PONr = POr.SerNr;
				while (LoopKey("PONr",RPUr,1,TrHs2)) begin 
					if (RPUr.PONr!=POr.SerNr) then begin TrHs2 = false; end;
					if (TrHs2) then begin
						for (j=0;j<matrowcnt(RPUr);j=j+1) begin
							matrowget(RPUr,j,RPUrw);
							if (RPUrw.ArtCode == POrw.ArtCode and RPUrw.OrdRow==i and RPUr.OKFlag==1) then begin
								POrw.Quant = POrw.Quant - RPUrw.Quant;
								if (POrw.Quant == 0) then begin
									POrw.Quant = blankval;
								end;
							end;
						end;
					end;
				end;
				Resetloop(RPUr);
				
				if(POrw.Shipd2!=POrw.Quant and POrw.Quant>0)then begin
				
					INr.Code = POrw.ArtCode;
					if(ReadFirstMain(INr,1,true))then begin
						Brndr.Code = INr.BPIBrand;
						if(ReadFirstMain(Brndr,1,true))then begin
							Brand = Brndr.Name;
						end;
					end;
										
					filter = true;
					
					if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin filter = false; end;
					if(!vPurchBrandf[INr.BPIBrand] and nonblank(RepSpec.f2)) then begin filter = false; end;
					
					if(filter)then begin
					
						startformat(15);
							outstring(1,0,POrw.ArtCode,false);
							outstring(1,0,INr.BarCode,false);
							outstring(1,0,INr.AlternativeCode,false);
							outstring(2,0,POrw.Spec,false);
							outstring(3,0,Brand,false);
							if (POrw.Quant-POrw.Shipd2==-1) then begin
								outstring(4,0,0,false);
							end else begin
								outstring(4,0,POrw.Quant-POrw.Shipd2,false);
							end;
							outstring(5,0,POrw.Price,false);
							outstring(6,0,POr.SerNr,false);
							outstring(7,0,POr.POClass,false);
							outstring(34,0,POr.TransDate,false);
							outstring(35,0,POr.IDStatus,false);
							outdate(36,0,POr.IDMfrFinDate,false);//Mfr finish date
							outstring(37,0,POr.Reference,false);//comment from int order
						endformat;
					
					end;
				end;
			end;
		end;
	end;
	Resetloop (POr);
	
	
	TrHs = true;
	IntORr.StatusMark = 0;
	//IntORr.SerNr = "";
	while (LoopKey("SerNr",IntORr,2,TrHs)) begin
			
		testf = true;
		if(IntORr.StatusMark!=0)then begin TrHs = false; testf = false; end;
		if(testf)then begin
			for (i=0;i<matrowcnt(IntORr);i=i+1) begin
				matrowget(IntORr,i,IntORrw);
				
				if(IntORrw.Shipd2!=IntORrw.Quant)then begin
				
					INr.Code = IntORrw.ArtCode;
					if(ReadFirstMain(INr,1,true))then begin
						Brndr.Code = INr.BPIBrand;
						if(ReadFirstMain(Brndr,1,true))then begin
							Brand = Brndr.Name;
						end;
					end;
										
					filter = true;
					
					if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin filter = false; end;
					if(!vPurchBrandf[INr.BPIBrand] and nonblank(RepSpec.f2)) then begin filter = false; end;
					
					if(filter)then begin
					
						startformat(15);
							outstring(1,0,IntORrw.ArtCode,false);
							outstring(1,0,INr.BarCode,false);
							outstring(1,0,INr.AlternativeCode,false);
							outstring(2,0,IntORrw.Spec,false);
							outstring(3,0,Brand,false);
							if (IntORrw.Quant-IntORrw.Shipd2==-1) then begin
								outstring(4,0,0,false);
							end else begin
								outstring(4,0,IntORrw.Quant-IntORrw.Shipd2,false);
							end;
							outstring(5,0,IntORrw.Price,false);
							outstring(6,0,IntORr.SerNr,false);
							outstring(7,0,"BACKORDER",false);
							outstring(34,0,IntORr.TransDate,false);
							outstring(35,0,"",false);
							outdate(36,0,"",false);//Mfr finish date
							outstring(37,0,IntORr.Reference,false);//comment from int order
						endformat;
					
					end;
				end;
			end;
		end;
	end;
	Resetloop (IntORr);
	
	endjob;
	return;
end;   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 17:21 09.12.2019


global   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Irkan Ahmadov 17:21 02.06.2020
procedure OrderedGoodsRn(record RcVc RepSpec)
begin
	record POVc POr,locPOr;
	record IntORVc IntORr;
	row POVc POrw;
	row IntORVc IntORrw;
	boolean TrHs,testf,filter;
	integer i, j;
	string 255 Brand;
	record INVc INr;
	record BPIBrandVc Brndr; 
	record RetPUVc RPUr;
	row RetPUVc RPUrw;
	vector val retQty;
	
	StartReportnoheaderjob("Заказанные товары");
	startformat(15);
		outstring(1,0,"Код товара",false);
		outstring(1,0,"Штрих-код товара",false);
		outstring(1,0,"Код поставщика",false);
		outstring(2,0,"Название",false);
		outstring(3,0,"Бренд",false);
		outstring(4,0,"Количество",false);
		outstring(6,0,"Номер зак. пост.",false);
		outstring(7,0,"Тип зак. пост.",false);
		outstring(34,0,"Дата зак. пост.",false);
		outstring(35,0,"Order status",false);
		outstring(36,0,"Mfr finish date",false);
	endformat;
	
	TrHs = true;
	POr.PUFlag = 0;
	POr.SerNr = "";
	while (LoopKey("PUFlag",POr,2,TrHs)) begin
		testf = true;
		if(POr.PUFlag!=0)then begin TrHs = false; testf = false; end;
		if ((POr.TransDate<RepSpec.sStartDate) or (POr.TransDate>RepSpec.sEndDate)) then begin testf = false; end;
		if(testf)then begin
			for (i=0;i<matrowcnt(POr);i=i+1) begin
				matrowget(POr,i,POrw);
				
				RPUr.PONr = POr.SerNr;
				if (ReadFirstKey("PONr",RPUr,1,true)) then begin 
					for (j=0;j<matrowcnt(RPUr);j=j+1) begin
						matrowget(RPUr,j,RPUrw);
						if (RPUrw.ArtCode == POrw.ArtCode) then begin
							POrw.Quant = POrw.Quant - RPUrw.Quant;
							if (POrw.Quant == 0) then begin
								POrw.Quant = blankval;
							end;
						end;
					end;
				end;
				
				if(POrw.Shipd2!=POrw.Quant)then begin
				
					INr.Code = POrw.ArtCode;
					if(ReadFirstMain(INr,1,true))then begin
						Brndr.Code = INr.BPIBrand;
						if(ReadFirstMain(Brndr,1,true))then begin
							Brand = Brndr.Name;
						end;
					end;
										
					filter = true;
					
					if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin filter = false; end;
					if(filter)then begin
						startformat(15);
							outstring(1,0,POrw.ArtCode,false);
							outstring(1,0,INr.BarCode,false);
							outstring(1,0,INr.AlternativeCode,false);
							outstring(2,0,POrw.Spec,false);
							outstring(3,0,Brand,false);
							outstring(4,0,POrw.Quant-POrw.Shipd2,false);
							outstring(6,0,POr.SerNr,false);
							outstring(7,0,POr.POClass,false);
							outstring(34,0,POr.TransDate,false);
							outstring(35,0,POr.IDStatus,false);
							outdate(36,0,POr.IDMfrFinDate,false);//Mfr finish date
						endformat;
					
					end;
				end;
			end;
		end;
	end;
	Resetloop (POr);
	
	
	TrHs = true;
	IntORr.StatusMark = 0;
	//IntORr.SerNr = "";
	while (LoopKey("SerNr",IntORr,2,TrHs)) begin
		testf = true;
		if(IntORr.StatusMark!=0)then begin TrHs = false; testf = false; end;
		if(testf)then begin
			for (i=0;i<matrowcnt(IntORr);i=i+1) begin
				matrowget(IntORr,i,IntORrw);
				
				if(IntORrw.Shipd2!=IntORrw.Quant)then begin
				
					INr.Code = IntORrw.ArtCode;
					if(ReadFirstMain(INr,1,true))then begin
						Brndr.Code = INr.BPIBrand;
						if(ReadFirstMain(Brndr,1,true))then begin
							Brand = Brndr.Name;
						end;
					end;
										
					filter = true;
					
					if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin filter = false; end;
					if ((IntORr.TransDate<RepSpec.sStartDate) or (IntORr.TransDate>RepSpec.sEndDate)) then begin filter = false; end;
					if(filter)then begin
						startformat(15);
							outstring(1,0,IntORrw.ArtCode,false);
							outstring(1,0,INr.BarCode,false);
							outstring(1,0,INr.AlternativeCode,false);
							outstring(2,0,IntORrw.Spec,false);
							outstring(3,0,Brand,false);
							outstring(4,0,IntORrw.Quant-IntORrw.Shipd2,false);
							outstring(6,0,IntORr.SerNr,false);
							outstring(7,0,"BACKORDER",false);
							outstring(34,0,IntORr.TransDate,false);
							outstring(35,0,"",false);
							outdate(36,0,"",false);//Mfr finish date
						endformat;
					
					end;
				end;
			end;
		end;
	end;
	Resetloop (IntORr);
	
	endjob;
	return;
end;   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Irkan Ahmadov 17:21 02.06.2020



global   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Irkan Ahmadov 17:21 05.08.2020
procedure SaledGoodsRn(record RcVc RepSpec)
begin
	record IVVc IVr;
	row IVVc IVrw;
	boolean TrHs,testf,filter;
	integer i, j;
	string 255 Brand;
	record INVc INr;
	record BPIBrandVc Brndr; 
	
	StartReportnoheaderjob("Заказанные товары");
	startformat(15);
		outstring(1,0,"Малын коду",false);
		outstring(2,0,"Малын ады",false);
		outstring(3,0,"Юлчц ващиди",false);
		outstring(4,0,"Мигдары",false);
		outstring(5,0,"Гиймяти",false);
		outstring(6,0,"Мябляьи",false);
		outstring(7,0,"ЯДВ",false);
		outstring(8,0,"Жями",false);
	endformat;
	
	TrHs = true;
	IVr.OKFlag = 1;
	IVr.SerNr = "";
	while (LoopKey("OKFlag",IVr,1,TrHs)) begin
		testf = true;
		if(IVr.OKFlag!=1)then begin TrHs = false; testf = false; end;
		if ((IVr.TransDate<RepSpec.sStartDate) or (IVr.TransDate>RepSpec.sEndDate)) then begin testf = false; end;
		if(testf)then begin
			//logtext(0, "Transaction Date = " & IVr.TransDate);
			for (i=0;i<matrowcnt(IVr);i=i+1) begin
				matrowget(IVr,i,IVrw);
				
				INr.Code = IVrw.ArtCode;
				if(ReadFirstMain(INr,1,true))then begin
					Brndr.Code = INr.BPIBrand;
					if(ReadFirstMain(Brndr,1,true))then begin
						Brand = Brndr.Name;
					end;
				end;
									
				filter = true;
				
				if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin filter = false; end;
				if(blank(IVrw.ArtCode) and len(IVrw.ArtCode)==0)then begin filter = false; end;
				if(IVrw.Quant<=0)then begin filter = false; end;
				if(filter)then begin
					startformat(15);
						outstring(1,0,IVrw.ArtCode,false);
						outstring(2,0,IVrw.Spec,false);
						outstring(3,0,"Ядяд",false);
						outstring(4,0,IVrw.Quant,false);
						outstring(5,0,IVrw.Sum/IVrw.Quant,false);
						outstring(6,0,IVrw.Sum,false);
						outstring(7,0,"0",false);
						outstring(8,0,IVrw.Sum,false);
					endformat;
				
				end;
			end;
		end;
	end;
	Resetloop (IVr);
	
	endjob;
	return;
end;   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Irkan Ahmadov 17:21 05.08.2020



global   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Irkan Ahmadov 17:21 08.05.2020
procedure ExportFromIncomeRn(record RcVc RepSpec)
begin
	record PUVc PUr;
	row PUVc PUrw;
	boolean TrHs,testf,filter;
	integer i;
	string 255 Brand;
	record INVc INr;
	record BPIBrandVc Brndr; 
	record POVc POr;
	record BPIBrandVc BPIBrandr;
	
	Brand="";
	
	
	StartReportnoheaderjob("Выгрузка из потуплений");
	startformat(15);
		outstring(1,0,"Товар",false);
		outstring(2,0,"Товар Пост.",false);
		outstring(3,0,"Кол-во",false);
		outstring(4,0,"Ед",false);
		outstring(5,0,"Наименование",false);
		outstring(6,0,"Цена",false);
		outstring(7,0,"Сумма валюта",false);
		outstring(8,0,"Валюта",false);
		outstring(9,0,"Себест",false);
		outstring(10,0,"Сумма",false);
		outstring(11,0,"Дата поступления",false);
		outstring(12,0,"Поставщик",false);
		outstring(13,0,"Но.Пост",false);
		outstring(14,0,"Но.Заказ п.",false);
		outstring(15,0,"Коммент.",false);
		outstring(16,0,"Бренд.",false);
		outstring(17,0,"Склад",false);
	endformat;
	
	TrHs = true;
	PUr.OKFlag=1;
	while (LoopKey("OKFlag",PUr,1,TrHs)) begin
		testf = true;
		if(PUr.OKFlag!=1)then begin TrHs = false; end;
		if ((PUr.TransDate<RepSpec.sStartDate) or (PUr.TransDate>RepSpec.sEndDate)) then begin testf = false; end;
		if(nonblank(RepSpec.f2) and PUr.Location!=RepSpec.f2)then begin testf = false; end;
		if(testf)then begin
			for (i=0;i<matrowcnt(PUr);i=i+1) begin
				matrowget(PUr,i,PUrw);
				
				INr.Code = PUrw.ArtCode;
				if(ReadFirstMain(INr,1,true))then begin
					Brndr.Code = INr.BPIBrand;
					if(ReadFirstMain(Brndr,1,true))then begin
						Brand = Brndr.Name;
					end;
				end;
									
				filter = true;
				
				if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin filter = false; end;
				
				if(filter)then begin
				
					startformat(15);
						outstring(1,0,PUrw.ArtCode,false);
						outstring(2,0,PUrw.VIReconComment,false);
						outstring(3,0,PUrw.Quant,false);
						outstring(4,0,PUrw.UnitCode,false);
						outstring(5,0,PUrw.Spec,false);
						outstring(6,0,PUrw.UPrice,false);
						outstring(7,0,PUrw.UPrice*PUrw.Quant,false);
						outstring(8,0,PUr.CurncyCode,false);
						outstring(9,0,PUrw.CostPrice,false);
						outstring(10,0,PUrw.Sum,false);
						outdate(11,0,PUr.TransDate,false);
						if(currentcompany==28) begin 
							outstring(12,0,PUr.VEName,false);
						end else begin 
							outstring(12,0,PUr.VECode,false);
						end;
						outstring(13,0,PUr.SerNr,false);
						if(currentcompany==28) begin 
							POr.SerNr = PUr.PONr;
							if (ReadFirstMain(POr,1,true)) then begin
								outstring(14,0,POr.Reference,false);
							end else begin 
								outstring(14,0,"",false);
							end;
						end else begin 
							outstring(14,0,PUr.PONr,false);
						end;
						outstring(15,0,PUr.Comment,false);
						
						BPIBrandr.Code = INr.BPIBrand;
						if(ReadFirstMain(BPIBrandr,1,true))then begin
							outstring(16,0,BPIBrandr.Name,false);
						end else begin
							outstring(16,0,"",false);
						end;
						
						outstring(17,0,PUr.Location,false);
					endformat;
				end;
			end;
		end;
	end;
	Resetloop (PUr);
	
	endjob;
	return;
end;   // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Irkan Ahmadov 17:21 08.05.2020














global
procedure ShipRn(record RcVc RepSpec)
begin
  record SHVc SHr;
  record LocationVc Locr;
  Boolean TrHs;
  Boolean testf;
  LongInt frorder,toorder;
  LongInt afr,ato;
  String 60 frcc,tocc;
  String 255 ckey;
  String 60 lastcust;
  Integer keys;
  val sht,ort,rowt;
  row SHVc SHrw;
  Integer i;
  Integer rwcnt;
  string 255 tstr;
  Integer rw;
  record ORVc ORr;
  val sum;
  Integer Printer;
  record INVc INr;
  string 20 frit,toit;
  string 20 frin,toin;
  string 255 itsz,mask,subsets,mskrep;
	record AZHatSHBlock AZHatSHb;
	row ORVc ORrw;
	longint curtick;
	
	curtick = getcurtick();
	blockload(AZHatSHb);
  Printer = 1;
  frit = FirstInRange(RepSpec.Stext,20);
  toit = LastInRange(RepSpec.Stext,20);
  frin = FirstInRange(RepSpec.LastAcc,20);
  toin = LastInRange(RepSpec.LastAcc,20);
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  frorder = FirstInRange(RepSpec.TransStr,20);
  toorder =  LastInRange(RepSpec.TransStr,20);
  frcc = FirstInRange(RepSpec.f2,20);
  tocc = LastInRange(RepSpec.f2,20);
  lastcust = "";
	if(Currentcompany!=29)then begin
		StartReportJob(USetStr(2581));
		rw = 1;
		HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
		Header(rw,tstr,1);
		rw = rw + 1;
		HTDetailLevel(RepSpec.ArtMode,tstr);
		Header(rw,tstr,0);
		HTNr(2588,2582,afr,ato,tstr);
		Header(rw,tstr,1);
		rw = rw + 1;
		HTNr(2589,2584,frorder,toorder,tstr);
		Header(rw,tstr,0);
		HTCusts(frcc,tocc,tstr);
		Header(rw,tstr,1);
		rw = rw + 1; 
		if (nonblank(RepSpec.f3)) then begin
			tstr = USetStr(2587);
			tstr = tstr & RepSpec.f3;
			Header(rw,tstr,0);
		end;
		if (nonblank(RepSpec.f4)) then begin
			tstr = USetStr(2768);
			tstr = tstr & RepSpec.f4;
			Header(rw,tstr,1);
			rw = rw + 1;
		end;
		HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
		if (nonblank(tstr)) then begin
			Header(rw,tstr,1);
		end;
		if (nonblank(RepSpec.f6)) then begin
			HTLocationGroup(RepSpec.f6,RepSpec.f6,tstr);
			Header(rw,tstr,0);
		end;
		if (nonblank(RepSpec.f7)) then begin
			HTLocationClassification(RepSpec.f7,RepSpec.f7,tstr);
			Header(rw,tstr,1);
			rw = rw + 1;
		end;
		HTItem(RepSpec.LastAcc,tstr);
		if (nonblank(tstr)) then begin
			rw = rw + 1;
			Header(rw,tstr,1);
			rw = rw + 1;
		end;
		if (HasItemGroups) then begin
			HTArtGroup(RepSpec.Stext,tstr);
			if (nonblank(tstr)) then begin
				Header(rw,tstr,1);
				rw = rw + 1;
			end;
		end;
		if (HasItemClassification) then begin
			HTItemClass(RepSpec.f8,tstr);
			if (nonblank(tstr)) then begin
				Header(rw,tstr,1);
				rw = rw + 1;
			end;
		end;  
		EndHeader;
  end else begin
		StartReportnoheaderjob(USetStr(2581));
		if(RepSpec.flags[1]==1 and RepSpec.flags[2]==0)then begin
			StartFormat(15);
			OutString(200,0,AZHatSHb.Hat1,false);
			EndFormat;
			StartFormat(15);
			OutString(185,0,AZHatSHb.Hat2,false);
			EndFormat;
			StartFormat(15);
			OutString(180,0,AZHatSHb.Hat3,false);
			EndFormat;
			StartFormat(15);
			OutString(213,0,AZHatSHb.Hat4,false);
			EndFormat;
			StartFormat(15);
			OutString(40,0,"",false);
			EndFormat;
			StartFormat(15);
			OutString(40,0,"",false);
			EndFormat;
			StartFormat(15);
			OutString(40,0,AZHatSHb.Text1,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text2,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text3,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text4,false);
			EndFormat;
			StartFormat(15);
			OutString(20,0,AZHatSHb.Text5,false);
			EndFormat;
		end;
	end;
  if (RepSpec.ArtMode==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2582),false);
    OutString(60,0,USetStr(2583),false);
    OutString(130,0,USetStr(2584),false);
    OutString(200,0,USetStr(2585),false);
    OutString(260,0,USetStr(2586),false);
		OutString(320,0,"№ сч.Btrx",false);
    OutStringAdjustBiDi(480,0,USetStr(2928),true,M4Val,520);
    EndFormat;
  end;
  if (RepSpec.ArtMode==1) then begin
    StartFormat(15);
    OutString(0,0,USetStr(2582),false);
    OutString(60,0,USetStr(2583),false);
    OutString(130,0,USetStr(2584),false);
    OutString(200,0,USetStr(2585),false);
    OutString(260,0,USetStr(2586),false);
		OutString(320,0,"№ сч.Btrx",false);
    OutStringAdjustBiDi(420,0,USetStr(2590),true,M4Val,460);
    OutStringAdjustBiDi(480,0,USetStr(2591),true,M4Val,520);
    EndFormat;
  end;

  if (RepSpec.flags[3]==1) then begin
   ckey = "CustCode";
   SHr.CustCode = frcc;
   SHr.SerNr = afr;
   keys = 2;
  end else begin
   ckey = "SerNr";
   SHr.SerNr = afr;
   keys = 1;
  end;

  if (RepSpec.ArtMode==0) then  begin
   Black_Divider(0,1);
  end;

  TrHs = true;
  while LoopKey(ckey,SHr,keys,TrHs) begin
   testf = true;
   if (RepSpec.flags[3]==1) then begin
    if nonblank(tocc) then begin
      if (SHr.CustCode>tocc) then begin
       TrHs = false;
      end;
    end;
    if (ato<>-1) then begin
      if (SHr.SerNr>ato) then begin
      TrHS = false;
      end;
    end;
   end else begin
    if (ato<>-1) then begin
      if (SHr.SerNr>ato) then begin
        TrHs = false;
      end;
    end;
    if nonblank(RepSpec.f2) then begin
      if ((tocc<SHr.CustCode) or (frcc>SHr.CustCode)) then begin
        testf = false;
      end;
    end;
   end;
   if (TrHs==false) then begin
    testf = false;
   end;
   if (testf) then begin
    if nonblank(RepSpec.TransStr) then begin
      if ((SHr.OrderNr<frorder) or (SHr.OrderNr>toorder)) then begin
        testf = false;
      end;
    end;
    if ((SHr.ShipDate<RepSpec.sStartDate) or (SHr.ShipDate>RepSpec.sEndDate)) then begin
        testf = false;
    end;
    if nonblank(RepSpec.f3) then begin
      if (RepSpec.f3<>SHr.ShipMode) then begin
        testf = false;
      end;
    end;
    if (nonblank(RepSpec.f5)) then begin
      if (SHr.SHClass!=RepSpec.f5) then begin
        testf = false;
      end;
    end;
    if ((RepSpec.flags[1]==0) and (SHr.OKFlag==0)) then begin
      testf = false;
    end;
    if ((RepSpec.flags[2]==0) and (SHr.OKFlag<>0)) then begin
      testf = false;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f6) or nonblank(RepSpec.f7)) then begin
        Locr.Code = SHr.Location;
        ReadFirstMain(Locr,1,true);
        if (nonblank(RepSpec.f6)) then begin
          if (Locr.Group!=RepSpec.f6) then begin testf = false; end;
        end;
        if (nonblank(RepSpec.f7)) then begin
          if (SetInSet(RepSpec.f7,Locr.Classification)==false) then begin testf = false; end;
        end;
      end;
    end;
    if (testf) then begin
      if (nonblank(RepSpec.f4)) then begin
         testf = false;
         rwcnt = MatRowCnt(SHr);
         for (i = 0 ; i<rwcnt ;i=i+1) begin
           MatRowGet(SHr,i,SHrw);
           tstr = SHrw.Location;
           if (blank(tstr)) then begin
             tstr = SHr.Location;
           end; 
           if (tstr==RepSpec.f4) then begin
             testf = true;
             i = rwcnt;
           end;
         end;
      end;
    end;    

    if (RepSpec.ArtMode==1) then begin
      if (testf) then begin
        rwcnt = MatRowCnt(SHr);
        for (i=0;i<rwcnt;i=i+1) begin
          testf = true;
          MatRowGet(SHr,i,SHrw);
          if (nonblank(RepSpec.LastAcc)) or (nonblank(RepSpec.Stext) or (nonblank(RepSpec.f8))) then begin
            testf = ReadFirstItem(SHrw.ArtCode,INr,false,true);
          end else begin
            i = rwcnt;
          end;
          if (testf) then begin 
            if (nonblank(RepSpec.LastAcc)) then begin
              testf = false;
              if (FindItemVAR(INr.Code,itsz,mask,mskrep,subsets)) then begin
                if (RepSpec.LastAcc==SHrw.ArtCode) or (RepSpec.LastAcc==INr.Code) then begin 
                  testf = true;              
                end;
              end else begin
                if (INr.Code>=frin) and (INr.Code<=toin) then begin 
                  testf = true;              
                end; 
              end;
            end;
            if (testf) then begin 
              if (nonblank(RepSpec.Stext)) then begin
                testf = false;
                if (INr.Group>=frit) and (INr.Group<=toit) then begin
                  testf = true;
                end;
              end;
            end;
            if (testf) then begin
              if (nonblank(RepSpec.f8)) then begin
                testf = SetInSet2(RepSpec.f8,INr.DispGroups);
              end;           
            end;
            if (testf) then begin
              i = rwcnt;
            end;
          end;
        end;
      end;
    end;
      
    if (testf) then begin
      if (RepSpec.flags[3]==1) then begin
       if blank(lastcust) then begin
        lastcust=SHr.CustCode;
       end;
       if (lastcust<>SHr.CustCode) then begin
        if (RepSpec.Media==Printer) then begin
          NewPage(false);
        end;
        lastcust = SHr.CustCode;
       end;
      end;
      if RepSpec.ArtMode==1 then begin
        Black_Divider(0,1);
        RepShip(RepSpec,SHr,ort,sht);
      end;
      if RepSpec.ArtMode==0 then begin
        rowt = 0;
				if(Currentcompany==29)then begin 
					ORr.SerNr = SHr.OrderNr;
					if(ReadFirstMain(ORr,1,true))then begin end;
				end;
        rwcnt = MatRowCnt(SHr);
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(SHr,i,SHrw);
          testf = true;
          if (nonblank(RepSpec.f4)) then begin
            tstr = SHrw.Location;
            if (blank(tstr)) then begin
              tstr = SHr.Location;
            end; 
            if (tstr!=RepSpec.f4) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
						if(currentcompany!=29)then begin
							sum = SHrw.FIFO*SHrw.Ship;
						end else begin
							matrowget(ORr,SHrw.OrdRow,ORrw);
							sum = ORrw.Sum;
						end;
            rowt = rowt+sum;
          end;
        end;
        StartFormat(15);
        OutLongInt(0,"DblSHVc",SHr.SerNr,false);
        OutDate(60,0,SHr.ShipDate,false);
        OutLongInt(130,0,SHr.OrderNr,false);
        OutString(200,0,SHr.CustCode,false);
        OutString(260,0,SHr.Addr0,false);
				if(Currentcompany==29)then begin 
					ORr.SerNr = SHr.OrderNr;
					if(ReadFirstMain(ORr,1,true))then begin
						OutLongInt(320,0,ORr.CustOrdNr,false);
					end;
				end;
        OutValBiDi(480,0,rowt,M4Val,true,520);
        EndFormat;
		
				if(Currentcompany==29)then begin
					StartFormat(15);
						OutString(30,0,"Товар",false);
						OutString(75,0,"Наимен.",false);
						OutString(160,0,"Сер.№",false);
						OutString(250,0,"Кол.",false);
						OutString(290,0,"Цена",false);
						OutString(320,0,"Арт.К.И",false);
						OutString(450,0,"Скидка",true);
						OutString(480,0,"Сумма",true);
					EndFormat;
					rwcnt = MatRowCnt(SHr);
					for (i=0; i<rwcnt; i=i+1) begin
						MatRowGet(SHr,i,SHrw);
						testf = true;
						if (nonblank(RepSpec.f4)) then begin
							tstr = SHrw.Location;
							if (blank(tstr)) then begin
								tstr = SHr.Location;
							end; 
							if (tstr!=RepSpec.f4) then begin
								testf = false;
							end;
						end;
						if (testf) then begin
							StartFormat(15);
								OutString(30,0,SHrw.ArtCode,false);
								OutString(75,0,SHrw.Spec,false);
								OutString(160,0,SHrw.SerialNr,false);
								OutString(250,0,SHrw.Ship,false);
								OutString(290,0,SHrw.BasePrice,false);
								matrowget(ORr,SHrw.OrdRow,ORrw);
								if(ORr.OrderClass!="EXTPR")then begin
									OutString(320,0,right(ORrw.GlobalItemArtCode,len(ORrw.GlobalItemArtCode)-9),false);
								end else begin
									INr.Code = SHrw.ArtCode;
									if(ReadFirstMain(INr,1,true))then begin
										OutString(320,0,INr.AlternativeCode,false);
									end else begin
										OutString(320,0,"",false);
									end;
								end;
								OutValBiDi(450,0,ORrw.vRebate,M4Val,true,520);
								OutValBiDi(480,0,ORrw.Sum,M4Val,true,520);
							EndFormat;
						end;
					end;
					Black_Divider(0,1);
				end;
        sht = sht + rowt;
        ORr.SerNr = SHr.OrderNr;
        if ReadFirstMain(ORr,1,true) then begin
          if (SHr.CustCode<>ORr.CustCode) then begin
           StartFormat(15);
           OutString(100,0,UsetStr(1251),false);
           EndFormat;
          end;
        end else begin
          StartFormat(15);
          OutString(100,0,UsetStr(1251),false);
          EndFormat;
        end;
      end;
     end;
   end;
  end;
  Black_Divider(0,1);
  if RepSpec.ArtMode==0 then begin
    StartFormat(15);
    OutValBiDi(480,0,sht,M4Val,true,520);
    EndFormat;
  end;
  if RepSpec.ArtMode==1 then begin
    StartFormat(15);
    OutValBiDi(480,0,sht,M4Val,true,520);
    EndFormat;
  end;
	if((RepSpec.flags[1]==1 and RepSpec.flags[2]==0) and Currentcompany==29)then begin
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text6,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text7,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text8,false);
		OutString(300,0,AZHatSHb.Text9,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,AZHatSHb.Text10,false);
		OutString(300,0,AZHatSHb.Text11,false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"",false);
		OutString(300,0,"",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"________________________________________",false);
		OutString(300,0,"________________________________________",false);
		EndFormat;
		StartFormat(15);
		OutString(20,0,"M.Y",false);
		OutString(300,0,"M.Y",false);
		EndFormat;
	end;
  EndJob;
	LogProcTime("ShipRn",getcurtick() - curtick);
  return;
end;
