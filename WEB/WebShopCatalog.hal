//server-onlyexternal procedure ExtractObj(string,var Integer,var string);external function string 255 StripCharacter(string,string);external function string 255 ReplaceCharByString(string,string,string);remote function boolean CompanyIsJWLikeCompany(Integer);external function string 255 StrReplace(string,string,string);// Edit ************************** Tuesday, 3 October 2017 17:25:37external function string 255 imgStrReplace(string);// Edit ************************** Tuesday, 10 October 2017 15:20:55SetLangMode(LangRussian,"RUS",0);function string 255 PrepareString(string instr)begin  string 255 res;      res = StripCharacter(instr,Chr(34)); //Chr(34) -> "    res = ReplaceCharByString(res,"\\","\\\\");    PrepareString = res;  return;end;function boolean FindTextInArea(string find,area farea)begin	boolean res;	longint pos,i,lenth,lenarea;	string 200 sfind,sfind1;	area alentest;		addtexttoarea(find,alentest);	lenarea = GetAreaLength(alentest);	sfind1 = getstringfromarea(alentest,0,lenarea);	res = false;	lenth = GetAreaLength(farea);	if(lenth>=lenarea)then begin		For(i=0;i<=lenth-lenarea;i=i+1) begin			sfind = getstringfromarea(farea,i,lenarea);			if(UpperCase(sfind)==UpperCase(sfind1))then begin				res = true;				goto LFind;			end;		end;	end; LFind:;		FindTextInArea = res;return;end;function integer CheckRequestForSend(area areceived,var string opencurlybr,var string closecurlybr,var string opensqrbr,var string closesqrbr,var string paws,var string kpaws,var string colon,var string space,var string nextline,var string comma)begin	  LongInt lines;  integer res;  	res = 0;	lines = GetAreaLength(areceived);	if (lines==0) then begin		res = 1;				opencurlybr = "{";  	closecurlybr = "}";  	opensqrbr = "[";  	closesqrbr = "]";  	paws = "\"";  	kpaws = "\"";  	colon = ":";  	space = " ";  	nextline = chr(13) & chr(10);  	comma = ",";	end else begin		if (FindTextInArea("status: 'OK'",areceived) or FindTextInArea("status: \"OK\"",areceived) or FindTextInArea("status: OK",areceived)) then begin			res = 2;		end else begin			if (FindTextInArea("FAIL",areceived)) then begin				res = 3;			end;		end;	end;  //logtext(0,"Check request: " & res); CheckRequestForSend = res; return;end;procedure CheckImagePath(string filename1,string filepathP,var string filepathC)beginstring 50 filename;	  filename = imgStrReplace(filename1);    if (FILEEXISTS(filepathP & filename & ".jpeg")) then begin		filepathC = filepathP & filename & ".jpeg";	end else begin		if (FILEEXISTS(filepathP & filename & ".png")) then begin			filepathC = filepathP & filename & ".png";		end else begin			if (FILEEXISTS(filepathP & filename & ".jpg")) then begin				filepathC = filepathP & filename & ".jpg";			end;		end;	end;	  return;end;function boolean IncludeCompany(integer compcode,string regist,var string suff)begin  boolean res;      res = false;    suff = "_cmpnr_" & compcode;        switch (compcode) begin      case 1: res = true;      case 2: res = true;      case 3: res = true;      case 4: res = true;      case 5: res = true;      case 6: res = true;      case 7: res = true;      case 8: res = true;      case 9: res = true;      case 10: res = false;      case 11: res = false;      case 12: res = false;      case 13: res = true;      case 14: res = true;      case 15: res = true;      case 16: res = true;      case 17: res = true;      case 18: res = true;      case 19: res = true;      case 20: res = true;      case 21: res = true;      case 22: res = true;      otherwise res = false;    end;        if (res==true) then begin      switch (regist) begin        case "INVc":          switch (compcode) begin            case 3: suff = "_cmpnr_3,17,19,20,21,22";            case 17: res = false;            case 19: res = false;            case 20: res = false;            case 21: res = false;            case 22: res = false;          end;        case "DIVc":          switch (compcode) begin            case 3: suff = "_cmpnr_3,17,19,20,21,22";            case 17: res = false;            case 19: res = false;            case 20: res = false;            case 21: res = false;            case 22: res = false;          end;        case "ItemStatusVc":      end;    end;      IncludeCompany = res;  return;end;globalupdating function boolean HandleWebSendItems(integer client, longint itemslimit)begin  record INVc INr;  row INVc INrw;  record DIVc DIr;  record PLVc PLr;  record CompaniesBlock Compb;  row CompaniesBlock Comprw;  record WebSyncBlock WSB;  string 2 opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,comma;  string 5 nextline;  boolean TrHs,testf,res,openjson,includecomp;  integer newrec;  integer sendf;  integer pos,i,j,rwcnt,rwcnt1,oldcompany,foundcnt;  string 20 classfound,brand,type,collection,suff,category;  string 255 azedescr,rusdescr,engdescr,azename,rusname,engname,azetech,rustech,engtech,filename;  string 100 filepathP,filepathC;  area imagearea,ames,areceived;  LongInt arelen,foundflag,lastflag;  val price;  		res = false;	openjson = false;	logtext(0,"WebSendItems from IP: " & WebRemoteIpAddress & "; client #" & client);	webgetpostdata(areceived);  WRITEAREATOFILE(areceived,"Received_Goods.txt",0);  LogText(0,"Postdata: " & GetStringFromArea(areceived,0,GetAreaLength(areceived)));		sendf = CheckRequestForSend(areceived,opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,nextline,comma);		switch (sendf) begin	  case 0:		LogText(0,"Error: Unknown command for goods");		goto LHandleWebSendItems;	  case 3:	 	LogText(0,"Goods posting failed");		goto LHandleWebSendItems;	end;  			filename = "armess.txt";	CreateFile(filename);	CloseFile;		oldcompany = CurrentCompany;    BlockLoad(Compb);  rwcnt1 = MatRowCnt(Compb);    for (j=0;j<rwcnt1;j=j+1) begin  	MatRowGet(Compb,j,Comprw);      	includecomp = IncludeCompany(StringToInt(Comprw.CompCode),"INVc",suff);  	  	if (includecomp and SetCompanyCode(Comprw.CompCode,false) and Comprw.ActiveStatus==0) then begin  		BlockLoad(WSB);			if (sendf==1) then begin				switch (client) begin					case 1: foundflag = WSB.Items1;					case 2: foundflag = WSB.Items2;				end;								switch (CurrentCompany) begin				  case 1: category = "Gifts";				  otherwise				    if (CompanyIsJWLikeCompany(CurrentCompany)) then begin      	      category = "Jewe";      	    end else begin      	      category = "Home";      	    end;				end;							filepathP = "webcust/" & Comprw.ShortName & "/";				//suff = "_cmpnr_" & Comprw.CompCode;								foundcnt = 0;				INr.SyncFlag = foundflag;				TrHs = true;				while (LoopKey("SyncFlag",INr,1,TrHs)) begin					testf = true;					if (INr.SyncFlag<=foundflag) then begin testf = false; end;					if (itemslimit>-1 and foundcnt>itemslimit) then begin  TrHs = false; testf = false; j = rwcnt1; end;					if (testf) then begin						SetAreaZeroSize(ames);						if (openjson==false) then begin						  AddTextToArea(opensqrbr & nextline, ames);						  openjson = true;						end else begin						  AddTextToArea(closecurlybr & comma & nextline, ames);						end;						brand = "";						type = "";						pos = 0;						classfound = "";						ExtractObj(INr.DispGroups,pos,classfound);						while(nonblank(classfound)) begin							DIr.Code = classfound;							readfirstmain(DIr,1,true);							if(DIr.CType=="BRAND")then begin								brand = DIr.Code & suff;							end;							if(DIr.CType=="TYPE")then begin								type = DIr.Code & suff;							end;							if(DIr.CType=="COLLECTION" or Left(DIr.CType,5)=="COLL_")then begin								collection = DIr.Code & suff;							end;							ExtractObj(INr.DispGroups,pos,classfound);						end;												AddTextToArea(opencurlybr & nextline, ames);						AddTextToArea(kpaws & "typeid" & kpaws & colon & space & paws & type & paws & comma & nextline, ames);						AddTextToArea(kpaws & "brandid" & kpaws & colon & space & paws & brand & paws & comma & nextline, ames);						AddTextToArea(kpaws & "uid" & kpaws & colon & space & paws & INr.Code & suff & paws & comma & nextline, ames);						AddTextToArea(kpaws & "code" & kpaws & colon & space & paws & INr.Code & paws & comma & nextline, ames);						AddTextToArea(kpaws & "collection" & kpaws & colon & space & paws & collection & paws & comma & nextline, ames);						AddTextToArea(kpaws & "category" & kpaws & colon & space & paws & category & paws & comma & nextline, ames);						azename = "";						azedescr = "";						rusname = "";						rusdescr = "";						engname = "";						engdescr = "";						azetech = "";						rustech = "";						engtech = "";						rwcnt = MatRowCnt(INr);						for (i=0;i<rwcnt;i=i+1) begin							MatRowGet(INr,i,INrw);							if (UpperCase(INrw.LangCode)=="AZ" or UpperCase(INrw.LangCode)=="AZE") then begin								azename = PrepareString(INrw.Text);								azedescr = PrepareString(INrw.Description);								azetech = PrepareString(INrw.Technical);							end;							if (UpperCase(INrw.LangCode)=="RU" or UpperCase(INrw.LangCode)=="RUS") then begin								rusname = PrepareString(INrw.Text);								rusdescr = PrepareString(INrw.Description);								rustech = PrepareString(INrw.Technical);							end;							if (UpperCase(INrw.LangCode)=="EN" or UpperCase(INrw.LangCode)=="ENG") then begin								engname = PrepareString(INrw.Text);								engdescr = PrepareString(INrw.Description);								engtech = PrepareString(INrw.Technical);							end;						end;						if (Blank(engname)) then begin							engname = PrepareString(INr.Name);						end;												AddTextToArea(kpaws & "title" & kpaws & colon & space & opensqrbr & opencurlybr, ames);						AddTextToArea(kpaws & "az" & kpaws & colon & space & paws & azename & paws & comma & space, ames);						AddTextToArea(kpaws & "ru" & kpaws & colon & space & paws & rusname & paws & comma & space, ames);						AddTextToArea(kpaws & "en" & kpaws & colon & space & paws & engname & paws, ames);						AddTextToArea(closecurlybr & closesqrbr & comma & nextline, ames);												PLr.PLCode = "RRP";		        PLr.ArtCode = INr.Code;		        ReadFirstMain(PLr,2,true);		        if (Blank(PLr.ExVatPrice) or PLr.ExVatPrice==0) then begin		          price = -1;		        end else begin		          price = PLr.ExVatPrice;		        end;		        						AddTextToArea(kpaws & "price" & kpaws & colon & space & price & comma & nextline, ames);												AddTextToArea(kpaws & "description" & kpaws & colon & space & opensqrbr & opencurlybr, ames);						AddTextToArea(kpaws & "az" & kpaws & colon & space & paws & azedescr & paws & comma & space, ames);						AddTextToArea(kpaws & "ru" & kpaws & colon & space & paws & rusdescr & paws & comma & space, ames);						AddTextToArea(kpaws & "en" & kpaws & colon & space & paws & engdescr & paws, ames);						AddTextToArea(closecurlybr & closesqrbr & comma & nextline, ames);												AddTextToArea(kpaws & "technical" & kpaws & colon & space & opensqrbr & opencurlybr, ames); // data for "technical" not selected						AddTextToArea(kpaws & "az" & kpaws & colon & space & paws & azetech & paws & comma & space, ames);						AddTextToArea(kpaws & "ru" & kpaws & colon & space & paws & rustech & paws & comma & space, ames);						AddTextToArea(kpaws & "en" & kpaws & colon & space & paws & engtech & paws, ames);						AddTextToArea(closecurlybr & closesqrbr & comma & nextline, ames);												filepathC = "";						if (StringToInt(Comprw.CompCode)==9) then begin							CheckImagePath(INr.AlternativeCode,filepathP,filepathC);						end else begin							CheckImagePath(INr.Code,filepathP,filepathC);						end;												AddTextToArea(kpaws & "image" & kpaws & colon & space & paws, ames);						if (NonBlank(filepathC)) then begin							/*SetAreaZeroSize(imagearea);							AddFileToArea(filepathC,imagearea,true);							InsertAreaBeforeArea(ames,imagearea);							SetAreaZeroSize(ames);							GetAreaFromArea(imagearea,0,GetAreaLength(imagearea),ames);*/							filepathC = Right(filepathC,Len(filepathC)-Len("webcust"));							AddTextToArea(filepathC, ames);						end;						AddTextToArea(paws & comma & nextline, ames);								if (INr.SavedCount<=1) then begin							newrec = 1;						end else begin							newrec = 0;						end;						AddTextToArea(kpaws & "newrecord" & kpaws & colon & space & newrec & nextline, ames);						//AddTextToArea(closecurlybr & nextline, ames);				  	WriteAreaToFile(ames,filename,1);				  	if (lastflag < INr.SyncFlag) then begin				  		lastflag = INr.SyncFlag;				  	end;				  	foundcnt = foundcnt + 1;						end;				end; RESETLOOP(INr);								switch (client) begin					case 1: WSB.ItemsTemp1 = lastflag;					case 2: WSB.ItemsTemp2 = lastflag;				end;				LogText(0,"Goods synchronization for company " & Comprw.CompName);			end;			if (sendf==2) begin				switch (client) begin					case 1:   					if (WSB.ItemsTemp1!=-1) then begin  					  WSB.Items1 = WSB.ItemsTemp1;  					  WSB.ItemsTemp1 = -1;  					end;						case 2:   					if (WSB.ItemsTemp2!=-1) then begin  					  WSB.Items2 = WSB.ItemsTemp2;  					  WSB.ItemsTemp2 = -1;  					end;				end;				LogText(0,"Goods are synchronized for company " & Comprw.CompName);			end;			BlockStore(WSB);		end;	end;		if (openjson) then begin	 AddTextToArea(closecurlybr & nextline, ames);	 AddTextToArea(closesqrbr & nextline, ames);	 WriteAreaToFile(ames,filename,1);	end;	ResetCompany(oldcompany);		if (sendf==1 and FileExists(filename)) then begin		WebSetContentType("application/binary");		WebOutFile(filename);		//Delete_File(filename);		res = true;	end;	LHandleWebSendItems:;		HandleWebSendItems = res;    return;end;global webpublic updating Procedure WebSendItemsCatalog() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;		logtext(0,"================================================ WebSendItemsCatalog");    client = 1;  	if (HandleWebSendItems(client,-1)) then begin  		logText(0,"Items are sent to client #" & client);  	end;return;end;global webpublic updating Procedure WebSendItemsMobile() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;		logtext(0,"================================================ WebSendItemsMobile");    client = 2;  	if (HandleWebSendItems(client,-1)) then begin  		logText(0,"Items are sent to client #" & client);  	end; //logtext(0,"WebSendItemsMobile from IP: " & WebRemoteIpAddress & "; client #" & client); weboutstring("Off");return;end;global webpublic updating Procedure WebSendItemsMobileTEST() //Edit***************************Sasha2,10:26 13.01.2016begin  integer client;  longint itemslimit;		logtext(0,"================================================ WebSendItemsMobileTEST");    client = 2;    if (Blank(WebGetArg("limit"))) then begin     itemslimit = 100;     end else begin     itemslimit = StringToLongInt(WebGetArg("limit"));    end;      	if (HandleWebSendItems(client,itemslimit)) then begin  		logText(0,"Items (TEST, " & itemslimit & " items) are sent to client #" & client);  	end; //logtext(0,"WebSendItemsMobileTEST from IP: " & WebRemoteIpAddress & "; client #" & client); weboutstring("Off");return;end;global updating function boolean HandleWebSendBrands(integer client) //Edit***************************Sasha2,15:18 04.07.2014begin  record DIVc DIr;  record CompaniesBlock Compb;  row CompaniesBlock Comprw;  record WebSyncBlock WSB;  string 2 opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,comma;  string 5 nextline;  boolean TrHs,testf,res,openjson,includecomp;  area ames,areceived;  integer newrec,oldcompany,i,rwcnt;  integer sendf;  string 20 suff;  LongInt foundflag,lastflag;  string 255 filename;  	   res = false;   openjson = false;   logtext(0,"WebSendBrands from IP: " & WebRemoteIpAddress & "; client #" & client);   webgetpostdata(areceived);   WRITEAREATOFILE(areceived,"Received_Brands.txt",0);   LogText(0,"Postdata: " & GetStringFromArea(areceived,0,GetAreaLength(areceived)));      sendf = CheckRequestForSend(areceived,opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,nextline,comma);   switch (sendf) begin  	case 0:  	LogText(0,"Error: Unknown command for brands");  	goto LWebSendBrands;  	case 3:  	LogText(0,"Brands posting failed");  	goto LWebSendBrands;   end;      filename = "brmess.txt";	 CreateFile(filename);	 CloseFile;   oldcompany = CurrentCompany;     BlockLoad(Compb);   rwcnt = MatRowCnt(Compb);     for (i=0;i<rwcnt;i=i+1) begin    MatRowGet(Compb,i,Comprw);        includecomp = IncludeCompany(StringToInt(Comprw.CompCode),"DIVc",suff);        if (includecomp and SetCompanyCode(Comprw.CompCode,false) and Comprw.ActiveStatus==0) then begin    	BlockLoad(WSB);    	if (sendf==1) then begin    			    		switch (client) begin					case 1: foundflag = WSB.Brands1;					case 2: foundflag = WSB.Brands2;				end;			      	//suff = "_cmpnr_" & Comprw.CompCode;						DIr.SyncFlag = foundflag;				//DIr.CType = "BRAND";				TrHs = true;				while (LoopKey("SyncFlag",DIr,1,TrHs)) begin					testf = true;					if (DIr.SyncFlag<=foundflag) then begin testf = false; end;					if (DIr.CType!="BRAND") then begin testf = false; end;					if (testf) then begin					  if (openjson==false) then begin						  AddTextToArea(opensqrbr & nextline, ames);						  openjson = true;						end else begin						  AddTextToArea(closecurlybr & comma & nextline, ames);						end;						AddTextToArea(opencurlybr & nextline, ames);						AddTextToArea(kpaws & "uid" & kpaws & colon & space & paws & DIr.Code & suff & paws & comma & nextline, ames);						AddTextToArea(kpaws & "title" & kpaws & colon & space & opensqrbr & opencurlybr, ames);						AddTextToArea(kpaws & "az" & kpaws & colon & space & paws & PrepareString(DIr.Name_AZ) & paws & comma & space, ames);						AddTextToArea(kpaws & "ru" & kpaws & colon & space & paws & PrepareString(DIr.Name_RU) & paws & comma & space, ames);						AddTextToArea(kpaws & "en" & kpaws & colon & space & paws & PrepareString(DIr.Name) & paws, ames);						AddTextToArea(closecurlybr & closesqrbr & comma & nextline, ames);						if (DIr.SavedCount<=1) then begin							newrec = 1;						end else begin							newrec = 0;						end;						AddTextToArea(kpaws & "newrecord" & kpaws & colon & space & newrec & nextline, ames);						//AddTextToArea(closecurlybr & nextline, ames);												if (lastflag < DIr.SyncFlag) then begin  				  	lastflag = DIr.SyncFlag;  				  end;					end;				end; RESETLOOP(DIr);								switch (client) begin					case 1: WSB.BrandsTemp1 = lastflag;					case 2: WSB.BrandsTemp2 = lastflag;				end;				LogText(0,"Brand synchronization for company " & Comprw.CompName);			end;			if (sendf==2) begin				switch (client) begin					case 1:   					if (WSB.BrandsTemp1!=-1) then begin  					  WSB.Brands1 = WSB.BrandsTemp1;  					  WSB.BrandsTemp1 = -1;  					end;					case 2:   					if (WSB.BrandsTemp2!=-1) then begin  					  WSB.Brands2 = WSB.BrandsTemp2;  					  WSB.BrandsTemp2 = -1;  					end;				end;				LogText(0,"Brand are synchronized for company " & Comprw.CompName);			end;			BlockStore(WSB);		end;	end;		if (openjson) then begin	 AddTextToArea(closecurlybr & nextline, ames);	 AddTextToArea(closesqrbr & nextline, ames);	end;		ResetCompany(oldcompany);		if (sendf==1) then begin		WriteAreaToFile(ames,filename,1);		//WebOutString(GetStringFromArea(ames,0,GetAreaLength(ames)));		WebSetContentType("application/binary");		//WebOutArea(ames);		WebOutFile(filename);		res = true;	end;	LWebSendBrands:;	HandleWebSendBrands = res;return;end;global webpublic updating Procedure WebSendBrandsCatalog() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;		logtext(0,"================================================ WebSendBrandsCatalog");    client = 1;  	if (HandleWebSendBrands(client)) then begin  		logText(0,"Brands are sent to client #" & client);  	end;return;end;global webpublic updating Procedure WebSendBrandsMobile() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;		logtext(0,"================================================ WebSendBrandsMobile");    client = 2;  	if (HandleWebSendBrands(client)) then begin  		logText(0,"Brands are sent to client #" & client);  	end;return;end;global updating function boolean HandleWebSendTypes(integer client) //Edit***************************Sasha2,15:18 04.07.2014begin  record DIVc DIr;  record CompaniesBlock Compb;  row CompaniesBlock Comprw;  record WebSyncBlock WSB;  string 2 opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,comma;  string 5 nextline;  boolean TrHs,testf,res,openjson,includecomp;  area ames,areceived;  integer newrec,oldcompany,i,rwcnt;  integer sendf;  string 20 suff;  LongInt foundflag,lastflag;  string 255 filename;  	  	res = false;  	openjson = false;  	logtext(0,"WebSendTypes from IP: " & WebRemoteIpAddress & "; client #" & client);  	webgetpostdata(areceived);  	WRITEAREATOFILE(areceived,"Received_Types.txt",0);  	LogText(0,"Postdata: " & GetStringFromArea(areceived,0,GetAreaLength(areceived)));  	  	sendf = CheckRequestForSend(areceived,opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,nextline,comma);  	  	switch (sendf) begin  	  case 0:  		LogText(0,"Error: Unknown command for types");  		goto LWebSendTypes;  	  case 3:  	 	LogText(0,"Types posting failed");  		goto LWebSendTypes;  	end;  	  	filename = "tymess.txt";	  CreateFile(filename);	  CloseFile;    oldcompany = CurrentCompany;      BlockLoad(Compb);    rwcnt = MatRowCnt(Compb);      for (i=0;i<rwcnt;i=i+1) begin    	MatRowGet(Compb,i,Comprw);    	    	includecomp = IncludeCompany(StringToInt(Comprw.CompCode),"DIVc",suff);    	    	if (includecomp and SetCompanyCode(Comprw.CompCode,false) and Comprw.ActiveStatus==0) then begin    	BlockLoad(WSB);    	if (sendf==1) then begin    		      	switch (client) begin					case 1: foundflag = WSB.Types1;					case 2: foundflag = WSB.Types2;				end;	      //suff = "_cmpnr_" & Comprw.CompCode;	      		      DIr.SyncFlag = foundflag;			  //DIr.CType = "TYPE";			  TrHs = true;			  while (LoopKey("SyncFlag",DIr,1,TrHs)) begin					testf = true; 					if (DIr.SyncFlag<=foundflag) then begin testf = false; end;					if (DIr.CType!="TYPE") then begin testf = false; end;					if (testf) then begin					  if (openjson==false) then begin						  AddTextToArea(opensqrbr & nextline, ames);						  openjson = true;						end else begin						  AddTextToArea(closecurlybr & comma & nextline, ames);						end;						AddTextToArea(opencurlybr & nextline, ames);						AddTextToArea(kpaws & "uid" & kpaws & colon & space & paws & DIr.Code & suff & paws & comma & nextline, ames);						AddTextToArea(kpaws & "title" & kpaws & colon & space & opensqrbr & opencurlybr, ames);						AddTextToArea(kpaws & "az" & kpaws & colon & space & paws & PrepareString(DIr.Name_AZ) & paws & comma & space, ames);						AddTextToArea(kpaws & "ru" & kpaws & colon & space & paws & PrepareString(DIr.Name_RU) & paws & comma & space, ames);						AddTextToArea(kpaws & "en" & kpaws & colon & space & paws & PrepareString(DIr.Name) & paws, ames);						AddTextToArea(closecurlybr & closesqrbr & comma & nextline, ames);						if (DIr.SavedCount<=1) then begin							newrec = 1;						end else begin							newrec = 0;						end;						AddTextToArea(kpaws & "newrecord" & kpaws & colon & space & newrec & nextline, ames);						//AddTextToArea(closecurlybr & nextline, ames);												if (lastflag < DIr.SyncFlag) then begin  				  	lastflag = DIr.SyncFlag;  				  end;					end;			  end; RESETLOOP(DIr);								switch (client) begin					case 1: WSB.TypesTemp1 = lastflag;					case 2: WSB.TypesTemp2 = lastflag;				end;				LogText(0,"Types synchronization for company " & Comprw.CompName);			end;			if (sendf==2) begin				switch (client) begin					case 1:   					if (WSB.TypesTemp1!=-1) then begin  					  WSB.Types1 = WSB.TypesTemp1;  					  WSB.TypesTemp1 = -1;  					end;					case 2:   					if (WSB.TypesTemp2!=-1) then begin  					  WSB.Types2 = WSB.TypesTemp2;  					  WSB.TypesTemp2 = -1;  					end;				end;				LogText(0,"Types are synchronized for company " & Comprw.CompName);			end;			BlockStore(WSB);		end;	end;		if (openjson) then begin	 AddTextToArea(closecurlybr & nextline, ames);	 AddTextToArea(closesqrbr & nextline, ames);	end;		ResetCompany(oldcompany);	if (sendf==1) then begin	  WriteAreaToFile(ames,filename,1);		//WebOutString(GetStringFromArea(ames,0,GetAreaLength(ames)));		WebSetContentType("application/binary");		//WebOutArea(ames);		WebOutFile(filename);		res = true;	end;	LWebSendTypes:;	HandleWebSendTypes = res;return;end;global webpublic updating Procedure WebSendTypesCatalog() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;		logtext(0,"================================================ WebSendTypesCatalog");  	client = 1;  	  	if (HandleWebSendTypes(client)) then begin  		logText(0,"Types are sent to client #" & client);  	end;return;end;global webpublic updating Procedure WebSendTypesMobile() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;		logtext(0,"================================================ WebSendTypesMobile");  	client = 2;  	  	if (HandleWebSendTypes(client)) then begin  		logText(0,"Types are sent to client #" & client);  	end;return;end;global updating function boolean HandleWebSendCollections(integer client) //Edit***************************Sasha2,15:18 04.07.2014begin  record DIVc DIr;  record CompaniesBlock Compb;  row CompaniesBlock Comprw;  record WebSyncBlock WSB;  string 2 opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,comma;  string 5 nextline;  boolean TrHs,testf,res,openjson,includecomp;  area ames,areceived;  integer newrec,oldcompany,i,rwcnt;  integer sendf;  string 20 suff;  LongInt foundflag,lastflag;  string 255 filename;  	  	res = false;  	openjson = false;  	logtext(0,"WebSendCollections from IP: " & WebRemoteIpAddress & "; client #" & client);  	webgetpostdata(areceived);  	WRITEAREATOFILE(areceived,"Received_Collections.txt",0);  	LogText(0,"Postdata: " & GetStringFromArea(areceived,0,GetAreaLength(areceived)));  	  	sendf = CheckRequestForSend(areceived,opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,nextline,comma);  	  	switch (sendf) begin  	  case 0:  		LogText(0,"Error: Unknown command for collections");  		goto LWebSendCollections;  	  case 3:  	 	LogText(0,"Collections posting failed");  		goto LWebSendCollections;  	end;  	  	filename = "colmess.txt";	  CreateFile(filename);	  CloseFile;    oldcompany = CurrentCompany;      BlockLoad(Compb);    rwcnt = MatRowCnt(Compb);      for (i=0;i<rwcnt;i=i+1) begin    	MatRowGet(Compb,i,Comprw);    	    	includecomp = IncludeCompany(StringToInt(Comprw.CompCode),"DIVc",suff);    	    	if (includecomp and SetCompanyCode(Comprw.CompCode,false) and Comprw.ActiveStatus==0) then begin    	BlockLoad(WSB);    	if (sendf==1) then begin    		      	switch (client) begin					case 1: foundflag = WSB.Collections1;					case 2: foundflag = WSB.Collections2;				end;	      //suff = "_cmpnr_" & Comprw.CompCode;	      		      DIr.SyncFlag = foundflag;			  //DIr.CType = "COLLECTION";			  TrHs = true;			  while (LoopKey("SyncFlag",DIr,1,TrHs)) begin					testf = true; 					if (DIr.SyncFlag<=foundflag) then begin testf = false; end;					if (DIr.CType!="COLLECTION" and Left(DIr.CType,5)!="COLL_") then begin testf = false; end;					if (testf) then begin					  if (openjson==false) then begin						  AddTextToArea(opensqrbr & nextline, ames);						  openjson = true;						end else begin						  AddTextToArea(closecurlybr & comma & nextline, ames);						end;						AddTextToArea(opencurlybr & nextline, ames);						AddTextToArea(kpaws & "uid" & kpaws & colon & space & paws & DIr.Code & suff & paws & comma & nextline, ames);						AddTextToArea(kpaws & "title" & kpaws & colon & space & opensqrbr & opencurlybr, ames);						AddTextToArea(kpaws & "az" & kpaws & colon & space & paws & PrepareString(DIr.Name_AZ) & paws & comma & space, ames);						AddTextToArea(kpaws & "ru" & kpaws & colon & space & paws & PrepareString(DIr.Name_RU) & paws & comma & space, ames);						AddTextToArea(kpaws & "en" & kpaws & colon & space & paws & PrepareString(DIr.Name) & paws, ames);						AddTextToArea(closecurlybr & closesqrbr & comma & nextline, ames);						if (DIr.SavedCount<=1) then begin							newrec = 1;						end else begin							newrec = 0;						end;						AddTextToArea(kpaws & "newrecord" & kpaws & colon & space & newrec & nextline, ames);						//AddTextToArea(closecurlybr & nextline, ames);												if (lastflag < DIr.SyncFlag) then begin  				  	lastflag = DIr.SyncFlag;  				  end;					end;			  end; RESETLOOP(DIr);								switch (client) begin					case 1: WSB.CollectionsTemp1 = lastflag;					case 2: WSB.CollectionsTemp2 = lastflag;				end;				LogText(0,"Collections synchronization for company " & Comprw.CompName);			end;			if (sendf==2) begin				switch (client) begin					case 1:   					if (WSB.CollectionsTemp1!=-1) then begin  					  WSB.Collections1 = WSB.CollectionsTemp1;  					  WSB.CollectionsTemp1 = -1;  					end;					case 2:   					if (WSB.CollectionsTemp2!=-1) then begin  					  WSB.Collections2 = WSB.CollectionsTemp2;  					  WSB.CollectionsTemp2 = -1;  					end;				end;				LogText(0,"Collections are synchronized for company " & Comprw.CompName);			end;			BlockStore(WSB);		end;	end;		if (openjson) then begin	 AddTextToArea(closecurlybr & nextline, ames);	 AddTextToArea(closesqrbr & nextline, ames);	end;		ResetCompany(oldcompany);	if (sendf==1) then begin	  WriteAreaToFile(ames,filename,1);		//WebOutString(GetStringFromArea(ames,0,GetAreaLength(ames)));		WebSetContentType("application/binary");		//WebOutArea(ames);		WebOutFile(filename);		res = true;	end;	LWebSendCollections:;	HandleWebSendCollections = res;return;end;global webpublic updating Procedure WebSendCollectionsCatalog() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;		logtext(0,"================================================ WebSendCollectionsCatalog");  	client = 1;  	  	if (HandleWebSendCollections(client)) then begin  		logText(0,"Collections are sent to client #" & client);  	end;return;end;global webpublic updating Procedure WebSendCollectionsMobile() //Edit***************************Sasha2,15:18 04.07.2014begin  integer client;			logtext(0,"================================================ WebSendCollectionsMobile");  	client = 2;  	  	if (HandleWebSendCollections(client)) then begin  		logText(0,"Collections are sent to client #" & client);  	end;return;end;procedure AddStatusesToArea(var area ames,string item,string locations,string suff,var boolean openjson,string opencurlybr,string closecurlybr,string opensqrbr,string closesqrbr,                            string paws,string kpaws,string colon,string space,string nextline,string comma)begin	      	if (openjson==false) then begin    	  //AddTextToArea(opensqrbr & nextline, ames);    	  openjson = true;    	end else begin    	  AddTextToArea(closecurlybr & comma & nextline, ames);    	end;    	AddTextToArea(opencurlybr & nextline, ames);    	AddTextToArea(kpaws & "uid" & kpaws & colon & space & paws & item & suff & paws & comma & nextline, ames);    	AddTextToArea(kpaws & "code" & kpaws & colon & space & paws & item & paws & comma & nextline, ames);    	AddTextToArea(kpaws & "boutiques" & kpaws & colon & space & opensqrbr, ames);    	AddTextToArea(locations, ames);    	AddTextToArea(closesqrbr & nextline, ames); return;end;global function boolean HandleWebSendItemStatus(integer client) //Edit***************************Sasha2,12:21 13.01.2016begin  record ItemStatusVc ISr;  record LocationVc Locr;  record CompaniesBlock Compb;  row CompaniesBlock Comprw;  string 2 opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,comma;  string 5 nextline;  boolean TrHs,testf,res,openjson,includecomp;  area ames,areceived;  integer oldcompany,i,rwcnt;  integer sendf,loopedcomp;  string 20 suff,curitem;  string 255 filename,locations;  	  	res = false;  	openjson = false;  	logtext(0,"WebSendItemStatus from IP: " & WebRemoteIpAddress & "; client #" & client);  	  	sendf = CheckRequestForSend(areceived,opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,nextline,comma);  	  	switch (sendf) begin  	  case 0:  		LogText(0,"Error: Unknown command for Item statuses");  		goto LHandleWebSendItemStatus;  	  case 3:  	 	LogText(0,"Item statuses posting failed");  		goto LHandleWebSendItemStatus;  	end;  	  	filename = "ISmess.txt";	  CreateFile(filename);	  CloseFile;	  	  AddTextToArea(opensqrbr & nextline, ames);    loopedcomp = 0;    oldcompany = CurrentCompany;      BlockLoad(Compb);    rwcnt = MatRowCnt(Compb);      for (i=0;i<rwcnt;i=i+1) begin    	MatRowGet(Compb,i,Comprw);    	    	includecomp = IncludeCompany(StringToInt(Comprw.CompCode),"ItemStatusVc",suff);    	    	if (includecomp and SetCompanyCode(Comprw.CompCode,false) and Comprw.ActiveStatus==0) then begin      	if (sendf==1) then begin  	        	      if (loopedcomp>0) then begin  	        AddTextToArea(closecurlybr & comma & nextline, ames);  	      end;  	      AddTextToArea(opencurlybr & nextline, ames);  	      AddTextToArea(kpaws & "companynr" & kpaws & colon & space & StringToInt(Comprw.CompCode) & comma & nextline, ames);  	      AddTextToArea(kpaws & "statuses" & kpaws & colon & space & nextline, ames);  	      AddTextToArea(opensqrbr & nextline, ames);  	      openjson = false;  	        	      //suff = "_cmpnr_" & Comprw.CompCode;  	      	  	      ISr.Code = "";  	      curitem = "";  	      locations = "";  			  TrHs = true;  			  while (LoopMain(ISr,1,TrHs)) begin  			    testf = true;  			    if (blank(curitem)) then begin  			      curitem = ISr.Code;  			    end;  					if (curitem!=ISr.Code and NonBlank(locations)) then begin  					  AddStatusesToArea(ames,curitem,locations,suff,openjson,opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,nextline,comma);  					  curitem = ISr.Code;  					  locations = "";  					end;   					if (ISr.Instock<=0) then begin testf = false; end;  					if (ISr.Location==";;;") then begin testf = false; end;  					if (testf) then begin  					  if (Blank(locations)) then begin  					    locations = paws & ISr.Location & paws;  					  end else begin  					    locations = locations & comma & space & paws & ISr.Location & paws;  					  end;  					end;  			  end; RESETLOOP(ISr);  			  if (NonBlank(locations)) then begin  			    AddStatusesToArea(ames,curitem,locations,suff,openjson,opencurlybr,closecurlybr,opensqrbr,closesqrbr,paws,kpaws,colon,space,nextline,comma);  			  end;  			  if (openjson) then begin        	 AddTextToArea(closecurlybr & nextline, ames);        	end;  			    			  //Collect locations info  			  AddTextToArea(closesqrbr & comma & nextline, ames);  			  AddTextToArea(kpaws & "boutiqueslist" & kpaws & colon & space & nextline, ames);  			  AddTextToArea(opensqrbr & nextline, ames);  			  openjson = false;  			    			  Locr.Code = "";  			  TrHs = true;  			  while (LoopMain(Locr,1,TrHs)) begin  			    if (openjson==false) then begin          	  openjson = true;          	end else begin          	  AddTextToArea(closecurlybr & comma & nextline, ames);          	end;          	AddTextToArea(opencurlybr & nextline, ames);          	AddTextToArea(kpaws & "uid" & kpaws & colon & space & paws & Locr.Code & suff & paws & comma & nextline, ames);          	AddTextToArea(kpaws & "code" & kpaws & colon & space & paws & Locr.Code & paws & comma & nextline, ames);          	AddTextToArea(kpaws & "name" & kpaws & colon & space & paws & Locr.Name & paws & comma & nextline, ames);          	AddTextToArea(kpaws & "address" & kpaws & colon & space & paws & Locr.Addr2 & paws & comma & nextline, ames);          	AddTextToArea(kpaws & "phone" & kpaws & colon & space & paws & Locr.Phone & paws & nextline, ames);  			  end; RESETLOOP(Locr);  			    			  if (openjson) then begin  			    AddTextToArea(closecurlybr & nextline, ames);  			  end;  			  AddTextToArea(closesqrbr & nextline, ames);    				loopedcomp = loopedcomp + 1;  				LogText(0,"Item statuses collected for company " & Comprw.CompName);  			end;  		end;  	end;  	  	if (openjson) then begin  	 AddTextToArea(closecurlybr & nextline, ames);  	 AddTextToArea(closesqrbr & nextline, ames);  	end;  	  	ResetCompany(oldcompany);    	if (sendf==1) then begin  	  WriteAreaToFile(ames,filename,1);  		WebSetContentType("application/binary");  		WebOutFile(filename);  		res = true;  	end;	LHandleWebSendItemStatus:;	HandleWebSendItemStatus = res;return;end;global webpublic Procedure WebSendItemStatusMobile() //Edit***************************Sasha2,14:57 13.01.2016begin  integer client;		logtext(0,"================================================ WebSendItemStatusMobile");  	client = 2;  	  	if (HandleWebSendItemStatus(client)) then begin  		logText(0,"Item statuses are sent to client #" & client);  	end;return;end;