//server-only
external procedure IdeaIPbyORSmall(longint,var val,var date);
external procedure LogProcTime(string,longint);

global procedure IdeaFinReportRn(record RcVc RepSpec)
begin
	record ORVc ORr;
	row ORVc ORrw;
	integer mtrw,i,j;
	boolean TrHs,testf;
	vector boolean vdesflag,vordsalesman;
	array string 200 adescodes,arefpr,aprojcode,arequester,aclient,aprnum,aorddes;
	array date aprdate,alastpaiddate;
	array val aprcost,apaidamnt,abalamnt,abalpmnt;
	array longint asernr;
	record UServc USr;
	record IVVc IVr;
	record IPVc IPr;
	row IPVc IPrw;
	record IPrsVc IPrsr;
	array integer tab;
	string 100 ipsern; 
	val tmpval,prtotal,paidtotal,baltotal;
	val grprtotal,grpaidtotal,grbaltotal;
	date lastdate;
	longint curtick;
	
	curtick = getcurtick();
	StartReportNoHeaderJob("PR Financial Report by designers and date");
		STARTFORMAT(15);
			outstring(0,0,"PR Financial Report By Designers and Date",false);
		EndFormat;
		STARTFORMAT(15);
			outstring(0,0,CurrentDate,false);
			outstring(360,0,"Between",false);
			outstring(400,0,RepSpec.sStartDate,false);
			outstring(435,0,"And",false);
			outstring(1,0,RepSpec.sEndDate,true);
		EndFormat;
		black_divider(0,1);
		STARTFORMAT(15);
			outstring(0,0,"Designer",false);
			outstring(35,0,"Ref PR #",false);
			outstring(70,0,"Proj. Code",false);
			outstring(110,0,"Requester",false);
			outstring(145,0,"Client No.",false);
			outstring(185,0,"PR No.",false);
			outstring(215,0,"PR Date",false);
			outstring(245,0,"Proj. Cost",false);
			outstring(280,0,"Paid Amount",false);
			outstring(330,0,"Last Paid Date",false);
			outstring(1,0,"Balance Amount",true);
			//outstring(1,0,"Balance Paid",true);
		EndFormat;
		gray_divider(0,1);
		
		ORr.OrdDate = RepSpec.sStartDate;
		TrHs = true;
		while(loopkey("OrdDate",ORr,1,TrHs))begin
			testf = true;
			if(ORr.OrdDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
			if(nonblank(RepSpec.f1) and RepSpec.f1!=ORr.SalesMan)then begin testf = false; end;
			if(nonblank(RepSpec.f2) and RepSpec.f2!=ORr.AuthorizationCode)then begin testf = false; end;
			if(nonblank(RepSpec.f3) and RepSpec.f3!=ORr.OrderClass)then begin testf = false; end;
			if(nonblank(RepSpec.f4) and RepSpec.f4!=ORr.CustCode)then begin testf = false; end;
			
			if(testf)then begin
				vordsalesman[ORr.SerNr & ORr.SalesMan] = true;
				aorddes[aorddes.length] = ORr.SalesMan;
				asernr[asernr.length] = ORr.SerNr;
				aprnum[aprnum.length] = ORr.CustOrdNr;
				aprojcode[aprojcode.length] = ORr.AuthorizationCode;
				arequester[arequester.length] = ORr.IDReguester;
				aclient[aclient.length] = ORr.CustCode;
				arefpr[arefpr.length] = ORr.RefStr;
				aprdate[aprdate.length] = ORr.OrdDate;
				aprcost[aprcost.length] = ORr.Sum4;
				//apaidamnt[apaidamnt.length] = ORr.???
				//alastpaiddate[alastpaiddate.length] = ORr.???
				//abalamnt[abalamnt.length] = ORr.???
				//abalpmnt[abalpmnt.length] = ORr.???
				
				if(vdesflag[ORr.SalesMan]==false)then begin
					vdesflag[ORr.SalesMan] = true;
					adescodes[adescodes.length] = ORr.SalesMan;
				end;
			end;
		end;
		resetloop(ORr);
		
		for(i=0;i<adescodes.length;i=i+1)begin
			USr.Code = adescodes[i];
			readfirstmain(USr,1,true);
			STARTFORMAT(15);
				outstring(0,0,USr.Name,false);
			EndFormat;
			prtotal = blankval;
			paidtotal = blankval;
			baltotal = blankval;
			for(j=0;j<asernr.length;j=j+1)begin
				if(aorddes[j]==adescodes[i])then begin
					/*resetloop(IVr);
					IVr.OrderNr = asernr[j];
					TrHs = true;
					while(loopkey("OrderNr",IVr,1,TrHs))begin
						if(IVr.OrderNr!=asernr[j])then begin TrHs = false;	end;
						
						if(TrHs and IVr.OKFlag==1)then begin
							
						end;
					end;*/
					
					IdeaIPbyORSmall(asernr[j],tmpval,lastdate);
					
					STARTFORMAT(15);
						outstring(0,0,"",false);
						outstring(35,0,arefpr[j],false);
						outstring(70,0,aprojcode[j],false);
						outstring(110,0,arequester[j],false);
						outstring(145,0,aclient[j],false);
						outstring(185,0,aprnum[j],false);
						outstring(215,0,aprdate[j],false);
						outstring(245,0,aprcost[j],false);
						outstring(280,0,tmpval,false);
						outstring(330,0,lastdate,false);
						outstring(1,0,aprcost[j] - tmpval,true);
						//outstring(1,0,"Balance Paid",true);
						prtotal = prtotal + aprcost[j];
						paidtotal = paidtotal + tmpval;
						baltotal = baltotal + aprcost[j] - tmpval;
						grprtotal = grprtotal + aprcost[j];
						grpaidtotal = grpaidtotal + tmpval;
						grbaltotal = grbaltotal + aprcost[j] - tmpval;
					EndFormat;
				end;
			end;
			
			STARTFORMAT(15);
				outstring(0,0,"",false);
				outstring(35,0,"",false);
				outstring(70,0,"",false);
				outstring(110,0,"",false);
				outstring(145,0,"",false);
				outstring(185,0,"",false);
				outstring(215,0,"PR Totals:",false);
				outstring(245,0,prtotal,false);
				outstring(280,0,paidtotal,false);
				outstring(330,0,"",false);
				outstring(1,0,baltotal,true);
				//outstring(1,0,"Balance Paid",true);
			EndFormat;
			
			gray_divider(0,1);
		end;
		Black_divider(0,1);
		STARTFORMAT(15);
			outstring(0,0,"",false);
			outstring(35,0,"",false);
			outstring(70,0,"",false);
			outstring(110,0,"",false);
			outstring(145,0,"",false);
			outstring(185,0,"",false);
			outstring(215,0,"GRAND Totals:",false);
			outstring(245,0,grprtotal,false);
			outstring(280,0,grpaidtotal,false);
			outstring(330,0,"",false);
			outstring(1,0,grbaltotal,true);
			//outstring(1,0,"Balance Paid",true);
		EndFormat;
		
	endjob;
	LogProcTime("IdeaFinReportRn", getcurtick() - curtick);
return;
end;