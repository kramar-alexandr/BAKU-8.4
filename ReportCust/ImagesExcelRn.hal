//server-only
external function string 255 MonthName(Date);
external procedure ExtractObj(string,var Integer,var string);
//external procedure CopyFile(string,string);
external function string 255 ConvertXml(string);
external procedure FindAwerageCostCurProc(string,string,string,date,string,string,var val,var val);

external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure AddImagesToXLSX(integer,string,string,string,integer);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string,boolean);
external procedure PrepToAddImgToAllSheet(integer,string);
external procedure AddImageOnCurrentSheet(integer,string,string,integer,integer,integer,integer,integer,longint,longint,longint,longint,integer,longint,longint);
external procedure EndToAddImgToAllSheet(integer,string);
external function string 10 GetStringCellNum(integer,integer);
external function string 255 StrReplace(string,string,string);// Edit ************************** Tuesday, 3 October 2017 17:25:37
external function string 255 imgStrReplace(string);// Edit ************************** Tuesday, 10 October 2017 15:20:55
external procedure FindAndStoreINVcImgLink(record INVc,integer,var string,var string);
external procedure LogProcTime(string,longint);


SetLangMode(LangRussian,"RUS",0);

procedure ClearStocksStuff(var integer SQi, var vector boolean stockInArr, var array string stocks, var vector integer stockQty)
begin
integer i;
  
  SQi = 0;
  for (i=0;i<stocks.length;i=i+1) begin
    stockInArr[stocks[i]] = false;
    stockQty[stocks[i]] = 0;
    stocks[i] = "";
  end;

return;
end;

procedure ClearClassifStuff(var integer TSi, var array string typeClassif, var array string classif)
begin
integer i;
  
  TSi = 0;
  for (i=0;i<typeClassif.length;i=i+1) begin
    typeClassif[i] = "";
    classif[i] = "";
  end;

return;
end;

procedure ImagesExcel(record RcVc RepSpec)
begin
	
	array string 50 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave,pathToImg;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 6 reportName;
  array string 255 mas;
  array integer lvlArray;
  longint fromcoloff,tocoloff,fromrowoff,torowoff;
  integer fromcol,tocol,fromrow,torow;
  integer imgCounter;
	
  record CompaniesBlock Compb;
	record DIVc DIr;
  record PLVc PLr;
  record PLDefVc PLDefr;
  record ItemStatusVc ISr;
  record INVc INr;
  record CTypeVc CTyper;
  string 100 tstr;
  string 50 uloc,brand,brandcode,pricecur,dicode,diname,ditype;
  integer pos,cnt,SQi,TSi,i,Ccntr,Scntr,rowcnt,mtrw,curcomp;
  boolean TrHs,testf,test2f,f,testf1,locflag;
  val price;
  vector boolean stockInArr;
  vector integer stockQty;
  array string 20 stocks;
  array string 100 typeClassif,classif;
  record OldDIVc OldDIr;
  record ConsItemVc CIr;

	setexportcodepage("UTF8");
  logtext(0,currentcompany & " - " & currentuser & " - ImagesExcel started");
	reportName = "ImagesExcelRn";
	if (windowsmode==1) then begin
		//fileToSave = "tmpxlsx.xlsx";
    fileToSave = RepSpec.f6;
	end else begin
		//fileToSave = "/tmpxlsx.xlsx";
    fileToSave = "/" & RepSpec.f6;
	end;
  delete_file(fileToSave);
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
	sheetNames[qtyOfSheets] = "Ћстатки по складам с картинками";
	qtyOfSheets = qtyOfSheets + 1;
	sheetColls[0] = 0.625;
	sheetColls[1] = 21.375;
	sheetColls[2] = 10.125;
	sheetColls[3] = 26.875;
	sheetColls[4] = 13.125;
	sheetColls[5] = 20;
	sheetColls[6] = 29.5;

  fromcoloff = 457200;
  fromrowoff = 333375;
  tocoloff = 5627;
  torowoff = 51820;
  fromcol = 3;
  tocol = 4;
  fromrow = 3;
  torow = 11;
  curcomp = CurrentCompany;
	
  numOfUniqueSharedStrings = 0;
	numOfSharedStrings = 0;
	XmlXlsxWorkBegin(fileToSave,reportName);
	CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,1,false);
  PrepToAddImgToAllSheet(qtyOfSheets,fileToSave);
	sheetnum = 1;
	SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
  BeginSheetData(sheetnum,fileToSave);
    rownum = 1;
    BeginRow(sheetnum,fileToSave,rownum,0,3.75);
    EndRow(sheetnum,fileToSave,rownum);
    
    INr.Code = "";
    while (loopmain(INr,1,true)) begin
    	testf1 = true;
    	if(nonblank(RepSpec.f4) and !setinset(RepSpec.f4,INr.DispGroups))then begin testf1 = false; end;
    	if(nonblank(RepSpec.f5) and !setinset(RepSpec.f5,INr.DispGroups) and RepSpec.f5!=INr.BPIBrand)then begin testf1 = false; end;
			if(nonblank(RepSpec.f10) and !setinset(RepSpec.f10,INr.DispGroups) and RepSpec.f10!=INr.BPICollection)then begin testf1 = false; end;
			if(nonblank(RepSpec.f9) and !setinset(RepSpec.f9,INr.DispGroups) and RepSpec.f9!=INr.BPISubGroup)then begin testf1 = false; end;
			if(nonblank(RepSpec.f8) and !setinset(RepSpec.f8,INr.OldDispGroups) and RepSpec.f8!=INr.SN)then begin testf1 = false; end;
			if(nonblank(RepSpec.f11) and RepSpec.f11!=INr.MainDisp)then begin testf1 = false; end;
    	
    	if(testf1)then begin
				ClearStocksStuff(SQi,stockInArr,stocks,stockQty);
				ClearClassifStuff(TSi,typeClassif,classif);
	//collect stocks
				//setcompany(currentcompany,false);
				ISr.Code = INr.Code;
				TrHs = true;
				while (loopmain(ISr,1,TrHs)) begin
					testf = true;
					if (ISr.Code!=INr.Code) then begin testf = false; TrHs = false; end;
					if (nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2) then begin testf = false; end;
					if (ISr.Location==";;;") then begin testf = false; end;
					if (ISr.Instock==0) then begin testf = false; end;
					if (testf) then begin
						if !stockInArr[ISr.Location] then begin
							stockInArr[ISr.Location] = true;
							stocks[SQi] = ISr.Location;
							SQi = SQi + 1;
						end;
						stockQty[ISr.Location] = stockQty[ISr.Location] + ISr.Instock;
					end;					
				end;
				resetloop(ISr);

				if(currentcompany!=18 and RepSpec.flags[5]!=0)then begin
					setcompany(18,false);
					CIr.LocCode = INr.Code;
					CIr.BrandCode = INr.BPIBrand;
					if(ReadFirstKey("LocCodeBrand",CIr,2,true))then begin
						ISr.Code = CIr.Code;
						TrHs = true;
						while (loopmain(ISr,1,TrHs)) begin
							testf = true;
							if (ISr.Code!=CIr.Code) then begin testf = false; TrHs = false; end;
							if (nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2) then begin testf = false; end;
							if (ISr.Location==";;;") then begin testf = false; end;
							if (ISr.Instock==0) then begin testf = false; end;
							if (testf) then begin
								if !stockInArr[ISr.Location] then begin
									stockInArr[ISr.Location] = true;
									stocks[SQi] = ISr.Location;
									SQi = SQi + 1;
								end;
								stockQty[ISr.Location] = stockQty[ISr.Location] + ISr.Instock;
							end;
						end;
						resetloop(ISr);
					end;
					resetcompany(curcomp);
				end;
				
				if(currentcompany!=4 and RepSpec.flags[6]!=0)then begin
					setcompany(4,false);
					ISr.Code = INr.Code;
					TrHs = true;
					while (loopmain(ISr,1,TrHs)) begin
						testf = true;
						if (ISr.Code!=INr.Code) then begin testf = false; TrHs = false; end;
						if (nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2) then begin testf = false; end;
						if (ISr.Location==";;;") then begin testf = false; end;
						if (ISr.Instock==0) then begin testf = false; end;
						if (testf) then begin
							if !stockInArr[ISr.Location] then begin
								stockInArr[ISr.Location] = true;
								stocks[SQi] = ISr.Location;
								SQi = SQi + 1;
							end;
						end;
					end;
					resetloop(ISr);
					resetcompany(curcomp);
				end;

  
				if nonblank(stocks[0]) then begin
	//find brand and collect classifications
					brand = "";
					pos = 0;
					uloc = "";
					ExtractObj(INr.DispGroups,pos,uloc); 
					while (nonblank(uloc)) begin
						DIr.Code = uloc;
						if(readfirstmain(DIr,1,true))then begin
							dicode = DIr.Code;
							diname = DIr.Name;
							ditype = DIr.CType;
						end else begin
							OldDIr.Code = uloc;
							readfirstmain(OldDIr,1,true);
							dicode = OldDIr.Code;
							diname = OldDIr.Name;
							ditype = OldDIr.CType;
						end;
						if (DIr.CType!="BRAND")then begin
							//CTyper.Code = DIr.CType;
							typeClassif[TSi] = DIr.CType;
							classif[TSi] = DIr.Name;
							//logtext(0,"ReportWithImages " & INr.Code & " " &  DIr.CType & " " & DIr.Name);
							TSi = TSi + 1;
							//readfirstmain(CTyper,1,true);
							//typeClassif[TSi] = CTyper.Comment;
							//classif[TSi] = DIr.Name;
							//TSi = TSi + 1;
						end else begin
							brand = DIr.Name;
							brandcode = DIr.Code;
						end;
						ExtractObj(INr.DispGroups,pos,uloc);
					end;
					if(nonblank(INr.SN))then begin
						typeClassif[TSi] = "Group";
						classif[TSi] = INr.MainDisp;
						TSi = TSi + 1;
					end;
					if(nonblank(INr.SNOne))then begin
						
						typeClassif[TSi] = "Season";
						classif[TSi] = INr.SNOne;
						TSi = TSi + 1;
					end;
					if ((brandcode==RepSpec.f1) or blank(RepSpec.f1)) and ((INr.Group==RepSpec.f3) or blank(RepSpec.f3)) then begin
	//find price
						cnt = 0;
						price = 0;
						PLr.ArtCode = INr.Code;
						PLr.PLCode = "RRP";
						while (loopmain(PLr,2,(PLr.ArtCode==INr.Code))) begin
							if(PLr.ArtCode==INr.Code)then begin
								price = price + PLr.ExVatPrice;
								cnt = cnt + 1;
								if(nonblank(PLr.CurncyCode))then begin
									pricecur = PLr.CurncyCode;
								end else begin
									PLDefr.Code = "RRP";
									readfirstmain(PLDefr,1,true);
									pricecur = PLDefr.CurncyCode;
								end;
							end;
						end;
						resetloop(PLr);
						price = price/cnt;
	//path to image
						FindAndStoreINVcImgLink(INr,curcomp,pathToImg,tstr);
						Ccntr = 0;
						Scntr = 0;
						rowcnt = 0;
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							style = 5;
							if(RepSpec.flags[2]!=0) then begin
								StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.AlternativeCode,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							end else begin
								StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.Code,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							end;
							style = 1;
							qtyOfEmpStr = 2;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							style = 8;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.BarCode,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 16;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,"’ип класификации",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 17;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,"ЉласификациЯ",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							style = 6;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,brand,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 2;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							style = 9;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.Name,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 2;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							f = false;
							if (Ccntr<typeClassif.length) then begin
								if (nonblank(typeClassif[Ccntr])) then begin
									style = 10;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 11;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									Ccntr = Ccntr + 1;
									f = true;
								end;
							end;
							if (!f) then begin
								style = 20;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 22;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							style = 6;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,"ђитейл:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 4;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,price);
							style = 2;
							qtyOfEmpStr = 2;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							f = false;
							if (Ccntr<typeClassif.length) then begin
								if (nonblank(typeClassif[Ccntr])) then begin
									style = 10;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 11;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									Ccntr = Ccntr + 1;
									f = true;
								end;
							end;
							if (!f) then begin
								style = 20;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 22;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
			
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							style = 6;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,"‘ебестоимость:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 4;
							NumericCell(sheetnum,fileToSave,colnum,rownum,style,INr.LastPurchPrice2);
							style = 2;
							qtyOfEmpStr = 2;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							f = false;
							if (Ccntr<typeClassif.length) then begin
								if (nonblank(typeClassif[Ccntr])) then begin
									style = 10;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 11;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									Ccntr = Ccntr + 1;
									f = true;
								end;
							end;
							if (!f) then begin
								style = 20;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 22;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							style = 6;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,"‚алюта:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 7;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,pricecur,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 2;
							qtyOfEmpStr = 2;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							f = false;
							if (Ccntr<typeClassif.length) then begin
								if (nonblank(typeClassif[Ccntr])) then begin
									style = 10;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 11;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									Ccntr = Ccntr + 1;
									f = true;
								end;
							end;
							if (!f) then begin
								style = 20;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 22;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							style = 6;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,"„ата посл. поступлениЯ:",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 7;
							StringCell(sheetnum,fileToSave,colnum,rownum,style,INr.LastPriceChange,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
							style = 2;
							qtyOfEmpStr = 2;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							f = false;
							if (Ccntr<typeClassif.length) then begin
								if (nonblank(typeClassif[Ccntr])) then begin
									style = 10;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 11;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									Ccntr = Ccntr + 1;
									f = true;
								end;
							end;
							if (!f) then begin
								style = 20;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 22;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
					
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							style = 3;
							qtyOfEmpStr = 1;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							style = 2;
							qtyOfEmpStr = 3;
							EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							f = false;
							if (Ccntr<typeClassif.length) then begin
								if (nonblank(typeClassif[Ccntr])) then begin
									style = 10;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 11;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									Ccntr = Ccntr + 1;
									f = true;
								end;
							end;
							if (!f) then begin
								style = 20;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 22;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
						
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
						BeginRow(sheetnum,fileToSave,rownum,0,blankval);
							colnum = 2;
							f = false;
							locflag = false;
							if (Scntr<stocks.length) then begin
								if (nonblank(stocks[Scntr])) then begin
									style = 12;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,"‘клад",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 13;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,"Љол-во",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									locflag = true;
								end;
							end;
							if (!f) then begin
								style = 3;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 2;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
							if(!locflag)then begin
								style = 2;
								qtyOfEmpStr = 2;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
							f = false;
							if (Ccntr<typeClassif.length) then begin
								if (nonblank(typeClassif[Ccntr])) then begin
									style = 10;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									style = 11;
									StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
									Ccntr = Ccntr + 1;
									f = true;
								end;
							end;
							if (!f) then begin
								style = 20;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								style = 22;
								qtyOfEmpStr = 1;
								EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
							end;
						EndRow(sheetnum,fileToSave,rownum);
						rowcnt = rowcnt + 1;
						test2f = true;
						while (test2f) begin
							BeginRow(sheetnum,fileToSave,rownum,0,blankval);
								colnum = 2;
								f = false;
								locflag = false;
								if (Scntr<stocks.length) then begin
									if (nonblank(stocks[Scntr])) then begin
										locflag = true;
										style = 14;
										StringCell(sheetnum,fileToSave,colnum,rownum,style,stocks[Scntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
										style = 15;
										StringCell(sheetnum,fileToSave,colnum,rownum,style,stockQty[stocks[Scntr]],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
										Scntr = Scntr + 1;
									end;
								end;
								if (!f) then begin
									style = 3;
									qtyOfEmpStr = 1;
									EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
									style = 2;
									qtyOfEmpStr = 1;
									EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								end;
								if(!locflag)then begin
									style = 2;
									qtyOfEmpStr = 2;
									EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								end;
								f = false;
								if (Ccntr<typeClassif.length) then begin
									if (nonblank(typeClassif[Ccntr])) then begin
										style = 10;
										StringCell(sheetnum,fileToSave,colnum,rownum,style,typeClassif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
										style = 11;
										StringCell(sheetnum,fileToSave,colnum,rownum,style,classif[Ccntr],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
										Ccntr = Ccntr + 1;
										f = true;
									end;
								end;
								if (!f) then begin
									style = 20;
									qtyOfEmpStr = 1;
									EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
									style = 22;
									qtyOfEmpStr = 1;
									EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
								end;
							EndRow(sheetnum,fileToSave,rownum);
							rowcnt = rowcnt + 1;
						
							test2f = false;
							if rowcnt<11 then begin test2f = true; end;
							if (Scntr<stocks.length) then begin if (nonblank(stocks[Scntr])) then begin test2f = true; end; end;
							if (Ccntr<typeClassif.length) then begin if (nonblank(typeClassif[Ccntr])) then begin test2f = true; end; end;
						end;
						imgCounter = imgCounter + 1;
						AddImageOnCurrentSheet(sheetnum,fileToSave,pathToImg,imgCounter,fromcol,tocol,fromrow,torow,fromcoloff,tocoloff,fromrowoff,torowoff,2,0,0);
						fromrow = fromrow + rowcnt;
						torow = torow + rowcnt;
					end;
				end;
      end;
    end;
    if rowcnt<>0 then begin
      BeginRow(sheetnum,fileToSave,rownum,0,blankval);
        colnum = 2;
        style = 18;
        qtyOfEmpStr = 6;
        EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
      EndRow(sheetnum,fileToSave,rownum);
    end;
	EndSheetData(sheetnum,fileToSave);
  MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
	EndSheet(sheetnum,fileToSave,sheetnum);
  EndToAddImgToAllSheet(qtyOfSheets,fileToSave);
	FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
	ConvertToXLSX(fileToSave,true);
	MilliSleep(5000);
  return;
end;

procedure ImagesExcel2(record RcVc RepSpec)
begin
	
	array string 50 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave,pathToImg;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr,maslen;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 6 reportName;
  array string 255 mas;
  array integer lvlArray;
  array longint fromcoloff,tocoloff,fromrowoff,torowoff;
  longint ext1,ext2;
  array integer fromcol,tocol,fromrow,torow;
  integer imgCounter;
	
  record CompaniesBlock Compb;
	record DIVc DIr;
  record PLVc PLr;
  record PLDefVc PLDefr;
  record ItemStatusVc ISr;
  record INVc INr;
  record CTypeVc CTyper;
  string 255 tstr,fullpath;
  string 50 uloc,brand,brandcode,pricecur;
  integer pos,cnt,SQi,TSi,i,Ccntr,Scntr,rowcnt,j,INInRow,k,curcomp,mtrw;
  boolean TrHs,testf,test2f;
  val price;
  vector boolean stockInArr;
  vector integer stockQty;
  array string 100 classif;
  string 50 realcur,brandcur;
	val curcost,curcost2;
  
  integer INCi,TCi;
  array string 100 typeClassif,tempINCodes,INCodes;
  array string 20 stocks;
  vector string 255 alldata;
  vector boolean TCInArr;

	setexportcodepage("UTF8");
	logtext(0,currentcompany & " - " & currentuser & " - ImagesExcel2 started");
	reportName = "ImagesExcel2Rn";
	if (windowsmode==1) then begin
    fileToSave = RepSpec.f6;
	end else begin
    fileToSave = "/" & RepSpec.f6;
	end;
  delete_file(fileToSave);
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
	sheetNames[qtyOfSheets] = "Sheet 1";
	qtyOfSheets = qtyOfSheets + 1;
	INInRow = 3;
	
  colnum = 0;
  for (k=0;k<INInRow;k=k+1) begin
    sheetColls[colnum] = 14.28515625;
    colnum = colnum + 1;
    sheetColls[colnum] = 13.140625;
    colnum = colnum + 1;
    sheetColls[colnum] = 12.42578125;
    colnum = colnum + 1;
    fromcoloff[k] = 4735;
    fromrowoff[k] = 78686;
  end;
  
  fromcol[0] = 1;
  fromrow[0] = 2;
	
  fromcol[1] = 4;
  fromrow[1] = 2;
  
  fromcol[2] = 7;
  fromrow[2] = 2;
  
  ext1 = 873946;
  ext2 = 873946;
  
  blockload(Compb);
	mtrw = matrowcnt(Compb);
  curcomp = CurrentCompany;
  
  INr.Code = "";
  INCi = 0;
  while (loopmain(INr,1,true)) begin
		if(RepSpec.flags[2]!=0 or currentcompany==18) then begin
			tempINCodes[INCi] = INr.AlternativeCode;
		end else begin
			tempINCodes[INCi] = INr.Code;
		end;
    INCi = INCi + 1;
    alldata[INr.Code & ":name"] = INr.Name;
    pos = 0;
    uloc = "";
    ExtractObj(INr.DispGroups,pos,uloc); 
    while (nonblank(uloc)) begin
      DIr.Code = uloc;
      readfirstmain(DIr,1,true);
      if (DIr.CType!="BRAND")then begin
        CTyper.Code = DIr.CType;
        readfirstmain(CTyper,1,true);
        if !TCInArr[CTyper.Comment] then begin
          TCInArr[CTyper.Comment] = true;
          typeClassif[TCi] = CTyper.Comment;
          TCi = TCi + 1;
        end;
        alldata[INr.Code & ":" & CTyper.Comment] = DIr.Name;
      end else begin
        alldata[INr.Code & ":brand"] = DIr.Name;
        brandcode = DIr.Code;
      end;
      ExtractObj(INr.DispGroups,pos,uloc);
    end;
    
    if ((brandcode==RepSpec.f1) or blank(RepSpec.f1)) and ((INr.Group==RepSpec.f3) or blank(RepSpec.f3)) then begin
      For(i=0;i<mtrw;i=i+1) begin
				setcompany(i+1,false);
        ISr.Code = INr.Code;
        TrHs = true;
        while (loopmain(ISr,1,TrHs)) begin
          testf = true;
          if (ISr.Code!=INr.Code) then begin testf = false; TrHs = false; end;
          if (nonblank(RepSpec.f2) and ISr.Location!=RepSpec.f2) then begin testf = false; end;
          if (ISr.Location==";;;") then begin testf = false; end;
          if (ISr.Instock==0) then begin testf = false; end;
          if (testf) then begin
            if !stockInArr[ISr.Location] then begin
              stockInArr[ISr.Location] = true;
              stocks[SQi] = ISr.Location;
              SQi = SQi + 1;
            end;
            alldata[INr.Code & ":" & ISr.Location] = (StringToInt(alldata[INr.Code & ":" & ISr.Location]) + ISr.Instock) & "";
            alldata[INr.Code & ":allstocksqty"] = (StringToInt(alldata[INr.Code & ":allstocksqty"]) + ISr.Instock) & "";
          end;
        end;
        resetloop(ISr);
      end; 
      resetcompany(curcomp);
      cnt = 0;
      price = 0;
      PLr.ArtCode = INr.Code;
      PLr.PLCode = "RRP";
      while (loopmain(PLr,2,(PLr.ArtCode==INr.Code))) begin
        if(PLr.ArtCode==INr.Code)then begin
          price = price + PLr.ExVatPrice;
          cnt = cnt + 1;
          if(nonblank(PLr.CurncyCode))then begin
            pricecur = PLr.CurncyCode;
          end else begin
            PLDefr.Code = "RRP";
            readfirstmain(PLDefr,1,true);
            pricecur = PLDefr.CurncyCode;
          end;
        end;
      end;
      resetloop(PLr);
      alldata[INr.Code & ":retail"] = price/cnt;
      alldata[INr.Code & ":cur"] = pricecur;
		
      realcur = INr.LastPurchCurncyCode;
      curcost = blankval;
      FindAwerageCostCurProc(INr.Code,"",INr.LastPurchCurncyCode,currentdate,realcur,brandcur,curcost,curcost2);
      alldata[INr.Code & ":cost"] = curcost;
      alldata[INr.Code & ":date"] = INr.LastPriceChange;
      alldata[INr.Code & ":barcode"] = INr.BarCode;
      fullpath = "";
      FindAndStoreINVcImgLink(INr,currentcompany,fullpath,tstr);
      alldata[INr.Code & ":pathToImg"] = fullpath;
    end;
  end;
  
  j = 0;
  for (i=0;i<tempINCodes.length;i=i+1) begin
    if nonblank(alldata[tempINCodes[i] & ":allstocksqty"]) then begin 
      INCodes[j] = tempINCodes[i];
      j = j + 1;
    end;
  end;
  
  numOfUniqueSharedStrings = 0;
	numOfSharedStrings = 0;
	XmlXlsxWorkBegin(fileToSave,reportName);
	CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,1,false);
  PrepToAddImgToAllSheet(qtyOfSheets,fileToSave);
	sheetnum = 1;
	SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
  BeginSheetData(sheetnum,fileToSave);
    rownum = 1;
    i = 0;
    while (i < INCodes.length) begin
      if ((INCodes.length - mod((INCodes.length - i),INInRow))/i == 1) then begin
        INInRow = INCodes.length - i;
      end;
      if (INCodes.length<INInRow) then begin
        INInRow = INCodes.length;
      end;
      BeginRow(sheetnum,fileToSave,rownum,0,9.6);
        colnum = 1;
        for (k=0;k<INInRow;k=k+1) begin
          style = 9;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,INCodes[i + k],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 1;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 4;
            mas[maslen] = "<rPr><b" & Chr(47) & "><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t>ЉлассификациЯ<" & Chr(47) & "t><" & Chr(47) & "r><r><rPr><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & ">";
            maslen = maslen + 1;
            mas[maslen] = "<charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t xml:space=" & Chr(34) & "preserve" & Chr(34) & ">";
            maslen = maslen + 1;
            for (j=0;j<typeClassif.length;j=j+1) begin
              if nonblank(alldata[INCodes[i + k] & ":" & typeClassif[j]]) then begin
                mas[maslen] = Chr(13) & Chr(10) & typeClassif[j] & ": " & alldata[INCodes[i + k] & ":" & typeClassif[j]];
                maslen = maslen + 1;
              end;
            end;
            mas[maslen] = "<" & Chr(47) & "t>";
            maslen = maslen + 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,",,,b" & maslen,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
        end;
      EndRow(sheetnum,fileToSave,rownum);
      BeginRow(sheetnum,fileToSave,rownum,0,9.6);
        colnum = 1;
        for (k=0;k<INInRow;k=k+1) begin
          style = 10;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,alldata[INCodes[i + k] & ":name"],SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 7;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 8;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        end;
      EndRow(sheetnum,fileToSave,rownum);
      BeginRow(sheetnum,fileToSave,rownum,0,42);
        colnum = 1;
        for (k=0;k<INInRow;k=k+1) begin
          style = 6;
          //mas[maslen] = "Ѓренд: " & ConvertXml(alldata[INCodes[i + k] & ":brand"]) & Chr(13) & Chr(10) & "ђитейл: " & alldata[INCodes[i + k] & ":retail"] & Chr(13) & Chr(10) & "‘ебестоимость: " & alldata[INCodes[i + k] & ":cost"] & Chr(13) & Chr(10) & "‚алюта: " & alldata[INCodes[i + k] & ":cur"] & Chr(13) & Chr(10) & "„ата посл. пост.: " & alldata[INCodes[i + k] & ":date"];
          mas[maslen] = "Ѓренд: " & ConvertXml(alldata[INCodes[i + k] & ":brand"]) & Chr(13) & Chr(10);
          maslen = maslen + 1;
          mas[maslen] = "ђитейл: " & alldata[INCodes[i + k] & ":retail"] & Chr(13) & Chr(10);
          maslen = maslen + 1;
          mas[maslen] = "‘ебестоимость: " & alldata[INCodes[i + k] & ":cost"] & Chr(13) & Chr(10);
          maslen = maslen + 1;
          mas[maslen] = "‚алюта: " & alldata[INCodes[i + k] & ":cur"] & Chr(13) & Chr(10);
          maslen = maslen + 1;
          mas[maslen] = "„ата посл. пост.: " & alldata[INCodes[i + k] & ":date"] & Chr(13) & Chr(10);
          maslen = maslen + 1;
          mas[maslen] = "EAN: " & alldata[INCodes[i + k] & ":barcode"];
          maslen = maslen + 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,",,," & maslen,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 7;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          style = 8;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
        end;
      EndRow(sheetnum,fileToSave,rownum);
      BeginRow(sheetnum,fileToSave,rownum,0,36.6);
        colnum = 1;
        for (k=0;k<INInRow;k=k+1) begin
          style = 2;
            mas[maslen] = "<rPr><b" & Chr(47) & "><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t>Ћстатки на складах<" & Chr(47) & "t><" & Chr(47) & "r><r><rPr><sz val=" & Chr(34) & "6" & Chr(34) & Chr(47) & "><color theme=" & Chr(34) & "1" & Chr(34) & Chr(47) & ">";
            maslen = maslen + 1;
            mas[maslen] = "<rFont val=" & Chr(34) & "Times New Roman" & Chr(34) & Chr(47) & "><family val=" & Chr(34) & "1" & Chr(34) & Chr(47) & "><charset val=" & Chr(34) & "204" & Chr(34) & Chr(47) & "><" & Chr(47) & "rPr><t xml:space=" & Chr(34) & "preserve" & Chr(34) & ">";
            maslen = maslen + 1;
            for (j=0;j<stocks.length;j=j+1) begin
            //-------------------------------
              if (((i + k)<INCodes.length) and (nonblank(alldata[INCodes[i + k] & ":" & stocks[j]]))) then begin
                mas[maslen] = Chr(13) & Chr(10) & stocks[j] & ": " & alldata[INCodes[i + k] & ":" & stocks[j]];
                maslen = maslen + 1;
              end;
            end;
            mas[maslen] = "<" & Chr(47) & "t>";
            maslen = maslen + 1;
          StringCell(sheetnum,fileToSave,colnum,rownum,style,",,,b" & maslen,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
          style = 3;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          mergeCell[qtyMergeCell] = GetStringCellNum(colnum,rownum - 3) & ":" & GetStringCellNum(colnum,rownum);
          qtyMergeCell = qtyMergeCell + 1;
          style = 5;
          qtyOfEmpStr = 1;
          EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
          imgCounter = imgCounter + 1;
          AddImageOnCurrentSheet(sheetnum,fileToSave,alldata[INCodes[i + k] & ":pathToImg"],imgCounter,fromcol[k],0,fromrow[k],0,fromcoloff[k],-1,fromrowoff[k],-1,1,ext1,ext2);
          //-------------------------------
          if (k<fromrow.length) then begin
            fromrow[k] = fromrow[k] + 4;
          end else begin
            fromrow[k] = 4;
          end;
        end;
      EndRow(sheetnum,fileToSave,rownum);
      i = i + INInRow;
    end;
    
    
	EndSheetData(sheetnum,fileToSave);
  MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
	EndSheet(sheetnum,fileToSave,sheetnum);
  EndToAddImgToAllSheet(qtyOfSheets,fileToSave);
	FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
	ConvertToXLSX(fileToSave,true);
	MilliSleep(5000);
  //CopyFile(fileToSave,"webcust" & fileToSave);
  //delete_file(fileToSave);
return;
end;


global
procedure ImagesExcelRn(record RcVc RepSpec)
begin
  string 250 filename,tstr,errstr,tstr2,checkEmptFilter;
  boolean testf;
  record LocationVc Locr;
  record DIVc DIr;
  record ITVc ITr;
  integer i,char,oldCompany;
  longint curtick;
  testf = true;
  curtick = getcurtick();
  if nonblank(RepSpec.f1) then begin
	DIr.Code = RepSpec.f1;
	if readfirstmain(DIr,1,true) then begin
	  if (DIr.CType!="BRAND") then begin
		testf  = false;
		errstr = "Ѓренд не найден";
	  end;
	end else begin
	  testf  = false;
	  errstr = "Ѓренд не найден";
	end;
  end;
	checkEmptFilter = RepSpec.f1 & RepSpec.f3 & RepSpec.f2 & RepSpec.f4 & RepSpec.f5 & RepSpec.f10 & RepSpec.f9 & RepSpec.f8 & RepSpec.f11;
	if (blank(checkEmptFilter)) then begin
		testf  = false;
		errstr = "Ћтчет не будет выгружен без указанного хотЯ бы одного фильтра!";
	end;
  if nonblank(RepSpec.f2) then begin
	Locr.Code = RepSpec.f2;
	if !readfirstmain(Locr,1,true) then begin
	  testf  = false;
	  errstr = "‘клад не найден";
	end;
  end;
  if nonblank(RepSpec.f3) then begin
	ITr.Code = RepSpec.f3;
	if !readfirstmain(ITr,1,true) then begin
	  testf  = false;
	  errstr = "ѓруппа не найдена";
	end;
  end;
  if testf then begin
	tstr = "Stock_report_by_locations_with_images";
	if nonblank(RepSpec.f1) then begin
	  tstr2 = "";
	  for (i=0;i<Len(RepSpec.f1);i=i+1) begin
		char = Asc(Mid(RepSpec.f1,i,1));
		if (((char>47) and (char<58)) or 
			((char>64) and (char<91)) or 
			((char>96) and (char<123))) then begin
		  tstr2 = tstr2 & Chr(char);
		end;
	  end;
	  tstr = tstr & "_Brand_-_" & tstr2;
	end;
	if nonblank(RepSpec.f2) then begin
	  tstr2 = "";
	  for (i=0;i<Len(RepSpec.f2);i=i+1) begin
		char = Asc(Mid(RepSpec.f2,i,1));
		if (((char>47) and (char<58)) or 
			((char>64) and (char<91)) or 
			((char>96) and (char<123))) then begin
		  tstr2 = tstr2 & Chr(char);
		end;
	  end;
	  tstr = tstr & "_Loc_-_" & tstr2;
	end;
	if nonblank(RepSpec.f3) then begin
	  tstr2 = "";
	  for (i=0;i<Len(RepSpec.f3);i=i+1) begin
		char = Asc(Mid(RepSpec.f3,i,1));
		if (((char>47) and (char<58)) or 
			((char>64) and (char<91)) or 
			((char>96) and (char<123))) then begin
		  tstr2 = tstr2 & Chr(char);
		end;
	  end;
	  tstr = tstr & "Group_-_" & tstr2;
	end;
	tstr = tstr & "_" & CurrentUser & "_" & DateToString(CurrentDate,"DDMMYYYY") & StrReplace(CurrentTime,":","");
	filename = tstr & ".xlsx";
	RepSpec.f6 = filename;
	if RepSpec.flags[1]==1 then begin
	  ImagesExcel2(RepSpec);
	end else begin
	  ImagesExcel(RepSpec);
	end;
	StartReportNoHeaderJob("Ћстатки по складам с картинками");
	  StartFormat(15);
		OutString(0,"DblImagesExcel",RepSpec.f7 & filename,false);
	  EndFormat;
	EndJob;
  end else begin
	StartReportNoHeaderJob("Ћстатки по складам с картинками");
	  StartFormat(15);
		OutString(0,0,errstr,false);
	  EndFormat;
	EndJob;
  end;
	LogProcTime("ImagesExcelRn",getcurtick() - curtick);
  return;
end;