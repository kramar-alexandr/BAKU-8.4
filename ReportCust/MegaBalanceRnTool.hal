//server-only
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure GetFindCustBalance(string,LongInt,var val,var val,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,Boolean,var Boolean);
external procedure GetObjs(string,string,var string);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure RunARRnToGetDebtOnDateByCurrency(record RcVc,array string,var vector val);
forward procedure PrintStockSD32(record RcVc,integer,date,date,string,array string,var val);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure ExtractObjectsByType(string, string, var array string, var integer);
external function val ItemQtyPerDateGlob(string, date,string);
external procedure CalcCostInCurncyOldDate(record ItemHistVc,var val, string,integer);
external function val AbsoluteVal(val);
external function val FindAwerageCost(string,string,string,date,string);
external procedure FindAwerageCostCurProc(string, string,string,date,string,string,var val,var val);
external function val ItemQtyPerDate(string,date,string,string,var val,var integer,var vector val,var vector val,var array string,string);
external procedure LogProcTime(string,longint);
external function val ItemQtyPerDateGlobCons (string, date,string);

SetLangMode(LangRussian,"RUS",0);

function string 255 PrepareDispGroups(record RcVc RepSpec, string dispgroups)
begin
	string 200 res,tstr;
	integer pos;
	record DIVc DIr;
	

	if(RepSpec.flags[1]==1)then begin
		/*pos = 0;
		ExtractObj(dispgroups,pos,tstr);
		While (nonblank(tstr)) begin
			if(nonblank(tstr))then begin
				DIr.Code = tstr;
				if(readfirstmain(DIr,1,true))then begin
					if (NonBlank(DIr.CCat)) then begin
						res = res & DIr.CCat & ",";
					end else begin
						if (DIr.CType == "SUBGROUP") then begin
							res = res & "Other,";
						end;
					end;
				end;
			end;
			ExtractObj(dispgroups,pos,tstr);
		end;
		if(nonblank(res))then begin
			res = left(res,len(res)-1);
		end;*/
		res = dispgroups;
	end else begin
		res = dispgroups;
	end;
	
	PrepareDispGroups = res;

return;
end;

global
procedure PrintStockStat1(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands,var val totusd)
begin
	val fr,to1,to2,br1,br2;
	val BrandsBalUSDtotal,BrandsBalUSDtotalcons;
	integer i;
	array val aBrandsBalEUR,aBrandsBalEURcons;
	array val aBrandsBalCHF,aBrandsBalCHFcons;
	array val aBrandsBalUSD,aBrandsBalUSDcons;
	array val aBrandsBalGBP,aBrandsBalGBPcons;
	array val aBrandsBalAZN,aBrandsBalAZNcons;
	date curdate;
	record ItemHistVc IHr;
	boolean TrHs,testf,foundf;
	record INVc INr;
	string 10 incurncy,brandcur;
	integer sign;
	integer br;
	val totrow,curcost2,curcost,awercost,itqty;
	record ItemStatusVc ISr;
	record SerBalVc SBr;
	boolean TrHs2,testf2;
	date todate;
	integer acnt;
	vector val cqty,ccost;
	array string 10 acur;
	string 10 realcur;
	string 255 tstr2,filename,serverip;
	record IVVc IVr;
	row IVVc IVrw;
	record PUVc PUr;
	row PUVc PUrw;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;
	vector boolean vConsStockCodef;
	
		
	Locr.Code = "";
	while (loopmain(Locr,1,true)) begin
		if (nonblank(Locr.ConsigStockCode)) then begin
			vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
			vConsStockCodef[Locr.ConsigStockCode] = true;
		end;
		if (nonblank(Locr.DefectStockCode)) then begin
			vDefStockCode[Locr.Code] = Locr.DefectStockCode;
		end;
	end;
		

	startformat(15);
		outstring(0,0,"1",false);
		outstring(0,0,"Остаток товара на складе (FOB)",false);
	endformat;
	
	startformat(15);
		outstring(0,0,"",false);
		outstring(0,0,"Собственный товар",false);
	endformat;
	
	For(i=0;i<brandscnt;i=i+1) begin
		aBrandsBalEUR[i] = 0;
		aBrandsBalCHF[i] = 0;
		aBrandsBalUSD[i] = 0;
		aBrandsBalGBP[i] = 0;
		aBrandsBalAZN[i] = 0;
		aBrandsBalEURcons[i] = 0;
		aBrandsBalCHFcons[i] = 0;
		aBrandsBalUSDcons[i] = 0;
		aBrandsBalGBPcons[i] = 0;
		aBrandsBalAZNcons[i] = 0;
	end; 
	
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(nonblank(INr.LastPurchCurncyCode))then begin
			incurncy = INr.LastPurchCurncyCode;
		end else begin
			incurncy = "USD";
		end;
		
		
		
		foundf = false;
		For(i=0;i<brandscnt;i=i+1) begin
			if(setinset(aBrands[i],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
				br = i;
				foundf = true;
			end;
		end; 
		if(setinset("30",INr.DispGroups))then begin foundf = false; end;
		if(setinset("31",INr.DispGroups))then begin foundf = false; end;
		if(setinset("32",INr.DispGroups))then begin foundf = false; end;
		if(setinset("33",INr.DispGroups))then begin foundf = false; end;
		if(setinset("34",INr.DispGroups))then begin foundf = false; end;
		if(setinset("35",INr.DispGroups))then begin foundf = false; end;
			
		if(foundf)then begin
			if(ItemQtyPerDateGlob(INr.Code,addday(ed,1),location)<=0)then begin
				foundf = false;
			end;
		end;
		
		/*if(foundf)then begin
			FindAwerageCostCurProc(INr.Code,location,INr.LastPurchCurncyCode,ed,INr.LastPurchCurncyCode,brandcur,curcost,curcost2);
		end;*/
		
		/*		
		IHr.TransDate = "";
		IHr.ArtCode = INr.Code;
		TrHs = foundf;
		curdate = "";
		
		
		brandcur = "";
		curcost = blankval;
		while(loopkey("ArtCode",IHr,2,TrHs))begin
			testf = true;
			if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
			if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
			if(IHr.StockAffectf==0)then begin testf = false; end;
			if(nonblank(location) and location!=IHr.Location)then begin testf = false; end;
			
			
			if(testf)then begin
				if(IHr.Qty>=0)then begin
					sign = 1;
				end else begin
					sign = -1;
				end;	
				
				
				if(nonblank(IHr.CurncyCode))then begin
					brandcur = IHr.CurncyCode;
					curcost = IHr.TotCostPriceCurncy/AbsoluteVal(IHr.Qty);
				end;
				
				if(aBrands[br]!="Dupont")then begin
					if(IHr.CurncyCode=="" or IHr.CurncyCode=="AZN")then begin
						if(INr.LastPurchCurncyCode!="AZN" and INr.LastPurchCurncyCode!="")then begin
							//curcost2 = blankval;
							//CalcCostInCurncyOldDate(IHr,curcost2,INr.LastPurchCurncyCode,sign);
							//IHr.CurncyCode = INr.LastPurchCurncyCode;
							//IHr.TotCostPriceCurncy = curcost2;
							IHr.CurncyCode = brandcur;
							IHr.TotCostPriceCurncy = curcost * AbsoluteVal(IHr.Qty);
						end;
					end;
				end;
				
				switch(IHr.ConsigStock)begin
					case 0:
						if(INr.ConsgType==0)then begin
							if(br==21)then begin
								//logtext(0,chr(9) & INr.Code & chr(9) & IHr.TotCostPriceCurncy * sign & chr(9) & IHr.CurncyCode);
							end;
							switch(IHr.CurncyCode)begin
								case"EUR":aBrandsBalEUR[br] = aBrandsBalEUR[br] + IHr.TotCostPriceCurncy * sign;
								case"CHF":aBrandsBalCHF[br] = aBrandsBalCHF[br] + IHr.TotCostPriceCurncy * sign;
								case"USD":aBrandsBalUSD[br] = aBrandsBalUSD[br] + IHr.TotCostPriceCurncy * sign;
								case"GBP":aBrandsBalGBP[br] = aBrandsBalGBP[br] + IHr.TotCostPriceCurncy * sign;
								case"AZN":aBrandsBalAZN[br] = aBrandsBalAZN[br] + IHr.TotCostPriceCurncy * sign;												
								case"":aBrandsBalAZN[br] = aBrandsBalAZN[br] + IHr.TotCostPrice * sign;
							end;
						end else begin
							if(INr.ConsgType==1)then begin
								switch(IHr.CurncyCode)begin
									case"EUR":aBrandsBalEURcons[br] = aBrandsBalEURcons[br] + IHr.TotCostPriceCurncy * sign;
									case"CHF":aBrandsBalCHFcons[br] = aBrandsBalCHFcons[br] + IHr.TotCostPriceCurncy * sign;
									case"USD":aBrandsBalUSDcons[br] = aBrandsBalUSDcons[br] + IHr.TotCostPriceCurncy * sign;
									case"GBP":aBrandsBalGBPcons[br] = aBrandsBalGBPcons[br] + IHr.TotCostPriceCurncy * sign;
									case"AZN":aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + IHr.TotCostPriceCurncy * sign;
									case"":aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + IHr.TotCostPrice * sign;
								end;
							end;
						end;
					case 1:
						switch(IHr.CurncyCode)begin
							case"EUR":aBrandsBalEURcons[br] = aBrandsBalEURcons[br] + IHr.TotCostPriceCurncy * sign;
							case"CHF":aBrandsBalCHFcons[br] = aBrandsBalCHFcons[br] + IHr.TotCostPriceCurncy * sign;
							case"USD":aBrandsBalUSDcons[br] = aBrandsBalUSDcons[br] + IHr.TotCostPriceCurncy * sign;
							case"GBP":aBrandsBalGBPcons[br] = aBrandsBalGBPcons[br] + IHr.TotCostPriceCurncy * sign;
							case"AZN":aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + IHr.TotCostPriceCurncy * sign;
							case"":aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + IHr.TotCostPriceCurncy * sign;
						end;	
						
				end;
			
			end;
			
		end;
		resetloop(IHr);*/
		
		
		
		todate = ed;
		if(blank(todate))then begin
			todate = currentdate;
		end;

		ISr.Code = INr.Code;
		realcur = INr.LastPurchCurncyCode;
		TrHs2 = true;
		ResetLoop(ISr);
		while(loopmain(ISr,1,TrHs2)) begin
			testf2 = true;
			if(ISr.Code!=INr.Code)then begin testf2 = false; TrHs2 = false; end;
			//logtext(0,INr.Code & "_" & ISr.Code);
			if(ISr.Location==";;;")then begin testf2 = false; end;
			if(ISr.Location!=location and ISr.Location!=vConsStockCode[location])then begin testf2 = false; end;
			
			if(testf2)then begin
				SBr.CostPrice = 0;
				ISr.Instock = ItemQtyPerDate(ISr.Code,todate,ISr.Location,"",SBr.CostPrice,acnt,cqty,ccost,acur,brandcur);
			end;
			if(ISr.Instock<=0)then begin testf2 = false; end;
			
			if(testf2)then begin
				if(INr.SerNrf==0)then begin
					For(i=0;i<acnt;i=i+1) begin
						if(INr.LastPurchCurncyCode==acur[i] and nonblank(INr.LastPurchCurncyCode))then begin
							cqty[INr.LastPurchCurncyCode] = cqty[INr.LastPurchCurncyCode] + cqty[""];
							ccost[INr.LastPurchCurncyCode] = ccost[INr.LastPurchCurncyCode] + ccost[""];
							cqty[""] = blankval;
							ccost[""] = blankval;
						end;
					end; 
					
					
					For(i=0;i<acnt;i=i+1) begin
						if(cqty[acur[i]]!=0)then begin
							INr.LastPurchCurncyCode = acur[i];
							ISr.Instock = cqty[acur[i]];
							curcost = 0;
							curcost2 = 0;
							FindAwerageCostCurProc(INr.Code,ISr.Location,INr.LastPurchCurncyCode,ed,incurncy,"",curcost,curcost2);
							itqty = ItemQtyPerDateGlob(INr.Code,addday(ed,1),ISr.Location);
							if(itqty<0)then begin
								sign = -1;
							end else begin
								sign = 1;
							end;
							
							
							if (INr.ConsgType==1) then begin
								logtext(0,testf2 & " testf2 " & INr.ConsgType & " " & INr.Code & " " & ISr.Instock & " " & itqty);
							end;
							
							
							if(foundf)then begin
								if(INr.ConsgType==0 and !vConsStockCodef[ISr.Location])then begin
									//if(INr.BPIBrand=="BRND0020")then begin
									// if(setinset("BRND0020",INr.DispGroups))then begin
										// startformat(15);
											// outstring(0,0,INr.Code,false);
											// outval(0,0,curcost*itqty*sign,M45Val,false);
											// outstring(0,0,location,false);
											// outstring(0,0,incurncy,false);
											// outstring(0,0,INr.LastPurchCurncyCode,false);
											// outstring(0,0,"_",false);
										// endformat;
									// end;
									switch(INr.LastPurchCurncyCode)begin
										case"EUR":aBrandsBalEUR[br] = aBrandsBalEUR[br] + (curcost*itqty*sign); 
										case"CHF":aBrandsBalCHF[br] = aBrandsBalCHF[br] + (curcost*itqty*sign); 
										case"USD":aBrandsBalUSD[br] = aBrandsBalUSD[br] + (curcost*itqty*sign); 
										case"GBP":aBrandsBalGBP[br] = aBrandsBalGBP[br] + (curcost*itqty*sign); 
										case"AZN":aBrandsBalAZN[br] = aBrandsBalAZN[br] + (curcost*itqty*sign); 
										case"":		aBrandsBalAZN[br] = aBrandsBalAZN[br] + (curcost*itqty*sign); 
									end;
								end else begin
									if(INr.ConsgType==1 or vConsStockCodef[ISr.Location])then begin
										switch(INr.LastPurchCurncyCode)begin
											case"EUR":aBrandsBalEURcons[br] = aBrandsBalEURcons[br] + (curcost*itqty*sign);
											case"CHF":aBrandsBalCHFcons[br] = aBrandsBalCHFcons[br] + (curcost*itqty*sign);
											case"USD":aBrandsBalUSDcons[br] = aBrandsBalUSDcons[br] + (curcost*itqty*sign);
											case"GBP":aBrandsBalGBPcons[br] = aBrandsBalGBPcons[br] + (curcost*itqty*sign);
											case"AZN":aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + (curcost*itqty*sign);
											case"":		aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + (curcost*itqty*sign);
										end;
									end;
								end;
							end;
						end;
					end;
					
				end else begin
					SBr.Item = INr.Code;
					SBr.Location = ISr.Location;
					while(loopmain(SBr,2,(SBr.Item==INr.Code and SBr.Location==ISr.Location))) begin
						if(SBr.Item==INr.Code and SBr.Location==ISr.Location)then begin
							ISr.Instock = ItemQtyPerDate(ISr.Code,todate,ISr.Location,SBr.Serial,SBr.CostPrice,acnt,cqty,ccost,acur,brandcur);
							itqty = SBr.Quant;
							if(ISr.Instock>0)then begin
								curcost = 0;
								curcost2 = 0;
								FindAwerageCostCurProc(INr.Code,location,INr.LastPurchCurncyCode,ed,incurncy,"",curcost,curcost2);
								
								// if(INr.Code=="3203136233")then begin
									// logtext(0,INr.Code & Chr(9) & ISr.Location & Chr(9) & INr.LastPurchCurncyCode & Chr(9) & Chr(9) & brandcur & Chr(9) & curcost & Chr(9) & curcost2);
								// end;
								
								if(true)then begin
									//awercost = costprice;
									IHr.ArtCode = INr.Code;
									IHr.SerialNr = SBr.Serial;
									IHr.FileName = "PUVc";
									if(readlastkey("ArtCodeSerialNr",IHr,3,true))then begin
										PUr.SerNr = IHr.TransNr;
										readfirstmain(PUr,1,true);
										matrowget(PUr,IHr.Row,PUrw);
										curcost = PUrw.UPrice;
									end else begin
										IHr.ArtCode = INr.Code;
										IHr.SerialNr = SBr.Serial;
										IHr.FileName = "IVVc";
										readfirstkey("ArtCodeSerialNr",IHr,3,true);
										IVr.SerNr = IHr.TransNr;
										readfirstmain(IVr,1,true);
										matrowget(IVr,IHr.Row,IVrw);
										curcost = IVrw.Sum;
									end;
								end;
								
								
								// if(INr.Code=="3203136233")then begin
									// logtext(0,INr.Code & Chr(9) & ISr.Location & Chr(9) & INr.LastPurchCurncyCode & Chr(9) & Chr(9) & brandcur & Chr(9) & curcost & Chr(9) & curcost2);
									// logtext(0,itqty);
									// logtext(0,ISr.Instock);
								// end;
								
								if(itqty==0)then begin
									itqty = ISr.Instock;	
								end;
								
							
							//ISr.Instock = ItemQtyPerDateGlob(INr.Code,addday(ed,1),location);
								if(itqty<0)then begin
									sign = -1;
								end else begin
									sign = 1;
								end;
								
								if(foundf)then begin
									if(INr.ConsgType==0)then begin
										//if(INr.BPIBrand=="BRND0020")then begin
										// if(setinset("BRND0020",INr.DispGroups))then begin
											// startformat(15);
												// outstring(0,0,INr.Code,false);
												// outval(0,0,curcost*itqty*sign,M45Val,false);
												// outstring(0,0,location,false);
												// outstring(0,0,incurncy,false);
												// outstring(0,0,INr.LastPurchCurncyCode,false);
												// outstring(0,0,"_",false);
											// endformat;
										// end;
										switch(INr.LastPurchCurncyCode)begin
											case"EUR":aBrandsBalEUR[br] = aBrandsBalEUR[br] + (curcost*itqty*sign); 
											case"CHF":aBrandsBalCHF[br] = aBrandsBalCHF[br] + (curcost*itqty*sign); 
											case"USD":aBrandsBalUSD[br] = aBrandsBalUSD[br] + (curcost*itqty*sign); 
											case"GBP":aBrandsBalGBP[br] = aBrandsBalGBP[br] + (curcost*itqty*sign); 
											case"AZN":aBrandsBalAZN[br] = aBrandsBalAZN[br] + (curcost*itqty*sign); 
											case"":		aBrandsBalAZN[br] = aBrandsBalAZN[br] + (curcost*itqty*sign); 
										end;
									end else begin
										if(INr.ConsgType==1)then begin
											switch(INr.LastPurchCurncyCode)begin
												case"EUR":aBrandsBalEURcons[br] = aBrandsBalEURcons[br] + (curcost*itqty*sign);
												case"CHF":aBrandsBalCHFcons[br] = aBrandsBalCHFcons[br] + (curcost*itqty*sign);
												case"USD":aBrandsBalUSDcons[br] = aBrandsBalUSDcons[br] + (curcost*itqty*sign);
												case"GBP":aBrandsBalGBPcons[br] = aBrandsBalGBPcons[br] + (curcost*itqty*sign);
												case"AZN":aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + (curcost*itqty*sign);
												case"":		aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + (curcost*itqty*sign);
											end;
										end;
									end;
								end;
							end;
						end;
					end;
					resetloop(SBr);
				end;
			end;
		end;
				
		
		
		
		
		
		
		/*curcost = 0;
		curcost2 = 0;
		FindAwerageCostCurProc(INr.Code,location,incurncy,ed,incurncy,"",curcost,curcost2);
		itqty = ItemQtyPerDateGlob(INr.Code,addday(ed,1),location);
		if(itqty<0)then begin
			sign = -1;
		end else begin
			sign = 1;
		end;
		
		if(foundf)then begin
			if(INr.ConsgType==0)then begin
				if(INr.BPISubGroup=="TYPE00041")then begin
					startformat(15);
						outstring(0,0,INr.Code,false);
						outval(0,0,curcost*itqty*sign,M45Val,false);
						outstring(0,0,location,false);
						outstring(0,0,incurncy,false);
						outstring(0,0,INr.LastPurchCurncyCode,false);
						outstring(0,0,"_",false);
					endformat;
				end;
				switch(incurncy)begin
					case"EUR":aBrandsBalEUR[br] = aBrandsBalEUR[br] + (curcost*itqty*sign); 
					case"CHF":aBrandsBalCHF[br] = aBrandsBalCHF[br] + (curcost*itqty*sign); 
					case"USD":aBrandsBalUSD[br] = aBrandsBalUSD[br] + (curcost*itqty*sign); 
					case"GBP":aBrandsBalGBP[br] = aBrandsBalGBP[br] + (curcost*itqty*sign); 
					case"AZN":aBrandsBalAZN[br] = aBrandsBalAZN[br] + (curcost*itqty*sign); 
					case"":		aBrandsBalAZN[br] = aBrandsBalAZN[br] + (curcost*itqty*sign); 
				end;
			end else begin
				if(INr.ConsgType==1)then begin
					switch(incurncy)begin
						case"EUR":aBrandsBalEURcons[br] = aBrandsBalEURcons[br] + (curcost*itqty*sign);
						case"CHF":aBrandsBalCHFcons[br] = aBrandsBalCHFcons[br] + (curcost*itqty*sign);
						case"USD":aBrandsBalUSDcons[br] = aBrandsBalUSDcons[br] + (curcost*itqty*sign);
						case"GBP":aBrandsBalGBPcons[br] = aBrandsBalGBPcons[br] + (curcost*itqty*sign);
						case"AZN":aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + (curcost*itqty*sign);
						case"":		aBrandsBalAZNcons[br] = aBrandsBalAZNcons[br] + (curcost*itqty*sign);
					end;
				end;
			end;
		end;*/
	end;
	
	
	incurncy = "EUR";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalEUR[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalEUR[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalEUR[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "CHF";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalCHF[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalCHF[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalCHF[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "USD";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalUSD[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalUSD[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalUSD[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "GBP";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalGBP[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalGBP[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalGBP[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "AZN";
	//GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalAZN[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalAZN[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalAZN[i];
		end; 
	endformat;
	
	incurncy = "USD";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"Итого " & incurncy,false);
		outstring(150,0,BrandsBalUSDtotal*fr/to1,false);
	endformat;
  totusd = totusd + BrandsBalUSDtotal*fr/to1;
  
	startformat(15);
		outstring(0,0,"1.1",false);
		outstring(0,0,"Временный ввоз",false);
	endformat;
	
	incurncy = "EUR";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalEURcons[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalEURcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalEURcons[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "CHF";
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalCHFcons[i];
	end;
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalCHFcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalCHFcons[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "USD";
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalUSDcons[i];
	end;
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalUSDcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalUSDcons[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "GBP";
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalGBPcons[i];
	end;
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalGBPcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalGBPcons[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "AZN";
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalAZNcons[i];
	end;
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalAZNcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalAZNcons[i];
		end; 
	endformat;
	
	incurncy = "USD";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"Итого " & incurncy,false);
		outstring(150,0,BrandsBalUSDtotalcons*fr/to1,false);
	endformat;
	
return;
end;


global
procedure PrintStockIn2(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	val fr,to1,to2,br1,br2;
	val BrandsPUUSDtotal,BrandsPUUSDtotalcons;
	integer i;
	array val aBrandsPUEUR,aBrandsPUEURcons;
	array val aBrandsPUCHF,aBrandsPUCHFcons;
	array val aBrandsPUUSD,aBrandsPUUSDcons;
	array val aBrandsPUGBP,aBrandsPUGBPcons;
	date curdate;
	record ItemHistVc IHr;
	boolean TrHs,testf,foundf,testf2;
	record INVc INr;
	string 10 incurncy;
	integer sign;
	integer br;
	val totrow;
	record PUVc PUr;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;
	vector boolean vConsStockCodef;
	
		startformat(15);
			outstring(0,0,"2",false);
			outstring(0,0,"Приход товара (FOB)",false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Собственный товар",false);
		endformat;
		
		Locr.Code = "";
		while (loopmain(Locr,1,true)) begin
			if (nonblank(Locr.ConsigStockCode)) then begin
				vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
				vConsStockCodef[Locr.ConsigStockCode] = true;
			end;
			if (nonblank(Locr.DefectStockCode)) then begin
				vDefStockCode[Locr.Code] = Locr.DefectStockCode;
			end;
		end;
		
		
		For(i=0;i<brandscnt;i=i+1) begin
			aBrandsPUEUR[i] = 0;
			aBrandsPUCHF[i] = 0;
			aBrandsPUUSD[i] = 0;
			aBrandsPUGBP[i] = 0;
			aBrandsPUEURcons[i] = 0;
			aBrandsPUCHFcons[i] = 0;
			aBrandsPUUSDcons[i] = 0;
			aBrandsPUGBPcons[i] = 0;
		end;
		
		INr.Code = "";
		while(loopmain(INr,1,true))begin
			if(nonblank(INr.LastPurchCurncyCode))then begin
				incurncy = INr.LastPurchCurncyCode;
			end else begin
				incurncy = "USD";
			end;
			foundf = false;
			For(i=0;i<brandscnt;i=i+1) begin
				if(setinset(aBrands[i],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
					br = i;
					foundf = true;
				end;
			end; 
			
			if(setinset("30",INr.DispGroups))then begin foundf = false; end;
			if(setinset("31",INr.DispGroups))then begin foundf = false; end;
			if(setinset("32",INr.DispGroups))then begin foundf = false; end;
			if(setinset("33",INr.DispGroups))then begin foundf = false; end;
			if(setinset("34",INr.DispGroups))then begin foundf = false; end;
			if(setinset("35",INr.DispGroups))then begin foundf = false; end;
			
			IHr.TransDate = "";
			IHr.ArtCode = INr.Code;
			TrHs = foundf;
			curdate = "";
			while(loopkey("ArtCode",IHr,2,TrHs))begin
				testf = true;
				
				if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
				if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
				if(IHr.StockAffectf==0)then begin testf = false; end;
				if(nonblank(location) and location!=IHr.Location and vConsStockCode[location]!=IHr.Location and vDefStockCode[location]!=IHr.Location)then begin testf = false; end;
			
			
				if(testf)then begin
					if(IHr.Qty>=0)then begin
						sign = 1;
					end else begin
						sign = -1;
					end;
					
					if(IHr.TransDate>=sd and IHr.FileName=="PUVc")then begin
						testf2 = true;
						PUr.SerNr = IHr.TransNr;
						if(readfirstmain(PUr,1,true))then begin
							if(left(PUr.VECode,3)=="FOB" and PUr.VECode!="FOB_SKLAD")then begin
								testf2 = false;
							end;
						end;
						
						if(testf2)then begin
							switch(IHr.ConsigStock)begin
								case 0:
								if(INr.ConsgType==0 and !vConsStockCodef[IHr.Location])then begin
									switch(IHr.CurncyCode)begin
										case"EUR":aBrandsPUEUR[br] = aBrandsPUEUR[br] + IHr.TotCostPriceCurncy * sign;
										case"CHF":aBrandsPUCHF[br] = aBrandsPUCHF[br] + IHr.TotCostPriceCurncy * sign;
										case"USD":aBrandsPUUSD[br] = aBrandsPUUSD[br] + IHr.TotCostPriceCurncy * sign;
										case"GBP":aBrandsPUGBP[br] = aBrandsPUGBP[br] + IHr.TotCostPriceCurncy * sign;
									end;
								end else begin
									if(INr.ConsgType==1 or vConsStockCodef[IHr.Location])then begin
										switch(IHr.CurncyCode)begin
										case"EUR":aBrandsPUEURcons[br] = aBrandsPUEURcons[br] + IHr.TotCostPriceCurncy * sign;
										case"CHF":aBrandsPUCHFcons[br] = aBrandsPUCHFcons[br] + IHr.TotCostPriceCurncy * sign;
										case"USD":aBrandsPUUSDcons[br] = aBrandsPUUSDcons[br] + IHr.TotCostPriceCurncy * sign;
										case"GBP":aBrandsPUGBPcons[br] = aBrandsPUGBPcons[br] + IHr.TotCostPriceCurncy * sign;
									end;
									end;
								end;
								case 1:
								switch(IHr.CurncyCode)begin
									case"EUR":aBrandsPUEURcons[br] = aBrandsPUEURcons[br] + IHr.TotCostPriceCurncy * sign;
									case"CHF":aBrandsPUCHFcons[br] = aBrandsPUCHFcons[br] + IHr.TotCostPriceCurncy * sign;
									case"USD":aBrandsPUUSDcons[br] = aBrandsPUUSDcons[br] + IHr.TotCostPriceCurncy * sign;
									case"GBP":aBrandsPUGBPcons[br] = aBrandsPUGBPcons[br] + IHr.TotCostPriceCurncy * sign;
								end;
							end;
						end;
					end;
				end;
			end;
			resetloop(IHr);
		end;
		
		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUEUR[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUCHF[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUCHF[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUUSD[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUGBP[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUGBP[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUGBP[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsPUUSDtotal*fr/to1,false);
		endformat;
		
		startformat(15);
			outstring(0,0,"2.1",false);
			outstring(0,0,"Временный ввоз",false);
		endformat;
		
		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUEURcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUEURcons[i],false);
	  		BrandsPUUSDtotalcons = BrandsPUUSDtotalcons + aBrandsPUEURcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUCHFcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUCHFcons[i],false);
	  		BrandsPUUSDtotalcons = BrandsPUUSDtotalcons + aBrandsPUCHFcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUUSDcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUUSDcons[i],false);
	  		BrandsPUUSDtotalcons = BrandsPUUSDtotalcons + aBrandsPUUSDcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUGBPcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUGBPcons[i],false);
	  		BrandsPUUSDtotalcons = BrandsPUUSDtotalcons + aBrandsPUGBPcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsPUUSDtotalcons*fr/to1,false);
		endformat;
	
return;
end;

global 
procedure	PrintStockCLOut312(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	string 10 incurncy;
	record CLOutVc CLOutr;
	row CLOutVc CLOutrw;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 9 January 2018 16:59:48
	boolean TrHs,testf,foundf;
	val BrandsCLOutAZN,BrandsCLOutEUR,BrandsCLOutCHF,BrandsCLOutUSD,BrandsCLOutGBP,BrandsRetCLOutUSDtotal;
	record IVVc IVr;
	row IVVc IVrw;
	record ItemHistVc IHr;
	integer i,mtrw,j,br;
	record INVc INr;
	array val SumEUR;
	array val SumCHF;
	array val SumUSD;
	array val SumGBP;
	val TotSumUSD;
	integer sign;
	val rateusd,ratechf,rateeur,rategbp;
	val t,fr,to1,to2,br1,br2;
	string 10 curcode;
	val totrow;
	record PMBlock PMb;
	row PMBlock PMrw;
	integer pmi,pmrwcnt;
	
	blockload(PMb);
	pmrwcnt = matrowcnt(PMb);
	
	curcode = "USD";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	rateusd = fr * to1;
	
	curcode = "CHF";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	ratechf = fr * to1;
	
	curcode = "EUR";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	rateeur = fr * to1;
	
	curcode = "GBP";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	rategbp = fr * to1;
	
	
	 
		startformat(15);
			outstring(0,0,"3",false);
			outstring(0,0,"Расходы, в том числе",false);
		endformat;
		startformat(15);
			outstring(0,0,"3.1",false);
			outstring(0,0,"денежными средствами",false);
		endformat;
		
		TrHs = true;
		CLOutr.TransDate =sd;
		while(loopkey("TransDate",CLOutr,1,TrHs))begin
			testf = true;
			if(CLOutr.TransDate>ed)then begin TrHs = false; testf = false; end;
			if(CLOutr.OKFlag==0)then begin testf = false; end;
			if(CLOutr.Invalid==1)then begin testf = false; end;
		
			if(testf)then begin
				mtrw = matrowcnt(CLOutr);
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(CLOutr,i,CLOutrw);
	  			foundf = true;
	  			
	  			if(CLOutrw.CorspCode=="E134")then begin foundf = false; end;
	  			if(CLOutrw.CorspCode>="E051" and CLOutrw.CorspCode<="E059/2")then begin foundf = false; end;
	  			
	  			For(pmi=0;pmi<pmrwcnt;pmi=pmi+1) begin
	  				matrowget(PMb,pmi,PMrw);
	  				if(PMrw.Code==CLOutr.PayMode)then begin
	  					if (PMrw.AccNr!="50") and (PMrw.AccNr!="51")  and (PMrw.AccNr!="53") then begin//Edit-------------------Vitalii 14:39 06.04.2018
	  						foundf = false;
	  					end;
	  				end;
					end; 
	  			
	  			if(foundf)then begin
						switch(CLOutr.CurncyCode)begin
							case"AZN":BrandsCLOutAZN = BrandsCLOutAZN + CLOutrw.Sum;
							case"EUR":BrandsCLOutEUR = BrandsCLOutEUR + CLOutrw.Sum;
							case"CHF":BrandsCLOutCHF = BrandsCLOutCHF + CLOutrw.Sum;
							case"USD":BrandsCLOutUSD = BrandsCLOutUSD + CLOutrw.Sum;
							case"GBP":BrandsCLOutGBP = BrandsCLOutGBP + CLOutrw.Sum;
						end;
					end;
				end; 
				
			end;
		end;
		
		i = 0;
		incurncy = "AZN";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutAZN,false);
	  	TotSumUSD = TotSumUSD + BrandsCLOutAZN;
		endformat;
		incurncy = "EUR";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutEUR,false);
	  	TotSumUSD = TotSumUSD + BrandsCLOutEUR*rateeur;
		endformat;
		incurncy = "CHF";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutCHF,false);
	  	TotSumUSD = TotSumUSD + BrandsCLOutCHF*ratechf;
		endformat;
		incurncy = "USD";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutUSD,false);
	  	TotSumUSD = TotSumUSD + BrandsCLOutUSD*rateusd;
		endformat;
		incurncy = "GBP";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutGBP,false);
	  	TotSumUSD = TotSumUSD + BrandsCLOutGBP*rategbp;
		endformat;
				
		PrintStockSD32(RepSpec,brandscnt,sd,ed,location,aBrands,TotSumUSD);
		
return;
end;

global
procedure PrintStockSD32(record RcVc RepSpec,integer brandscnt,date sd, date ed, string location ,array string aBrands,var val BrandsPUUSDtotal)
begin
	val fr,to1,to2,br1,br2;
	//val BrandsPUUSDtotal,BrandsPUUSDtotalcons;
	integer i,mtrw,mtrw2,j,k;
	array val aBrandsPUEUR,aBrandsPUEURcons;
	array val aBrandsPUCHF,aBrandsPUCHFcons;
	array val aBrandsPUUSD,aBrandsPUUSDcons;
	array val aBrandsPUGBP,aBrandsPUGBPcons;
	array val aBrandsPUAZN,aBrandsPUAZNcons;
	date curdate;
	record ItemHistVc IHr;
	boolean TrHs,testf,foundf,testf2,testf3,TrHs2,TrHs3,TrHs1,testf1,foundf2,foundf3;
	record INVc INr;
	string 10 incurncy;
	integer sign;
	integer br;
	val totrow,GCSum;
	record SDVc SDr;
	record IVVc IVr,IV2r;
	row IVVc IVrw,IV2rw;
	record GCRVc GCRr;
	vector boolean GCUsed;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;
	
		startformat(15);
			outstring(0,0,"3.2",false);
			outstring(0,0,"Товаром  (офисные расходы) - Е3,112,125,126,127  - списание товара со склада (в валюте бренда товара) и продажа подарочного сертификата в подарок",false);
		endformat;
		
		if (nonblank(location)) then begin
			Locr.Code = location;
			if (ReadFirstMain(Locr,1,true)) then begin
				if (nonblank(Locr.ConsigStockCode)) then begin
					vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
				end;
				if (nonblank(Locr.DefectStockCode)) then begin
					vDefStockCode[Locr.Code] = Locr.DefectStockCode;
				end;
			end;
		end;
		
		
		For(i=0;i<brandscnt;i=i+1) begin
			aBrandsPUAZN[i] = 0;
			aBrandsPUEUR[i] = 0;
			aBrandsPUCHF[i] = 0;
			aBrandsPUUSD[i] = 0;
			aBrandsPUGBP[i] = 0;
			aBrandsPUEURcons[i] = 0;
			aBrandsPUCHFcons[i] = 0;
			aBrandsPUUSDcons[i] = 0;
			aBrandsPUGBPcons[i] = 0;
		end;
		
		INr.Code = "";
		while(loopmain(INr,1,true))begin
			if(nonblank(INr.LastPurchCurncyCode))then begin
				incurncy = INr.LastPurchCurncyCode;
			end else begin
				incurncy = "USD";
			end;
			foundf = false;
			For(i=0;i<brandscnt;i=i+1) begin
				if(setinset(aBrands[i],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
					br = i;
					foundf = true;
				end;
			end; 
			
			if(setinset("30",INr.DispGroups))then begin foundf = false; end;
			if(setinset("31",INr.DispGroups))then begin foundf = false; end;
			if(setinset("32",INr.DispGroups))then begin foundf = false; end;
			if(setinset("33",INr.DispGroups))then begin foundf = false; end;
			if(setinset("34",INr.DispGroups))then begin foundf = false; end;
			if(setinset("35",INr.DispGroups))then begin foundf = false; end;
			
			IHr.TransDate = sd;
			IHr.ArtCode = INr.Code;
			TrHs = foundf;
			curdate = "";
			while(loopkey("ArtCode",IHr,2,TrHs))begin
				testf = true;
				
				if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
				if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
				if(IHr.StockAffectf==0)then begin testf = false; end;
				if(nonblank(location) and location!=IHr.Location and vConsStockCode[location]!=IHr.Location and vDefStockCode[location]!=IHr.Location)then begin testf = false; end;
				if(IHr.FileName!="SDVc")then begin testf = false; end;
								
				if(testf)then begin
					SDr.SerNr = IHr.TransNr;
					if(readfirstmain(SDr,1,true))then begin
						foundf3 = false;
						if(setinset("E125",SDr.Objects)==true)then begin
							foundf3 = true;
						end;
						if(setinset("E126",SDr.Objects)==true)then begin
							foundf3 = true;
						end;
						if(setinset("E127",SDr.Objects)==true)then begin
							foundf3 = true;
						end;
						if(setinset("E3",SDr.Objects)==true)then begin
							foundf3 = true;
						end;
						if(setinset("E112",SDr.Objects)==true)then begin
							foundf3 = true;
						end;
						
						testf = foundf3;
					end;
				end;
				
				if(testf)then begin
					sign = 1;
					
					if(IHr.TransDate>=sd)then begin
						switch(IHr.CurncyCode)begin
							case"EUR":aBrandsPUEUR[br] = aBrandsPUEUR[br] + IHr.TotCostPriceCurncy * sign;
							case"CHF":aBrandsPUCHF[br] = aBrandsPUCHF[br] + IHr.TotCostPriceCurncy * sign;
							case"USD":aBrandsPUUSD[br] = aBrandsPUUSD[br] + IHr.TotCostPriceCurncy * sign;
							case"GBP":aBrandsPUGBP[br] = aBrandsPUGBP[br] + IHr.TotCostPriceCurncy * sign;
						end;
					end;
				end;
			end;
			resetloop(IHr);
		end;
		
		IVr.InvDate = sd;
		TrHs = true;
		While(loopkey("InvDate",IVr,1,TrHs))begin
			testf = true;
			if(IVr.InvDate>ed)then begin TrHs = false; testf = false; end;
			if(IVr.OKFlag==0)then begin testf = false; end;
			if(IVr.Invalid>0)then begin testf = false; end;
			
			if(testf)then begin
				mtrw = matrowcnt(IVr);
				foundf2 = false;
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IVr,i,IVrw);
						if(IVrw.stp==kInvoiceRowTypeCreditCardPayment)then begin
						if(IVrw.PayMode=="G")then begin
							foundf2 = true;
						end;
					end;
				end;
				if(foundf2)then begin
					For(i=0;i<mtrw;i=i+1) begin
						matrowget(IVr,i,IVrw);
						if(IVrw.stp==kInvoiceRowTypeGiftVoucherSold)then begin
							foundf2 = false;
							GCRr.GCSSerNr = IVrw.GCNr;
							TrHs1 = true;
							
							while(loopkey("GCSSerNr",GCRr,1,TrHs1))begin
								testf3 = true;
								if(GCRr.GCSSerNr!=IVrw.GCNr)then begin TrHs1 = false; testf3 = false; end;
								
								if(testf3)then begin
									if(GCUsed[GCRr.GCSSerNr & ";" GCRr.InvSerNr])then begin
										testf3 = false;
									end else begin
										GCUsed[GCRr.GCSSerNr & ";" GCRr.InvSerNr] = true;
									end;
								end;
								if(testf3)then begin
									IV2r.SerNr = GCRr.InvSerNr;
									if(readfirstmain(IV2r,1,true))then begin
										GCsum = 0;
										mtrw2 = matrowcnt(IV2r);
										For(j=0;j<mtrw2;j=j+1) begin
											matrowget(IV2r,j,IV2rw);
											if(IV2rw.stp==kInvoiceRowTypeGiftVoucherPayment)then begin
												GCsum = GCsum + IVrw.Sum;
											end;
										end;
									
										For(j=0;j<mtrw2;j=j+1) begin
											matrowget(IV2r,j,IV2rw);
											if(IV2rw.stp==kInvoiceRowTypeNormal)then begin
												INr.Code = IV2rw.ArtCode;
												if(readfirstmain(INr,1,true))begin
											
													if(nonblank(INr.LastPurchCurncyCode))then begin
														incurncy = INr.LastPurchCurncyCode;
													end else begin
														incurncy = "USD";
													end;
												
													foundf = false;
													For(k=0;k<brandscnt;k=k+1) begin
														if(setinset(aBrands[k],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
															br = k;
															foundf = true;
														end;
													end; 
													foundf = (INr.Code==IV2rw.ArtCode);
													if(setinset("30",INr.DispGroups))then begin foundf = false; end;
													if(setinset("31",INr.DispGroups))then begin foundf = false; end;
													if(setinset("32",INr.DispGroups))then begin foundf = false; end;
													if(setinset("33",INr.DispGroups))then begin foundf = false; end;
													if(setinset("34",INr.DispGroups))then begin foundf = false; end;
													if(setinset("35",INr.DispGroups))then begin foundf = false; end;
	
													TrHs3 = foundf;
													if(TrHs3)then begin
														GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
														foundf2 = true;
														switch(incurncy)begin
															case"EUR":aBrandsPUEUR[br] = aBrandsPUEUR[br] + IV2rw.Sum/IV2r.Sum4 * GCsum*fr/to1;
															case"CHF":aBrandsPUCHF[br] = aBrandsPUCHF[br] + IV2rw.Sum/IV2r.Sum4 * GCsum*fr/to1;
															case"USD":aBrandsPUUSD[br] = aBrandsPUUSD[br] + IV2rw.Sum/IV2r.Sum4 * GCsum*fr/to1;
															case"GBP":aBrandsPUGBP[br] = aBrandsPUGBP[br] + IV2rw.Sum/IV2r.Sum4 * GCsum*fr/to1;
														end;
													end;
												end;
												resetloop(INr);
											end;
										end;
									
									end;
								end;
							end;
							resetloop(GCRr);
							if(foundf2==false)then begin
								aBrandsPUAZN[br] = aBrandsPUAZN[br] + IVrw.Sum;
							end;
						end;
					end; 
				end;
			end;
		end;
		
		incurncy = "AZN";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUAZN[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUAZN[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUAZN[i];
			end; 
		endformat;
		
		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUEUR[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUCHF[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUCHF[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUUSD[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUGBP[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUGBP[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUGBP[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsPUUSDtotal*fr/to1,false);
		endformat;
	
return;
end;

global
procedure PrintCashIn4123(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands,var val sumusd)
begin
	record IVVc IVr;
	row IVVc IVrw;
	array val aBrandsCashEUR;
	array val aBrandsCashAZN;
	array val aBrandsCashUSD;
	array val aBrandsCashGBP;
	array val aBrandsCashCHF;
	
	array val aBrandsCashEUR44;
	array val aBrandsCashAZN44;
	array val aBrandsCashUSD44;
	array val aBrandsCashGBP44;
	array val aBrandsCashCHF44;
	
	array val aBrandsCashEURFOB;
	array val aBrandsCashAZNFOB;
	array val aBrandsCashUSDFOB;
	array val aBrandsCashGBPFOB;
	array val aBrandsCashCHFFOB;
	
	val BrandsCashUSDtotal;
	array val aBrandsCCAZN;
	array val aBrandsCCUSD;
	array val aBrandsCCGBP;
	array val aBrandsCCAZN44;
	array val aBrandsCCUSD44;
	array val aBrandsCCGBP44;
	val BrandsCCUSDtotal;
	array val aBrandsPaymAZN;
	array val aBrandsPaymEUR;
	array val aBrandsPaymCHF;
	array val aBrandsPaymUSD;
	array val aBrandsPaymGBP;
	array val aBrandPercent;
	boolean servitem;
	
	boolean TrHs,testf,TrHs1,testf1,addedf;
	integer rwcnt,mtrw,i,j,keyi,ori;
	record CUVc CUr;
	record IPVc IPr;
	row IPVc IPrw;
	record IPrsVc IPrsr;
	string 255 keystr;
	string 20 incurncy;
	date curdate;
	val t,fr,to1,to2,br1,br2;
	record INVc INr;
	record DIVc DIr;
	integer pmi,pmmtrw,k,n,d;
	val servprc,prepaymentval,TOTUSD,totrow,Sum4;
	vector val servcash,servterm,servcashfob;
	record ORVc ORr;
	row ORVc ORrw;
	record PMBlock PMb;
	row PMBlock PMrw;
	record ARPayHistVc ARPayr;
	array string 20 brandarray;
	integer brcnt;
	vector integer vObj;
	LongInt MyPercent;
	record ObjVc Objr;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;

	
	startformat(15);
		outstring(0,0,"4",false);
		outstring(0,0,"ВЫРУЧКА, в том числе  USD",false);
	endformat;
	startformat(15);
		outstring(0,0,"4.1",false);
		outstring(0,0,"Приход денежных средств (cash)",false);
	endformat;
	
	
	TrHs = true;
		IVr.InvDate=sd;
		IVr.Location = location;
		if(nonblank(location))then begin
			Locr.Code = location;
			if (ReadFirstMain(Locr,1,true)) then begin
				if (nonblank(Locr.ConsigStockCode)) then begin
					vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
				end;
				if (nonblank(Locr.DefectStockCode)) then begin
					vDefStockCode[Locr.Code] = Locr.DefectStockCode;
				end;
			end;
			keyi = 2;
			keystr = "Location";
		end else begin
			keyi = 1;
			keystr = "InvDate";
		end;
		
		For(i=0;i<brandscnt;i=i+1) begin
			aBrandsCashEUR[i] = 0;
			aBrandsCashAZN[i] = 0;
			aBrandsCashUSD[i] = 0;
			aBrandsCashGBP[i] = 0;
			aBrandsCashCHF[i] = 0;
			aBrandsCashEUR44[i] = 0;
			aBrandsCashAZN44[i] = 0;
			aBrandsCashUSD44[i] = 0;
			aBrandsCashGBP44[i] = 0;
			aBrandsCashCHF44[i] = 0;
			aBrandsCCAZN[i] = 0;
			aBrandsCCUSD[i] = 0;
			aBrandsCCGBP[i] = 0;
			
			aBrandsCCAZN44[i] = 0;
			aBrandsCCUSD44[i] = 0;
			aBrandsCCGBP44[i] = 0;
			
			aBrandsPaymAZN[i] = 0;
			aBrandsPaymEUR[i] = 0;
			aBrandsPaymUSD[i] = 0;
			aBrandsPaymCHF[i] = 0;
			aBrandsPaymGBP[i] = 0;

			
			aBrandsCashEURFOB[i] = 0;
			aBrandsCashAZNFOB[i] = 0;
			aBrandsCashUSDFOB[i] = 0;
			aBrandsCashGBPFOB[i] = 0;
			aBrandsCashCHFFOB[i] = 0;
		end;

		while(loopkey(keystr,IVr,keyi,TrHs))begin
			testf = true;
			servprc = blankval;
			if(IVr.InvDate>ed)then begin TrHs = false; testf = false; end;
			if(nonblank(location) and location!=IVr.Location and vConsStockCode[location]!=IVr.Location and vDefStockCode[location]!=IVr.Location)then begin TrHs = false; testf = false; end;
			if(IVr.OKFlag==0)then begin testf = false; end;
			if(IVr.Invalid>0)then begin testf = false; end;
						
			if(testf)then begin
				Sum4 = 0;
				fr = IVr.FrRate;
				to1 = IVr.ToRateB1;
				if(fr==0 or to1==0)then begin
					fr=1;
					to1=1;
				end;
				For(i=0;i<brandscnt;i=i+1) begin
	  			aBrandPercent[i] = 0;
				end; 
				servitem = false;
				mtrw = matrowcnt(IVr);
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IVr,i,IVrw);
					if(IVrw.stp==kInvoiceRowTypeNormal)then begin
						INr.Code = IVrw.ArtCode;
						readfirstmain(INr,1,true);
						For(j=0;j<brandscnt;j=j+1) begin
	  					if(setinset(aBrands[j],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
	  						aBrandPercent[j] = aBrandPercent[j] + IVrw.Sum;
	  					end;
						end; 
						Sum4 = Sum4 + IVrw.Sum;
						if(INr.Code=="5420208VR1")then begin
							servitem = true;
							servprc = servprc + IVrw.Sum;
						end;
					end;
				end;
				Sum4 = IVr.Sum4 - Sum4;
				if(Sum4>0)then begin
					servprc = servprc + Sum4;
					servitem = true;
				end;
				if(servitem)then begin
					servprc = servprc/IVr.Sum4;
				end;
				
				For(j=0;j<brandscnt;j=j+1) begin
					aBrandPercent[j] = aBrandPercent[j]/IVr.Sum4;
				end;
				
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IVr,i,IVrw);
					if(IVrw.stp==kInvoiceRowTypeCashPayment)then begin
						For(j=0;j<brandscnt;j=j+1) begin
              addedf = false;
							if(left(IVr.CustCode,3)=="FOB")then begin
                CUr.Code = IVr.CustCode;
                readfirstmain(CUr,1,true);
                if (CUr.CustCat=="STORE") then begin
                  addedf = true;
                  switch(IVrw.CurncyCode)begin
                    case "EUR":aBrandsCashEURFOB[j] = aBrandsCashEURFOB[j] + IVrw.Sum * aBrandPercent[j];	
                    case "AZN":aBrandsCashAZNFOB[j] = aBrandsCashAZNFOB[j] + IVrw.Sum * aBrandPercent[j];
                    case "USD":aBrandsCashUSDFOB[j] = aBrandsCashUSDFOB[j] + IVrw.Sum * aBrandPercent[j];
                    case "GBP":aBrandsCashGBPFOB[j] = aBrandsCashGBPFOB[j] + IVrw.Sum * aBrandPercent[j];
                    case "CHF":aBrandsCashCHFFOB[j] = aBrandsCashCHFFOB[j] + IVrw.Sum * aBrandPercent[j];
                  end;
                end;
							end;
              if (!addedf) then begin
								switch(IVrw.CurncyCode)begin
									case "EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] + IVrw.Sum * aBrandPercent[j];	
									case "AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] + IVrw.Sum * aBrandPercent[j];
									case "USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] + IVrw.Sum * aBrandPercent[j];
									case "GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] + IVrw.Sum * aBrandPercent[j];
									case "CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] + IVrw.Sum * aBrandPercent[j];
								end;
							end;
						end;
						if(servitem)then begin
							servcash[IVrw.CurncyCode] = servcash[IVrw.CurncyCode] +  IVrw.Sum*servprc;
						end; 
					end;
					if(IVrw.stp==kInvoiceRowTypeCreditCardPayment and IVrw.Sum>0)then begin
						For(j=0;j<brandscnt;j=j+1) begin
              addedf = false;
							if(left(IVr.CustCode,3)=="FOB")then begin
                CUr.Code = IVr.CustCode;
                readfirstmain(CUr,1,true);
                if (CUr.CustCat=="STORE") then begin
                  addedf = true;
                  aBrandsCashAZNFOB[j] = aBrandsCashAZNFOB[j] + IVrw.Sum * aBrandPercent[j];
                end;
							end;
              if (!addedf) then begin
								aBrandsCCAZN[j] = aBrandsCCAZN[j] + IVrw.Sum * aBrandPercent[j];
							end;
						end;
						if(servitem)then begin
							servterm[IVrw.CurncyCode] = servterm[IVrw.CurncyCode] +  IVrw.Sum*servprc;
						end;
					end;
				end;
						
			end;
		end;
		
		IPr.TransDate = sd;
		TrHs = true;
		blockload(PMb);
		pmmtrw = matrowcnt(PMb);
		while(loopkey("TransDate",IPr,3,TrHs))begin
			testf = true;
			if(IPr.TransDate>ed)then begin TrHs = false; testf = false; end;
			
			For(pmi=0;pmi<pmmtrw;pmi=pmi+1) begin
				matrowget(PMb,pmi,PMrw);
				if(PMrw.Code==IPr.PayMode)then begin
					if(PMrw.AccNr!="50" and PMrw.AccNr!="51")then begin
						testf = false;
						pmi = pmmtrw;
					end;
					pmi = pmmtrw;
				end;
			end; 
			logtext(0,testf & "Enter!");
			if(testf)then begin
				rwcnt = matrowcnt(IPr);
				For(i=0;i<rwcnt;i=i+1) begin
					matrowget(IPr,i,IPrw);
					if(true)then begin
						if(IPrw.InvoiceNr>0)then begin
							IVr.SerNr = IPrw.InvoiceNr;
							Sum4 = 0;
							if(readfirstmain(IVr,1,true))then begin
								servprc = blankval;
								mtrw = matrowcnt(IVr);
								For(k=0;k<brandscnt;k=k+1) begin
									aBrandPercent[k] = 0;
								end;
								servitem = false;
								For(j=0;j<mtrw;j=j+1) begin
									matrowget(IVr,j,IVrw);
									if(IVrw.stp==kInvoiceRowTypeNormal)then begin
										INr.Code = IVrw.ArtCode;
										readfirstmain(INr,1,true);
										For(k=0;k<brandscnt;k=k+1) begin
											if(setinset(aBrands[k],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
												aBrandPercent[k] = aBrandPercent[k] + IVrw.Sum;
											end;
										end; 
										Sum4 = Sum4 + IVrw.Sum;

										if(INr.Code=="5420208VR1")then begin
											servprc = servprc + IVrw.Sum;
											servitem = true;
										end;
									end;
								end;
								
								Sum4 = IVr.Sum4 - Sum4;
								if(Sum4>0)then begin
									servprc = servprc + Sum4;
									servitem = true;
								end;
								
								if(servitem)then begin
									servprc = servprc/IVr.Sum4;
								end;
								For(k=0;k<brandscnt;k=k+1) begin
									aBrandPercent[k] = aBrandPercent[k]/IVr.Sum4;
								end;
                
								addedf = false;
								if(left(IVr.CustCode,3)=="FOB")then begin
								  CUr.Code = IVr.CustCode;
								  readfirstmain(CUr,1,true);
								  if (CUr.CustCat=="STORE") then begin
									addedf = true;
									For(j=0;j<brandscnt;j=j+1) begin
									  switch(IPrw.BankCurncy)begin
										case "EUR":aBrandsCashEURFOB[j] = aBrandsCashEURFOB[j] + IPrw.BankVal * aBrandPercent[j];	
										case "AZN":aBrandsCashAZNFOB[j] = aBrandsCashAZNFOB[j] + IPrw.BankVal * aBrandPercent[j];
										case "USD":aBrandsCashUSDFOB[j] = aBrandsCashUSDFOB[j] + IPrw.BankVal * aBrandPercent[j];
										case "GBP":aBrandsCashGBPFOB[j] = aBrandsCashGBPFOB[j] + IPrw.BankVal * aBrandPercent[j];
										case "CHF":aBrandsCashCHFFOB[j] = aBrandsCashCHFFOB[j] + IPrw.BankVal * aBrandPercent[j];
									  end;
									end;
								  end;
												end;
								if (!addedf) then begin
									if(PMrw.AccNr=="50")then begin
										For(j=0;j<brandscnt;j=j+1) begin
											if(dateinrange(IVr.InvDate,sd,ed))then begin
												switch(IPrw.BankCurncy)begin
													case "EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] + IPrw.BankVal * aBrandPercent[j];	
													case "AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] + IPrw.BankVal * aBrandPercent[j];
													case "USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] + IPrw.BankVal * aBrandPercent[j];
													case "GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] + IPrw.BankVal * aBrandPercent[j];
													case "CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] + IPrw.BankVal * aBrandPercent[j];
												end;
											end else begin
												switch(IPrw.BankCurncy)begin
													case "EUR":aBrandsCashEUR44[j] = aBrandsCashEUR44[j] + IPrw.BankVal * aBrandPercent[j];	
													case "AZN":aBrandsCashAZN44[j] = aBrandsCashAZN44[j] + IPrw.BankVal * aBrandPercent[j];
													case "USD":aBrandsCashUSD44[j] = aBrandsCashUSD44[j] + IPrw.BankVal * aBrandPercent[j];
													case "GBP":aBrandsCashGBP44[j] = aBrandsCashGBP44[j] + IPrw.BankVal * aBrandPercent[j];
													case "CHF":aBrandsCashCHF44[j] = aBrandsCashCHF44[j] + IPrw.BankVal * aBrandPercent[j];
												end;
											end;
										end;
										if(servitem)then begin
											servcash[IPrw.BankCurncy] = servcash[IPrw.BankCurncy] +  IPrw.BankVal*servprc;
										end; 
									end else begin
										For(j=0;j<brandscnt;j=j+1) begin
											switch(IPrw.BankCurncy)begin
												case "AZN":aBrandsCCAZN[j] = aBrandsCCAZN[j] + IPrw.BankVal * aBrandPercent[j];
												case "USD":aBrandsCCUSD[j] = aBrandsCCUSD[j] + IPrw.BankVal * aBrandPercent[j];
											end;
										end;
								
										if(servitem)then begin
											servterm[IPrw.BankCurncy] = servterm[IPrw.BankCurncy] +  IPrw.BankVal*servprc;
										end; 
									end;
                
								end;
							
							end;
						end else begin
							ARPayr.CUPNr = IPrw.CUPNr;
							ARPayr.FileName = "IVVc";
							TrHs1 = true;
							For(k=0;k<brandscnt;k=k+1) begin
								aBrandPercent[k] = 0;
							end;
							Sum4 = 0;
						
							while(loopmain(ARPayr,2,TrHs1))begin
								testf1 = true;
								if(ARPayr.CUPNr!=IPrw.CUPNr)then begin TrHs1 = false; testf1 = false; end;
								if(ARPayr.FileName!="IVVc")then begin TrHs1 = false; testf1 = false; end;
							
								if(testf1)then begin
									IVr.SerNr = ARPayr.SerNr;
									if(readfirstmain(IVr,1,true))then begin
										servprc = blankval;
										mtrw = matrowcnt(IVr);
										Sum4 = Sum4 + IVr.Sum4;
										servitem = false;
										For(j=0;j<mtrw;j=j+1) begin
											matrowget(IVr,j,IVrw);
											if(IVrw.stp==kInvoiceRowTypeNormal and IVrw.Sum>=0)then begin
												INr.Code = IVrw.ArtCode;
												readfirstmain(INr,1,true);
												For(k=0;k<brandscnt;k=k+1) begin
													if(setinset(aBrands[k],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
														aBrandPercent[k] = aBrandPercent[k] + IVrw.Sum;
													end;
												end; 
												if(INr.Code=="5420208VR1")then begin
													servprc = servprc + IVrw.Sum;
													servitem = true;
												end;
											end;
										end;
									end;
								end;	
							end;	
							resetloop(ARPayr);
							if(servitem)then begin
								servprc = servprc/Sum4;
							end;
							For(k=0;k<brandscnt;k=k+1) begin
								aBrandPercent[k] = aBrandPercent[k]/Sum4;
							end;
							
							/*
							4.1 additional by brand
							procedure ExtractObjectsByType(string objstr, string type, var array string res, var integer i)
							
							*/
							brcnt = 0;
							ExtractObjectsByType(IPrw.Objects,"BRAND",brandarray,brcnt);
							/*if(brcnt>0)then begin
								if(Sum4<IPrw.RecVal)then begin
									
								end;
							end;*/
							
							if(Sum4==0)then begin
								d = 0;
								for(k=0;k<brandscnt;k=k+1) begin
									for(n=0;n<brcnt;n=n+1) begin
										if(SetInSet(brandarray[n],aBrands[k]))then begin
											vObj[aBrands[k]] = 1;
											d = d + 1;
										end else begin
											Objr.Code = brandarray[n];
											if(ReadFirstMain(Objr,1,true))then begin
												if(SetInSet(Objr.Comment,aBrands[k]))then begin
													vObj[aBrands[k]] = 1;
													d = d + 1;
												end;
											end;
										end;
									end;
								end;
								if(d!=0)then begin
									MyPercent = 1 / d;
									for(k=0;k<brandscnt;k=k+1) begin
										if(vObj[aBrands[k]]==1)then begin
											aBrandPercent[k] = aBrandPercent[k] + MyPercent;
										end;
									end;
								end else begin
									servitem = true;
									servprc = 1;
								end;
							end;
							servcash[IPrw.BankCurncy] = servcash[IPrw.BankCurncy] +  IPrw.BankVal*servprc;
							if(left(IPrw.CustCode,3)!="FOB" or IPrw.CustCode=="FOB_SKLAD")then begin
								if(PMrw.AccNr=="50")then begin
								  if(true)then begin
									For(j=0;j<brandscnt;j=j+1) begin
									  switch(IPrw.BankCurncy)begin
										case "EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] + IPrw.BankVal * aBrandPercent[j];	
										case "AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] + IPrw.BankVal * aBrandPercent[j];
										case "USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] + IPrw.BankVal * aBrandPercent[j];
										case "GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] + IPrw.BankVal * aBrandPercent[j];
										case "CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] + IPrw.BankVal * aBrandPercent[j];
									  end;
									end;
								  end else begin
									servcash[IPrw.BankCurncy] = servcash[IPrw.BankCurncy] +  IPrw.BankVal;
								  end;
								end else begin
								  For(j=0;j<brandscnt;j=j+1) begin
									switch(IPrw.BankCurncy)begin
									  case "AZN":aBrandsCCAZN[j] = aBrandsCCAZN[j] + IPrw.BankVal * aBrandPercent[j];
									  case "USD":aBrandsCCUSD[j] = aBrandsCCUSD[j] + IPrw.BankVal * aBrandPercent[j];
									end;
								  end;
								end;
							end else begin
								For(j=0;j<brandscnt;j=j+1) begin
									switch(IPrw.BankCurncy)begin
										case "EUR":aBrandsCashEURFOB[j] = aBrandsCashEURFOB[j] + IPrw.BankVal * aBrandPercent[j];	
										case "AZN":aBrandsCashAZNFOB[j] = aBrandsCashAZNFOB[j] + IPrw.BankVal * aBrandPercent[j];
										case "USD":aBrandsCashUSDFOB[j] = aBrandsCashUSDFOB[j] + IPrw.BankVal * aBrandPercent[j];
										case "GBP":aBrandsCashGBPFOB[j] = aBrandsCashGBPFOB[j] + IPrw.BankVal * aBrandPercent[j];
										case "CHF":aBrandsCashCHFFOB[j] = aBrandsCashCHFFOB[j] + IPrw.BankVal * aBrandPercent[j];
									end;
								end;
							end;
						end;
					end;
				end;
			end;
			
		end;		
		
		incurncy = "AZN";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashAZN[i];
		end;
		totrow = totrow + servcash[incurncy];
		TOTUSD = TOTUSD + totrow;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashAZN[j],false);
			end;
		endformat;

		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashEUR[i];
		end;
		totrow = totrow + servcash[incurncy];
		TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin		
				outstring(150+j*50,0,aBrandsCashEUR[j],false);
			end;
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashUSD[i];
			end;
			totrow = totrow + servcash[incurncy];
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashUSD[j],false);
			end;
		endformat;
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashGBP[i];
			end;
			totrow = totrow + servcash[incurncy];
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashGBP[j],false);
			end;
		endformat;
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashCHF[i];
			end;
			totrow = totrow + servcash[incurncy];
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashCHF[j],false);
			end;
		endformat;
		
		startformat(15);
			outstring(0,0,"4.2",false);
			outstring(0,0,"Оплата посредством Терминала",false);
		endformat;
		
		incurncy = "AZN";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCCAZN[i];
		end;
		totrow = totrow + servterm[incurncy];
		TOTUSD = TOTUSD + totrow;			
		startformat(15);			
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCCAZN[j],false);
			end;
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCCUSD[i];
			end;
			totrow = totrow + servterm[incurncy];
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCCUSD[j],false);
			end;
		endformat;
		
		sumusd = sumusd + TOTUSD*fr/to1;
		logtext(0,sumusd & " 4.1 " & TOTUSD);
		
		startformat(15);
			outstring(0,0,"4.3",false);
			outstring(0,0,"Приход от бутиков ювелирной Программы",false);
		endformat;
		
		incurncy = "AZN";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashAZNFOB[i];
			end;
			totrow = totrow + servcashfob[incurncy];
			TOTUSD = TOTUSD + totrow+servcashfob[incurncy];
			startformat(15);
				outstring(0,0,"",false);
				outstring(100,0,incurncy,false);
				outstring(0,0,totrow+servcashfob[incurncy],false);
				For(j=0;j<brandscnt;j=j+1) begin
					outstring(150+j*50,0,aBrandsCashAZNFOB[j],false);
				end;
			endformat;

		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashEURFOB[i];
			end;
			totrow = totrow + servcashfob[incurncy];
			TOTUSD = TOTUSD + totrow/fr*to1;
			startformat(15);
				outstring(0,0,"",false);
				outstring(100,0,incurncy,false);
				outstring(0,0,totrow,false);
				For(j=0;j<brandscnt;j=j+1) begin		
					outstring(150+j*50,0,aBrandsCashEURFOB[j],false);
				end;
			endformat;
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashUSDFOB[i];
			end;
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashUSDFOB[j],false);
			end;
		endformat;
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashGBPFOB[i];
			end;
			totrow = totrow + servcashfob[incurncy];
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashGBPFOB[j],false);
			end;
		endformat;
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashCHFFOB[i];
			end;
			totrow = totrow + servcashfob[incurncy];
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashCHFFOB[j],false);
			end;
		endformat;
		
		
		startformat(15);
			outstring(0,0,"4.4",false);
			outstring(0,0,"Погашена зад-ть Покупателей - оплата долга клиента, сформированного не в текущем месяце",false);
		endformat;
		
		incurncy = "AZN";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashAZN44[i];
		end;
		TOTUSD = TOTUSD + totrow;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashAZN44[j],false);
			end;
		endformat;

		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashEUR44[i];
		end;
		TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin		
				outstring(150+j*50,0,aBrandsCashEUR44[j],false);
			end;
		endformat;
			
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashUSD44[i];
		end;
		TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashUSD44[j],false);
			end;
		endformat;
		
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashGBP44[i];
		end;
		TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashGBP44[j],false);
			end;
		endformat;
		
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashCHF44[i];
		end;
		TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashCHF44[j],false);
			end;
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Итого (USD)",false);
			outstring(0,0,TOTUSD/to1*fr,false);
		endformat;
		
return;
end;

global
procedure PrintCUDEb445(record RcVc RepSpec,date sd,date ed,string location, integer brandscnt,array string aBrands,var val sumusd)
begin
	record IVVc IVr;
	row IVVc IVrw;
	boolean TrHs,testf,foundf;
	val debUSD,debAZN,debEUR,debCHF,debGBP;
	val credUSD,credAZN,credEUR,credCHF,credGBP;
	record IPrsVc IPrsr;
	record IPVc IPr;
	row IPVc IPrw;
	integer mtrw,i,k,j;
	val ivfr,ivto1;
	val fr,to1,to2,br1,br2;
	string 10 curncy;
	boolean TrHs1,testf1;
	array val aBrandsCashEUR;
	array val aBrandsCashAZN;
	array val aBrandsCashUSD;
	array val aBrandsCashGBP;
	array val aBrandsCashCHF;
	array val aBrandPercent;
	record INVc INr;
	val cursum;
	string 100 incurncy;
  record CUVc CUr;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;

	
	logtext(0,"PrintCUDEb445");
	
	For(i=0;i<brandscnt;i=i+1) begin
	  aBrandsCashEUR[i] = 0;
	  aBrandsCashAZN[i] = 0;
	  aBrandsCashUSD[i] = 0;
	  aBrandsCashGBP[i] = 0;
	  aBrandsCashCHF[i] = 0;
	end; 
	if (nonblank(location)) then begin
		Locr.Code = location;
		if (ReadFirstMain(Locr,1,true)) then begin
			if (nonblank(Locr.ConsigStockCode)) then begin
				vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
			end;
			if (nonblank(Locr.DefectStockCode)) then begin
				vDefStockCode[Locr.Code] = Locr.DefectStockCode;
			end;
		end;
	end;
			
		IVr.InvDate = sd;
		TrHs = true;
		while(loopkey("InvDate",IVr,1,TrHs))begin
			testf = true;
			if(IVr.InvDate>ed)then begin TrHs = false; testf = false; end;
			if(nonblank(location) and IVr.Location!=location and IVr.Location!=vConsStockCode[location] and IVr.Location!=vDefStockCode[location])then begin testf = false; end;
			if(IVr.OKFlag!=1)then begin testf = false; end;
			if(IVr.InvType!=1 and IVr.InvType!=3)then begin testf = false; end;
			if(left(IVr.CustCode,3)=="FOB")then begin
        CUr.Code = IVr.CustCode;
        readfirstmain(CUr,1,true);
        if (CUr.CustCat=="STORE") then begin
          testf = false;
        end;
      end;
			
			if(testf)then begin
				mtrw = matrowcnt(IVr);
				For(j=0;j<brandscnt;j=j+1) begin
					aBrandPercent[j] = 0;
				end; 
							
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IVr,i,IVrw);
					if(IVrw.stp==kInvoiceRowTypeNormal)then begin
						INr.Code = IVrw.ArtCode;
						readfirstmain(INr,1,true);
						For(j=0;j<brandscnt;j=j+1) begin
							if(setinset(aBrands[j],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
								aBrandPercent[j] = aBrandPercent[j] + IVrw.Sum;
							end;
						end; 
					end;
				end;
				
				For(j=0;j<brandscnt;j=j+1) begin
					aBrandPercent[j] = aBrandPercent[j]/IVr.Sum4;
				end; 
				
				For(j=0;j<brandscnt;j=j+1) begin
					switch(IVr.CurncyCode)begin
						case"AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] + IVr.Sum4 * aBrandPercent[j];
						case"USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] + IVr.Sum4 * aBrandPercent[j];
						case"EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] + IVr.Sum4 * aBrandPercent[j];
						case"CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] + IVr.Sum4 * aBrandPercent[j];
						case"GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] + IVr.Sum4 * aBrandPercent[j];
					end;
				end;		
				switch(IVr.CurncyCode)begin
					case"AZN":debAZN = debAZN + IVr.Sum4;logtext(0,"Megabal " & IVr.SerNr & " " & IVr.Sum4);
					case"USD":debUSD = debUSD + IVr.Sum4;
					case"EUR":debEUR = debEUR + IVr.Sum4;
					case"CHF":debCHF = debCHF + IVr.Sum4;
					case"GBP":debGBP = debGBP + IVr.Sum4;
				end;
				GetFullCurncyRate(IVr.CurncyCode,IVr.InvDate,ivfr,ivto1,to2,br1,br2);
				if(ivfr==0 or ivto1==0)then begin
					ivfr = 1;
					ivto1 = 1;
				end;
				
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IVr,i,IVrw);
					
					if(IVrw.stp==kInvoiceRowTypePrepayment)then begin
						For(j=0;j<brandscnt;j=j+1) begin
							switch(IVr.CurncyCode)begin
								case"AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] - IVrw.Sum * aBrandPercent[j];
								case"USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] - IVrw.Sum * aBrandPercent[j];
								case"EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] - IVrw.Sum * aBrandPercent[j];
								case"CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] - IVrw.Sum * aBrandPercent[j];
								case"GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] - IVrw.Sum * aBrandPercent[j];
							end;
						end;
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;logtext(0,"Megabal1 " & IVr.SerNr & " " & -IVrw.Sum);
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
							case"CHF":debCHF = debCHF - IVrw.Sum;
							case"GBP":debGBP = debGBP - IVrw.Sum;
						end;
					end;
					if(IVrw.stp==kInvoiceRowTypeCashPayment)then begin
						//GetFullCurncyRate(IVrw.CurncyCode,IVr.InvDate,fr,to1,to2,br1,br2);
						fr = IVrw.FrRate;
						to1 = IVrw.ToRateB1;
						logtext(0,"Megabal11 " & IVr.SerNr & " " & IVrw.FrRate & IVrw.CurncyCode & IVrw.ToRateB1);
						if(fr==0 or to1==0)then begin
							fr = 1; to1 = 1;
						end;
						IVrw.Sum = IVrw.Sum/fr*to1*ivfr/ivto1;
						For(j=0;j<brandscnt;j=j+1) begin
							switch(IVr.CurncyCode)begin
								case"AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] - IVrw.Sum * aBrandPercent[j];
								case"USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] - IVrw.Sum * aBrandPercent[j];
								case"EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] - IVrw.Sum * aBrandPercent[j];
								case"CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] - IVrw.Sum * aBrandPercent[j];
								case"GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] - IVrw.Sum * aBrandPercent[j];
							end;
						end;
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;logtext(0,"Megabal2 " & IVr.SerNr & " " & -IVrw.Sum);
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
							case"CHF":debCHF = debCHF - IVrw.Sum;
							case"CHF":debGBP = debGBP - IVrw.Sum;
						end;
					end;
					if(IVrw.stp==kInvoiceRowTypeCreditCardPayment)then begin
						curncy = "AZN";
						GetFullCurncyRate(curncy,IVr.InvDate,fr,to1,to2,br1,br2);
						if(fr==0 or to1==0)then begin
							fr = 1; to1 = 1;
						end;
						IVrw.Sum = IVrw.Sum/fr*to1*ivfr/ivto1;
						For(j=0;j<brandscnt;j=j+1) begin
							switch(IVr.CurncyCode)begin
								case"AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] - IVrw.Sum * aBrandPercent[j];
								case"USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] - IVrw.Sum * aBrandPercent[j];
								case"EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] - IVrw.Sum * aBrandPercent[j];
								case"CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] - IVrw.Sum * aBrandPercent[j];
								case"GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] - IVrw.Sum * aBrandPercent[j];
							end;
						end;
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;logtext(0,"Megabal3 " & IVr.SerNr & " " & -IVrw.Sum);
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
							case"CHF":debCHF = debCHF - IVrw.Sum;
							case"GBP":debGBP = debGBP - IVrw.Sum;
						end;
					end;
					if(IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)then begin
						curncy = "AZN";
						GetFullCurncyRate(curncy,IVr.InvDate,fr,to1,to2,br1,br2);
						if(fr==0 or to1==0)then begin
							fr = 1; to1 = 1;
						end;
						IVrw.Sum = IVrw.Sum/fr*to1*ivfr/ivto1;
						For(j=0;j<brandscnt;j=j+1) begin
							switch(IVr.CurncyCode)begin
								case"AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] - IVrw.Sum * aBrandPercent[j];
								case"USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] - IVrw.Sum * aBrandPercent[j];
								case"EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] - IVrw.Sum * aBrandPercent[j];
								case"CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] - IVrw.Sum * aBrandPercent[j];
								case"GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] - IVrw.Sum * aBrandPercent[j];
							end;
						end;
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;logtext(0,"Megabal4 " & IVr.SerNr & " " & -IVrw.Sum);
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
							case"CHF":debCHF = debCHF - IVrw.Sum;
							case"GBP":debGBP = debGBP - IVrw.Sum;
						end;
					end;  
				end;
				IPrsr.IVNr = IVr.SerNr;
				IPrsr.TransType = 1;
				IPrsr.TransDate = sd;
				TrHs1 = true;
				while(loopkey("IVDateKey",IPrsr,3,TrHs1))begin
					testf1 = true;
					if(IPrsr.IVNr!=IVr.SerNr)then begin TrHs1 = false; testf1 = false; end;
					if(IPrsr.TransType!=1)then begin TrHs1 = false; testf1 = false; end;
					if(IPrsr.TransDate>ed)then begin TrHs1 = false; testf1 = false; end;
					
					if(testf1)then begin
						IPr.SerNr = IPrsr.TransNr;
						if(readfirstmain(IPr,1,true))then begin
							mtrw = matrowcnt(IPr);
							For(i=0;i<mtrw;i=i+1) begin
	  						matrowget(IPr,i,IPrw);
	  						if(IPrw.InvoiceNr==IVr.SerNr)then begin
	  							For(j=0;j<brandscnt;j=j+1) begin
										switch(IVr.CurncyCode)begin
											case"AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] - IPrw.RecVal * aBrandPercent[j];
											case"USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] - IPrw.RecVal * aBrandPercent[j];
											case"EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] - IPrw.RecVal * aBrandPercent[j];
											case"CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] - IPrw.RecVal * aBrandPercent[j];
											case"GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] - IPrw.RecVal * aBrandPercent[j];
										end;
									end;
	  							switch(IVr.CurncyCode)begin
										case"AZN":debAZN = debAZN - IPrw.RecVal;logtext(0,"Megabal5 " & IVr.SerNr & " " & -IPrw.RecVal & "  " & IPr.SerNr);
										case"USD":debUSD = debUSD - IPrw.RecVal;
										case"EUR":debEUR = debEUR - IPrw.RecVal;
										case"CHF":debCHF = debCHF - IPrw.RecVal;
										case"GBP":debGBP = debGBP - IPrw.RecVal;
									end;
	  						end;
							end; 
						end;
					end;
				end;
				resetloop(IPrsr);
			end;
		end;
		
		startformat(15);
			outstring(0,0,"4.5",false);
			outstring(0,0,"Сформированная задолженность_",false);
		endformat;
		
		incurncy = "AZN";
		cursum = cursum + debAZN;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,incurncy,false);
			outstring(100,0,debAZN,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsCashAZN[i],false);
	  	end;
		endformat;
		
		
		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		cursum = cursum + debEUR/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,incurncy,false);
			outstring(100,0,debEUR,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsCashEUR[i],false);
	  	end;
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		cursum = cursum + debUSD/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,incurncy,false);
			outstring(100,0,debUSD,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsCashUSD[i],false);
	  	end;
		endformat;
		
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		cursum = cursum + debCHF/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,incurncy,false);
			outstring(100,0,debCHF,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsCashCHF[i],false);
	  	end;
		endformat;
		
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		cursum = cursum + debGBP/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,incurncy,false);
			outstring(100,0,debGBP,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsCashGBP[i],false);
	  	end;
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"Итого " & incurncy,false);
			outstring(100,0,cursum*fr/to1,false);
		endformat;
		sumusd = sumusd + cursum*fr/to1;

return;
end;

global
procedure PrintCashIn46(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands,var val sumusd)
begin
	record IVVc IVr,IVorig;
	row IVVc IVrw,IV2rw;
	array val aBrandsCashEUR;
	array val aBrandsCashAZN;
	array val aBrandsCashUSD;
	array val aBrandsCashGBP;
	array val aBrandsCashCHF;
	
	array val aBrandsCashEUR44;
	array val aBrandsCashAZN44;
	array val aBrandsCashUSD44;
	array val aBrandsCashGBP44;
	array val aBrandsCashCHF44;
	
	array val aBrandsCashEURFOB;
	array val aBrandsCashAZNFOB;
	array val aBrandsCashUSDFOB;
	array val aBrandsCashGBPFOB;
	array val aBrandsCashCHFFOB;
	
	val BrandsCashUSDtotal;
	array val aBrandsCCAZN;
	array val aBrandsCCUSD;
	array val aBrandsCCGBP;
	array val aBrandsCCAZN44;
	array val aBrandsCCUSD44;
	array val aBrandsCCGBP44;
	val BrandsCCUSDtotal;
	array val aBrandsPaymAZN;
	array val aBrandsPaymEUR;
	array val aBrandsPaymCHF;
	array val aBrandsPaymUSD;
	array val aBrandsPaymGBP;
	array val aBrandPercent;
	boolean servitem;
	
	boolean TrHs,testf,TrHs1,testf1;
	integer rwcnt,mtrw,i,j,keyi,ori;
	record CUVc CUr;
	record IPVc IPr;
	row IPVc IPrw;
	record IPrsVc IPrsr;
	string 255 keystr;
	string 20 incurncy;
	date curdate;
	val t,fr,to1,to2,br1,br2;
	record INVc INr;
	record DIVc DIr;
	integer pmi,pmmtrw,k;
	val servprc,prepaymentval,TOTUSD,totrow,Sum4;
	vector val servcash,servterm,servcashfob;
	record ORVc ORr;
	row ORVc ORrw;
	record PMBlock PMb;
	row PMBlock PMrw;
	record ARPayHistVc ARPayr;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;


	startformat(15);
		outstring(0,0,"4.6",false);
		outstring(0,0,"Стоимость возврата от покупателей - возврат денег клиенту",false);
	endformat;
	
	
	TrHs = true;
		IVr.InvDate=sd;
		IVr.Location = location;
		if(nonblank(location))then begin
			Locr.Code = location;
			if (ReadFirstMain(Locr,1,true)) then begin
				if (nonblank(Locr.ConsigStockCode)) then begin
					vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
				end;
				if (nonblank(Locr.DefectStockCode)) then begin
					vDefStockCode[Locr.Code] = Locr.DefectStockCode;
				end;
			end;
			keyi = 2;
			keystr = "Location";
		end else begin
			keyi = 1;
			keystr = "InvDate";
		end;
		
		For(i=0;i<brandscnt;i=i+1) begin
			aBrandsCashEUR[i] = 0;
			aBrandsCashAZN[i] = 0;
			aBrandsCashUSD[i] = 0;
			aBrandsCashGBP[i] = 0;
			aBrandsCashCHF[i] = 0;
			aBrandsCashEUR44[i] = 0;
			aBrandsCashAZN44[i] = 0;
			aBrandsCashUSD44[i] = 0;
			aBrandsCashGBP44[i] = 0;
			aBrandsCCAZN[i] = 0;
			aBrandsCCUSD[i] = 0;
			aBrandsCCGBP[i] = 0;
			
			aBrandsCCAZN44[i] = 0;
			aBrandsCCUSD44[i] = 0;
			aBrandsCCGBP44[i] = 0;
			
			aBrandsPaymAZN[i] = 0;
			aBrandsPaymEUR[i] = 0;
			aBrandsPaymUSD[i] = 0;
			aBrandsPaymCHF[i] = 0;
			aBrandsPaymGBP[i] = 0;

			
			aBrandsCashEURFOB[i] = 0;
			aBrandsCashAZNFOB[i] = 0;
			aBrandsCashUSDFOB[i] = 0;
			aBrandsCashGBPFOB[i] = 0;
		end;

		while(loopkey(keystr,IVr,keyi,TrHs))begin
			testf = true;
			servprc = blankval;
			if(IVr.InvDate>ed)then begin TrHs = false; testf = false; end;
			if(nonblank(location) and location!=IVr.Location and vConsStockCode[location]!=IVr.Location and vDefStockCode[location]!=IVr.Location)then begin TrHs = false; testf = false; end;
			if(IVr.OKFlag==0)then begin testf = false; end;
			if(IVr.Invalid>0)then begin testf = false; end;
						
			if(testf)then begin
				fr = IVr.FrRate;
				to1 = IVr.ToRateB1;
				if(fr==0 or to1==0)then begin
					fr=1;
					to1=1;
				end;
				
				servitem = false;
				mtrw = matrowcnt(IVr);
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IVr,i,IVrw);
					if(IVrw.stp==kInvoiceRowTypeNormal and IVrw.Sum<0 and IVrw.IVForRetNr<=0)then begin
						For(i=0;i<brandscnt;i=i+1) begin
							aBrandPercent[i] = 0;
						end; 
						INr.Code = IVrw.ArtCode;
						readfirstmain(INr,1,true);
						For(j=0;j<brandscnt;j=j+1) begin
							if(setinset(aBrands[j],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
								aBrandPercent[j] = 1;
							end;
						end;
						For(j=0;j<brandscnt;j=j+1) begin
							switch(IVr.CurncyCode)begin
								case "EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] - IVrw.Sum * aBrandPercent[j];	
								case "AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] - IVrw.Sum * aBrandPercent[j];
								case "USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] - IVrw.Sum * aBrandPercent[j];
								case "GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] - IVrw.Sum * aBrandPercent[j];
								case "CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] - IVrw.Sum * aBrandPercent[j];
							end;
						end;
					end;
					if(IVrw.stp==kInvoiceRowTypeNormal and IVrw.Sum<0 and IVrw.IVForRetNr>0)then begin
						INr.Code = IVrw.ArtCode;
						readfirstmain(INr,1,true);
						
						IVorig.SerNr=IVrw.IVForRetNr;
						if(readfirstmain(IVorig,1,true) and IVorig.InvDate<sd)then begin
							INr.Code = IVrw.ArtCode;
							readfirstmain(INr,1,true);
							For(j=0;j<brandscnt;j=j+1) begin
								aBrandPercent[j] = 0;
							end; 
							
							For(k=0;k<matrowcnt(IVorig);k=k+1) begin
								matrowget(IVorig,k,IV2rw);
								if(IV2rw.ArtCode==INr.Code)then begin
									For(j=0;j<brandscnt;j=j+1) begin
										if(setinset(aBrands[j],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
											aBrandPercent[j] = aBrandPercent[j] + IV2rw.Sum;
										end;
									end; 
								end;
							end;
					
				
							For(j=0;j<brandscnt;j=j+1) begin
								aBrandPercent[j] = aBrandPercent[j]/IVorig.Sum4;
								//logtext(0,aBrandPercent[j]);
							end;
				
							For(k=0;k<matrowcnt(IVorig);k=k+1) begin
								matrowget(IVorig,k,IV2rw);
								if(IV2rw.stp==kInvoiceRowTypeCashPayment and IV2rw.Sum>0)then begin
									For(j=0;j<brandscnt;j=j+1) begin
										switch(IV2rw.CurncyCode)begin
											case "EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] + IV2rw.Sum * aBrandPercent[j];	
											case "AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] + IV2rw.Sum * aBrandPercent[j];
											case "USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] + IV2rw.Sum * aBrandPercent[j];
											case "GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] + IV2rw.Sum * aBrandPercent[j];
											case "CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] + IV2rw.Sum * aBrandPercent[j];
										end;
									end;
								end;
								if(IV2rw.stp==kInvoiceRowTypeCreditCardPayment  and IVrw.Sum>0)then begin
									For(j=0;j<brandscnt;j=j+1) begin
										switch(IV2rw.CurncyCode)begin
											case "EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] + IV2rw.Sum * aBrandPercent[j];	
											case "AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] + IV2rw.Sum * aBrandPercent[j];
											case "USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] + IV2rw.Sum * aBrandPercent[j];
											case "GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] + IV2rw.Sum * aBrandPercent[j];
											case "CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] + IV2rw.Sum * aBrandPercent[j];
										end;
									end;
								end;
							end;
							
							
							IPrsr.IVNr = IVorig.SerNr;
							IPrsr.TransType = 1;
							IPrsr.TransDate = IVorig.InvDate;
							TrHs1 = true;
							while(loopkey("IVDateKey",IPrsr,3,TrHs1))begin
								testf1 = true;
								if(IPrsr.IVNr!=IVorig.SerNr)then begin TrHs1 = false; testf1 = false; end;
								if(IPrsr.TransType!=1)then begin TrHs1 = false; testf1 = false; end;
								if(IPrsr.TransDate>ed)then begin TrHs1 = false; testf1 = false; end;
					
								if(testf1)then begin
									IPr.SerNr = IPrsr.TransNr;
									if(readfirstmain(IPr,1,true))then begin
										mtrw = matrowcnt(IPr);
										For(i=0;i<mtrw;i=i+1) begin
											matrowget(IPr,i,IPrw);
											if(IPrw.InvoiceNr==IVorig.SerNr)then begin
												For(j=0;j<brandscnt;j=j+1) begin
													switch(IVorig.CurncyCode)begin
														case"AZN":aBrandsCashAZN[j] = aBrandsCashAZN[j] + IPrw.RecVal * aBrandPercent[j];
														case"USD":aBrandsCashUSD[j] = aBrandsCashUSD[j] + IPrw.RecVal * aBrandPercent[j];
														case"EUR":aBrandsCashEUR[j] = aBrandsCashEUR[j] + IPrw.RecVal * aBrandPercent[j];
														case"CHF":aBrandsCashCHF[j] = aBrandsCashCHF[j] + IPrw.RecVal * aBrandPercent[j];
														case"GBP":aBrandsCashGBP[j] = aBrandsCashGBP[j] + IPrw.RecVal * aBrandPercent[j];
													end;
												end;
											end;
										end; 
									end;
								end;
							end;
							resetloop(IPrsr);
							
						end;
				
					end;
				end;
				
			end;
		end;
		
		incurncy = "AZN";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashAZN[i];
		end;
		TOTUSD = TOTUSD + totrow;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashAZN[j],false);
			end;
		endformat;

		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsCashEUR[i];
		end;
		TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin		
				outstring(150+j*50,0,aBrandsCashEUR[j],false);
			end;
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashUSD[i];
			end;
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashUSD[j],false);
			end;
		endformat;
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashGBP[i];
			end;
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashGBP[j],false);
			end;
		endformat;	
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashCHF[i];
			end;
			TOTUSD = TOTUSD + totrow/fr*to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashCHF[j],false);
			end;
		endformat;	
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Итого (USD)",false);
			outstring(0,0,TOTUSD/to1*fr,false);
		endformat;
		
		sumusd = sumusd - TOTUSD/to1*fr;
		
return;
end;

global
procedure PrintStockSelRet478(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands,var val sumusd)
begin
	string 10 incurncy;
	val fr,to1,to2,br1,br2;
	array val aBrandsRetEUR;
	array val aBrandsRetCHF;
	array val aBrandsRetUSD;
	array val aBrandsRetGBP;
	val BrandsRetUSDtotal;

	array val aBrandsSelEUR;
	array val aBrandsSelCHF;
	array val aBrandsSelUSD;
	array val aBrandsSelGBP;
	val BrandsSelUSDtotal;
	
	array val aBrandsSelEURcons;
	array val aBrandsSelCHFcons;
	array val aBrandsSelUSDcons;
	array val aBrandsSelGBPcons;
	val BrandsSelUSDtotalcons;
	
	record INVc INr;
	boolean TrHs,testf,foundf;
	integer i,j,mtrw,sign,br;
	record ItemHistVc IHr;
	date curdate;
	val totrow;
	boolean consig; 
	record IVVc IVr;
	record SHVc SHr;
  record CUVc CUr;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;
	vector boolean vConsStockCodef;

	
	
	
	Locr.Code = "";
	while (LoopMain(Locr,1,true)) begin
		if (nonblank(Locr.ConsigStockCode)) then begin
			vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
			vConsStockCodef[Locr.ConsigStockCode] = true;
		end;
		if (nonblank(Locr.DefectStockCode)) then begin
			vDefStockCode[Locr.Code] = Locr.DefectStockCode;
		end;
	end;
	
	
	For(i=0;i<brandscnt;i=i+1) begin
		aBrandsRetEUR[i]= 0;
		aBrandsRetCHF[i]= 0;
		aBrandsRetUSD[i]= 0;
		aBrandsRetGBP[i]= 0;
		aBrandsSelEUR[i]= 0;
		aBrandsSelGBP[i]= 0;
		aBrandsSelCHF[i]= 0;
		aBrandsSelUSD[i]= 0;
		aBrandsSelEURcons[i]= 0;
		aBrandsSelCHFcons[i]= 0;
		aBrandsSelUSDcons[i]= 0;
		aBrandsSelGBPcons[i]= 0;
	end;
	
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(nonblank(INr.LastPurchCurncyCode))then begin
			incurncy = INr.LastPurchCurncyCode;
		end else begin
			incurncy = "USD";
		end;
		foundf = false;
		For(i=0;i<brandscnt;i=i+1) begin
			if(setinset(aBrands[i],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
				br = i;
				foundf = true;
			end;
		end; 
		
		// consig = false;
		// if(INr.ConsgType==1)then begin
			// consig = true;
		// end;
		if(setinset("30",INr.DispGroups))then begin foundf = false; end;
		if(setinset("31",INr.DispGroups))then begin foundf = false; end;
		if(setinset("32",INr.DispGroups))then begin foundf = false; end;
		if(setinset("33",INr.DispGroups))then begin foundf = false; end;
		if(setinset("34",INr.DispGroups))then begin foundf = false; end;
		if(setinset("35",INr.DispGroups))then begin foundf = false; end;
		
		IHr.TransDate = "";
		IHr.ArtCode = INr.Code;
		TrHs = foundf;
		curdate = "";
		while(loopkey("ArtCode",IHr,2,TrHs))begin
			testf = true;
			if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
			if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
			if(IHr.StockAffectf==0)then begin testf = false; end;
			if(nonblank(location) and location!=IHr.Location and vConsStockCode[location]!=IHr.Location and vDefStockCode[location]!=IHr.Location)then begin testf = false; end;
			if(IHr.FileName!="IVVc" and IHr.FileName!="SHVc")then begin testf = false; end;
			
			if(testf)then begin
				if(IHr.FileName=="IVVc")then begin
					IVr.SerNr = IHr.TransNr;
					if(readfirstmain(IVr,1,true))then begin
						if(left(IVr.CustCode,3)=="FOB")then begin
              CUr.Code = IVr.CustCode;
              readfirstmain(CUr,1,true);
              if (CUr.CustCat=="STORE") then begin
                testf = false;
              end;
						end;
					end;
				end;
				if(IHr.FileName=="SHVc")then begin
					SHr.SerNr = IHr.TransNr;
					if(readfirstmain(SHr,1,true))then begin
						if(left(SHr.CustCode,3)=="FOB")then begin
              CUr.Code = SHr.CustCode;
              readfirstmain(CUr,1,true);
              if (CUr.CustCat=="STORE") then begin
                testf = false;
              end;
						end;
					end;
				end;
			end;
			
			if(testf)then begin
				consig = false;
				if(vConsStockCodef[IHr.Location] or INr.ConsgType==1)then begin
					consig = true;
				end;
				
				sign = 1;		
				if(IHr.Invalid>0)then begin
					if(IHr.Qty<=0)then begin
						IHr.Qty = -IHr.Qty;
					end else begin
						IHr.Qty = -IHr.Qty;
						sign = -1;	
					end;
				end;	
				if(IHr.TransDate>=sd and (IHr.FileName=="IVVc" or IHr.FileName=="SHVc") and IHr.Qty<=0)then begin
					switch(IHr.CurncyCode)begin
						case"EUR":if(consig)then begin
												aBrandsSelEURcons[br] = aBrandsSelEURcons[br] + IHr.TotCostPriceCurncy * sign;
											end else begin
												aBrandsSelEUR[br] = aBrandsSelEUR[br] + IHr.TotCostPriceCurncy * sign;
											end;
						case"CHF":if(consig)then begin
												aBrandsSelCHFcons[br] = aBrandsSelCHFcons[br] + IHr.TotCostPriceCurncy * sign;
											end else begin
												aBrandsSelCHF[br] = aBrandsSelCHF[br] + IHr.TotCostPriceCurncy * sign;
											end;
						case"USD":if(consig)then begin
												aBrandsSelUSDcons[br] = aBrandsSelUSDcons[br] + IHr.TotCostPriceCurncy * sign;
											end else begin
												aBrandsSelUSD[br] = aBrandsSelUSD[br] + IHr.TotCostPriceCurncy * sign;
											end;
						case"GBP":if(consig)then begin
												aBrandsSelGBPcons[br] = aBrandsSelGBPcons[br] + IHr.TotCostPriceCurncy * sign;
											end else begin
												aBrandsSelGBP[br] = aBrandsSelGBP[br] + IHr.TotCostPriceCurncy * sign;
											end;
					end;
				end;
				
			end;
		end;
		resetloop(IHr);
	end;
	resetloop(INr);
	
		startformat(15);
			outstring(0,0,"4.7",false);
			outstring(0,0,"Реализация товара,FOB",false);
		endformat;
		
		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelEUR[i],false);
	  		BrandsSelUSDtotal = BrandsSelUSDtotal + aBrandsSelEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelCHF[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelCHF[i],false);
	  		BrandsSelUSDtotal = BrandsSelUSDtotal + aBrandsSelCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelUSD[i],false);
	  		BrandsSelUSDtotal = BrandsSelUSDtotal + aBrandsSelUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelGBP[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelGBP[i],false);
	  		BrandsSelUSDtotal = BrandsSelUSDtotal + aBrandsSelGBP[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsSelUSDtotal*fr/to1,false);
		endformat;
		
		
		startformat(15);
			outstring(0,0,"4.8",false);
			outstring(0,0,"Реализация товара на консигнации, FOB",false);
		endformat;
		
		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelEURcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelEURcons[i],false);
	  		BrandsSelUSDtotalcons = BrandsSelUSDtotalcons + aBrandsSelEURcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelCHFcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelCHFcons[i],false);
	  		BrandsSelUSDtotalcons = BrandsSelUSDtotalcons + aBrandsSelCHFcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelUSDcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelUSDcons[i],false);
	  		BrandsSelUSDtotalcons = BrandsSelUSDtotalcons + aBrandsSelUSDcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelGBPcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelGBPcons[i],false);
	  		BrandsSelUSDtotalcons = BrandsSelUSDtotalcons + aBrandsSelGBPcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsSelUSDtotalcons*fr/to1,false);
		endformat;
		
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"ВЫРУЧКА, в том числе USD (4.1+4.2+4.5-4.6)",false);
	  	outstring(150,0,sumusd,false);
		endformat;
		
return;
end;

global 
procedure	PrintCLIn512(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands,var val totusd)
begin
	string 10 incurncy;
	record CLInVc CLInr;
	boolean TrHs,testf,foundf;
	val BalAZN,BalEUR,BalUSD;
	record IVVc IVr;
	row IVVc IVrw;
	record ItemHistVc IHr;
	integer i,mtrw,j,br;
	record INVc INr;
	array val SumEUR;
	array val SumCHF;
	array val SumUSD;
	val TotSumUSD;
	integer sign;
	val rateusd,ratechf,rateeur;
	val t,fr,to1,to2,br1,br2;
	string 10 curcode;
	record MainVc Mainr;
	val tatalusd;
	record LocationVc Locr;
	string 255 objstr;
	val tempBal,sum;
	
	curcode = "USD";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	rateusd = fr * to1;
	
	curcode = "CHF";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	ratechf = fr * to1;
	
	curcode = "EUR";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	rateeur = fr * to1;
	
	
	startformat(15);
		outstring(0,0,"5",false);
		outstring(0,0,"Остаток денежных средств",false);
	endformat;
	startformat(15);
		outstring(0,0,"5.1",false);
		outstring(0,0,"в том числе Баку",false);
	endformat;
	
	Locr.Code = location;
	if(readfirstmain(Locr,1,true))then begin 
		objstr = Locr.Objects;
	end;
	
	
	
	incurncy = "AZN";
	tempBal = 0;
	sum = 0;
	TotSumUSD = 0;
	FindNLAccBal("50",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
  FindNLAccBal("51",objstr,"",0,"",addday(ed,1),0,0,false,"",0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("53",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("51/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/3",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	TotSumUSD = sum;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,sum,false);
	endformat;
	incurncy = "EUR";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	sum = 0;
	tempBal = 0;
	FindNLAccBal("50",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	//FindNLAccBal("51",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("53",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("51/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/3",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	TotSumUSD = TotSumUSD + sum/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,sum,false);
	endformat;
	incurncy = "USD";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	sum = 0;
	tempBal = 0;
	FindNLAccBal("50",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	//FindNLAccBal("51",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("53",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("51/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/3",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	TotSumUSD = TotSumUSD + sum/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,sum,false);
	endformat;
	incurncy = "CHF";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	sum = 0;
	tempBal = 0;
	FindNLAccBal("50",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	//FindNLAccBal("51",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("53",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("51/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/3",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	TotSumUSD = TotSumUSD + sum/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,sum,false);
	endformat;
	incurncy = "GBP";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	sum = 0;
	tempBal = 0;
	FindNLAccBal("50",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	//FindNLAccBal("51",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("53",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("51/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("52/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/2",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	FindNLAccBal("59/3",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);sum = sum + tempBal;
	TotSumUSD = TotSumUSD + sum/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,sum,false);
	endformat;
	
	startformat(15);
		outstring(0,0,"5.2",false);
		outstring(0,0,"в том числе WHT",false);
	endformat;
	
	BalAZN = blankval;
	BalEUR = blankval;
	BalUSD = blankval;
		
	incurncy = "AZN";
	tempBal = 0;
	FindNLAccBal("59/1",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);
	TotSumUSD = TotSumUSD + tempBal;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,tempBal,false);
	endformat;
	incurncy = "EUR";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	tempBal = 0;
	FindNLAccBal("59/1",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);
	TotSumUSD = TotSumUSD + tempBal/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,tempBal,false);
	endformat;
	incurncy = "USD";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	tempBal = 0;
	FindNLAccBal("59/1",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);
	TotSumUSD = TotSumUSD + tempBal/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,tempBal,false);
	endformat;
	
	incurncy = "CHF";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	tempBal = 0;
	FindNLAccBal("59/1",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);
	TotSumUSD = TotSumUSD + tempBal/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,tempBal,false);
	endformat;
	
	incurncy = "GBP";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	tempBal = 0;
	FindNLAccBal("59/1",objstr,"",0,"",addday(ed,1),0,0,false,incurncy,0,"","",tempBal);
	TotSumUSD = TotSumUSD + tempBal/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,tempBal,false);
	endformat;
	
	incurncy = "USD";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	TotSumUSD = TotSumUSD*fr/to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"Итого " & incurncy,false);
		outstring(150+i*50,0,TotSumUSD,false);
	endformat;
  totusd = totusd + TotSumUSD;
  
  return;
end;

global
procedure PrintStockVEPAy6(record RcVc RepSpec,date sd, date ed,integer brandscnt,array string aBrands)
begin
	integer i,j,k,mtrw,rwcnt;
	boolean TrHs,TrHs2,testf;
	record OPVc OPr;
	row OPVc OPrw;
	string 10 incurncy;
	val totrow;
	array val aBrandsPaymAZN;
	array val aBrandsPaymEUR;
	array val aBrandsPaymCHF;
	array val aBrandsPaymUSD;
	array val aBrandsPaymGBP;
	record DIVc DIr;
	record OPrsVc OPrsr;
	record CUVc CUr;
	val usdsum,fr,to1,to2,br1,br2;
	val othAZN,othEUR,othCHF,othUSD,othGBP;
	boolean vefnd;
	record VIVc VIr;
  row PMBlock PMrw;

	For(i=0;i<brandscnt;i=i+1) begin
		aBrandsPaymAZN[i] = 0;
		aBrandsPaymEUR[i] = 0;
		aBrandsPaymUSD[i] = 0;
		aBrandsPaymCHF[i] = 0;
		aBrandsPaymGBP[i] = 0;
	end;
	
	if(RepSpec.flags[1]==1)then begin
		OPrsr.TransDate = sd;
		TrHs = true;
		while(loopkey("TransDate",OPrsr,1,TrHs))begin
			testf = true;
			if(OPrsr.TransDate>ed)then begin TrHs = false; testf = false; end;
			if(OPrsr.TransType!=1)then begin testf = false; end;
			if(left(OPrsr.VECode,3)=="FOB")then begin testf = false; end;
		
			if(testf)then begin
				OPr.SerNr = OPrsr.TransNr;
				if(readfirstmain(OPr,1,true))then begin
          GetPMRow(OPr.PayMode,PMrw);//Edit-------------------Vitalii 10:22 06.06.2018
          if (left(PMrw.AccNr,1)=="5") then begin
            mtrw = matrowcnt(OPr);
          
            for(j=0;j<mtrw;j=j+1)begin
              matrowget(OPr,j,OPrw);
              if(OPrw.VECode==OPrsr.VECode)then begin
                if(OPrsr.VINr==OPrw.VISerNr)then begin
                  vefnd = true;
                  switch(OPrw.RecCurncy)begin
                    case "AZN": othAZN = othAZN + OPrw.RecVal;
                    case "EUR": othEUR = othEUR + OPrw.RecVal;
                    case "CHF":	othCHF = othCHF + OPrw.RecVal;
                    case "USD": othUSD = othUSD + OPrw.RecVal;
                    case "GBP": othGBP = othGBP + OPrw.RecVal;
                  end;
                end;
              end;
            end;
          end;
				end;
			end;
		end;
		resetloop(OPrsr);		
		
	end else begin
		For(i=0;i<brandscnt;i=i+1) begin
			DIr.Code = aBrands[i];
			readfirstmain(DIr,1,true);
			CUr.Name = DIr.Name;
			//Edit-------------------Vitalii 11:20 27.03.2018
      TrHs = true;
      while(loopkey("Name",CUr,1,TrHs))begin
        testf = true;
        if(CUr.Name!=DIr.Name)then begin TrHs = false; testf = false; end;
        //if(CUr.Code>"0009999" or CUr.Code<"0000001")then begin testf = false; end;
        if ((CUr.VECat=="IDEA") and (currentcompany!=28))then begin testf = false; end;
        if ((CUr.VECat!="IDEA") and (currentcompany==28))then begin testf = false; end;
  
        if(testf)then begin
          TrHs = false;
        end;
      end;
      resetloop(CUr);
      
      logtext(0,"VEFOUND " & aBrands[i] & " - " & DIr.Name & " - TrHs " & TrHs & " CUCODE " & CUr.Code);
      
			//readfirstkey("Name",CUr,1,true);
			OPrsr.VECode = CUr.Code;
			OPrsr.TransDate = sd;
		
			TrHs = true;
			while(loopmain(OPrsr,2,TrHs))begin
				testf = true;
				if(OPrsr.VECode!=CUr.Code)then begin TrHs = false; testf = false; end;
				if(OPrsr.TransDate>ed)then begin TrHs = false; testf = false; end;
				if(OPrsr.TransType!=1)then begin testf = false; end;
				if(left(OPrsr.VECode,3)=="FOB")then begin testf = false; end;
				
				if(testf)then begin
					OPr.SerNr = OPrsr.TransNr;
					if(readfirstmain(OPr,1,true))then begin
						GetPMRow(OPr.PayMode,PMrw);//Edit-------------------Vitalii 10:22 06.06.2018
            if (left(PMrw.AccNr,1)=="5") then begin
              mtrw = matrowcnt(OPr);
            
              for(j=0;j<mtrw;j=j+1)begin
                vefnd = false;
                matrowget(OPr,j,OPrw);
                if(OPrw.VECode==OPrsr.VECode)then begin
                  if(OPrsr.VINr==OPrw.VISerNr)then begin
                    vefnd = true;
                    switch(OPrw.RecCurncy)begin
                      case "AZN": aBrandsPaymAZN[i] = aBrandsPaymAZN[i] + OPrw.RecVal;
                      case "EUR": aBrandsPaymEUR[i] = aBrandsPaymEUR[i] + OPrw.RecVal;
                      case "CHF":	aBrandsPaymCHF[i] = aBrandsPaymCHF[i] + OPrw.RecVal;
                      case "USD": aBrandsPaymUSD[i] = aBrandsPaymUSD[i] + OPrw.RecVal;
                      case "GBP": aBrandsPaymGBP[i] = aBrandsPaymGBP[i] + OPrw.RecVal;
                    end;
                  end;
                end;
                /*if(vefnd==false)then begin
                  switch(OPrw.RecCurncy)begin
                    case "AZN": othAZN = othAZN + OPrw.RecVal;
                    case "EUR": othEUR = othEUR + OPrw.RecVal;
                    case "CHF":	othCHF = othCHF + OPrw.RecVal;
                    case "USD": othUSD = othUSD + OPrw.RecVal;
                    case "GBP": othGBP = othGBP + OPrw.RecVal;
                  end;
                end;*/
              end;
            end;
					end;
				end;
			end;
			resetloop(OPrsr);	
		end; 
		OPrsr.VECode = "TRANSPORT";
		OPrsr.TransDate = sd;
	
		TrHs = true;
		while(loopmain(OPrsr,2,TrHs))begin
			testf = true;
			if(OPrsr.VECode!="TRANSPORT")then begin TrHs = false; testf = false; end;
			if(OPrsr.TransDate>ed)then begin TrHs = false; testf = false; end;
			if(OPrsr.TransType!=1)then begin testf = false; end;
			if(left(OPrsr.VECode,3)=="FOB")then begin testf = false; end;
			
			if(testf)then begin
				OPr.SerNr = OPrsr.TransNr;
				if(readfirstmain(OPr,1,true))then begin
          GetPMRow(OPr.PayMode,PMrw);//Edit-------------------Vitalii 10:22 06.06.2018
          if (left(PMrw.AccNr,1)=="5") then begin
            mtrw = matrowcnt(OPr);
          
            for(j=0;j<mtrw;j=j+1)begin
              vefnd = false;
              matrowget(OPr,j,OPrw);
              if(OPrw.VECode=="TRANSPORT")then begin
                if(OPrsr.VINr==OPrw.VISerNr)then begin
                  VIr.SerNr = OPrw.VISerNr;
                  if(readfirstmain(VIr,1,true))then begin
                  
                    For(i=0;i<brandscnt;i=i+1) begin
                      DIr.Code = aBrands[i];
                      readfirstmain(DIr,1,true);
                      CUr.Name = DIr.Name;
                      //Edit-------------------Vitalii 11:20 27.03.2018
                      TrHs2 = true;
                      while(loopkey("Name",CUr,1,TrHs2))begin
                        testf = true;
                        if(CUr.Name!=DIr.Name)then begin TrHs2 = true; testf = false; end;
                        //if(CUr.Code>"0009999" or CUr.Code<"0000001")then begin testf = false; end;
                        if ((CUr.VECat=="IDEA") and (currentcompany!=28))then begin testf = false; end;
                        if ((CUr.VECat!="IDEA") and (currentcompany==28))then begin testf = false; end;
                  
                        if(testf)then begin
                          TrHs2 = false;
                          if(setinset(CUr.VEObjects,VIr.Objects) and nonblank(CUr.VEObjects))then begin
                            vefnd = true;
                            switch(OPrw.RecCurncy)begin
                              case "AZN": aBrandsPaymAZN[i] = aBrandsPaymAZN[i] + OPrw.RecVal;
                              case "EUR": aBrandsPaymEUR[i] = aBrandsPaymEUR[i] + OPrw.RecVal;
                              case "CHF":	aBrandsPaymCHF[i] = aBrandsPaymCHF[i] + OPrw.RecVal;
                              case "USD": aBrandsPaymUSD[i] = aBrandsPaymUSD[i] + OPrw.RecVal;
                              case "GBP": aBrandsPaymGBP[i] = aBrandsPaymGBP[i] + OPrw.RecVal;
                            end;
                          end;
                        end;
                      end;
                      resetloop(CUr);
                      /*if(readfirstkey("Name",CUr,1,true))then begin									
                        if(setinset(CUr.VEObjects,VIr.Objects) and nonblank(CUr.VEObjects))then begin
                          vefnd = true;
                          switch(OPrw.RecCurncy)begin
                            case "AZN": aBrandsPaymAZN[i] = aBrandsPaymAZN[i] + OPrw.RecVal;
                            case "EUR": aBrandsPaymEUR[i] = aBrandsPaymEUR[i] + OPrw.RecVal;
                            case "CHF":	aBrandsPaymCHF[i] = aBrandsPaymCHF[i] + OPrw.RecVal;
                            case "USD": aBrandsPaymUSD[i] = aBrandsPaymUSD[i] + OPrw.RecVal;
                            case "GBP": aBrandsPaymGBP[i] = aBrandsPaymGBP[i] + OPrw.RecVal;
                          end;
                        end;
                      end;*/
                    end;
                    if(vefnd==false)then begin
                      if(setinset("TRANSPORT",VIr.Objects) and vefnd==false)then begin
                        switch(OPrw.RecCurncy)begin
                          case "AZN": othAZN = othAZN + OPrw.RecVal;
                          case "EUR": othEUR = othEUR + OPrw.RecVal;
                          case "CHF":	othCHF = othCHF + OPrw.RecVal;
                          case "USD": othUSD = othUSD + OPrw.RecVal;
                          case "GBP": othGBP = othGBP + OPrw.RecVal;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
				end;
			end;
		end;
		resetloop(OPrsr);
	end;
	
	
	
	startformat(15);
		outstring(0,0,"6",false);
		outstring(0,0,"Оплата поставщикам",false);
	endformat;
			
	incurncy = "AZN";
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
	  totrow = totrow + aBrandsPaymAZN[i];
	end;
	totrow = totrow + othAZN;
	usdsum = usdsum + totrow;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsPaymAZN[i],false);
		end;
	endformat;
	incurncy = "EUR";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
	  totrow = totrow + aBrandsPaymEUR[i];
	end; 
	totrow = totrow + othEUR;
	usdsum = usdsum + totrow/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsPaymEUR[i],false);
		end;
	endformat;
	incurncy = "CHF";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
	  totrow = totrow + aBrandsPaymCHF[i];
	end; 
	totrow = totrow + othCHF;
	usdsum = usdsum + totrow/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsPaymCHF[i],false);
		end;
	endformat;
	incurncy = "GBP";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
	  totrow = totrow + aBrandsPaymGBP[i];
	end; 
	totrow = totrow + othGBP;
	usdsum = usdsum + totrow/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsPaymGBP[i],false);
		end;
	endformat;
	
	incurncy = "USD";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
	  totrow = totrow + aBrandsPaymUSD[i];
	end; 
	totrow = totrow + othUSD;
	usdsum = usdsum + totrow/fr*to1;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsPaymUSD[i],false);
		end;
	endformat;
	
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"Итого " & incurncy,false);
		outstring(0,0,usdsum*fr/to1,false);
	endformat;
	
return;
end;

global 
procedure	PrintCLOut61(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
  array string 10 TmpList;
  boolean TrHs,testf;
  record CLInVc CLInr;
  record CLOutVc CLOutr;
  record CUVc CUr;
  record DIVc DIr;
  record INVc INr;
  record OPVc OPr;
  record VIVc VIr;
  row CLInVc CLInrw;
  row CLOutVc CLOutrw;
  row OPVc OPrw;
  row VIVc VIrw;
  integer i,j,k,rwcnt,rwcnt2;
  string 10 brand;
  val tmpval,fr,to1,to2,br1,br2;
  vector string 10 aBrandsObj;
  vector val fobpaym;
  row PMBlock PMrw;
  
  for (i=0;i<aBrands.length;i=i+1) begin
    DIr.Code = aBrands[i];
    readfirstmain(DIr,1,true);
    CUr.Name = DIr.Name;
    //Edit-------------------Vitalii 11:20 27.03.2018
    TrHs = true;
    while(loopkey("Name",CUr,1,TrHs))begin
      testf = true;
      if(CUr.Name!=DIr.Name)then begin TrHs = false; testf = false; end;
      //if(CUr.Code>"0009999" or CUr.Code<"0000001")then begin testf = false; end;
      if ((CUr.VECat=="IDEA") and (currentcompany!=28))then begin testf = false; end;
      if ((CUr.VECat!="IDEA") and (currentcompany==28))then begin testf = false; end;

      if(testf)then begin
        TrHs = true;
      end;
    end;
    resetloop(CUr);
    //readfirstkey("Name",CUr,1,true);
    aBrandsObj[CUr.VEObjects] = aBrands[i];
  end;
  
  resetloop(OPr);
  TrHs = true;
  OPr.TransDate = sd;
  while (loopkey("TransDate",OPr,1,TrHs)) begin
    testf = true;
    if (OPr.TransDate>ed) then begin TrHs = false; testf = false; end;
    if (OPr.DoneFlag!=1) then begin testf = false; end;
    if (testf) then begin
      GetPMRow(OPr.PayMode,PMrw);//Edit-------------------Vitalii 10:22 06.06.2018
      if (left(PMrw.AccNr,1)=="5") then begin
        rwcnt = MatRowCnt(OPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          if ((OPrw.stp==kPaymentRowTypeNormal) and (left(OPrw.VECode,3)=="FOB")) then begin
            CUr.Code = OPrw.VECode;
            readfirstmain(CUr,1,true);
            if (CUr.CustCat=="STORE") then begin
              if (OPrw.VISerNr!=-1) then begin
                VIr.SerNr = OPrw.VISerNr;
                ReadFirstMain(VIr,1,true);
                rwcnt2 = matrowcnt(VIr);
                tmpval = VIr.PayVal;
                for (j=0;j<rwcnt2;j=j+1) begin
                  matrowget(VIr,j,VIrw);
                  if blank(VIrw.Item) then begin
                    tmpval = tmpval - VIrw.Sum;
                  end;
                end;
                for (j=0;j<rwcnt2;j=j+1) begin
                  matrowget(VIr,j,VIrw);
                  if nonblank(VIrw.Item) then begin
                    INr.Code = VIrw.Item;
                    readfirstmain(INr,1,true);
                    for (k=0;k<brandscnt;k=k+1) begin
                      if(setinset(aBrands[k],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
                        fobpaym[OPrw.RecCurncy & ":" & aBrands[k]] = fobpaym[OPrw.RecCurncy & ":" & aBrands[k]] + OPrw.RecVal*VIrw.Sum/tmpval;
                        fobpaym[OPrw.RecCurncy & ":TOTVAL"] = fobpaym[OPrw.RecCurncy & ":TOTVAL"] + OPrw.RecVal*VIrw.Sum/tmpval;
                      end;
                    end;
                  end;
                end;
              end else begin
                fobpaym[OPrw.RecCurncy & ":TOTVAL"] = fobpaym[OPrw.RecCurncy & ":TOTVAL"] + OPrw.RecVal*VIrw.Sum/tmpval;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  resetloop(CLOutr);
  TrHs = true;
  CLOutr.TransDate = sd;
	while(loopkey("TransDate",CLOutr,1,TrHs))begin
		testf = true;
		if (CLOutr.TransDate>ed) then begin TrHs = false; testf = false; end;
		if (CLOutr.OKFlag==0) then begin testf = false; end;
		if (CLOutr.Invalid==1) then begin testf = false; end;
    if (testf) then begin
      rwcnt = matrowcnt(CLOutr);
      brand = "";
      GetObjs("BRAND",CLOutr.Objects,brand);
      for (i=0;i<rwcnt;i=i+1) begin
        matrowget(CLOutr,i,CLOutrw);
        if setinset("E98",CLOutrw.CorspCode) then begin
          if nonblank(brand) then begin
            fobpaym[CLOutr.CurncyCode & ":" & aBrandsObj[brand]] = fobpaym[CLOutr.CurncyCode & ":" & aBrandsObj[brand]] + CLOutrw.Sum;
          end;
          fobpaym[CLOutr.CurncyCode & ":TOTVAL"] = fobpaym[CLOutr.CurncyCode & ":TOTVAL"] + CLOutrw.Sum;
        end;
      end;
    end;
  end;
  
  resetloop(CLInr);
  TrHs = true;
  CLInr.TransDate = sd;
	while(loopkey("TransDate",CLInr,1,TrHs))begin
		testf = true;
		if (CLInr.TransDate>ed) then begin TrHs = false; testf = false; end;
		if (CLInr.OKFlag==0) then begin testf = false; end;
		if (CLInr.Invalid==1) then begin testf = false; end;
    if (testf) then begin
      brand = "";
      GetObjs("BRAND",CLInr.Objects,brand);
      rwcnt = matrowcnt(CLInr);
      for (i=0;i<rwcnt;i=i+1) begin
        matrowget(CLInr,i,CLInrw);
        if setinset("E98",CLInrw.CorspCode) then begin
          if nonblank(brand) then begin
            fobpaym[CLInr.CurncyCode & ":" & aBrandsObj[brand]] = fobpaym[CLInr.CurncyCode & ":" & aBrandsObj[brand]] + CLOutrw.Sum;
          end;
          fobpaym[CLInr.CurncyCode & ":TOTVAL"] = fobpaym[CLInr.CurncyCode & ":TOTVAL"] - CLInrw.Sum;
        end;
      end;
    end;
  end;
  
  startformat(15);
		outstring(0,0,"6.1",false);
		outstring(0,0,"Оплата товара бутикам ювелирной Программы",false);
	endformat;
  
  TmpList[0] = "AZN";
  TmpList[1] = "EUR";
  TmpList[2] = "CHF";
  TmpList[3] = "USD";
  TmpList[4] = "GBP";
  tmpval = 0;
  for(i=0;i<TmpList.length;i=i+1) begin
    startformat(15);
      outstring(0,0,"",false);
      outstring(50,0,TmpList[i],false);
      outstring(100,0,fobpaym[TmpList[i] & ":TOTVAL"],false);
      for(j=0;j<aBrands.length;j=j+1) begin
        outstring(150+50*j,0,fobpaym[TmpList[i] & ":" & aBrands[j]],false);
      end;
      GetFullCurncyRate(TmpList[i],ed,fr,to1,to2,br1,br2);
      if ((fr==0) or (to1==0)) then begin
        fr = 1;
        to1 = 1;
      end;
      tmpval = tmpval + fobpaym[TmpList[i] & ":TOTVAL"]/fr*to1;
    endformat;
  end;
  GetFullCurncyRate(TmpList[3],ed,fr,to1,to2,br1,br2);// usd
  tmpval = tmpval*fr/to1;
  startformat(15);
    outstring(0,0,"",false);
    outstring(50,0,"Итого USD",false);
    outstring(100,0,tmpval,false);
  endformat;
  
  return;
end;

global
procedure PrintStockFromBrandManag7(record RcVc RepSpec, array string aBrands, var val totusd)
BEGIN
  array string 5 TmpList;
  array string 50 aBrandsObj;
  boolean TrHs,testf;
  integer i,j,TLi,rwcnt,sign;
  record CUVc CUr;
  record DIVc DIr;
  record FBVc FBr;
  record mainVc mainr;
  record TRVc TRr;
  record LocationVc Locr;
  row TRVc TRrw;
	row FBVc FBrw;
  string 255 brand,loc;
  val tmpval,fr,to1,to2,br1,br2;
  vector val BrandVal;
  
  Locr.Code = RepSpec.f1;
  ReadFirstMain(Locr,1,true);
  loc = Locr.Objects;
  
  // collect obj
  
  for (i=0;i<aBrands.length;i=i+1) begin
    DIr.Code = aBrands[i];
    readfirstmain(DIr,1,true);
    CUr.Name = DIr.Name;
    //Edit-------------------Vitalii 11:20 27.03.2018
    TrHs = true;
    while(loopkey("Name",CUr,1,TrHs))begin
      testf = true;
      if(CUr.Name!=DIr.Name)then begin TrHs = false; testf = false; end;
      //if(CUr.Code>"0009999" or CUr.Code<"0000001")then begin testf = false; end;
      if ((CUr.VECat=="IDEA") and (currentcompany!=28))then begin testf = false; end;
      if ((CUr.VECat!="IDEA") and (currentcompany==28))then begin testf = false; end;

      if(testf)then begin
        TrHs = false;
      end;
    end;
    resetloop(CUr);
    //readfirstkey("Name",CUr,1,true);
    aBrandsObj[i] = CUr.VEObjects;
  end;
  TmpList[0] = "60";
  TmpList[1] = "64";
  sign = 1;
  for (TLi=0;TLi<TmpList.length;TLi=TLi+1) begin
    switch (TmpList[TLi]) begin
      case "60": sign = -1;
      case "64": sign = -1;
    end;
    mainr.AccNumber = TmpList[TLi];
    TrHs = true;
    while (LoopMain(mainr,1,TrHs)) begin
      if ((mainr.AccNumber!=TmpList[TLi]) or (mainr.TransDate>RepSpec.sEndDate)) then begin
        TrHs = false;	
      end;
      if (TrHs) then begin
        if (mainr.FileName=="TRVc") then begin
          TRr.Number = mainr.TransNr;
          TRr.IntYc = mainr.IntYc;
          if (ReadFirstMain(TRr,2,true)) then begin
            if (mainr.TransDate == TRr.TransDate) then begin
              rwcnt = MatRowCnt(TRr);
              for (j=0;j<rwcnt;j=j+1) begin
                MatRowGet(TRr,j,TRrw);
                if ((TRrw.AccNumber == TmpList[TLi]) and (TRrw.ovst <> 1) and (TRrw.stp == 1) and SetInSet(loc,TRrw.Objects)) then begin
                  brand = "";
                  GetObjs("BRAND",TRrw.Objects,brand);
                  if nonblank(brand) then begin
                    tmpval = sign*(TRrw.CurCredVal - TRrw.CurDebVal);
                    BrandVal[brand & ":" & TRrw.Curncy] = BrandVal[brand & ":" & TRrw.Curncy] + tmpval;
                    BrandVal["TOTVAL:" & TRrw.Curncy] = BrandVal["TOTVAL:" & TRrw.Curncy] + tmpval;
                    tmpval = sign*(TRrw.CredVal - TRrw.DebVal);
                    BrandVal[brand & ":" & TRrw.Curncy & ":BASE"] = BrandVal[brand & ":" & TRrw.Curncy & ":BASE"] + tmpval;
                  end;
                end;
              end;
            end;
          end;
        end;
        if (mainr.FileName=="FBVc") then begin
          FBr.SerNr = mainr.TransNr;
          if (ReadFirstMain(FBr,1,true)) then begin
            if (mainr.TransDate == FBr.TransDate) and SetInSet(loc,FBr.Objects) then begin
              brand = "";
              GetObjs("BRAND",FBr.Objects,brand);
              if nonblank(brand) then begin
                rwcnt = MatRowCnt(FBr);
                for (j=0;j<rwcnt;j=j+1) begin
                  MatRowGet(FBr,j,FBrw);
                  if (FBrw.AccNumber == TmpList[TLi]) then begin
                    tmpval = sign*(FBrw.CurCredVal - FBrw.CurDebVal);
                    BrandVal[brand & ":" & FBrw.CurncyCode] = BrandVal[brand & ":" & FBrw.CurncyCode] + tmpval;
                    BrandVal["TOTVAL:" & FBrw.CurncyCode] = BrandVal["TOTVAL:" & FBrw.CurncyCode] + tmpval;
                    tmpval = sign*(FBrw.CredVal - FBrw.DebVal);
                    BrandVal[brand & ":" & FBrw.CurncyCode & ":BASE"] = BrandVal[brand & ":" & FBrw.CurncyCode & ":BASE"] + tmpval;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
    ResetLoop(mainr);
  end;
  
  
  startformat(15);
    outstring(0,0,"7",false);
    outstring(0,0,"Кредит. задолженность Поставщиков",false);
  endformat;
  TmpList[0] = "AZN";
  TmpList[1] = "EUR";
  TmpList[2] = "CHF";
  TmpList[3] = "USD";
  TmpList[4] = "GBP";
  tmpval = 0;
  for (TLi=0;TLi<TmpList.length;TLi=TLi+1) begin
    startformat(15);
      outstring(0,0,"",false);
      outstring(50,0,TmpList[TLi],false);
      outstring(100,0,BrandVal["TOTVAL:" & TmpList[TLi]],false);
      For(i=0;i<aBrands.length;i=i+1) begin
        outstring(150+50*i,0,BrandVal[aBrandsObj[i] & ":" & TmpList[TLi]],false);
      end;
      GetFullCurncyRate(TmpList[TLi],RepSpec.sEndDate,fr,to1,to2,br1,br2);
      if ((fr==0) or (to1==0)) then begin
        fr = 1;
        to1 = 1;
      end;
			tmpval = tmpval + BrandVal["TOTVAL:" & TmpList[TLi]]/fr*to1;
    endformat;
  end;
  TmpList[0] = "USD";
  GetFullCurncyRate(TmpList[0],RepSpec.sEndDate,fr,to1,to2,br1,br2);
  tmpval = tmpval*fr/to1;
  startformat(15);
    outstring(0,0,"",false);
    outstring(50,0,"Итого USD",false);
    outstring(100,0,tmpval,false);
  endformat;
  totusd = totusd + tmpval;
  
  return;
END;

global
procedure	PrintStockIVDeb8(record RcVc RepSpec1,date ed,string loc,array string aBrands,var val totusd)
begin
  array string 5 TmpList;
  integer i,j;
  record RcVc RepSpec;
  record LocationVc Locr;
	string 10 incurncy;
	val total;
	val fr,to1,to2,br1,br2;
  vector val vtot1Sum;
	
  TmpList[0] = "AZN";
  TmpList[1] = "EUR";
  TmpList[2] = "CHF";
  TmpList[3] = "USD";
  TmpList[4] = "GBP";
  ReportDefaults(RepSpec,"ARRClass");
  Locr.Code = loc;
  ReadFirstMain(Locr,1,true);
  RepSpec.ObjStr = Locr.Objects;
  RepSpec.d1 = ed;
  RepSpec.flags[1] = RepSpec1.flags[1];
  RepSpec.flags[2] = 1;
  RepSpec.flags[21] = 2;
  for(i=0;i<TmpList.length;i=i+1) begin
    RepSpec.CurncyCode = TmpList[i];
    RunARRnToGetDebtOnDateByCurrency(RepSpec,aBrands,vtot1Sum);
  end;

	startformat(15);
    outstring(0,0,"8",false);
    outstring(0,0,"Задолженность Покупателей",false);
  endformat;
  for(i=0;i<TmpList.length;i=i+1) begin
    startformat(15);
      outstring(0,0,"",false);
      outstring(50,0,TmpList[i],false);
      outstring(100,0,vtot1Sum["TOTVAL:" & TmpList[i]],false);
      for(j=0;j<aBrands.length;j=j+1) begin
        outstring(150+50*j,0,vtot1Sum[aBrands[j] & ":" & TmpList[i]],false);
      end;
      GetFullCurncyRate(TmpList[i],ed,fr,to1,to2,br1,br2);
      if ((fr==0) or (to1==0)) then begin
        fr = 1;
        to1 = 1;
      end;
      total = total + vtot1Sum["TOTVAL:" & TmpList[i]]/fr*to1;
    endformat;
  end;
  GetFullCurncyRate(TmpList[3],ed,fr,to1,to2,br1,br2);// usd
  total = total*fr/to1;
  startformat(15);
    outstring(0,0,"",false);
    outstring(50,0,"Итого USD",false);
    outstring(100,0,total,false);
  endformat;
  totusd = totusd + total;
  
  return;
end;

global
procedure PrintStockRetFob9New(record RcVc RepSpec,integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
  array string 5 TmpList;
  boolean TrHs,TrHs2,testf;
  integer i,j,rwcnt;
  record CUVc CUr;
  record INVc INr;
  record IVVc IVr,IV2r;
  record ItemHistVc IHr;
  record MainVc mainr;
  record RetVc Retr;
  record SHVc SHr;
  row IVVc IVrw;
  val tmpval,fr,to1,to2,br1,br2;
  vector val cost;
	record LocationVc Locr;
	vector string 255 vConsStockCode, vDefStockCode;
  
	if (nonblank(location)) then begin 
		Locr.Code = location;
		if (ReadFirstMain(Locr,1,true)) then begin
			if (nonblank(Locr.ConsigStockCode)) then begin
				vConsStockCode[Locr.Code] = Locr.ConsigStockCode;
			end;
			if (nonblank(Locr.DefectStockCode)) then begin
				vDefStockCode[Locr.Code] = Locr.DefectStockCode;
			end;
		end;
	end;
	
	
  resetloop(mainr);
  mainr.AccNumber = "47";
	mainr.TransDate = sd;
	TrHs = true;
  while (LoopMain(mainr,2,TrHs)) begin
		if ((mainr.AccNumber != "47") or (mainr.TransDate > ed)) then begin TrHs = false; end;
		if (TrHs) then begin
      if (mainr.IntYc==IVYc) begin
        IVr.SerNr = mainr.TransNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          testf = true;
          if (nonblank(location) and IVr.Location!=location and IVr.Location!=vConsStockCode[location] and IVr.Location!=vDefStockCode[location]) then begin testf = false; end;
          if (left(IVr.CustCode,3)=="FOB") then begin
            CUr.Code = IVr.CustCode;
            readfirstmain(CUr,1,true);
            if (CUr.CustCat=="STORE") then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            rwcnt = matrowcnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              matrowget(IVr,i,IVrw);
              if ((IVrw.stp==kInvoiceRowTypeNormal) and (IVrw.Quant<0) and nonblank(IVrw.IVForRetNr)) then begin
                IV2r.SerNr=IVrw.IVForRetNr;
                if (readfirstmain(IV2r,1,true)) then begin
                  if (IV2r.InvDate<sd) then begin
                    INr.Code = IVrw.ArtCode;
                    readfirstmain(INr,1,true);
                    for (j=0;j<brandscnt;j=j+1) begin
                      if(setinset(aBrands[j],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
                        if (IVrw.FIFORowValCur!=blankval) then begin
                          cost[aBrands[j] & ":" & IVrw.CurncyCodeCur] = cost[aBrands[j] & ":" & IVrw.CurncyCodeCur] + IVrw.FIFORowValCur;
                          cost["TOTVAL:" & IVrw.CurncyCodeCur] = cost["TOTVAL:" & IVrw.CurncyCodeCur] + IVrw.FIFORowValCur;
                        end else begin
                          IHr.ArtCode = IVrw.ArtCode;
                          IHr.FileName = "IVVc";
                          IHr.TransNr = IVr.SerNr;
                          if readfirstkey("FutArtFile",IHr,3,true) then begin
                            cost[aBrands[j] & ":" & IHr.CurncyCode] = cost[aBrands[j] & ":" & IHr.CurncyCode] + IHr.TotCostPriceCurncy;
                            cost["TOTVAL:" & IHr.CurncyCode] = cost["TOTVAL:" & IHr.CurncyCode] + IHr.TotCostPriceCurncy;
                          end;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  resetloop(Retr);
  Retr.TransDate = sd;
  TrHs = true;
	while (LoopKey("TransDate",Retr,1,TrHs)) begin
    testf = true;
    if (Retr.TransDate>ed) then begin TrHs = false; testf = false; end;
    if (Retr.OKFlag!=1) then begin testf = false; end;
    if (nonblank(location) and (Retr.Location!=location)) then begin testf = false; end;
    if (left(IVr.CustCode,3)=="FOB") then begin
      CUr.Code = IVr.CustCode;
      readfirstmain(CUr,1,true);
      if (CUr.CustCat=="STORE") then begin
        testf = false;
      end;
    end;
		if (testf) then begin
      CUr.Code = Retr.CustCode;
      readfirstmain(CUr,1,true);
      if (CUr.CustCat=="STORE") then begin
        if nonblank(Retr.SHNr) then begin
          SHr.SerNr = Retr.SHNr;
          if readfirstmain(SHr,1,true) then begin
            if (SHr.ShipDate<sd) then begin
              resetloop(IHr);
              IHr.FileName = "RetVc";
              IHr.TransNr = Retr.SerNr;
              TrHs2 = true;
              while (LoopKey("FNTransNr",IHr,2,TrHs2)) begin
                if ((IHr.FileName!="RetVc") or (IHr.TransNr!=Retr.SerNr)) then begin TrHs2 = false; end;
                if (TrHs2) then begin
                  INr.Code = IHr.ArtCode;
                  readfirstmain(INr,1,true);
                  for (j=0;j<brandscnt;j=j+1) begin
                    if(setinset(aBrands[j],PrepareDispGroups(RepSpec,INr.DispGroups)))then begin
                      cost[aBrands[j] & ":" & IHr.CurncyCode] = cost[aBrands[j] & ":" & IHr.CurncyCode] + IHr.TotCostPriceCurncy;
                      cost["TOTVAL:" & IHr.CurncyCode] = cost["TOTVAL:" & IHr.CurncyCode] + IHr.TotCostPriceCurncy;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  
  startformat(15);
		outstring(0,0,"9",false);
		outstring(0,0,"Возврат от покупателей (FOB) - себестоимость возращенного товара, кроме FOB36 (купленного в месяце, ранее текущего)",false);
	endformat;
  TmpList[0] = "AZN";
  TmpList[1] = "EUR";
  TmpList[2] = "CHF";
  TmpList[3] = "USD";
  TmpList[4] = "GBP";
  tmpval = 0;
  
  for (i=0;i<TmpList.length;i=i+1) begin
    startformat(15);
      outstring(0,0,"",false);
      outstring(50,0,TmpList[i],false);
      outstring(100,0,cost["TOTVAL:" & TmpList[i]],false);
      For(j=0;j<brandscnt;j=j+1) begin
        outstring(150+50*j,0,cost[aBrands[j] & ":" & TmpList[i]],false);
      end;
      GetFullCurncyRate(TmpList[i],ed,fr,to1,to2,br1,br2);
      if ((fr==0) or (to1==0)) then begin
        fr = 1;
        to1 = 1;
      end;
			tmpval = tmpval + cost["TOTVAL:" & TmpList[i]]/fr*to1;
    endformat;
  end;
  TmpList[0] = "USD";
  GetFullCurncyRate(TmpList[0],ed,fr,to1,to2,br1,br2);
  tmpval = tmpval*fr/to1;
  startformat(15);
    outstring(0,0,"",false);
    outstring(50,0,"Итого USD",false);
    outstring(100,0,tmpval,false);
  endformat;
  return;
end;

global
procedure PrintRates10(date ed)
begin
	val rateAZN,rateEUR,rateCHF,rateUSD,rateGBP;
	string 10 incurncy;
	val fr,to1,to2,br1,br2;

		rateAZN = 1;
		incurncy = "EUR";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		rateEUR = fr/to1;
		incurncy = "CHF";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		rateCHF = fr/to1;
		incurncy = "USD";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		rateUSD = fr/to1;
		incurncy = "GBP";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		rateGBP = fr/to1;
		
		startformat(15);
			outstring(0,0,"11",false);
			outstring(0,0,"Курс на отчетную дату",false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"AZN/USD",false);
			outval(200,0,rateUSD,M45Val,false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"EUR/USD",false);
			outval(200,0,rateUSD/rateEUR,M45Val,false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"CHF/USD",false);
			outval(200,0,rateUSD/rateCHF,M45Val,false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"GBP/USD",false);
			outval(200,0,rateUSD/rateGBP,M45Val,false);
		endformat;

return;
end;