//server-only
external procedure YcToStr(Integer,var string);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure ExtractObjectsByType(string ,string,var array string,var integer);
external function roundmode SetRoundModeD(Integer);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure LogProcTime(string,longint);

SetLangMode(LangRussian,"RUS",0);

procedure RunTRVcRn(record RcVc RepSpec, boolean printf, array integer tab, string extrastr, var vector val tot, var array string CurList)
begin
  record mainVc mainr;
  record TRVc TRr;
  record FBVc FBr;
  row TRVc TRrw;
  row FBVc FBrw;
  boolean TrHs,f;
  val fr,to1,to2,b1,b2;
  date td;
  string 20 crn,tstr,objstr;
  integer i,rwcnt,cli,oldstyle;
  vector boolean CurInList;
  record BaseCurBlock bcur;
	longint curtick;
	
	curtick = getcurtick();
	
  if nonblank(RepSpec.f1) then begin
    BlockLoad(bcur);
    cli = 0;
    objstr = UpperCase(RepSpec.ObjStr);
    if (printf) then begin
      StartFormat(15);
        OutString(tab[0],0,"Дата",false);
        OutString(tab[1],0,"Номер",false);
        OutString(tab[2],0,"Валюта",false);
        OutString(tab[3],0,"Дт в вал",false);
        OutString(tab[4],0,"Дт в осн",false);
        OutString(tab[5],0,"Дт по курсу",false);
        OutString(tab[6],0,"Кт в вал",false);
        OutString(tab[7],0,"Кт в осн",false);
        OutString(tab[8],0,"Кт по курсу",false);
        if (tab[9]==0) then begin
          tab[9] = tab[8] + 50;
        end;
        OutString(tab[9],0,"Проблемы",false);
      EndFormat;
      Black_Divider(0,1);
    end;
    resetloop(mainr);
    mainr.AccNumber = RepSpec.f1;
    mainr.TransDate = RepSpec.sStartDate;
    TrHs = true;
    while (LoopMain(mainr,2,TrHs)) begin
      if ((mainr.AccNumber!=RepSpec.f1) or (mainr.TransDate>RepSpec.sEndDate)) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        if (mainr.FileName=="TRVc") then begin
          TRr.Number = mainr.TransNr;
          TRr.IntYc = mainr.IntYc;
          if (ReadFirstMain(TRr,2,true)) then begin
            if (mainr.TransDate == TRr.TransDate) then begin
              rwcnt = MatRowCnt(TRr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(TRr,i,TRrw);
                if ((TRrw.AccNumber == RepSpec.f1) and (TRrw.ovst <> 1) and (TRrw.stp==1) and ((TRrw.Curncy==RepSpec.CurncyCode) or blank(RepSpec.CurncyCode)) and ((setinset(objstr,TRrw.Objects)) or blank(objstr))) then begin
                  if (printf) then begin
                    StartFormat(15);
                      OutString(tab[0],0,mainr.TransDate,false);
                      tstr = "";
                      YcToStr(TRr.IntYc,tstr);
                      switch (TRr.IntYc) begin
                        case IVYc:
                          OutStringID(tab[1],"DblIVVc",tstr & "." & TRr.Number,false,TRr.Number);
                        case IPYc:
                          OutStringID(tab[1],"DblIPVcID",tstr & "." & TRr.Number,false,TRr.Number);
                        case CLInYc:
                          OutStringID(tab[1],"DblCLInID",tstr & "." & TRr.Number,false,TRr.Number);
                        case CLOutYc:
                          OutStringID(tab[1],"DblCLOutID",tstr & "." & TRr.Number,false,TRr.Number);
                        otherwise
                          OutStringID(tab[1],"DblTrans",tstr & "." & TRr.Number,false,CurrentCompany);
                      end;
                      OutString(tab[2],0,TRrw.Curncy,false);
                      if (td!=mainr.TransDate) then begin
                        crn = TRrw.Curncy;
                        td = mainr.TransDate;
                        fr = 0; to1 = 0; to2 = 0; b1 = 0; b2 = 0;
                        GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
                        if to1==0 then begin to1 = 1; end;
                        if fr==0 then begin fr = 1; end;
                      end;
                      OutString(tab[3],0,TRrw.CurDebVal,false);
                      OutString(tab[4],0,TRrw.DebVal,false);
                      if TRrw.CurDebVal==0 then begin
                        OutString(tab[5],0,"",false);
                      end else begin
                        OutString(tab[5],0,TRrw.CurDebVal*to1/fr,false);
                      end;
                      OutString(tab[6],0,TRrw.CurCredVal,false);
                      OutString(tab[7],0,TRrw.CredVal,false);
                      if TRrw.CurCredVal==0 then begin
                        OutString(tab[8],0,"",false);
                      end else begin
                        OutString(tab[8],0,TRrw.CurCredVal*to1/fr,false);
                      end;
                      f = false;
                      if (TRrw.Curncy==bcur.BaseCur1) then begin
                        if (TRrw.DebVal!=TRrw.CurDebVal) then begin
                          OutString(tab[9],0,"Нерав. Дт в " & (i + 1) & " стр. " & (TRrw.DebVal - TRrw.CurDebVal),false);
                          f = true;
                        end;
                        if (TRrw.CredVal!=TRrw.CurCredVal) then begin
                          OutString(tab[9],0,"Нерав. Кт в " & (i + 1) & " стр. " & (TRrw.CredVal - TRrw.CurCredVal),false);
                          f = true;
                        end;
                      end;
                      if blank(TRrw.Curncy) then begin
                        OutString(tab[9],0,"Пустая вал в стр." & (i + 1),false);
                        f = true;
                      end;
                    EndFormat;
                    if (f) then begin
                      Gray_Divider(0,1);
                    end;
                  end;
                  if !CurInList[TRrw.Curncy] then begin
                    CurInList[TRrw.Curncy] = true;
                    CurList[cli] = TRrw.Curncy;
                    cli = cli + 1;
                  end;
                  crn = TRrw.Curncy;
                  switch (TypeOfCurncy(crn,oldstyle)) begin
                    case 0:
                      tot[extrastr & TRrw.Curncy & ":curdeb"] = tot[extrastr & TRrw.Curncy & ":curdeb"] + TRrw.CurDebVal;
                      tot[extrastr & TRrw.Curncy & ":debrate"] = tot[extrastr & TRrw.Curncy & ":debrate"] + TRrw.CurDebVal*to1/fr;
                      tot[extrastr & TRrw.Curncy & ":curcred"] = tot[extrastr & TRrw.Curncy & ":curcred"] + TRrw.CurCredVal;
                      tot[extrastr & TRrw.Curncy & ":credrate"] = tot[extrastr & TRrw.Curncy & ":credrate"] + TRrw.CurCredVal*to1/fr;
                    case 1:
                      tot[extrastr & TRrw.Curncy & ":curdeb"] = tot[extrastr & TRrw.Curncy & ":curdeb"] + TRrw.DebVal;
                      tot[extrastr & TRrw.Curncy & ":debrate"] = tot[extrastr & TRrw.Curncy & ":debrate"] + TRrw.DebVal*to1/fr;
                      tot[extrastr & TRrw.Curncy & ":curcred"] = tot[extrastr & TRrw.Curncy & ":curcred"] + TRrw.CredVal;
                      tot[extrastr & TRrw.Curncy & ":credrate"] = tot[extrastr & TRrw.Curncy & ":credrate"] + TRrw.CredVal*to1/fr;
                    case 2:
                      tot[extrastr & TRrw.Curncy & ":curdeb"] = tot[extrastr & TRrw.Curncy & ":curdeb"] + TRrw.DebVal2;
                      tot[extrastr & TRrw.Curncy & ":debrate"] = tot[extrastr & TRrw.Curncy & ":debrate"] + TRrw.DebVal2*to1/fr;
                      tot[extrastr & TRrw.Curncy & ":curcred"] = tot[extrastr & TRrw.Curncy & ":curcred"] + TRrw.CredVal2;
                      tot[extrastr & TRrw.Curncy & ":credrate"] = tot[extrastr & TRrw.Curncy & ":credrate"] + TRrw.CredVal2*to1/fr;
                  end;
                  tot[extrastr & TRrw.Curncy & ":deb"] = tot[extrastr & TRrw.Curncy & ":deb"] + TRrw.DebVal;
                  tot[extrastr & TRrw.Curncy & ":cred"] = tot[extrastr & TRrw.Curncy & ":cred"] + TRrw.CredVal;
                end;
              end;
            end;
          end;
        end;
        if (mainr.FileName=="FBVc") then begin
          FBr.SerNr = mainr.TransNr;
          if (ReadFirstMain(FBr,1,true)) then begin
            if (mainr.TransDate==FBr.TransDate) and (objstr==FBr.Objects) then begin
              rwcnt = MatRowCnt(FBr);
              for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(FBr,i,FBrw);
                if (FBrw.AccNumber==RepSpec.f1) and ((FBrw.CurncyCode==RepSpec.CurncyCode) or blank(RepSpec.CurncyCode)) then begin
                  if (printf) then begin
                    StartFormat(15);
                      OutString(tab[0],0,mainr.TransDate,false);
                      OutStringID(tab[1],"DblFBVc",FBr.SerNr,false,FBr.SerNr);
                      OutString(tab[2],0,FBrw.CurncyCode,false);
                      if (td!=mainr.TransDate) then begin
                        crn = FBrw.CurncyCode;
                        td = mainr.TransDate;
                        fr = 0; to1 = 0; to2 = 0; b1 = 0; b2 = 0;
                        GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
                        if to1==0 then begin to1 = 1; end;
                        if fr==0 then begin fr = 1; end;
                      end;
                      OutString(tab[3],0,FBrw.CurDebVal,false);
                      OutString(tab[4],0,FBrw.DebVal,false);
                      if FBrw.CurDebVal==0 then begin
                        OutString(tab[5],0,"",false);
                      end else begin
                        OutString(tab[5],0,FBrw.CurDebVal*to1/fr,false);
                      end;
                      OutString(tab[6],0,FBrw.CurCredVal,false);
                      OutString(tab[7],0,FBrw.CredVal,false);
                      if FBrw.CurCredVal==0 then begin
                        OutString(tab[8],0,"",false);
                      end else begin
                        OutString(tab[8],0,FBrw.CurCredVal*to1/fr,false);
                      end;
                      f = false;
                      if (FBrw.CurncyCode==bcur.BaseCur1) then begin
                        if (FBrw.DebVal!=FBrw.CurDebVal) then begin
                          OutString(tab[9],0,"Нерав. Дт в " & (i + 1) & " стр. " & (FBrw.DebVal - FBrw.CurDebVal),false);
                          f = true;
                        end;
                        if (FBrw.CredVal!=FBrw.CurCredVal) then begin
                          OutString(tab[9],0,"Нерав. Кт в " & (i + 1) & " стр. " & (FBrw.CredVal - FBrw.CurCredVal),false);
                          f = true;
                        end;
                      end;
                      if blank(FBrw.CurncyCode) then begin
                        OutString(tab[9],0,"Пустая вал в стр." & (i + 1),false);
                        f = true;
                      end;
                    EndFormat;
                    if (f) then begin
                      Gray_Divider(0,1);
                    end;
                  end;
                  if !CurInList[FBrw.CurncyCode] then begin
                    CurInList[FBrw.CurncyCode] = true;
                    CurList[cli] = FBrw.CurncyCode;
                    cli = cli + 1;
                  end;
                  crn = FBrw.CurncyCode;
                  switch (TypeOfCurncy(crn,oldstyle)) begin
                    case 0:
                      tot[extrastr & FBrw.CurncyCode & ":curdeb"] = tot[extrastr & FBrw.CurncyCode & ":curdeb"] + FBrw.CurDebVal;
                      tot[extrastr & FBrw.CurncyCode & ":debrate"] = tot[extrastr & FBrw.CurncyCode & ":debrate"] + FBrw.CurDebVal*to1/fr;
                      tot[extrastr & FBrw.CurncyCode & ":curcred"] = tot[extrastr & FBrw.CurncyCode & ":curcred"] + FBrw.CurCredVal;
                      tot[extrastr & FBrw.CurncyCode & ":credrate"] = tot[extrastr & FBrw.CurncyCode & ":credrate"] + FBrw.CurCredVal*to1/fr;
                    case 1:
                      tot[extrastr & FBrw.CurncyCode & ":curdeb"] = tot[extrastr & FBrw.CurncyCode & ":curdeb"] + FBrw.DebVal;
                      tot[extrastr & FBrw.CurncyCode & ":debrate"] = tot[extrastr & FBrw.CurncyCode & ":debrate"] + FBrw.DebVal*to1/fr;
                      tot[extrastr & FBrw.CurncyCode & ":curcred"] = tot[extrastr & FBrw.CurncyCode & ":curcred"] + FBrw.CredVal;
                      tot[extrastr & FBrw.CurncyCode & ":credrate"] = tot[extrastr & FBrw.CurncyCode & ":credrate"] + FBrw.CredVal*to1/fr;
                    case 2:
                      tot[extrastr & FBrw.CurncyCode & ":curdeb"] = tot[extrastr & FBrw.CurncyCode & ":curdeb"] + FBrw.Deb2Val;
                      tot[extrastr & FBrw.CurncyCode & ":debrate"] = tot[extrastr & FBrw.CurncyCode & ":debrate"] + FBrw.Deb2Val*to1/fr;
                      tot[extrastr & FBrw.CurncyCode & ":curcred"] = tot[extrastr & FBrw.CurncyCode & ":curcred"] + FBrw.Cred2Val;
                      tot[extrastr & FBrw.CurncyCode & ":credrate"] = tot[extrastr & FBrw.CurncyCode & ":credrate"] + FBrw.Cred2Val*to1/fr;
                  end;
                  tot[extrastr & FBrw.CurncyCode & ":deb"] = tot[extrastr & FBrw.CurncyCode & ":deb"] + FBrw.DebVal;
                  tot[extrastr & FBrw.CurncyCode & ":cred"] = tot[extrastr & FBrw.CurncyCode & ":cred"] + FBrw.CredVal;
                end;
              end;
            end;
          end;
        end;
      end;
      
    end;
  end;
	LogProcTime("RunTRVcRn",getcurtick() - curtick);
	return;
end;

global
procedure TRVcRn(record RcVc RepSpec)
begin
  vector val total;
  array integer tab;
  array string 20 CurrencyList;
  integer i;
  val totdeb, totcred;
  longint curtick;
	
	curtick = getcurtick();
  if nonblank(RepSpec.f1) then begin
    tab[0] = 0;
    tab[1] = tab[0] + 40;
    tab[2] = tab[1] + 50;
    tab[3] = tab[2] + 30;
    tab[4] = tab[3] + 45;
    tab[5] = tab[4] + 45;
    tab[6] = tab[5] + 45;
    tab[7] = tab[6] + 45;
    tab[8] = tab[7] + 45;
    tab[9] = tab[8] + 45;
    tab[10] = tab[9] + 45;
    StartReportNoHeaderJob("Отчет по записям операций");
      RunTRVcRn(RepSpec,true,tab,"",total,CurrencyList);
      StartFormat(15);
      EndFormat;
      Black_Divider(0,1);
      StartFormat(15);
        OutString(tab[0],0,"",false);
        OutString(tab[1],0,"",false);
        OutString(tab[2],0,"Валюта",false);
        OutString(tab[3],0,"Дт в вал",false);
        OutString(tab[4],0,"Дт в осн",false);
        OutString(tab[5],0,"",false);
        OutString(tab[6],0,"Кт в вал",false);
        OutString(tab[7],0,"Кт в осн",false);
        OutString(tab[8],0,"",false);
        OutString(tab[9],0,"Оборот в вал",false);
        OutString(tab[10],0,"Оборот в осн",false);
      EndFormat;
      Black_Divider(0,1);
      for (i=0;i<CurrencyList.length;i=i+1) begin
        StartFormat(15);
          if (i==0) then begin
            OutString(tab[0],0,"Итого:",false);
          end else begin
            OutString(tab[0],0,"",false);
          end;
          OutString(tab[1],0,"" ,false);
          OutString(tab[2],0,CurrencyList[i],false);
          OutString(tab[3],0,total[CurrencyList[i] & ":curdeb"],false);
          OutString(tab[4],0,total[CurrencyList[i] & ":deb"],false);
          OutString(tab[5],0,"",false);
          OutString(tab[6],0,total[CurrencyList[i] & ":curcred"],false);
          OutString(tab[7],0,total[CurrencyList[i] & ":cred"],false);
          OutString(tab[8],0,"",false);
          OutString(tab[9],0,total[CurrencyList[i] & ":curdeb"] - total[CurrencyList[i] & ":curcred"],false);
          OutString(tab[10],0,total[CurrencyList[i] & ":deb"] - total[CurrencyList[i] & ":cred"],false);
          totdeb = totdeb + total[CurrencyList[i] & ":deb"];
          totcred = totcred + total[CurrencyList[i] & ":cred"];
        EndFormat;
      end;
      Gray_Divider(0,1);
      StartFormat(15);
        OutString(tab[0],0,"",false);
        OutString(tab[1],0,"",false);
        OutString(tab[2],0,"",false);
        OutString(tab[3],0,"",false);
        OutString(tab[4],0,totdeb,false);
        OutString(tab[5],0,"",false);
        OutString(tab[6],0,"",false);
        OutString(tab[7],0,totcred,false);
        OutString(tab[8],0,"",false);
      EndFormat;
    EndJob;
  end;
  LogProcTime("TRVcRn",getcurtick() - curtick);
  return;
end;

global
procedure TRVcCompRn(record RcVc RepSpec)
begin
  vector val total;
  array integer tab;
  array string 20 CurrencyList,ObjectList;
  integer i,j,k,l,rwcnt,rwcnt2,scnt,oscnt,curcomp,compnr,oldstyle;
  val totdeb,totcred,cur,base,rate,totdiff;
  string 100 extrastr;
  record CompaniesBlock CBb;
  row CompaniesBlock CBrw;
  array string 20 stores,accnumber;
  record ObjVc Objr;
  boolean TrHs,testf,printf;
  string 20 crn;
  Date td;
  record mainVc mainr;
  record TRVc TRr;
  record FBVc FBr;
  row TRVc TRrw;
  row FBVc FBrw;
  string 20 tstr,objstr;
  integer ccnt,ocnt;
  vector boolean CurInList,AccInArr,ObjInArr,NonBlankTotal;
  val fr,to1,to2,b1,b2;
  record BaseCurBlock bcur;
  longint curtick;
	
	curtick = getcurtick();
	
  blockload(bcur);
  compnr = 0;
  if nonblank(RepSpec.f1) then begin
    compnr = StringToInt(RepSpec.f1) - 1;
  end;
  
  tab[0] = 0;
  tab[1] = tab[0] + 15;
  tab[2] = tab[1] + 15;
  tab[3] = tab[2] + 20;
  tab[4] = tab[3] + 70;
  tab[5] = tab[4] + 45;
  tab[6] = tab[5] + 45;
  tab[7] = tab[6] + 45;
  tab[8] = tab[7] + 50;
  tab[9] = tab[8] + 45;
  tab[10] = tab[9] + 50;
  tab[11] = tab[10] + 50;
  
  accnumber[0] = "50";
  accnumber[1] = "52";
	accnumber[2] = "52/2";
  accnumber[3] = "53";
  accnumber[4] = "58";
  accnumber[5] = "59";
  accnumber[6] = "59/1";
  accnumber[7] = "59/2";
  accnumber[8] = "59/3";
  for (i=0;i<accnumber.length;i=i+1) begin
    AccInArr[accnumber[i]] = true;
  end;
  
  StartReportNoHeaderJob("Отчет по записям операций");
    curcomp = currentcompany;
    blockload(CBb);
    rwcnt = matrowcnt(CBb);
    for (i=compnr;i<rwcnt;i=i+1) begin
      if (SetCompany(i+1,false)) then begin
        MatRowGet(CBb,i,CBrw);
        StartFormat(15);
          OutString(tab[0],0,"Компания: " & CBrw.ShortName,false);
        EndFormat;
        
        for (l=0;l<ccnt;l=l+1) begin
          CurInList[CurrencyList[l]] = false;
        end;
        for (j=0;j<ocnt;j=j+1) begin
          ObjInArr[ObjectList[j]] = false;
        end;
        ccnt = 0;
        ocnt = 0;
        resetloop(mainr);
        mainr.TransDate = RepSpec.sStartDate;
        TrHs = true;
        while (LoopKey("TransDate",mainr,1,TrHs)) begin
          if (mainr.TransDate>RepSpec.sEndDate) then begin
            TrHs = false;
          end;
          if (TrHs) and (AccInArr[mainr.AccNumber]) then begin
            if (mainr.FileName=="TRVc") then begin
              TRr.Number = mainr.TransNr;
              TRr.IntYc = mainr.IntYc;
              if (ReadFirstMain(TRr,2,true)) then begin
                if (mainr.TransDate == TRr.TransDate) then begin
                  rwcnt2 = MatRowCnt(TRr);
                  for (j=0;j<rwcnt2;j=j+1) begin
                    MatRowGet(TRr,j,TRrw);
                    if ((TRrw.AccNumber==mainr.AccNumber) and (TRrw.ovst<>1) and (TRrw.stp==1)) then begin
                      if !CurInList[TRrw.Curncy] then begin
                        CurInList[TRrw.Curncy] = true;
                        CurrencyList[ccnt] = TRrw.Curncy;
                        ccnt = ccnt + 1;
                      end;
                      ExtractObjectsByType(TRrw.Objects,"STORE",stores,oscnt);
                      if (oscnt==0) then begin
                        stores[oscnt] = "";
                        oscnt = 1;
                      end;
                      for (k=0;k<oscnt;k=k+1) begin
                        if (!ObjInArr[stores[k]]) then begin
                          ObjectList[ocnt] = stores[k];
                          ObjInArr[ObjectList[ocnt]] = true;
                          ocnt = ocnt + 1;
                        end;
                        extrastr = i+1 & ":" & stores[k] & ":" & mainr.AccNumber & ":" & TRrw.Curncy;
                        crn = TRrw.Curncy;
                        switch (TypeOfCurncy(crn,oldstyle)) begin
                          case 0:
                            total[extrastr & ":curdeb"] = total[extrastr & ":curdeb"] + TRrw.CurDebVal;
                            total[extrastr & ":curcred"] = total[extrastr & ":curcred"] + TRrw.CurCredVal;
                          case 1:
                            total[extrastr & ":curdeb"] = total[extrastr & ":curdeb"] + TRrw.DebVal;
                            total[extrastr & ":curcred"] = total[extrastr & ":curcred"] + TRrw.CredVal;
                          case 2:
                            total[extrastr & ":curdeb"] = total[extrastr & ":curdeb"] + TRrw.DebVal2;
                            total[extrastr & ":curcred"] = total[extrastr & ":curcred"] + TRrw.CredVal2;
                        end;
                        total[extrastr & ":deb"] = total[extrastr & ":deb"] + TRrw.DebVal;
                        total[extrastr & ":cred"] = total[extrastr & ":cred"] + TRrw.CredVal;
                        if     (total[extrastr & ":curdeb"]!=0)
                           or (total[extrastr & ":deb"]!=0)
                           or (total[extrastr & ":curcred"]!=0)
                           or (total[extrastr & ":cred"]!=0) then begin
                          NonBlankTotal[extrastr] = true;
                        end else begin
                          NonBlankTotal[extrastr] = false;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
            if (mainr.FileName=="FBVc") then begin
              FBr.SerNr = mainr.TransNr;
              if (ReadFirstMain(FBr,1,true)) then begin
                ExtractObjectsByType(FBr.Objects,"STORE",stores,oscnt);
                if (oscnt==0) then begin
                  stores[oscnt] = "";
                  oscnt = 1;
                end;
                if (oscnt==1) and (FBr.Objects==stores[0]) then begin
                  if (mainr.TransDate==FBr.TransDate) then begin
                    rwcnt2 = MatRowCnt(FBr);
                    for (j=0;j<rwcnt2;j=j+1) begin
                      MatRowGet(FBr,j,FBrw);
                      if (FBrw.AccNumber==mainr.AccNumber) then begin
                        if !CurInList[FBrw.CurncyCode] then begin
                          CurInList[FBrw.CurncyCode] = true;
                          CurrencyList[ccnt] = FBrw.CurncyCode;
                          ccnt = ccnt + 1;
                        end;
                        if (!ObjInArr[stores[0]]) then begin
                          ObjectList[ocnt] = stores[0];
                          ObjInArr[ObjectList[ocnt]] = true;
                          ocnt = ocnt + 1;
                        end;
                        extrastr = i+1 & ":" & stores[0] & ":" & mainr.AccNumber & ":" & FBrw.CurncyCode;
                        crn = FBrw.CurncyCode;
                        switch (TypeOfCurncy(crn,oldstyle)) begin
                          case 0:
                            total[extrastr & ":curdeb"] = total[extrastr & ":curdeb"] + FBrw.CurDebVal;
                            total[extrastr & ":curcred"] = total[extrastr & ":curcred"] + FBrw.CurCredVal;
                          case 1:
                            total[extrastr & ":curdeb"] = total[extrastr & ":curdeb"] + FBrw.DebVal;
                            total[extrastr & ":curcred"] = total[extrastr & ":curcred"] + FBrw.CredVal;
                          case 2:
                            total[extrastr & ":curdeb"] = total[extrastr & ":curdeb"] + FBrw.Deb2Val;
                            total[extrastr & ":curcred"] = total[extrastr & ":curcred"] + FBrw.Cred2Val;
                        end;
                        total[extrastr & ":deb"] = total[extrastr & ":deb"] + FBrw.DebVal;
                        total[extrastr & ":cred"] = total[extrastr & ":cred"] + FBrw.CredVal;
                        if     (total[extrastr & ":curdeb"]!=0)
                           or (total[extrastr & ":deb"]!=0)
                           or (total[extrastr & ":curcred"]!=0)
                           or (total[extrastr & ":cred"]!=0) then begin
                          NonBlankTotal[extrastr] = true;
                        end else begin
                          NonBlankTotal[extrastr] = false;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
        for (j=0;j<ocnt;j=j+1) begin
          StartFormat(15);
            OutString(tab[0],0,"",false);
            OutString(tab[1],0,"Объект: " & ObjectList[j],false);
          EndFormat;
          for (k=0;k<accnumber.length;k=k+1) begin
            StartFormat(15);
              OutString(tab[0],0,"",false);
              OutString(tab[1],0,"",false);
              OutString(tab[2],0,"Счет: " & accnumber[k],false);
            EndFormat;
            extrastr = i+1 & ":" & ObjectList[j] & ":" & accnumber[k] & ":";
            
            
            printf = false;
            for (l=0;l<ccnt;l=l+1) begin
              if NonBlankTotal[extrastr & CurrencyList[l]] then begin
                printf = true;
              end;
            end;
            if (printf) then begin
              StartFormat(15);
                OutString(tab[0],0,"Курс",false);
                OutString(tab[1]+20,0,"",false);
                OutString(tab[2]+10,0,"",false);
                OutString(tab[3],0,"Валюта",false);
                OutString(tab[4],0,"Дт в вал",true);
                OutString(tab[5],0,"Дт в осн",true);
                OutString(tab[6],0,"Кт в вал",true);
                OutString(tab[7],0,"Кт в осн",true);
                OutString(tab[8],0,"Оборот в вал",true);
                OutString(tab[9],0,"по курсу",true);
                OutString(tab[10],0,"Оборот в осн",true);
                OutString(tab[11],0,"Разница",true);
              EndFormat;
              Black_Divider(0,1);
              for (l=0;l<ccnt;l=l+1) begin
                if NonBlankTotal[extrastr & CurrencyList[l]] then begin
                  crn = CurrencyList[l];
                  td = RepSpec.sEndDate;
                  fr = 0; to1 = 0; to2 = 0; b1 = 0; b2 = 0;
                  GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
                  if to1==0 then begin to1 = 1; end;
                  if fr==0 then begin fr = 1; end;
                  StartFormat(15);
                    OutString(tab[0],0,to1/fr,false);
                    OutString(tab[1]+20,0,"",false);
                    OutString(tab[2]+10,0,"" ,false);
                    OutString(tab[3],0,CurrencyList[l],false);
                    OutString(tab[4],0,total[extrastr & CurrencyList[l] & ":curdeb"],true);
                    OutString(tab[5],0,total[extrastr & CurrencyList[l] & ":deb"],true);
                    OutString(tab[6],0,total[extrastr & CurrencyList[l] & ":curcred"],true);
                    OutString(tab[7],0,total[extrastr & CurrencyList[l] & ":cred"],true);
                    cur = total[extrastr & CurrencyList[l] & ":curdeb"] - total[extrastr & CurrencyList[l] & ":curcred"];
                    OutString(tab[8],0,cur,true);
                    rate = Round(cur*to1/fr,SetRoundModeD(2));
                    OutString(tab[9],0,rate,true);
                    base = total[extrastr & CurrencyList[l] & ":deb"] - total[extrastr & CurrencyList[l] & ":cred"];
                    OutString(tab[10],0,base,true);
                    
                    OutString(tab[11],0,rate-base,true);
                    totdeb = totdeb + total[extrastr & CurrencyList[l] & ":deb"];
                    totcred = totcred + total[extrastr & CurrencyList[l] & ":cred"];
                    totdiff = totdiff + (rate - base);
                  EndFormat;
                end;
              end;
              Gray_Divider(0,1);
              StartFormat(15);
                OutString(tab[0],0,"",false);
                OutString(tab[1],0,"",false);
                OutString(tab[2],0,"",false);
                OutString(tab[3],0,"",false);
                OutString(tab[4],0,"",true);
                OutString(tab[5],0,totdeb,true);
                OutString(tab[6],0,"",true);
                OutString(tab[7],0,totcred,true);
                OutString(tab[8],0,"",true);
                OutString(tab[9],0,"",true);
                OutString(tab[10],0,totdeb - totcred,true);
                OutString(tab[11],0,totdiff,true);
              EndFormat;
              StartFormat(15);
              EndFormat;
            end;
            totdeb = 0;
            totcred = 0;
            totdiff = 0;
          end;
        end;
      end;
      if (nonblank(RepSpec.f1)) then begin i=rwcnt; end;
    end;
    ResetCompany(curcomp);
  EndJob;
	LogProcTime("TRVcRn",getcurtick() - curtick);
  return;
end;