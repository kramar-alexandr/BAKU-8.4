//server-only
external procedure YcToStr(Integer,var string);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure BrandManagerRnTool(record RcVc,var val,var val,var val,var val);
external procedure GetObjs(string,string,var string);
external function Integer CountObjects(string);
external procedure LogProcTime(string,longint);

SetLangMode(LangRussian,"RUS",0);

procedure FoundRnPrintHeader(record RcVc RepSpec,integer tab1,integer tab2,integer tab3,integer tab4,integer tab5,integer tab6,integer tab7,integer tab8,integer tab9,integer tab10)
BEGIN
	string 20 head;
	
	StartFormat(15);
		OutString(tab1,0,"",false);
		OutString(tab2,0,"Отчет по учредителям",false);
		OutString(tab3,0,"",false);
		OutString(tab4,0,"",false);
		OutString(tab5,0,"",false);
		OutString(tab6,0,"",false);
		OutString(tab7,0,"",false);
		OutString(tab8,0,"Период:",false);
		OutString(tab9,0,RepSpec.sStartDate & " - " & RepSpec.sEndDate,false);
		OutString(tab10,0,"",false);
	EndFormat;
	StartFormat(15);
	EndFormat;
	StartFormat(15);
		OutString	(tab1,0,"",false);
		OutString	(tab2,0,"",false);
		OutStringCut(tab3,tab4 + 20,0,"На начало периода",true,0);
		OutString	(tab5,0,"",false);
		OutStringCut(tab5,tab6,0,"Товары",true,0);
		OutString	(tab7,0,"",false);
		OutStringCut(tab7,tab8 + 20,0,"Погашение",true,0);
		OutString	(tab9,0,"",false);
		OutStringCut(tab9,tab10 + 20,0,"На конец периода",true,0);
	EndFormat;
	Black_Divider(tab3 + 1, tab5 - 1);
	Black_Divider(tab5 + 1, tab7 - 1);
	Black_Divider(tab7 + 1, tab9 - 1);
	Black_Divider(tab9 + 1,1);
	StartFormat(15);
		OutString(tab1,0,"Учредители",false);
		OutString(tab2,0,"Валюта",false);
		OutString(tab3,0,"В валюте",false);
		OutString(tab4,0,"В осн. вал.",false);
		OutString(tab5,0,"В валюте",false);
		OutString(tab6,0,"В осн. вал.",false);
		OutString(tab7,0,"В валюте",false);
		OutString(tab8,0,"В осн. вал.",false);
		OutString(tab9,0,"В валюте",false);
		OutString(tab10,0,"В осн. вал.",false);
	EndFormat;
	Black_Divider(0,1);
	RETURN
END;

global
procedure FounderRn(record RcVc RepSpec)
BEGIN
	record MainVc mainr;
	record TRVc TRr,tempTRr;
	row TRVc TRrw,tempTRrw;
	record FBVc FBr;
	row FBVc FBrw;
	record ObjVc Objr;
	record CurncyCodeVc CCr;
	integer i,j,k,l,rwcnt,foundcount,curcount,objcnt;
	boolean TrHs;
	integer tab1, tab2, tab3,
			tab4, tab5, tab6,
			tab7, tab8, tab9,
			tab10;
	Array string 100 FoundList;
	Array string 10 CurencyList;
	vector boolean FoundNonBlank;
	vector val FoundBeginBal,FoundDebet,FoundCredit,FoundEndBal;
	val TotBeginBal,TotDebet,TotCredit,TotEndBal;
	string 30 found, tempstr;
	string 10 AccNum;
	longint curtick;
	
	curtick = getcurtick();
	tab1 = 0;	 tab2 = 50;	  tab3 = 80;
	tab4 = 130;  tab5 = 180;  tab6 = 230;
	tab7 = 280;	 tab8 = 330;  tab9 = 380;
	tab10 = 430;
	
	objcnt = 1;
	if nonblank(RepSpec.ObjStr) then begin
		objcnt = objcnt + 1;
	end;
	
	
	AccNum = "75/02";
	TrHs = true;
	curcount = 0;
	while (LoopMain(CCr,1,TrHs)) begin
		if (TrHs) then begin
			CurencyList[curcount] = CCr.CurncyCode;
			curcount = curcount + 1;
		end;
	end;
	
	StartReportNoHeaderJob("Отчет по учредителям");
		Objr.OTCode = "FOUND";
		TrHs = true;
		foundcount = 0;
		while (LoopKey("OTCode",Objr,1,TrHs)) begin
			if (TrHs) then begin
				FoundList[foundcount] = Objr.Code;
				foundcount = foundcount + 1;
			end;
		end;

		for (j=0;j<foundcount;j=j+1) begin
			FoundNonBlank[FoundList[j]] = false;
		end;
		for (j=0;j<foundcount;j=j+1) begin
			for (k=0;k<curcount;k=k+1) begin
				FoundBeginBal[FoundList[j] & ":" & CurencyList[k]] = blankval;
				FoundBeginBal[FoundList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
				FoundDebet[FoundList[j] & ":" & CurencyList[k]] = blankval;
				FoundDebet[FoundList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
				FoundCredit[FoundList[j] & ":" & CurencyList[k]] = blankval;
				FoundCredit[FoundList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
				FoundEndBal[FoundList[j] & ":" & CurencyList[k]] = blankval;
				FoundEndBal[FoundList[j] & ":" & CurencyList[k] & ":BASE"] = blankval;
			end;
		end;
		mainr.AccNumber = AccNum;
		TrHs = true;
		while (LoopMain(mainr,1,TrHs)) begin
			if ((mainr.AccNumber != AccNum) or (mainr.TransDate > RepSpec.sEndDate))  then begin
				TrHs = false;	
			end;
			if ((TrHs) and (mainr.FileName=="TRVc")) then begin
				TRr.Number = mainr.TransNr;
				TRr.IntYc = mainr.IntYc;
				if (ReadFirstMain(TRr,2,true)) then begin
					if (mainr.TransDate == TRr.TransDate) then begin
						rwcnt = MatRowCnt(TRr);
						for (j=0;j<rwcnt;j=j+1) begin
							MatRowGet(TRr,j,TRrw);
							if ((TRrw.AccNumber == AccNum) and (TRrw.ovst <> 1) and (TRrw.stp == 1) and SetInSet(RepSpec.ObjStr,TRrw.Objects)) then begin
								found = "";
								GetObjs("FOUND",TRrw.Objects,found);
								if nonblank(found) then begin
									FoundNonBlank[found] = true;
									if (mainr.TransDate >= RepSpec.sStartDate) then begin
										FoundDebet[found & ":" & TRrw.Curncy] = FoundDebet[found & ":" & TRrw.Curncy] + TRrw.CurDebVal;
										FoundDebet[found & ":" & TRrw.Curncy & ":BASE"] = FoundDebet[found & ":" & TRrw.Curncy & ":BASE"] + TRrw.DebVal;
										FoundCredit[found & ":" & TRrw.Curncy] = FoundCredit[found & ":" & TRrw.Curncy] + TRrw.CurCredVal;
										FoundCredit[found & ":" & TRrw.Curncy & ":BASE"] = FoundCredit[found & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal;
									end else begin
										FoundBeginBal[found & ":" & TRrw.Curncy] = FoundBeginBal[found & ":" & TRrw.Curncy] + TRrw.CurCredVal - TRrw.CurDebVal;
										FoundBeginBal[found & ":" & TRrw.Curncy & ":BASE"] = FoundBeginBal[found & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal - TRrw.DebVal;
									end;
									FoundEndBal[found & ":" & TRrw.Curncy] = FoundEndBal[found & ":" & TRrw.Curncy] + TRrw.CurCredVal - TRrw.CurDebVal;
									FoundEndBal[found & ":" & TRrw.Curncy & ":BASE"] = FoundEndBal[found & ":" & TRrw.Curncy & ":BASE"] + TRrw.CredVal - TRrw.DebVal;
								end;
							end;
						end;
					end;
				end;
			end;
			if (mainr.FileName=="FBVc") then begin
				FBr.SerNr = mainr.TransNr;
				if (ReadFirstMain(FBr,1,true)) then begin
					if (mainr.TransDate == FBr.TransDate) and SetInSet(RepSpec.ObjStr,FBr.Objects) and (CountObjects(FBr.Objects)==objcnt) then begin
						found = "";
						GetObjs("FOUND",FBr.Objects,found);
						if nonblank(found) then begin
							FoundNonBlank[found] = true;
							rwcnt = MatRowCnt(FBr);
							for (j=0;j<rwcnt;j=j+1) begin
								MatRowGet(FBr,j,FBrw);
								if (FBrw.AccNumber == AccNum) then begin
									if (mainr.TransDate >= RepSpec.sStartDate) then begin
										FoundDebet[found & ":" & FBrw.CurncyCode] = FoundDebet[found & ":" & FBrw.CurncyCode] + FBrw.CurDebVal;
										FoundDebet[found & ":" & FBrw.CurncyCode & ":BASE"] = FoundDebet[found & ":" & FBrw.CurncyCode & ":BASE"] + FBrw.DebVal;
										FoundCredit[found & ":" & FBrw.CurncyCode] = FoundCredit[found & ":" & FBrw.CurncyCode] + FBrw.CurCredVal;
										FoundCredit[found & ":" & FBrw.CurncyCode & ":BASE"] = FoundCredit[found & ":" & FBrw.CurncyCode & ":BASE"] + FBrw.CredVal;
									end else begin
										FoundBeginBal[found & ":" & FBrw.CurncyCode] = FoundBeginBal[found & ":" & FBrw.CurncyCode] + FBrw.CurCredVal - FBrw.CurDebVal;
										FoundBeginBal[found & ":" & FBrw.CurncyCode & ":BASE"] = FoundBeginBal[found & ":" & FBrw.CurncyCode & ":BASE"] + FBrw.CredVal - FBrw.DebVal;
									end;
									FoundEndBal[found & ":" & FBrw.CurncyCode] = FoundEndBal[found & ":" & FBrw.CurncyCode] + FBrw.CurCredVal - FBrw.CurDebVal;
									FoundEndBal[found & ":" & FBrw.CurncyCode & ":BASE"] = FoundEndBal[found & ":" & FBrw.CurncyCode & ":BASE"] + FBrw.CredVal - FBrw.DebVal;
								end;
							end;
						end;
					end;
				end;
			end;
		end;
		ResetLoop(mainr);
		FoundRnPrintHeader(RepSpec,tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,tab9,tab10);
		for (j=0;j<foundcount;j=j+1) begin
			if (FoundNonBlank[FoundList[j]]) then begin
				for (k=0;k<curcount;k=k+1) begin
					if ((FoundEndBal[FoundList[j] & ":" & CurencyList[k]] <> 0) or (FoundEndBal[FoundList[j] & ":" & CurencyList[k] & ":BASE"] <> 0) or 
					(FoundBeginBal[FoundList[j] & ":" & CurencyList[k]] <> 0) or (FoundBeginBal[FoundList[j] & ":" & CurencyList[k] & ":BASE"] <> 0) or 
					(FoundDebet[FoundList[j] & ":" & CurencyList[k]] <> 0) or (FoundDebet[FoundList[j] & ":" & CurencyList[k] & ":BASE"] <> 0) or 
					(FoundCredit[FoundList[j] & ":" & CurencyList[k]] <> 0) or (FoundCredit[FoundList[j] & ":" & CurencyList[k] & ":BASE"] <> 0)) then begin
						StartFormat(15);
							OutString(tab1,0,FoundList[j],false);
							OutString(tab2,0,CurencyList[k],false);
							OutString(tab3,0,FoundBeginBal[FoundList[j] & ":" & CurencyList[k]],false);
							OutString(tab4,0,FoundBeginBal[FoundList[j] & ":" & CurencyList[k] & ":BASE"],false);
							OutStringID(tab5,"DblFoundVal",FoundDebet[FoundList[j] & ":" & CurencyList[k]],false,FoundList[j] & ":" & CurencyList[k]);
							OutString(tab6,0,FoundDebet[FoundList[j] & ":" & CurencyList[k] & ":BASE"],false);
							OutStringID(tab7,"DblFoundVal",FoundCredit[FoundList[j] & ":" & CurencyList[k]],false,FoundList[j] & ":" & CurencyList[k]);
							OutString(tab8,0,FoundCredit[FoundList[j] & ":" & CurencyList[k] & ":BASE"],false);
							OutString(tab9,0,FoundEndBal[FoundList[j] & ":" & CurencyList[k]],false);
							OutString(tab10,0,FoundEndBal[FoundList[j] & ":" & CurencyList[k] & ":BASE"],false);
						EndFormat;
						Gray_Divider(0,1);
					end;
				end;
			end;
		end;
		Black_Divider(0,1);
		RepSpec.f4 = AccNum;
		RepSpec.CurncyCode = "";
		BrandManagerRnTool(RepSpec,TotDebet,TotCredit,TotBeginBal,TotEndBal);
		StartFormat(15);
			OutString(tab1,0,"Итого",false);
			OutString(tab2,0,"",false);
			OutString(tab3,0,"",false);
			OutString(tab4,0,TotBeginBal,false);
			OutString(tab5,0,"",false);
			OutString(tab6,0,TotDebet,false);
			OutString(tab7,0,"",false);
			OutString(tab8,0,TotCredit,false);
			OutString(tab9,0,"",false);
			OutString(tab10,0,TotEndBal,false);
		EndFormat;
		StartFormat(15);
		EndFormat;
	EndJob;
	 LogProcTime("FounderRn",getcurtick() - curtick);
	RETURN;
END;