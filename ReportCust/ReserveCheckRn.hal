//server-only
external procedure LogProcTime(string,longint);
external procedure ExtractObj(string,var Integer,var string);
remote function boolean CompanyIsJWLikeCompany(Integer);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote updating procedure RecalcORMn(record RcVc);

SetLangMode(LangRussian,"RUS",0);

global
updating procedure ReserveDelMn()
begin
  record ORVc ORr,oldORr;
	boolean TrHs,testf;
  longint curtick;
	integer rowcnt,i,j,c;
	integer itemall,pos,rwcnt,oldCompany;
	record CompaniesBlock CBb;
	row CompaniesBlock Comprw;
	
	logtext(0,"ReserveDelMn start");
	oldCompany = currentCompany;
	blockload(CBb);
  rwcnt = matrowcnt(CBb);
  For(j=0;j<rwcnt;j=j+1) begin
    matrowget(CBb,j,Comprw);
		if(Comprw.ActiveStatus==0 and j+1!=33 and j+1!=29 and j+1!=28)then begin
			SetCompany(j+1,false);
			ORr.Reserved = 1;
			TrHs = true;
			logtext(0,"ReserveDelMn company " & j+1);
			while(LoopKey("Reserved",ORr,1,TrHs)) begin
				if(ORr.Reserved<1) then begin TrHs = false; end;
				if(nonblankdate(ORr.EndReserv) and ORr.EndReserv<CurrentDate and TrHs and ORr.ECOMMERCEOrdf<1)then begin
					RecordCopy(oldORr,ORr);
					ORr.Reserved = 0;
					logtext(0,"ReserveDelMn order " & ORr.SerNr);
					if (RecordUpdate(oldORr,ORr,true)==0) then begin end;
				end;
			end;
			ResetLoop(ORr);
		end;
	end;
	logtext(0,"ReserveDelMn end");
	ResetCompany(oldCompany);
	LogProcTime("ReserveDelMn",getcurtick() - curtick);
  return;
end;

global
updating procedure ReserveDoMn()
begin
  record ORVc ORr,oldORr;
	boolean TrHs,testf;
  longint curtick;
	integer rowcnt,i,j,c;
	integer itemall,pos,rwcnt,oldCompany;
	record CompaniesBlock CBb;
	row CompaniesBlock Comprw;
	
	oldCompany = currentCompany;
	logtext(0,"ReserveDoMn start");
	SetCompany(28,false);
	TrHs = true;
	ORr.ShipFlag = 0;
	logtext(0,"ReserveDoMn company " & 18);
	while(LoopKey("ShipFlag",ORr,1,TrHs)) begin
		if(ORr.ShipFlag>0) then begin TrHs = false; end;
		if(nonblankdate(ORr.EndReserv) and  ORr.Reserved==0 and TrHs)then begin
			RecordCopy(oldORr,ORr);
			ORr.Reserved = 1;
			logtext(0,"ReserveDoMn order " & ORr.SerNr);
			if (RecordUpdate(oldORr,ORr,true)==0) then begin end;
		end;
	end;
	ResetLoop(ORr);
	ResetCompany(oldCompany);
	logtext(0,"ReserveDoMn end");
  return;
end;

global
procedure ReserveCheckAllCompRn(record RcVc RepSpec)
begin
  record INVc INr;
  record ORVc ORr;
	row ORVc ORrw;
	boolean TrHs,testf;
	vector string 255 orders,loc,custName,OrdDate,reservDate;
	vector val quantShip,rownr;
  longint curtick;
	integer rowcnt,i,j,c;
	array string 255 tags,tags1;
	integer itemall,pos,rwcnt,oldCompany;
	string 255 orderNr;
	record CompaniesBlock CBb;
	row CompaniesBlock Comprw;
	record ItemStatusVc ISr;
	vector string 255 ordersSM,OrdDateSM;
	vector val quantShipSM,rownrSM;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	
	oldCompany = currentCompany;
	blockload(CBb);
  rwcnt = matrowcnt(CBb);
	startreportnoheaderjob("Reserved Report");
  For(j=0;j<rwcnt;j=j+1) begin
    matrowget(CBb,j,Comprw);
		if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(j+1) or j+1==3) and j+1!=33)then begin
			SetCompany(j+1,false);
			ClearVector(orders);
			ClearVector(quantShip);
			ClearVector(loc);
			ClearVector(quantShipSM);
			ORr.Reserved = 1;
			TrHs = true;
			while(LoopKey("Reserved",ORr,1,TrHs)) begin
				if(ORr.Reserved<1) then begin TrHs = false; end;
				
				if(TrHs) then begin
					rowcnt = MatRowCnt(ORr);
					for(i=0;i<rowcnt;i=i+1) begin
						testf = true;
						matrowget(ORr,i,ORrw);
						if(nonblank(RepSpec.f1) and RepSpec.f1!=ORrw.ArtCode) then begin testf = false; end;
						
						if(ORrw.Quant>0 and testf and ORrw.Quant>ORrw.Shipd2) then begin
							orders[ORrw.ArtCode] = "true";
							quantShip[ORrw.ArtCode & ORr.Location] = ORrw.Quant-ORrw.Shipd2;
							loc[ORr.Location] = "true";
						end;
					end;
				end;
			end;
			ResetLoop(ORr);
			SMr.SerNr = 0;
			while(LoopMain(SMr,1,true)) begin
				TrHs = true;
				if(SMr.Reserved<1 or SMr.OKFlag>0) then begin TrHs = false; end;
				if(TrHs) then begin
					rowcnt = MatRowCnt(SMr);
					for(i=0;i<rowcnt;i=i+1) begin
						testf = true;
						matrowget(SMr,i,SMrw);
						if(nonblank(RepSpec.f1) and RepSpec.f1!=SMrw.ArtCode) then begin testf = false; end;
						if(SMrw.Quant>0 and testf) then begin
							orders[SMrw.ArtCode] = "true";
							quantShipSM[SMrw.ArtCode & SMr.FrLocation] = SMrw.Quant;
							loc[SMr.FrLocation] = "true";
						end;
					end;
				end;
			end;
			startformat(15);
				outstring(0,0,"товар",false);
				outstring(100,0,"в счетах",false);
				outstring(150,0,"в перем.",false);
				outstring(200,0,"в статусе",false);
				outstring(250,0,"склад",false);
				outstring(300,0,"Company " & j+1,false);
			endformat;
			getvectortags(orders,tags);
			getvectortags(loc,tags1);
			Black_Divider(0,1);
			for(i=0;i<tags.length;i=i+1) begin				
				for(c=0;c<tags1.length;c=c+1) begin
					ISr.Code = tags[i];
					ISr.Location = tags1[c];
					if(readfirstmain(ISr,2,true)) then begin
						if(ISr.RsrvQty!=0 or quantShip[tags[i] & tags1[c]]!=0)then begin
							if(ISr.RsrvQty!=quantShip[tags[i] & tags1[c]]+quantShipSM[tags[i] & tags1[c]])then begin
								startformat(15);
									outstring(0,0,tags[i],false);
									outstring(100,0,quantShip[tags[i] & tags1[c]],false);
									outstring(150,0,quantShipSM[tags[i] & tags1[c]],false);
									outstring(200,0,ISr.RsrvQty,false);
									outstring(250,0,tags1[c],false);
								endformat;
							end;
						end;
					end;
				end;
			end;
		end;
	end;
  EndJob;
	ResetCompany(oldCompany);
	LogProcTime("ItemLocationStatusRn",getcurtick() - curtick);
  return;
end;

global
procedure ReserveRn(record RcVc RepSpec)
begin
  record INVc INr;
  record ORVc ORr;
	row ORVc ORrw;
	boolean TrHs,testf;
	vector string 255 orders,custCode,custName,OrdDate,reservDate,ordersSM,OrdDateSM,ordersSD,OrdDateSD , locations, locationsSM, locationsSD;
	vector integer quantShip,rownr,quantShipSM,rownrSM,quantShipSD,rownrSD;
  longint curtick;
	integer rowcnt,i;
	array string 255 tags;
	integer itemall,pos;
	string 255 locn, orderNr;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record SDVc SDr;
	row SDVc SDrw;
	
	ORr.Reserved = 1;
	TrHs = true;
	while(LoopKey("Reserved",ORr,1,TrHs)) begin
		testf = true;
		if(ORr.Reserved<1) then begin TrHs = false; testf = false; end;
		if(ORr.Closed==1) then begin testf = false; end;
		if(testf) then begin
			rowcnt = MatRowCnt(ORr);
			for(i=0;i<rowcnt;i=i+1) begin
				testf = true;
				matrowget(ORr,i,ORrw);
				if(nonblank(RepSpec.f1) and RepSpec.f1!=ORrw.ArtCode) then begin testf = false; end;
				if(nonblank(RepSpec.f2))then begin
					if(blank(ORrw.Location) and RepSpec.f2!=ORr.Location)then begin
						testf = false;
					end;
					if(nonblank(ORrw.Location) and RepSpec.f2!=ORrw.Location)then begin
						testf = false;
					end;
				end;
				locn = ORr.Location;
				if(nonblank(ORrw.Location))then begin
					locn = ORrw.Location;
				end;
			
				if(ORrw.Quant>0 and testf and ORrw.Quant>ORrw.Shipd2) then begin
					if(blank(orders[ORrw.ArtCode])) then begin
						orders[ORrw.ArtCode] = ORr.SerNr;
					end else begin
						orders[ORrw.ArtCode] = orders[ORrw.ArtCode] & "," & ORr.SerNr;
					end;
					quantShip[ORrw.ArtCode & ORr.SerNr] = ORrw.Quant-ORrw.Shipd2;
					rownr[ORrw.ArtCode & ORr.SerNr] = i+1;
					custCode[ORrw.ArtCode & ORr.SerNr] = ORr.CustCode;
					custName[ORrw.ArtCode & ORr.SerNr] =	ORr.Addr0;
					OrdDate[ORrw.ArtCode & ORr.SerNr] = ORr.OrdDate;
					reservDate[ORrw.ArtCode & ORr.SerNr] = ORr.EndReserv;
					locations[ORrw.ArtCode & ORr.SerNr] = locn;
				end;
			end;
		end;
	end;
	SMr.SerNr = 0;
	while(LoopMain(SMr,1,true)) begin
		TrHs = true;
		testf = true;
		if(SMr.Reserved<1 or SMr.OKFlag>0) then begin TrHs = false; end;
		if(nonblank(RepSpec.f2) and SMr.FrLocation!=RepSpec.f2)then begin			
				testf = false;
		end;
		
		
		if(TrHs) then begin
			rowcnt = MatRowCnt(SMr);
			for(i=0;i<rowcnt;i=i+1) begin
				testf = true;
				matrowget(SMr,i,SMrw);
				if(nonblank(RepSpec.f1) and RepSpec.f1!=SMrw.ArtCode) then begin testf = false; end;
				if(nonblank(RepSpec.f2) and RepSpec.f2!=SMr.FrLocation) then begin testf = false; end;
				if(SMrw.Quant>0 and testf) then begin
					if(blank(ordersSM[SMrw.ArtCode])) then begin
						ordersSM[SMrw.ArtCode] = SMr.SerNr;
					end else begin
						ordersSM[SMrw.ArtCode] = ordersSM[SMrw.ArtCode] & "," & SMr.SerNr;
					end;
					quantShipSM[SMrw.ArtCode & SMr.SerNr] = SMrw.Quant;
					rownrSM[SMrw.ArtCode & SMr.SerNr] = i+1;
					OrdDateSM[SMrw.ArtCode & SMr.SerNr] = SMr.OrdTransDate;
					locationsSM[SMrw.ArtCode & SMr.SerNr] = SMr.FrLocation;
				end;
			end;
		end;
	end;
	
	
	
	
	
	SDr.OKFlag = 0;
	TrHs = true;
	while(loopkey("OKFlag",SDr,1,TrHs))begin
		testf = true;
		if(SDr.Reservf==0)then begin testf = false; end;
		if(SDr.OKFlag>0)then begin testf = false; TrHs = false; end;
		if(testf)then begin
			rowcnt = MatRowCnt(SDr);
			for(i=0;i<rowcnt;i=i+1) begin
				testf = true;
				matrowget(SDr,i,SDrw);
				if(nonblank(RepSpec.f1) and RepSpec.f1!=SDrw.ArtCode) then begin testf = false; end;
				if(nonblank(RepSpec.f2))then begin
					if(blank(SDrw.Location) and RepSpec.f2!=SDr.Location)then begin
						testf = false;
					end else begin
						locn = SDr.Location;
					end;
					if(nonblank(SDrw.Location) and RepSpec.f2!=SDrw.Location)then begin
						testf = false;
					end else begin
						locn = SDrw.Location;
					end;
				end;
				locn = SDr.Location;
				if(nonblank(SDrw.Location))then begin
					locn = SDrw.Location;
				end;

				if(SDrw.Qty>0 and testf) then begin
					if(blank(ordersSM[SDrw.ArtCode])) then begin
						ordersSD[SDrw.ArtCode] = SDr.SerNr;
					end else begin
						ordersSD[SDrw.ArtCode] = ordersSD[SDrw.ArtCode] & "," & SDr.SerNr;
					end;
					quantShipSD[SDrw.ArtCode & SDr.SerNr] = SDrw.Qty;
					rownrSD[SDrw.ArtCode & SDr.SerNr] = i+1;
					OrdDateSD[SDrw.ArtCode & SDr.SerNr] = SDr.TransDate;
					locationsSD[SDrw.ArtCode & SDr.SerNr] = locn;
				end;
			end;
		end;
	end;
	
	
	
	
	
	
	
	startreportnoheaderjob("Reserved Report");
	startformat(15);
		outstring(0,0,"‡аказ",false);
		outstring(50,0,"ђезерв",false);
		outstring(75,0,"‘тр.",false);
		outstring(100,0,"Љлиент",false);
		outstring(200,0,"€мЯ клиента",false);
		outstring(300,0,"„ата заказа",false);
		outstring(350,0,"ђезерв до",false);
		outstring(400,0,"‘клад",false);
	endformat;
	getvectortags(orders,tags);
	Black_Divider(0,1);
	for(i=0;i<tags.length;i=i+1) begin
		pos = 0;
		ExtractObj(orders[tags[i]],pos,orderNr);
		if (nonblank(orderNr)) then begin
			startformat(15);
				outstring(0,"DblINVc", tags[i],false);
			endformat;
		end;
		while(nonblank(orderNr)) begin
			itemall = itemall + quantShip[tags[i] & orderNr];
			startformat(15);
				outstring(0,"DblORVc",orderNr,false);
				outstring(50,0,quantShip[tags[i] & orderNr],false);
				outstring(75,0,rownr[tags[i] & orderNr],false);
				outstring(100,0,custCode[tags[i] & orderNr],false);
				outstring(200,0,custName[tags[i] & orderNr],false);
				outstring(300,0,OrdDate[tags[i] & orderNr],false);
				outstring(350,0,reservDate[tags[i] & orderNr],false);
				outstring(400,0,locations[tags[i] & orderNr],false);
			endformat;
			ExtractObj(orders[tags[i]],pos,orderNr);
		end;
	end;
	ClearArray(tags);
	startformat(15);
		outstring(0,0,"Џеремещение",false);
		outstring(50,0,"ђезерв",false);
		outstring(75,0,"‘тр.",false);
		outstring(100,0,"Љлиент",false);
		outstring(200,0,"€мЯ клиента",false);
		outstring(300,0,"„ата заказа",false);
		outstring(350,0,"ђезерв до",false);
		outstring(400,0,"‘клад",false);
	endformat;
	getvectortags(ordersSM,tags);
	Black_Divider(0,1);
	for(i=0;i<tags.length;i=i+1) begin
		pos = 0;
		pos = 0;
		ExtractObj(ordersSM[tags[i]],pos,orderNr);
		if (nonblank(orderNr)) then begin
			startformat(15);
				outstring(0,"DblINVc", tags[i],false);
			endformat;
		end;
		while(nonblank(orderNr)) begin
			itemall = itemall + quantShipSM[tags[i] & orderNr];
			startformat(15);
				outstring(0,"DblStockMovVc",orderNr,false);
				outstring(50,0,quantShipSM[tags[i] & orderNr],false);
				outstring(75,0,rownrSM[tags[i] & orderNr],false);
				outstring(300,0,OrdDateSM[tags[i] & orderNr],false);
				outstring(400,0,locationsSM[tags[i] & orderNr],false);
			endformat;
			ExtractObj(ordersSM[tags[i]],pos,orderNr);
		end;
	end;
	ClearArray(tags);
	startformat(15);
		outstring(0,0,"‘писание",false);
		outstring(50,0,"ђезерв",false);
		outstring(75,0,"‘тр.",false);
		outstring(100,0,"Љлиент",false);
		outstring(200,0,"€мЯ клиента",false);
		outstring(300,0,"„ата заказа",false);
		outstring(350,0,"ђезерв до",false);
		outstring(400,0,"‘клад",false);
	endformat;
	getvectortags(ordersSD,tags);
	Black_Divider(0,1);
	for(i=0;i<tags.length;i=i+1) begin
		pos = 0;
		ExtractObj(ordersSD[tags[i]],pos,orderNr);
		if (nonblank(orderNr)) then begin
			startformat(15);
				outstring(0,"DblINVc", tags[i],false);
			endformat;
		end;
		while(nonblank(orderNr)) begin
			itemall = itemall + quantShipSD[tags[i] & orderNr];
			startformat(15);
				outstring(0,"DblSDVc",orderNr,false);
				outstring(50,0,quantShipSD[tags[i] & orderNr],false);
				outstring(75,0,rownrSD[tags[i] & orderNr],false);
				outstring(300,0,OrdDateSD[tags[i] & orderNr],false);
				outstring(400,0,locationsSD[tags[i] & orderNr],false);
			endformat;
			ExtractObj(ordersSD[tags[i]],pos,orderNr);
		end;
	end;
	startformat(15);
		outstring(0,0,"‚сего",false);
		outstring(50,0,itemall,false);
	endformat;
	Black_Divider(0,1);
  EndJob;
	LogProcTime("ItemLocationStatusRn",getcurtick() - curtick);
  return;
end;
// global
// procedure ReserveRn(record RcVc RepSpec)
// begin
  // record INVc INr;
  // record ORVc ORr;
	// row ORVc ORrw;
	// boolean TrHs,testf;
	// vector string 255 orders,custCode,custName,OrdDate,reservDate,ordersSM,OrdDateSM;
	// vector integer quantShip,rownr,quantShipSM,rownrSM;
  // longint curtick;
	// integer rowcnt,i;
	// array string 255 tags;
	// integer itemall,pos;
	// string 255 orderNr;
	// record StockMovVc SMr;
	// row StockMovVc SMrw;
	
	// ORr.Reserved = 1;
	// TrHs = true;
	// while(LoopKey("Reserved",ORr,1,TrHs)) begin
		// if(ORr.Reserved<1) then begin TrHs = false; end;
		// if(TrHs) then begin
			// rowcnt = MatRowCnt(ORr);
			// for(i=0;i<rowcnt;i=i+1) begin
				// testf = true;
				// matrowget(ORr,i,ORrw);
				// if(nonblank(RepSpec.f1) and RepSpec.f1!=ORrw.ArtCode) then begin testf = false; end;
				// if(ORrw.Quant>0 and testf and ORrw.Quant>ORrw.Shipd2) then begin
					// if(blank(orders[ORrw.ArtCode])) then begin
						// orders[ORrw.ArtCode] = ORr.SerNr;
					// end else begin
						// orders[ORrw.ArtCode] = orders[ORrw.ArtCode] & "," & ORr.SerNr;
					// end;
					// quantShip[ORrw.ArtCode & ORr.SerNr] = ORrw.Quant-ORrw.Shipd2;
					// rownr[ORrw.ArtCode & ORr.SerNr] = i+1;
					// custCode[ORrw.ArtCode & ORr.SerNr] = ORr.CustCode;
					// custName[ORrw.ArtCode & ORr.SerNr] =	ORr.Addr0;
					// OrdDate[ORrw.ArtCode & ORr.SerNr] = ORr.OrdDate;
					// reservDate[ORrw.ArtCode & ORr.SerNr] = ORr.EndReserv;
				// end;
			// end;
		// end;
	// end;
	// SMr.SerNr = 0;
	// while(LoopMain(SMr,1,true)) begin
		// TrHs = true;
		// if(SMr.Reserved<1 or SMr.OKFlag>0) then begin TrHs = false; end;
		// if(TrHs) then begin
			// rowcnt = MatRowCnt(SMr);
			// for(i=0;i<rowcnt;i=i+1) begin
				// testf = true;
				// matrowget(SMr,i,SMrw);
				// if(nonblank(RepSpec.f1) and RepSpec.f1!=SMrw.ArtCode) then begin testf = false; end;
				// if(SMrw.Quant>0 and testf) then begin
					// if(blank(ordersSM[SMrw.ArtCode])) then begin
						// ordersSM[SMrw.ArtCode] = SMr.SerNr;
					// end else begin
						// ordersSM[SMrw.ArtCode] = ordersSM[SMrw.ArtCode] & "," & SMr.SerNr;
					// end;
					// quantShipSM[SMrw.ArtCode & SMr.SerNr] = SMrw.Quant;
					// rownrSM[SMrw.ArtCode & SMr.SerNr] = i+1;
					// OrdDateSM[SMrw.ArtCode & SMr.SerNr] = SMr.OrdTransDate;
				// end;
			// end;
		// end;
	// end;
	// startreportnoheaderjob("Reserved Report");
	// startformat(15);
		// outstring(0,0,"‡аказ",false);
		// outstring(50,0,"ђезерв",false);
		// outstring(75,0,"‘тр.",false);
		// outstring(100,0,"Љлиент",false);
		// outstring(200,0,"€мЯ клиента",false);
		// outstring(300,0,"„ата заказа",false);
		// outstring(350,0,"ђезерв до",false);
	// endformat;
	// getvectortags(orders,tags);
	// Black_Divider(0,1);
	// for(i=0;i<tags.length;i=i+1) begin
		// itemall = 0;
		// pos = 0;
		// ExtractObj(orders[tags[i]],pos,orderNr);
		// startformat(15);
				// outstring(0,"DblINVc", tags[i],false);
			// endformat;
		// while(nonblank(orderNr)) begin
			// itemall = itemall + quantShip[tags[i] & orderNr];
			// startformat(15);
				// outstring(0,"DblORVc",orderNr,false);
				// outstring(50,0,quantShip[tags[i] & orderNr],false);
				// outstring(75,0,rownr[tags[i] & orderNr],false);
				// outstring(100,0,custCode[tags[i] & orderNr],false);
				// outstring(200,0,custName[tags[i] & orderNr],false);
				// outstring(300,0,OrdDate[tags[i] & orderNr],false);
				// outstring(350,0,reservDate[tags[i] & orderNr],false);
			// endformat;
			// ExtractObj(orders[tags[i]],pos,orderNr);
		// end;
		// pos = 0;
		// ExtractObj(ordersSM[tags[i]],pos,orderNr);
		// while(nonblank(orderNr)) begin
			// itemall = itemall + quantShipSM[tags[i] & orderNr];
			// startformat(15);
				// outstring(0,"DblStockMovVc",orderNr,false);
				// outstring(50,0,quantShipSM[tags[i] & orderNr],false);
				// outstring(75,0,rownrSM[tags[i] & orderNr],false);
				// outstring(300,0,OrdDateSM[tags[i] & orderNr],false);
			// endformat;
			// ExtractObj(ordersSM[tags[i]],pos,orderNr);
		// end;
		// startformat(15);
				// outstring(0,0,"‚сего",false);
				// outstring(50,0,itemall,false);
			// endformat;
			// Black_Divider(0,1);
	// end;
  // EndJob;
	// LogProcTime("ItemLocationStatusRn",getcurtick() - curtick);
  // return;
// end;

global procedure ReserveCheckRn(record RcVc RepSpec)
begin
	record ORVc ORr;
	row ORVc ORrw;
	boolean TrHs,testf;
	integer  mtrw,i;
	vector val resqty;
	record INVc INr;
	record ItemStatusVc ISr;
	vector string 100 altcode;
	longint curtick;
	record SDVc SDr;
	row SDVc SDrw;
	ORr.Reserved = 1;
	
	curtick = getcurtick();
	startreportnoheaderjob("ђезервы");
	
	startformat(15);
		outstring(0,0,"’овар",false);
		outstring(100,0,"ђезерв",false);
		outstring(150,0,"‡аказ",false);
		outstring(175,0,"‘тр.",false);
		outstring(200,0,"Љод производителЯ",false);
	endformat;
	
	TrHs = true;
	while(loopkey("Reserved",ORr,1,TrHs))begin
		testf = true;
		if(ORr.Reserved==0)then begin TrHs = false; testf = false; end;
		if(ORr.Closed>0)then begin testf = false; end;
		
		if(testf)then begin
			mtrw = matrowcnt(ORr);
			For(i=0;i<mtrw;i=i+1) begin
				matrowget(ORr,i,ORrw);
				if(nonblank(ORrw.ArtCode))then begin
					if(ORrw.Quant>0)then begin
						if(ORrw.Quant>ORrw.Shipd2)then begin
							resqty[ORrw.ArtCode] = resqty[ORrw.ArtCode] + (ORrw.Quant-ORrw.Shipd2);
							if(blank(altcode[ORrw.ArtCode]))then begin
								altcode[ORrw.ArtCode] = "_";
								INr.Code = ORrw.ArtCode;
								if(readfirstmain(INr,1,true))then begin
									altcode[ORrw.ArtCode] = INr.AlternativeCode;
								end;
							end;
							
							startformat(15);
								outstring(0,"DblINVc",ORrw.ArtCode,false);
								outstring(100,0,ORrw.Quant-ORrw.Shipd2,false);
								outstring(150,"DblORVc",ORr.SerNr,false);
								outstring(175,0,i+1,false);
								outstring(200,0,altcode[ORrw.ArtCode],false);
							endformat;
						end;
					end;
				end;	  
			end; 
		
		end;
	
	end;
	
	Gray_Divider(0,1);
	
	startformat(15);
		outstring(0,0,"’овар",false);
		outstring(100,0,"ђезерв",false);
		outstring(150,0,"‘писание",false);
		outstring(175,0,"‘тр.",false);
		outstring(200,0,"Љод производителЯ",false);
	endformat;
	
	
	SDr.OKFlag = 0;
	TrHs = true;
	while(loopkey("OKFlag",SDr,1,TrHs))begin
		testf = true;
		if(SDr.Reservf==0)then begin testf = false; end;
		if(SDr.OKFlag>0)then begin testf = false; TrHs = false; end;
		
		if(testf)then begin
			mtrw = matrowcnt(SDr);
			For(i=0;i<mtrw;i=i+1) begin
				matrowget(SDr,i,SDrw);
				if(nonblank(SDrw.ArtCode))then begin
					if(SDrw.Qty>0)then begin
						if(SDrw.Qty>0)then begin
							resqty[SDrw.ArtCode] = resqty[SDrw.ArtCode] + (SDrw.Qty);
							if(blank(altcode[SDrw.ArtCode]))then begin
								altcode[SDrw.ArtCode] = "_";
								INr.Code = SDrw.ArtCode;
								if(readfirstmain(INr,1,true))then begin
									altcode[SDrw.ArtCode] = INr.AlternativeCode;
								end;
							end;
							
							startformat(15);
								outstring(0,"DblINVc",SDrw.ArtCode,false);
								outstring(100,0,SDrw.Qty,false);
								outstring(150,"DblSDVc",SDr.SerNr,false);
								outstring(175,0,i+1,false);
								outstring(200,0,altcode[SDrw.ArtCode],false);
							endformat;
						end;
					end;
				end;	  
			end; 
		end;
	end;
	
	Gray_Divider(0,1);
	
	
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		ISr.Code = INr.Code;
		ISr.Location = ";;;";
		if(readfirstmain(ISr,2,true))then begin
			if(ISr.RsrvQty!=0 or resqty[INr.Code]!=0)then begin
				if(ISr.RsrvQty!=resqty[INr.Code] or ISr.RsrvQty>ISr.OrddOut)then begin
					startformat(15);
						outstring(0,0,INr.Code,false);
						outstring(100,0,ISr.RsrvQty,false);
						outstring(150,0,resqty[INr.Code],false);
						outstring(200,0,ISr.RsrvQty - resqty[INr.Code],false);
					endformat;
				end;
			end;
		end;
	end;
	
	
	endjob;
	 LogProcTime("ReserveCheckRn",getcurtick() - curtick);
return;
end;



global updating procedure QdReserveRecalcMn (record ItemStatVc ISr)
begin
	recordStore (ISr,true);
	return;
end;




global
procedure ReserveRecalcMn(record RcVc RepSpec)  // by Ira
begin
  record INVc INr;
  record ORVc ORr;
	row ORVc ORrw;
	boolean TrHs,testf,testf1;
	vector string 255 orders,loc,custName,OrdDate,reservDate;
	vector val quantShip,rownr;
  longint curtick;
	integer rowcnt,i,j,c;
	array string 255 tags,tags1;
	integer itemall,pos,rwcnt,oldCompany;
	string 255 orderNr;
	record CompaniesBlock CBb;
	row CompaniesBlock Comprw;
	record ItemStatusVc ISr;
	vector string 255 ordersSM,OrdDateSM;
	vector val quantShipSM,rownrSM,quantShipSD,quantShipAll,quantAllShipAll;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record SDVc SDr;
	row SDVc SDrw;
	string 225 isrcode, isrlocation;
	record RcVc RepSpec2;
	

logtext(0,"Start - ReserveRecalcMn");

	oldCompany = currentCompany;
	blockload(CBb);
  rwcnt = matrowcnt(CBb);
	
  for(j=0;j<rwcnt;j=j+1) begin
    matrowget(CBb,j,Comprw);
		if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(j+1) or j+1==3) and j+1!=33 and j+1!=29)then begin
			SetCompany(j+1,false);
			testf1 = true;
			if (nonblank(RepSpec.f2) and StringtoInt(RepSpec.f2)!=CurrentCompany) then begin testf1 = false; end;
			if (testf1) then begin
				RepSpec2.flags[2] = 1;
				RepSpec2.flags[0] = 1;
				RepSpec2.flags[1] = 1;
				queued.RecalcORMn(RepSpec2);
				ClearVector(quantShipAll);
				ClearVector(quantAllShipAll);
				ORr.Reserved = 1;
				TrHs = true;
				while(LoopKey("Reserved",ORr,1,TrHs)) begin
					testf = true;
					if(ORr.Reserved<1) then begin TrHs = false; testf = false; end;
					if(ORr.Closed==1) then begin testf = false; end;
					if(testf) then begin
						rowcnt = MatRowCnt(ORr);
						for(i=0;i<rowcnt;i=i+1) begin
							testf = true;
							matrowget(ORr,i,ORrw);
							if(nonblank(RepSpec.f1) and RepSpec.f1!=ORrw.ArtCode) then begin testf = false; end;
							if(ORrw.Quant>0 and testf and ORrw.Quant>ORrw.Shipd2) then begin
								if (blank(ORrw.Location)) then begin
									ORrw.Location = ORr.Location;
								end;
								quantShipAll[ORrw.ArtCode & ORrw.Location] = quantShipAll[ORrw.ArtCode & ORrw.Location] + (ORrw.Quant-ORrw.Shipd2);
								quantAllShipAll[ORrw.ArtCode] = quantAllShipAll[ORrw.ArtCode] + quantShipAll[ORrw.ArtCode & ORrw.Location];
							end;
						end;
					end;
				end;
				ResetLoop(ORr);
				
				SDr.OKFlag = 0;
				TrHs = true;
				while(loopkey("OKFlag",SDr,1,TrHs)) begin
					testf = true;
					if(SDr.Reservf<1) then begin testf = false; end;
					if(SDr.OKFlag>0) then begin testf = false; TrHs = false; end;
					if(testf) then begin
						rowcnt = MatRowCnt(SDr);
						for(i=0;i<rowcnt;i=i+1) begin
							testf = true;
							matrowget(SDr,i,SDrw);
							if(nonblank(RepSpec.f1) and RepSpec.f1!=SDrw.ArtCode) then begin testf = false; end;
							if(SDrw.Qty>0 and testf) then begin
								if (blank(SDrw.Location)) then begin
									SDrw.Location = SDr.Location;
								end;
								quantShipAll[SDrw.ArtCode & SDrw.Location] = quantShipAll[SDrw.ArtCode & SDrw.Location] + SDrw.Qty;
								quantAllShipAll[SDrw.ArtCode] = quantAllShipAll[SDrw.ArtCode] + SDrw.Qty;
							end;
						end;
					end;
				end;
				ResetLoop(SDr);
				
				// SMr.OKFlag = 0;
				// TrHs = true;
				// while(LoopKey("OKFlag",SMr,1,TrHs)) begin
					// TrHs = true;
					// if(SMr.OKFlag>0) then begin TrHs = false; end;
					// if(TrHs and SMr.Reserved>0) then begin
						// rowcnt = MatRowCnt(SMr);
						// for(i=0;i<rowcnt;i=i+1) begin
							// testf = true;
							// matrowget(SMr,i,SMrw);
							// if(nonblank(RepSpec.f1) and RepSpec.f1!=SMrw.ArtCode) then begin testf = false; end;
							// if(SMrw.Quant>0 and testf) then begin

								// quantShipAll[SMrw.ArtCode & SMr.FrLocation] = quantShipAll[SMrw.ArtCode & SMr.FrLocation] + SMrw.Quant;
								// quantAllShipAll[SMrw.ArtCode] = quantAllShipAll[SMrw.ArtCode] + SMrw.Quant;
							// end;
						// end;
					// end;
				// end;
				// ResetLoop(SMr);
				
				ISr.Code = RepSpec.f1;
				TrHs = true;
				while (loopmain(ISr,1,TrHs)) begin
					if (nonblank(RepSpec.f1) and RepSpec.f1!=ISr.Code) then begin TrHs = false; end;
					if(ISr.Location!=";;;")then begin
						if(ISr.RsrvQty != quantShipAll[ISr.Code & ISr.Location]) then begin
							ISr.RsrvQty = quantShipAll[ISr.Code & ISr.Location];
							queued.QdReserveRecalcMn(ISr); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 19:55 19.02.2021
							MilliSleep(50);
							//RecordStore(ISr,true);
						end;
					end;			
					if(ISr.Location==";;;")then begin
						if(ISr.RsrvQty != quantAllShipAll[ISr.Code]) then begin
  						ISr.RsrvQty = quantAllShipAll[ISr.Code];
							queued.QdReserveRecalcMn(ISr); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 19:55 19.02.2021
							MilliSleep(50);
							//RecordStore(ISr,true);
						end;						
					end;
				end;
				ResetLoop(ISr);
			end;
		end;
		
	end;
logtext(0,"Finish - ReserveRecalcMn");
	ResetCompany(oldCompany);
	LogProcTime("ReserveRecalcMn",getcurtick() - curtick);
  return;
end;



global
updating procedure ReserveRecalcMn2(record RcVc RepSpec)
begin
  record INVc INr;
  record ORVc ORr;
	row ORVc ORrw;
	boolean TrHs,testf,testf1;
	vector string 255 orders,loc,custName,OrdDate,reservDate;
	vector val quantShip,rownr;
  longint curtick;
	integer rowcnt,i,j,c;
	array string 255 tags,tags1;
	integer itemall,pos,rwcnt,oldCompany;
	string 255 orderNr;
	record CompaniesBlock CBb;
	row CompaniesBlock Comprw;
	record ItemStatusVc ISr;
	vector string 255 ordersSM,OrdDateSM;
	vector val quantShipSM,rownrSM,quantShipSD;
	record StockMovVc SMr;
	row StockMovVc SMrw;
	record SDVc SDr;
	row SDVc SDrw;
	
	oldCompany = currentCompany;
	blockload(CBb);
  rwcnt = matrowcnt(CBb);
  For(j=0;j<rwcnt;j=j+1) begin
    matrowget(CBb,j,Comprw);
		if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(j+1) or j+1==3) and j+1!=33 and j+1!=29)then begin
			SetCompany(j+1,false);
			testf1 = true;
			if (nonblank(RepSpec.f2) and StringtoInt(RepSpec.f2)!=CurrentCompany) then begin testf1 = false; end;
			if (testf1) then begin
				ClearVector(orders);
				ClearVector(quantShip);
				ClearVector(loc);
				ClearVector(quantShipSM);
				ORr.Reserved = 1;
				TrHs = true;
				while(LoopKey("Reserved",ORr,1,TrHs)) begin
					testf = true;
					if(ORr.Reserved<1) then begin TrHs = false; testf = false; end;
					if(ORr.Closed==1) then begin testf = false; end;
					if(testf) then begin
						rowcnt = MatRowCnt(ORr);
						for(i=0;i<rowcnt;i=i+1) begin
							testf = true;
							matrowget(ORr,i,ORrw);
							if(nonblank(RepSpec.f1) and RepSpec.f1!=ORrw.ArtCode) then begin testf = false; end;
							if(ORrw.Quant>0 and testf and ORrw.Quant>ORrw.Shipd2) then begin
								orders[ORrw.ArtCode] = "true";
								quantShip[ORrw.ArtCode & ORr.Location] = ORrw.Quant-ORrw.Shipd2;
								loc[ORr.Location] = "true";
							end;
						end;
					end;
				end;
				ResetLoop(ORr);
				SDr.OKFlag = 0;
				TrHs = true;
				while(loopkey("OKFlag",SDr,1,TrHs)) begin
					testf = true;
					if(SDr.Reservf<1) then begin testf = false; end;
					if(SDr.OKFlag>0) then begin testf = false; TrHs = false; end;
					if(testf) then begin
						rowcnt = MatRowCnt(SDr);
						for(i=0;i<rowcnt;i=i+1) begin
							testf = true;
							matrowget(SDr,i,SDrw);
							if(nonblank(RepSpec.f1) and RepSpec.f1!=SDrw.ArtCode) then begin testf = false; end;
							if(SDrw.Qty>0 and testf) then begin
								orders[SDrw.ArtCode] = "true";
								quantShipSD[SDrw.ArtCode & SDr.Location] = SDrw.Qty;
								loc[SDr.Location] = "true";
							end;
						end;
					end;
				end;
				ResetLoop(SDr);
				SMr.OKFlag = 0;
				TrHs = true;
				while(LoopKey("OKFlag",SMr,1,TrHs)) begin
					TrHs = true;
					if(SMr.OKFlag>0) then begin TrHs = false; end;
					if(TrHs and SMr.Reserved>0) then begin
						rowcnt = MatRowCnt(SMr);
						for(i=0;i<rowcnt;i=i+1) begin
							testf = true;
							matrowget(SMr,i,SMrw);
							if(nonblank(RepSpec.f1) and RepSpec.f1!=SMrw.ArtCode) then begin testf = false; end;
							if(SMrw.Quant>0 and testf) then begin
								orders[SMrw.ArtCode] = "true";
								quantShipSM[SMrw.ArtCode & SMr.FrLocation] = SMrw.Quant;
								loc[SMr.FrLocation] = "true";
							end;
						end;
					end;
				end;
				ResetLoop(SMr);
				getvectortags(orders,tags);
				getvectortags(loc,tags1);
				for(i=0;i<tags.length;i=i+1) begin				
					for(c=0;c<tags1.length;c=c+1) begin
						ISr.Code = tags[i];
						ISr.Location = tags1[c];
						if(readfirstmain(ISr,2,true)) then begin
							if(ISr.RsrvQty!=0 or quantShip[tags[i] & tags1[c]]!=0)then begin
								if(ISr.RsrvQty!=quantShip[tags[i] & tags1[c]] + quantShipSM[tags[i] & tags1[c]])then begin
									ISr.RsrvQty = quantShip[tags[i] & tags1[c]] + quantShipSM[tags[i] & tags1[c]];
									RecordStore(ISr,true);
								end;
							end;
						end;
					end;
				end;
				ISr.Code = RepSpec.f1;
				TrHs = true;
				while (loopmain(ISr,1,TrHs)) begin
					if (nonblank(RepSpec.f1) and RepSpec.f1!=ISr.Code) then begin TrHs = false; end;
					if (quantShip[ISr.Code & ISr.Location]==0 and quantShipSM[SMrw.ArtCode & SMr.FrLocation]==0 and quantShipSD[SMrw.ArtCode & SMr.FrLocation]==0 and TrHs) then begin
						ISr.RsrvQty = 0;
						RecordStore(ISr,true);
					end;
				end;
				ResetLoop(ISr);
			end;
		end;
	end;
	ResetCompany(oldCompany);
	LogProcTime("ReserveRecalcMn2",getcurtick() - curtick);
  return;
end;



global
updating procedure ReserveRecalcAutoMn()
begin
record RcVc RepSpec;
	
	RepSpec.f1 = "";
	RepSpec.f2 = "";
	ReserveRecalcMn(RepSpec);
	return;
end;


