//server-only
external function val AbsoluteVal(val);
external procedure ExtractObj(string,var Integer,var string);
external function boolean CompanyIsJWLikeCompany(Integer);
remote function string 255 GetCompanyShortCode(string);
external  function string 100 BPICodeToName(string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean FindStringInString(string,string);
external procedure FindAndStoreINVcImgLink(record INVc, integer, var string, var string);
external procedure LogProcTime(string,longint);

SetLangMode(LangRussian,"RUS",0);

global procedure BrendLeadTime (var array string BrandNames, var array string VeCodes, 
																var integer acnt, var array string DirCodes,var array val LT)
begin
	record CUVc CUr;
	val LTd, POPlacingTime, Margin,i;
	record DIVc DIr;
	boolean TrHs, testf;
	
	
	acnt = 0;
	TrHs = true;
	CUr.VEType = 1;
	while (loopkey("VEActCode",CUr,1,TrHs))begin
		if(CUr.VEType==1)then begin 
			DIr.CType = "BRAND";
			testf = true;
			while(LoopKey("CType",DIr,1,testf))begin
				testf = true;
				if(DIr.CType!="BRAND")then begin testf = false; end;
				if(testf)then begin
					if(DIr.Name==CUr.Name)then begin
						LT[acnt] = CUr.CalculatedLeadTime;
						BrandNames[acnt] = DIr.Name;
						DirCodes[acnt] = DIr.Code;
						VeCodes[acnt] = CUr.Code;
						acnt=acnt+1;
					end;
				end;
			end;
			resetloop(DIr);
		end else begin
			TrHs = false;
		end;
	end;
	ResetLoop(CUr);
	
	return;
end;





global updating procedure BrendLeadTimeMn (record RcVc RepSpec)
begin
	record CUVc CUr;
	val LTd, POPlacingTime, Margin,i;
	record DIVc DIr;
	boolean TrHs, testf;
	record BPIBrandVc Brandr;
	
	i=0;
	CUr.Code = "";
	while (LoopMain(CUr,1,true))begin
		if(CUr.VEType==1)then begin 
			Brandr.Name = CUr.Name;
			if(ReadFirstKey("Name",Brandr,1,true))then begin
				Brandr.CalculatedLeadTime = CUr.CalculatedLeadTime;
				Brandr.DeliveryBasedOn = CUr.DeliveryBasedOn;
				Brandr.DeliveryWay = CUr.DeliveryWay;
				Brandr.DeliveryFrom = CUr.DeliveryFrom;
				Brandr.PlanShipDaysMin = CUr.PlanShipDaysMin;
				Brandr.CalculatedLeadTime = CUr.CalculatedLeadTime;
				Brandr.ELevel = CUr.ELevel;
				Brandr.PlanShipDays = CUr.PlanShipDays;
				if(RecordStore(Brandr,true))then begin end;
			end else begin
				if(CUr.PlanShipDaysMin>0 and CUr.CalculatedLeadTime>0)then begin
					i=i+1;
					//logtext(0,"Brand ->" & Chr(9) & i & Chr(9) & CUr.Name & Chr(9) & Chr(9) & Chr(9) & Chr(9) & CUr.PlanShipDaysMin & Chr(9) & CUr.CalculatedLeadTime);
				end;
			end;
		end;
	end;
	ResetLoop(CUr);
	
	return;
end;






global procedure ABCRn(record RcVc RepSpec)
begin
	record INVc INr;
	record ItemHistVc IHr, IHPUr;
	record DIVc DIr;
	boolean TrHs,testf,datef,anndemaatef,compf,CustCodef,offlocf,CompanyItIV;
	record IVVc IVr;
	row IVVc IVrw;
	vector val SaleMon,INmatvalv,CalculatedLeadTime,vELev,vItemCostEuro;
	integer y,lenol,il,olcnt,pos,mtrw,months,i,MonSep,AnnDem,IVqty,POPlacingTime,Margin,oldcomp,currcomp,compmtrw,j,CompDem,oldDemComp,brcnt,br,QtyIt,posdem,ccnt,cc,rflag,IHPURKays;
	string 255 cmd,sBrand,sBrandName,sColour,sModel,BrDemPl,DemComp,sCompName,crn,lstr;
	date backdate,trdate,AnnDemDate,curper,dCurrRDate,td;
	val basesum, middleinprice,basesumprice,LTd,fr,to1,to2,b1,b2,quant;
	vector integer Mon;
	record CUVc CUr;
	vector val brandleadtime,vLTd;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	array string 255 INCode,arBR,aCurr,overloc;
	vector string 255 INmatstrv,vElevCrrncy;
	vector boolean vOldItStr, vDemComp, INCodesf;
	record UserVc USr;
	record BPIBrandVc BPIBrandr;
	record BPICollectionVc BPICollectionr;
	record BPIGroupVc BPIGroupr;
	record BPISubGroupVc BPISubGroupr;
	record BPICategoryVc BPICategoryr;
	record BPIMaterialVc BPIMaterialr;
	record BPIColorVc BPIColorr;
	record BPIShapeVc BPIShaper;
	record BPISizeVc BPISizer;
	record BPIUseVc BPIUser;
	record BPISexVc BPISexr;
	record BPIPlatingVc BPIPlatingr;
	record BPIClarityVc BPIClarityr;
	record BPIWeightVc BPIWeightr;
	record BPICutVc BPICutr;
	record BPIStoneVc BPIStoner;
	record BPIStrapVc BPIStrapr;
	record BPIOdourVc BPIOdourr;
	record ERVc ERr;
	vector string 100 vCategory,vColor,vBrand,vGroup,vSubGroup,vCollection,vMaterial,vSize,vBrndMnger,vElevCurr, vLoc, vItemABCSubClass;
	vector val vCurRt;
	vector date vDateOfLastReceipt;
	longint INq, k,currtick;
	record CurncyCodeVc CCr;
	record PUVc PUIHr;
	record LocationVc Locr;
	
	currtick =  GetCurTick();

	
	olcnt = 0;
	overloc[olcnt] = "ÅêÄä";
	olcnt = olcnt + 1;
	overloc[olcnt] = "BRAK";
	olcnt = olcnt + 1;
	overloc[olcnt] = "MIS";
	
	rflag = RepSpec.flags[1];
	oldcomp = CurrentCompany;
	BPIBrandr.Code = "";
	while(loopmain(BPIBrandr,1,true))begin
		vBrand[BPIBrandr.Code] = BPIBrandr.Name;
		vLTd[BPIBrandr.Name] = BPIBrandr.CalculatedLeadTime;
		vELev[BPIBrandr.Name] = BPIBrandr.ELevel;
		vElevCrrncy[BPIBrandr.Name] = BPIBrandr.ELevelCurrency;
		vBrndMnger[BPIBrandr.Code] = BPIBrandr.BrndMngr;
		Locr.Code = BPIBrandr.CWHCode;
		vLoc[BPIBrandr.Code] = BPIBrandr.CWHCode;
		if(nonblank(BPIBrandr.BrndMngr))then begin
			USr.Code = vBrndMnger[BPIBrandr.Code];
			if(readfirstmain(USr,1,true))then begin
				vBrndMnger[BPIBrandr.Code] = USr.Name;
			end;
		end;
	end;
	
	resetloop(BPIBrandr);
	BPIGroupr.Code = "";
	while(loopmain(BPIGroupr,1,true))begin
		vGroup[BPIGroupr.Code] = BPIGroupr.Name;
	end;
	resetloop(BPIGroupr);
	BPIColorr.Code = "";
	while(loopmain(BPIColorr,1,true))begin
		vColor[BPIColorr.Code] = BPIColorr.Name;
	end;
	resetloop(BPIColorr);
	BPISubGroupr.Code = "";
	while(loopmain(BPISubGroupr,1,true))begin
		vSubGroup[BPISubGroupr.Code] = BPISubGroupr.Name;
	end;
	resetloop(BPISubGroupr);
	BPICollectionr.Code = "";
	while(loopmain(BPICollectionr,1,true))begin
		vCollection[BPICollectionr.Code] = BPICollectionr.Name;
	end;
	resetloop(BPICollectionr);
	BPIMaterialr.Code = "";
	while(loopmain(BPIMaterialr,1,true))begin
		vMaterial[BPIMaterialr.Code] = BPIMaterialr.Name;
	end;
	resetloop(BPIMaterialr);
	BPISizer.Code = "";
	while(loopmain(BPISizer,1,true))begin
		vSize[BPISizer.Code] = BPISizer.Name;
	end;
	resetloop(BPISizer);
	BPICategoryr.Code = "";
	while(loopmain(BPICategoryr,1,true))begin
		vCategory[BPICategoryr.Code] = BPICategoryr.Name;
	end;
	resetloop(BPICategoryr);
	
	INq = 0;
	
	for (i=1;i<29;i=i+1)begin
		vDemComp[i] = false;
	end;
	
	USr.Code = CurrentUser;
	if(ReadFirstMain(USr,1,true))then begin
		if(nonblank(USr.DemandPlannComp))then begin
			ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			while (nonblank(DemComp)) begin
				vDemComp[StringToInt(DemComp)] = true;
				ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			end; 
		end else begin
			vDemComp[CurrentCompany] = true;
		end;
	end;
	
	

	
	startreportnoheaderjob("Extended Data of Sales");
		startformat(15);
			outstring(0,0,"Period",false);
			switch(RepSpec.flags[0])begin
				case 0: outstring(70,0,"1 month",false);
				case 1: outstring(70,0,"2 month",false);
				case 2: outstring(70,0,"3 month",false);
				case 3: outstring(70,0,"6 month",false);
				case 4: outstring(70,0,"12 month",false);
				case 5: outstring(70,0,"24 month",false);
				case 6: outstring(70,0,"36 month",false);
			end;
		endformat;
		
		startformat(15);
			outstring(0,0,"Item ID",false);
			outstring(0,0,"Item Name",false);
			outstring(0,0,"Item Article",false);//Cat 3
			outstring(0,0,"Item Model",false);//+
			outstring(0,0,"Item Colour",false);//+
			outstring(0,0,"Item Material",false);//+
			outstring(0,0,"Item Size",false);//+
			outstring(0,0,"Item Set Code",false);//+
			outstring(0,0,"Item Group",false);//+
			outstring(0,0,"Item Subgroup",false);//+
			outstring(0,0,"Item Category",false);//+
			outstring(0,0,"Item Brand",false);//4 old
			outstring(0,0,"Brand Lead Time (Days)",false);
			outstring(0,0,"Brand Developer",false);
			outstring(0,0,"Company",false);
			outstring(0,0,"CWH Code",false);
			outstring(0,0,"Date of last rcpt",false);
			outstring(0,0,"Item cost (Euro)",false);
			outstring(0,0,"ABC SubClass",false);
			outstring(0,0,"ABC or E ",false);
			outstring(0,0,"XYZ or S",false);
			outstring(0,0,"Annual Demand (for Last 12 months)",false);
			outstring(0,0,"Unit Price (Last 12 Monthly Average)",false);
			outstring(0,0,"E Level of Unit Price",false);
			//outstring(0,0,"E Level currency",false);
			outstring(0,0,"Sales",false);
		endformat;
		
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			//outstring(0,0,"",false);
																				outstring(0,0,"1",false);
			if(RepSpec.flags[0]>0)then begin  outstring(0,0,"2",false);  end;
			if(RepSpec.flags[0]>1)then begin  outstring(0,0,"3",false);  end;
			if(RepSpec.flags[0]>2)then begin  outstring(0,0,"4",false); 
																				outstring(0,0,"5",false); 
																				outstring(0,0,"6",false);  end;
			if(RepSpec.flags[0]>3)then begin  outstring(0,0,"7",false);
																				outstring(0,0,"8",false);
																				outstring(0,0,"9",false);
																				outstring(0,0,"10",false);
																				outstring(0,0,"11",false);
																				outstring(0,0,"12",false); end;
			if(RepSpec.flags[0]>4)then begin  outstring(0,0,"13",false);
																				outstring(0,0,"14",false);
																				outstring(0,0,"15",false);
																				outstring(0,0,"16",false);
																				outstring(0,0,"17",false);
																				outstring(0,0,"18",false);
																				outstring(0,0,"19",false);
																				outstring(0,0,"20",false);
																				outstring(0,0,"21",false);
																				outstring(0,0,"22",false);
																				outstring(0,0,"23",false);
																				outstring(0,0,"24",false); end;
			if(RepSpec.flags[0]>5)then begin  outstring(0,0,"25",false);
																				outstring(0,0,"26",false);
																				outstring(0,0,"27",false);
																				outstring(0,0,"28",false);
																				outstring(0,0,"29",false);
																				outstring(0,0,"30",false);
																				outstring(0,0,"31",false);
																				outstring(0,0,"32",false);
																				outstring(0,0,"33",false);
																				outstring(0,0,"34",false);
																				outstring(0,0,"35",false);
																				outstring(0,0,"36",false); end;
		endformat;
		
		
		
		
		
		
		
		
		
		switch(RepSpec.flags[0])begin
			case 0: months = 1;
			case 1: months = 2;
			case 2:	months = 3;
			case 3: months = 6;
			case 4: months = 12;
			case 5: months = 24;
			case 6: months = 36;
		end;
		
		months = 12;
		
		
		
		BlockLoad(Compb);
		compmtrw = matrowcnt(Compb);
		for (j=0;j<compmtrw;j=j+1)begin
			trdate = currentdate;
			trdate.day = 1;
			backdate = AddMonth(CurrentDate,-months);
			backdate.day = 1;
			AnnDemDate = AddMonth(CurrentDate,-months);
			AnnDemDate.day = 1;
			
			i = 1;
			while(trdate>=backdate)begin
				trdate = addmonth(trdate,-1);
				trdate.day = 1;
				Mon[trdate] = i;
				i=i+1;
			end;
			compf = true;
			if(rflag==0)then begin
				BlockLoad(Compb);
				j=compmtrw;
				matrowget(Compb,(CurrentCompany-1),Comprw);
				sCompName = Comprw.CompName;
			end else begin
				BlockLoad(Compb);
				matrowget(Compb,j,Comprw);
				if(Comprw.ActiveStatus==0 and ((j+1)!=32))then begin
					sCompName = Comprw.CompName;
					if(rflag==2 and vDemComp[j+1])then begin
						SetCompany(j+1,false);
					end else begin
						if(rflag==1)then begin
							SetCompany(j+1,false);
							logtext(0,"Company(ABC) -> " & j+1);
						end else begin
							compf = false;
						end;
					end;
				end else begin
					compf = false;
				end;
			end;
			resetloop(INr);
			
			CCr.CurncyCode = "";
			ccnt = 0;
			while (loopmain(CCr,1,true)) begin
				aCurr[ccnt] = CCr.CurncyCode;
				//logtext(0,aCurr[ccnt]);
				ccnt = ccnt + 1;
			end;
			resetloop(CCr);
			
			dCurrRDate = backdate;
			for (dCurrRDate=backdate;dCurrRDate<=CurrentDate;dCurrRDate=addday(dCurrRDate,1)) begin
				for (cc=0;cc<ccnt;cc=cc+1)begin
					vCurRt[dCurrRDate & aCurr[cc] & "FrRate"] = 0;
					vCurRt[dCurrRDate & aCurr[cc] & "ToRate1"] = 0;
					crn = aCurr[cc];
					td = dCurrRDate;
					fr = 0;
					to1 = 0;
					to2 = 0;
					b1 = 0;
					b2 = 0;
					GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
					vCurRt[dCurrRDate & aCurr[cc] & "FrRate"] = fr;
					vCurRt[dCurrRDate & aCurr[cc] & "ToRate1"] = to1;
				end;
			end;
			INr.Code = "";
			while(loopmain(INr,1,compf))begin
				//logtext(0,INr.Code);
				testf = true;
				if(INr.Terminated==1)then begin testf = false; end;
				//if(INr.Code=="1011106")then begin compf = false; end;  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger10:43 24.01.2019
				//if(nonblank(RepSpec.f1) and !setinset(RepSpec.f1,INr.DispGroups))then begin testf = false; end; 
				if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin testf = false; end;
				//if(nonblank(RepSpec.f2) and !setinset(RepSpec.f2,INr.DispGroups))then begin testf = false; end;
				//if(nonblank(RepSpec.f3) and !setinset(RepSpec.f3,INr.DispGroups))then begin testf = false; end;
				//if(nonblank(RepSpec.f4) and RepSpec.f4!=INr.Recepy)then begin testf = false; end;
				if(nonblank(RepSpec.f6) and RepSpec.f6!=INr.BPISubGroup)then begin testf = false; end;
				if(nonblank(RepSpec.f5) and RepSpec.f5!=INr.BPIGroup)then begin testf = false; end;
				if(RepSpec.flags[3]==1 and (INr.ItemCat=="D" or INr.OutOfOrder==1))then begin testf = false; end;
				
				if(setinset("30",INr.DispGroups))then begin testf = false; end;
				if(setinset("31",INr.DispGroups))then begin testf = false; end;
				if(setinset("32",INr.DispGroups))then begin testf = false; end;
				if(setinset("33",INr.DispGroups))then begin testf = false; end;
				if(setinset("34",INr.DispGroups))then begin testf = false; end;
				if(setinset("35",INr.DispGroups))then begin testf = false; end;
				if(INr.ItemCat=="O" or INr.ItemCat=="D")then begin testf = false; end;
				IHr.ArtCode = INr.Code;
				if(ReadFirstKey("ArtCode",IHr,1,true))then begin 
					if(IHr.TransDate>addmonth(currentdate,-12))then begin
						testf = false; 
					end;
				end;
				if(INr.ConsgType!=0)then begin
					testf = false;
				end;
				if(testf)then begin
					CompanyItIV = false;
					pos = 0;
					sBrand = "";
					sBrandName = "";
					cmd = "";
					middleinprice = 0;
					sBrand = INr.BPIBrand;
					sBrandName = vBrand[INr.BPIBrand];
					sModel = vCollection[INr.BPICollection];
					sColour = vColor[INr.BPIColor];
					
					if(testf)then begin
						LTd = 0;
						
						
						if(vLTd[UpperCase(sBrandName)]>0)then begin 
							LTd = vLTd[UpperCase(sBrandName)]; 
							if((vElevCrrncy[sBrandName]!="EUR" and vElevCrrncy[sBrandName]!="AZN") and nonblank(vElevCrrncy[sBrandName]))then begin
								vELev[INr.Code] = vELev[UpperCase(sBrandName)] / vCurRt[CurrentDate & vElevCrrncy[sBrandName] & "FrRate"] * vCurRt[CurrentDate & vElevCrrncy[sBrandName] & "ToRate1"];
								vELev[INr.Code] = vELev[INr.Code] * vCurRt[CurrentDate & "EUR" & "FrRate"] / vCurRt[CurrentDate & "EUR" & "ToRate1"];
							end else begin
								if(vElevCrrncy[sBrandName]=="AZN")then begin
									vELev[INr.Code] = vELev[UpperCase(sBrandName)] * vCurRt[CurrentDate & "EUR" & "FrRate"] / vCurRt[CurrentDate & "EUR" & "ToRate1"];
								end else begin 
									vELev[INr.Code] = vELev[UpperCase(sBrandName)];
								end;
							end;
						end;
						
						crn = INr.LastPurchCurncyCode;
						td = CurrentDate;
						fr = 0;
						to1 = 0;
						to2 = 0;
						b1 = 0;
						b2 = 0;
						GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
						
						vItemCostEuro[INr.Code] = INr.LastPurchPrice2;
						if(INr.LastPurchCurncyCode!="EUR" and INr.LastPurchCurncyCode!="AZN")then begin
							vItemCostEuro[INr.Code] = vItemCostEuro[INr.Code] / fr * to1;
							crn = "EUR";
							td = CurrentDate;
							fr = 0;
							to1 = 0;
							to2 = 0;
							b1 = 0;
							b2 = 0;
							GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
							vItemCostEuro[INr.Code] = vItemCostEuro[INr.Code] * fr / to1;
						end else begin
							if(INr.LastPurchCurncyCode=="AZN")then begin
								crn = "EUR";
								td = CurrentDate;
								fr = 0;
								to1 = 0;
								to2 = 0;
								b1 = 0;
								b2 = 0;
								GetFullCurncyRate(crn,td,fr,to1,to2,b1,b2);
								vItemCostEuro[INr.Code] = vItemCostEuro[INr.Code] * fr / to1;					
							end;
						end;
						
						vItemABCSubClass[INr.Code] = INr.ABCSubClass;
						Locr.Code = vLoc[INr.BPIBrand];
						if(!ReadFirstMain(Locr,1,true))then begin
							vLoc[INr.BPIBrand] = "";
						end;
						if(nonblank(vLoc[INr.BPIBrand]))then begin 
							IHPUr.ArtCode = INr.Code;
							IHPUr.TransDate = CurrentDate;
							TrHs = true;
							while (LoopBackkey("ArtCode",IHPUr,2,TrHs)) begin
								if(IHPUr.FileName=="PUVc" and vDateOfLastReceipt[INr.Code]<IHPUr.TransDate and IHPUr.ArtCode==INr.Code and IHPUr.Location==vLoc[INr.BPIBrand])then begin
									PUIHr.SerNr = IHPUr.TransNr;
									if(ReadFirstMain(PUIHr,1,true) and left(PUIHr.VECode,3)!="FOB")then begin
										vDateOfLastReceipt[INr.Code] = IHPUr.TransDate;
										TrHs = false;
									end;
								end;
								if(IHPUr.ArtCode!=INr.Code)then begin TrHs = false; end;
							end;
							ResetLoop(IHPUr);
						end else begin
							IHPUr.ArtCode = INr.Code;
							IHPUr.TransDate = CurrentDate;
							TrHs = true;
							while (LoopBackkey("ArtCode",IHPUr,2,TrHs)) begin
								if(IHPUr.FileName=="PUVc" and vDateOfLastReceipt[INr.Code]<IHPUr.TransDate and IHPUr.ArtCode==INr.Code)then begin
									PUIHr.SerNr = IHPUr.TransNr;
									if(ReadFirstMain(PUIHr,1,true) and left(PUIHr.VECode,3)!="FOB")then begin
										vDateOfLastReceipt[INr.Code] = IHPUr.TransDate;
										TrHs = false;
									end;
								end;
								if(IHPUr.ArtCode!=INr.Code)then begin TrHs = false; end;
							end;
							ResetLoop(IHPUr);
						end;
						
						datef = true;
						anndemaatef = true;
						IHr.ArtCode = INr.Code;
						IHr.TransDate = CurrentDate;
						MonSep = 1;
						AnnDem = 0;
						basesumprice = 0;
						IVqty = 0;
						quant = 0;
						TrHs = true;
						while (loopbackkey("ArtCode",IHr,2,TrHs)) begin
							if(IHr.TransDate<backdate)then begin datef = false; TrHs = false; end;
							if(IHr.ArtCode!=INr.Code)then begin datef = false; TrHs = false; end;
							if(IHr.TransDate<AnnDemDate)then begin anndemaatef = false; end;
							
							offlocf = false;
							lstr = "";
							lstr = IHr.Location;
							lenol = 0;
							for(il=0;il<=olcnt;il=il+1)begin
								lenol = len(overloc[il]);
								for(y=0;y<=(len(lstr)-lenol);y=y+1)begin
									if(overloc[il]==UpperCase(mid(lstr,y,lenol)))then begin
										offlocf = true;
									end;
								end;
							end;
							
							if(INCodesf[INr.Code]!=true)then begin
								INCode[INq] = INr.Code;
								INCodesf[INr.Code] = true;
								INq = INq + 1;
							end;
							
							if(IHr.FileName=="IVVc" and TrHs and !offlocf)then begin
								IVr.SerNr = IHr.TransNr;
								if(readfirstmain(IVr,1,true) and IVr.PriceList=="RRP")then begin
									CustCodef = true;
									if(left(IVr.CustCode,3)=="FOB")then begin CustCodef = false; end;
									if(setinset("FOUNDER_1",IVr.Objects) 
									or setinset("FOUNDER_2",IVr.Objects) 
									or setinset("FOUNDER_3",IVr.Objects) 
									or setinset("FOUNDER_4",IVr.Objects) 
									or setinset("FOUNDER_5",IVr.Objects) 
									or setinset("FOUNDER_6",IVr.Objects)
									or setinset("FOUNDER_7",IVr.Objects))then begin CustCodef = false; end;
									if(IVr.Invalid!=0)then begin CustCodef = false; end;
									if(CustCodef)then begin
										matrowget(IVr,IHr.Row,IVrw);
										if(IVrw.Sum!=blankval)then begin
											if(IVr.CurncyCode!="EUR" and IVr.CurncyCode!="AZN")then begin
												basesum = IVrw.Sum / vCurRt[IVr.TransDate & IVr.CurncyCode & "FrRate"] * vCurRt[IVr.TransDate & IVr.CurncyCode & "ToRate1"];
												basesum = basesum * vCurRt[IVr.TransDate & "EUR" & "FrRate"] / vCurRt[IVr.TransDate & "EUR" & "ToRate1"];
												quant = quant + IVrw.Quant;
											end else begin
												if(IVr.CurncyCode=="AZN")then begin
													basesum = IVrw.Sum * vCurRt[IVr.TransDate & "EUR" & "FrRate"] / vCurRt[IVr.TransDate & "EUR" & "ToRate1"];
													quant = quant + IVrw.Quant;
												end else begin
													quant = quant + IVrw.Quant;
												end;
											end;
											QtyIt = AbsoluteVal(IHr.Qty);
											if(IVrw.Sum<0)then begin
												//basesum = -basesum;
												QtyIt = -QtyIt;
											end;
											if(anndemaatef)then begin
												basesumprice = basesumprice + basesum;
												IVqty = IVqty + 1;
											end;
										end;
										if(datef)then begin
											
											trdate = IHr.TransDate;
											trdate.day = 1;
											curper = currentdate;
											curper.day = 1;
											if(trdate==curper)then begin
												trdate = addmonth(trdate,-1);
											end;
											if(anndemaatef)then begin
												AnnDem = AnnDem - IHr.Qty;
											end;
											MonSep = Mon[trdate];
											//logtext(0,IHr.ArtCode & "__" & IHr.TransDate & "  " & MonSep & " " & basesum);
											SaleMon[MonSep & INr.Code] = SaleMon[MonSep & INr.Code] + QtyIt;
											CompanyItIV = true;
										end;
									end;
								end;
							end;
						end;
						resetloop(IHr);
						middleinprice = basesumprice / quant;
						if(blank(INmatstrv[INr.Code & "Name"]))then begin INmatstrv[INr.Code & "Name"] = INr.Name; end;
						if(blank(INmatstrv[INr.Code & "sBrand"]))then begin INmatstrv[INr.Code & "sBrand"] = sBrandName; end;
						INmatstrv[INr.Code & "LeadTime"] = LTd;
						if(blank(INmatstrv[INr.Code & "LeadTime"]) and nonblank(INr.LeadTime))then begin INmatstrv[INr.Code & "LeadTime"] = INr.LeadTime; end;
						if(blank(INmatstrv[INr.Code & "ItemCat"]))then begin INmatstrv[INr.Code & "ItemCat"] = INr.ItemCat; end;
						if(nonblank(INmatstrv[INr.Code & "CompName"]) and CompanyItIV)then begin 
							INmatstrv[INr.Code & "CompName"] = INmatstrv[INr.Code & "CompName"] & "," & sCompName;
						end	else begin
							if(CompanyItIV)then begin
								INmatstrv[INr.Code & "CompName"] = sCompName;
							end;
						end;
						if(blank(INmatstrv[INr.Code & "SubItemCat"]))then begin INmatstrv[INr.Code & "SubItemCat"] = INr.SubItemCat; end;
						if(blank(INmatstrv[INr.Code & "ItArt"]))then begin INmatstrv[INr.Code & "ItArt"] = INr.AlternativeCode; end;
						if(blank(INmatstrv[INr.Code & "ItModel"]))then begin INmatstrv[INr.Code & "ItModel"] = sModel; end;
						if(blank(INmatstrv[INr.Code & "ItModel"]))then begin INmatstrv[INr.Code & "ItModel"] = INr.Reference; end;
						if(blank(INmatstrv[INr.Code & "ItSetCode"]))then begin INmatstrv[INr.Code & "ItSetCode"] = INr.Recepy; end;
						if(blank(INmatstrv[INr.Code & "ItColour"]))then begin INmatstrv[INr.Code & "ItColour"] = sColour; end;
						if(blank(INmatstrv[INr.Code & "ItGroup"]))then begin INmatstrv[INr.Code & "ItGroup"] = vCategory[INr.BPISubGroup]; end;
						if(blank(INmatstrv[INr.Code & "ELevel"]))then begin INmatstrv[INr.Code & "ELevel"] = vELev[INr.Code]; end;
						//INmatvalv[INr.Code & "LeadTime"] = INr.LeadTime;
						if(INr.LeadTime<0)then begin INmatvalv[INr.Code & "LeadTime"] = blankval; end;
						if(INmatvalv[INr.Code & "AnnDem"]==blankval)then begin
							INmatvalv[INr.Code & "AnnDem"] = AnnDem;
						end else begin
							INmatvalv[INr.Code & "AnnDem"] = INmatvalv[INr.Code & "AnnDem"] + AnnDem;
						end;
						if(blank(INmatvalv[INr.Code & "middleinprice"]))then begin
							INmatvalv[INr.Code & "middleinprice"] = middleinprice;
						end else begin
							if(middleinprice!=0)then begin
								INmatvalv[INr.Code & "middleinprice"] = (INmatvalv[INr.Code & "middleinprice"] + middleinprice)/2;
							end;
						end;
						if(blank(INmatstrv[INr.Code & "Model"]))then begin INmatstrv[INr.Code & "Model"] = vCollection[INr.BPICollection]; end;
						if(blank(INmatstrv[INr.Code & "Color"]))then begin INmatstrv[INr.Code & "Color"] = vColor[INr.BPIColor]; end;
						if(blank(INmatstrv[INr.Code & "Material"]))then begin INmatstrv[INr.Code & "Material"] = vMaterial[INr.BPIMaterial]; end;
						if(blank(INmatstrv[INr.Code & "Size"]))then begin INmatstrv[INr.Code & "Size"] = vSize[INr.BPISize]; end;
						if(blank(INmatstrv[INr.Code & "ItSetCode"]))then begin INmatstrv[INr.Code & "ItSetCode"] = INr.Recepy; end;
						if(blank(INmatstrv[INr.Code & "Group"]))then begin INmatstrv[INr.Code & "Group"] = vGroup[INr.BPIGroup]; end;
						if(blank(INmatstrv[INr.Code & "SubGroup"]))then begin INmatstrv[INr.Code & "SubGroup"] = vSubGroup[INr.BPISubGroup]; end;
						if(blank(INmatstrv[INr.Code & "Category"]))then begin INmatstrv[INr.Code & "Category"] = vCategory[INr.BPICategory]; end;
						if(blank(INmatstrv[INr.Code & "Brand"]))then begin INmatstrv[INr.Code & "Brand"] = vBrand[INr.BPIBrand]; end;
						if(blank(INmatstrv[INr.Code & "BrndDvlpr"]))then begin INmatstrv[INr.Code & "BrndDvlpr"] = vBrndMnger[INr.BPIBrand]; end;
						if(blank(INmatstrv[INr.Code & "ElevCurr"]))then begin INmatstrv[INr.Code & "ElevCurr"] = vElevCurr[INr.BPIBrand]; end;
						/*if(blank(INmatstrv[INr.Code & "CWHCode"]))then begin */INmatstrv[INr.Code & "CWHCode"] = vLoc[INr.BPIBrand];/* end;*/
						if(StringToDate(INmatstrv[INr.Code & "PULastTrDate"])<vDateOfLastReceipt[INr.Code])then begin INmatstrv[INr.Code & "PULastTrDate"] = vDateOfLastReceipt[INr.Code]; end;
						/*if(blank(INmatstrv[INr.Code & "ItcostEur"]))then begin */INmatstrv[INr.Code & "ItcostEur"] = vItemCostEuro[INr.Code];/* end;*/
						/*if(blank(INmatstrv[INr.Code & "ABCSub"]))then begin */INmatstrv[INr.Code & "ABCSub"] = vItemABCSubClass[INr.Code];/* end;*/
					end;
				end;
			end;
			ResetLoop(INr);
			dCurrRDate = backdate;
			for (dCurrRDate=backdate;dCurrRDate<=CurrentDate;dCurrRDate=addday(dCurrRDate,1)) begin
				for (cc=0;cc<ccnt;cc=cc+1)begin
					vCurRt[dCurrRDate & aCurr[cc] & "FrRate"] = blankval;
					vCurRt[dCurrRDate & aCurr[cc] & "ToRate1"] = blankval;
				end;
			end;
		end;
		
		ResetCompany (oldcomp);
		
		for (k=0;k<INq;k=k+1)begin	
			if(INmatvalv[INCode[k] & "AnnDem"]>0)then begin
				for (MonSep=1;MonSep<=months;MonSep=MonSep+1)begin
					if(SaleMon[MonSep & INCode[k]]==blankval)then begin SaleMon[MonSep & INCode[k]] = 0; end;
				end;
			end;
		end;
		
		
		for (k=0;k<INq;k=k+1)begin	
			if(INmatvalv[INCode[k] & "AnnDem"]>0)then begin
				MonSep = 1;
				startformat(15);
					outstring(0,0,"'" & INCode[k],false);
					outstring(0,0,INmatstrv[INCode[k] & "Name"],false);
					outstring(0,0,INmatstrv[INCode[k] & "ItArt"],false);
					outstring(0,0,INmatstrv[INCode[k] & "Model"],false);
					outstring(0,0,INmatstrv[INCode[k] & "Color"],false);
					outstring(0,0,INmatstrv[INCode[k] & "Material"],false);
					outstring(0,0,INmatstrv[INCode[k] & "Size"],false);
					outstring(0,0,INmatstrv[INCode[k] & "ItSetCode"],false);
					outstring(0,0,INmatstrv[INCode[k] & "Group"],false);
					outstring(0,0,INmatstrv[INCode[k] & "SubGroup"],false);
					outstring(0,0,INmatstrv[INCode[k] & "Category"],false);
					outstring(0,0,INmatstrv[INCode[k] & "Brand"],false);
					outstring(0,0,INmatstrv[INCode[k] & "LeadTime"],false);
					outstring(0,0,INmatstrv[INCode[k] & "BrndDvlpr"],false);
					outstring(0,0,INmatstrv[INCode[k] & "CompName"],false);
					outstring(0,0,INmatstrv[INCode[k] & "CWHCode"],false);
					outstring(0,0,INmatstrv[INCode[k] & "PULastTrDate"],false);
					outstring(0,0,INmatstrv[INCode[k] & "ItcostEur"],false);
					outstring(0,0,INmatstrv[INCode[k] & "ABCSub"],false);
					outstring(0,0,INmatstrv[INCode[k] & "ItemCat"],false);
					outstring(0,0,INmatstrv[INCode[k] & "SubItemCat"],false);
					outstring(0,0,INmatvalv[INCode[k] & "AnnDem"],false);
					outstring(0,0,INmatvalv[INCode[k] & "middleinprice"],false);
					outstring(0,0,INmatstrv[INCode[k] & "ELevel"],false);
					//outstring(0,0,INmatstrv[INCode[k] & "ElevCurr"],false);
					
																						outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					if(RepSpec.flags[0]>0)then begin  outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); end;
					if(RepSpec.flags[0]>1)then begin  outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); end;
					if(RepSpec.flags[0]>2)then begin  outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); 
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); 
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); end;
					if(RepSpec.flags[0]>3)then begin  outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); end;
					if(RepSpec.flags[0]>4)then begin  outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); end;
					if(RepSpec.flags[0]>5)then begin  outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false);
																						outstring(0,0,SaleMon[(MonSep+=1) & INCode[k]],false); end;
				endformat;
			end;
		end;
	endjob;
	LogProcTime("ABCRn",GetCurTick() - currtick);
return;
end;


global procedure HistSaleQtyRn(record RcVc RepSpec)
begin
	record INVc INr;
	record ItemHistVc IHr;
	record DIVc DIr;
	boolean TrHs,testf,datef,anndemaatef,compf,INCodef,CustCodef;
	record IVVc IVr;
	row IVVc IVrw;
	vector val SaleMon;
	integer pos,mtrw,y,months,i,MonSep,AnnDem,IVqty,POPlacingTime,Year,Margin,oldcomp,currcomp,compmtrw,j,CompDem,oldDemComp,brcnt,br,Quart,posdem;
	string 255 cmd,sCategory,sBrand,sType,sBrandName,BrDemPl,DeadCode,NPCode,DemComp,sCompName;
	date backdate,trdate,AnnDemDate,FrontDate;
	val basesum, middleitprice,basesumprice,LTd;
	vector integer Mon;
	record CUVc CUr;
	vector val brandleadtime;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	longint quant, INq, k;
	array string 255 INCode,arBR;
	vector string 255 INmatstrv, CalculatedLeadTime,MonName,vItemComp;
	vector integer arComp, YearMonSep;
	vector boolean vDemComp, SalesThrYf, SalesOneYf;
	record UserVc USr;
	boolean CompItemf;
	
	
	
	oldcomp = CurrentCompany;
	
	
	for (i=1;i<29;i=i+1)begin
		vDemComp[i] = false;
	end;
	
	
	
	USr.Code = CurrentUser;
	if(ReadFirstMain(USr,1,true))then begin
		if(nonblank(USr.DemandPlannComp))then begin
			ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			while (nonblank(DemComp)) begin
				vDemComp[StringToInt(DemComp)] = true;
				ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			end; 
		end else begin
			vDemComp[CurrentCompany] = true;
		end;
	end;
	

	
	INq = 0;
	
	startreportnoheaderjob("Extended Data of Sales");
		
		
		
		resetloop(INr);
		INr.Code = "";
		
		BlockLoad(Compb);
		compmtrw = matrowcnt(Compb);
		for(y=2;y>=0;y=y-1)begin
			if(y==0)then begin
				trdate = currentdate;
				trdate.day = 1;
				trdate.month = 12;
			end else begin
				trdate = addyear(currentdate,-y);
				trdate.day = 1;
				trdate.month = 12;
			end;
			backdate = AddYear(CurrentDate,-y);
			backdate.month = 1;
			backdate.day = 1;
			
			
			i = 1;
			while(trdate>=backdate)begin
				Mon[trdate] = i;
				i=i+1;
				trdate = addmonth(trdate,-1);
				trdate.day = 1;
			end;
			Year = GetYear(backdate);
			YearMonSep [Year] = i - 1;
			/*startformat(15);
				outstring(0,0,"____________________________________________________________YEAR " & GetYear(backdate) & "_____________________________________________________________________________",false);
			endformat;
			startformat(15);
				outstring(0,0,"Item ID",false);
				outstring(0,0,"January",false);
				outstring(0,0,"February",false);
				outstring(0,0,"March",false);
				outstring(0,0,"April",false);
				outstring(0,0,"May",false);
				outstring(0,0,"June",false);
				outstring(0,0,"July",false);
				outstring(0,0,"August",false);
				outstring(0,0,"Sept.",false);
				outstring(0,0,"Oct.",false);
				outstring(0,0,"Nov.",false);
				outstring(0,0,"Dec.",false);
			endformat;*/
			

			
			
		
			for (j=0;j<compmtrw;j=j+1)begin
				compf = true;
				if(RepSpec.flags[1]==0)then begin
					j=compmtrw;
					matrowget(Compb,CurrentCompany-1,Comprw);
					sCompName = Comprw.CompName;
				end else begin
					matrowget(Compb,j+1,Comprw);
					if(Comprw.ActiveStatus==0 and ((j+1)!=32))then begin
						if(RepSpec.flags[1]==2 and vDemComp[j+1])then begin
							SetCompany(j+1,false);
						end else begin
							if(RepSpec.flags[1]==1)then begin
								SetCompany(j+1,false);
							end else begin
								compf = false;
							end;
						end;
					end else begin
						compf = false;
					end;
				end;
				resetloop(INr);
				INr.Code = "";
				while(loopmain(INr,1,compf))begin
					testf = true;
					if(INr.Terminated==1)then begin testf = false; end;
					//if(nonblank(RepSpec.f1) and !setinset(RepSpec.f1,INr.DispGroups))then begin testf = false; end; 
					if(nonblank(RepSpec.f1) and RepSpec.f4!=INr.BPIBrand)then begin testf = false; end;
					if(nonblank(RepSpec.f2) and !setinset(RepSpec.f2,INr.DispGroups))then begin testf = false; end;
					if(nonblank(RepSpec.f3) and !setinset(RepSpec.f3,INr.DispGroups))then begin testf = false; end;
					if(nonblank(RepSpec.f4) and RepSpec.f4!=INr.Recepy)then begin testf = false; end;
					if(nonblank(RepSpec.f5) and RepSpec.f5!=INr.BPIGroup)then begin testf = false; end;
					if(nonblank(RepSpec.f6) and RepSpec.f6!=INr.BPISubGroup)then begin testf = false; end;
					if(RepSpec.flags[3]==1 and (INr.ItemCat=="D" or INr.OutOfOrder==1))then begin testf = false; end;
					if(setinset("30",INr.DispGroups))then begin testf = false; end;
					if(setinset("31",INr.DispGroups))then begin testf = false; end;
					if(setinset("32",INr.DispGroups))then begin testf = false; end;
					if(setinset("33",INr.DispGroups))then begin testf = false; end;
					if(setinset("34",INr.DispGroups))then begin testf = false; end;
					if(setinset("35",INr.DispGroups))then begin testf = false; end;
					if(INr.ItemCat=="O" or INr.ItemCat=="D")then begin testf = false; end;
					
					
					if(INr.ConsgType!=0)then begin
						testf = false;
					end;
					
					
					
					
					if(testf)then begin
						
						if(y==0)then begin
							FrontDate = currentdate;
							FrontDate.day = 31;
							FrontDate.month = 12;
						end else begin
							FrontDate = addyear(currentdate,-y);
							FrontDate.day = 31;
							FrontDate.month = 12;
						end;
						
						IHr.ArtCode = INr.Code;
						IHr.TransDate = FrontDate;
						MonSep = 1;
						basesumprice = 0;
						IVqty = 0;
						TrHs = true;
						quant = 0;
						while (loopbackkey("ArtCode",IHr,2,TrHs)) begin
							if(IHr.ArtCode!=INr.Code)then begin TrHs = false; end;
							if(IHr.TransDate<backdate)then begin TrHs = false; end;
							INCodef = true;
							for (k=0;k<INCode.length;k=k+1)begin
								if(INCode[k]==INr.Code or blank(INr.Code))then begin INCodef = false; k = INq + 1; end;
							end;
							
							if(INCodef)then begin
								INCode[INq] = INr.Code;
								INq = INq + 1;
							end;
							if(IHr.FileName=="IVVc" and TrHs)then begin
							IVr.SerNr = IHr.TransNr;
								if(readfirstmain(IVr,1,true))then begin
									CustCodef = true;
									if(setinset("FOB",IVr.CustCode))then begin CustCodef = false; end;
									if(CustCodef)then begin
										quant = -IHr.Qty;
										trdate = IHr.TransDate;
										trdate.day = 1;
										MonSep = Mon[trdate];
										if(quant>0)then begin SalesThrYf[INr.Code] = true; end;
										if(quant>0 and Year==GetYear(currentdate))then begin SalesOneYf[INr.Code] = true; end;
										SaleMon[MonSep & INr.Code & Year] = SaleMon[MonSep & INr.Code & Year] + quant;
										if(nonblank(vItemComp[INr.Code]) and !setinset(sCompName,vItemComp[INr.Code]))then begin
											vItemComp[INr.Code] = vItemComp[INr.Code] & "," & sCompName;
										end else begin
											vItemComp[INr.Code] = sCompName;
										end;
									end;
								end;
							end;
						end;
						resetloop(IHr);
					end;
				end;
				ResetLoop(INr);
			end;
			ResetCompany (oldcomp);
			/*for (k=0;k<INq;k=k+1)begin
				MonSep = i - 1;
				startformat(15);
					outstring(0,0,INCode[k],false);
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					for (MonSep=1;MonSep<13;MonSep=MonSep+1) begin
						SaleMon[MonSep & INCode[k]] = blankval;
					end;
				endformat;
			end;*/
		end;
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Item ID",false);
			outstring(0,0,"Qty",false);
			outstring(0,0,"Month",false);
			outstring(0,0,"Quartal",false);
			outstring(0,0,"Year",false);
			outstring(0,0,"Company",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			if(RepSpec.flags[3]==0)then begin
				outstring(0,0,"Item ID",false);
				outstring(0,0,"Qty",false);
				outstring(0,0,"Month",false);
				outstring(0,0,"Quartal",false);
				outstring(0,0,"Year",false);
				outstring(0,0,"Company",false);
				outstring(0,0,"",false);
				outstring(0,0,"",false);
				outstring(0,0,"Item ID",false);
				outstring(0,0,"Qty",false);
				outstring(0,0,"Month",false);
				outstring(0,0,"Quartal",false);
				outstring(0,0,"Year",false);
				outstring(0,0,"Company",false);
				outstring(0,0,"",false);
			end;
		endformat;
	ResetCompany (oldcomp);
	
	
	for (k=0;k<INq;k=k+1) begin
		testf = false;
		if(RepSpec.flags[3]==0 and SalesThrYf[INCode[k]])then begin testf = true; end;
		if(RepSpec.flags[3]==1 and SalesOneYf[INCode[k]])then begin testf = true; end;
		if(testf)then begin
			for (MonSep=12;MonSep>0;MonSep=MonSep-1)begin
				if(MonSep>0)then begin Quart = 4; end;
				if(MonSep>3)then begin Quart = 3; end;
				if(MonSep>6)then begin Quart = 2; end;
				if(MonSep>9)then begin Quart = 1; end;
				startformat(15);
					outstring(0,0,"",false);
					outstring(0,0,"'" & INCode[k],false);
					outstring(0,0,SaleMon[MonSep & INCode[k] & Year],false);
					outstring(0,0,(13-MonSep),false);
					outstring(0,0,Quart,false);
					outstring(0,0,Year,false);
					outstring(0,0,vItemComp[INCode[k]],false);
					outstring(0,0,"",false);
					outstring(0,0,"",false);
					if(RepSpec.flags[3]==0)then begin
						outstring(0,0,"'" & INCode[k],false);
						Year = Year - 1;
						outstring(0,0,SaleMon[MonSep & INCode[k] & Year],false);
						outstring(0,0,(13-MonSep),false);
						outstring(0,0,Quart,false);
						outstring(0,0,Year,false);
						outstring(0,0,vItemComp[INCode[k]],false);
						outstring(0,0,"",false);
						outstring(0,0,"",false);
						outstring(0,0,"'" & INCode[k],false);
						Year = Year - 1;
						outstring(0,0,SaleMon[MonSep & INCode[k] & Year],false);
						outstring(0,0,(13-MonSep),false);
						outstring(0,0,Quart,false);
						outstring(0,0,Year,false);
						outstring(0,0,vItemComp[INCode[k]],false);
						outstring(0,0,"",false);
						year = year + 2;
					end;
				endformat;
			end;	
		end;
	end;
	endjob;
	
	
	
	
return;
end;








global procedure HistSaleQty2Rn(record RcVc RepSpec)
begin
	record INVc INr;
	record ItemHistVc IHr;
	record DIVc DIr;
	boolean TrHs,testf,datef,anndemaatef,compf,INCodef,CustCodef;
	record IVVc IVr;
	row IVVc IVrw;
	vector val SaleMon;
	integer pos,mtrw,y,months,i,MonSep,AnnDem,IVqty,POPlacingTime,Year,Margin,oldcomp,currcomp,compmtrw,j,CompDem,oldDemComp,brcnt,br,Quart,posdem;
	string 255 cmd,sCategory,sBrand,sType,sBrandName,BrDemPl,DeadCode,NPCode,DemComp,sCompName,lstr;
	date backdate,trdate,AnnDemDate,FrontDate;
	val basesum, middleitprice,basesumprice,LTd;
	vector integer Mon;
	record CUVc CUr;
	vector val brandleadtime;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	longint quant, INq, k;
	array string 255 INCode,arBR;
	vector string 255 INmatstrv, CalculatedLeadTime,MonName,vItemComp;
	vector integer arComp, YearMonSep;
	vector boolean vDemComp, SalesThrYf, SalesOneYf;
	record UserVc USr;
	
	
	
	oldcomp = CurrentCompany;
	
	
	for (i=1;i<29;i=i+1)begin
		vDemComp[i] = false;
	end;
	
	
	
	USr.Code = CurrentUser;
	if(ReadFirstMain(USr,1,true))then begin
		if(nonblank(USr.DemandPlannComp))then begin
			ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			while (nonblank(DemComp)) begin
				vDemComp[StringToInt(DemComp)] = true;
				ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			end; 
		end else begin
			vDemComp[CurrentCompany] = true;
		end;
	end;
	

	
	INq = 0;
	
	startreportnoheaderjob("Extended Data of Sales");
		
		
		
		resetloop(INr);
		INr.Code = "";
		
		BlockLoad(Compb);
		compmtrw = matrowcnt(Compb);
		
			/*startformat(15);
				outstring(0,0,"____________________________________________________________YEAR " & GetYear(backdate) & "_____________________________________________________________________________",false);
			endformat;
			startformat(15);
				outstring(0,0,"Item ID",false);
				outstring(0,0,"January",false);
				outstring(0,0,"February",false);
				outstring(0,0,"March",false);
				outstring(0,0,"April",false);
				outstring(0,0,"May",false);
				outstring(0,0,"June",false);
				outstring(0,0,"July",false);
				outstring(0,0,"August",false);
				outstring(0,0,"Sept.",false);
				outstring(0,0,"Oct.",false);
				outstring(0,0,"Nov.",false);
				outstring(0,0,"Dec.",false);
			endformat;*/
			

			
			
		
			for (j=0;j<compmtrw;j=j+1)begin
				compf = true;
				if(RepSpec.flags[1]==0)then begin
					j=compmtrw;
					matrowget(Compb,CurrentCompany-1,Comprw);
					sCompName = Comprw.CompName;
				end else begin
					matrowget(Compb,j,Comprw);
					if(Comprw.ActiveStatus==0 and ((j+1)!=32))then begin
						if(RepSpec.flags[1]==2 and vDemComp[j+1])then begin
							SetCompany(j+1,false);
						end else begin
							if(RepSpec.flags[1]==1)then begin
								SetCompany(j+1,false);
								sCompName = Comprw.CompName;
							end else begin
								compf = false;
							end;
						end;
					end else begin
						compf = false;
					end;
				end;
				resetloop(INr);
				INr.Code = "";
				while(loopmain(INr,1,compf))begin
					testf = true;
					if(INr.Terminated==1)then begin testf = false; end;
					//if(nonblank(RepSpec.f1) and !setinset(RepSpec.f1,INr.DispGroups))then begin testf = false; end; 
					if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin testf = false; end;
					if(nonblank(RepSpec.f2) and !setinset(RepSpec.f2,INr.DispGroups))then begin testf = false; end;
					if(nonblank(RepSpec.f3) and !setinset(RepSpec.f3,INr.DispGroups))then begin testf = false; end;
					//if(nonblank(RepSpec.f4) and RepSpec.f4!=INr.Recepy)then begin testf = false; end;
					if(nonblank(RepSpec.f5) and RepSpec.f5!=INr.BPIGroup)then begin testf = false; end;
					if(nonblank(RepSpec.f6) and RepSpec.f6!=INr.BPISubGroup)then begin testf = false; end;
					if(RepSpec.flags[3]==1 and (INr.ItemCat=="D" or INr.OutOfOrder==1))then begin testf = false; end;
					if(setinset("30",INr.DispGroups))then begin testf = false; end;
					if(setinset("31",INr.DispGroups))then begin testf = false; end;
					if(setinset("32",INr.DispGroups))then begin testf = false; end;
					if(setinset("33",INr.DispGroups))then begin testf = false; end;
					if(setinset("34",INr.DispGroups))then begin testf = false; end;
					if(setinset("35",INr.DispGroups))then begin testf = false; end;
					if(INr.ItemCat=="O" or INr.ItemCat=="D")then begin testf = false; end;
					
					
					if(INr.ConsgType!=0)then begin
						testf = false;
					end;
					
					
					
					
					if(testf)then begin
						
						
						
						
						
						
						for(y=2;y>=0;y=y-1)begin
							if(y==0)then begin
								trdate = currentdate;
								trdate.day = 1;
								trdate.month = 12;
							end else begin
								trdate = addyear(currentdate,-y);
								trdate.day = 1;
								trdate.month = 12;
							end;
							backdate = AddYear(CurrentDate,-y);
							backdate.month = 1;
							backdate.day = 1;
							
							
							i = 1;
							while(trdate>=backdate)begin
								Mon[trdate] = i;
								i=i+1;
								trdate = addmonth(trdate,-1);
								trdate.day = 1;
							end;
							Year = GetYear(backdate);
							YearMonSep [Year] = i - 1;
						
							
							
							
							if(y==0)then begin
								FrontDate = currentdate;
								FrontDate.day = 31;
								FrontDate.month = 12;
							end else begin
								FrontDate = addyear(currentdate,-y);
								FrontDate.day = 31;
								FrontDate.month = 12;
							end;
							
							IHr.ArtCode = INr.Code;
							IHr.TransDate = FrontDate;
							MonSep = 1;
							basesumprice = 0;
							IVqty = 0;
							TrHs = true;
							quant = 0;
							
						
						
						
							while (loopbackkey("ArtCode",IHr,2,TrHs)) begin
								if(IHr.ArtCode!=INr.Code)then begin TrHs = false; end;
								if(IHr.TransDate<backdate)then begin TrHs = false; end;
								INCodef = true;
								for (k=0;k<INCode.length;k=k+1)begin
									if(INCode[k]==INr.Code or blank(INr.Code))then begin INCodef = false; k = INq + 1; end;
								end;
								
								if(INCodef)then begin
									INCode[INq] = INr.Code;
									INq = INq + 1;
								end;
								if(IHr.FileName=="IVVc" and TrHs)then begin
								IVr.SerNr = IHr.TransNr;
									if(readfirstmain(IVr,1,true))then begin
										CustCodef = true;
										if(setinset("FOB",IVr.CustCode))then begin CustCodef = false; end;
										if(CustCodef)then begin
											quant = -IHr.Qty;
											trdate = IHr.TransDate;
											trdate.day = 1;
											MonSep = Mon[trdate];
											if(quant>0)then begin SalesThrYf[INr.Code] = true; end;
											if(quant>0 and Year==GetYear(currentdate))then begin SalesOneYf[INr.Code] = true; end;
											SaleMon[MonSep & INr.Code & Year] = SaleMon[MonSep & INr.Code & Year] + quant;
											if(nonblank(vItemComp[INr.Code]) and !setinset(sCompName,vItemComp[INr.Code]))then begin
												vItemComp[INr.Code] = vItemComp[INr.Code] & "," & sCompName;
											end else begin
												vItemComp[INr.Code] = sCompName;
											end;
										end;
									end;
								end;
							end;
							resetloop(IHr);
						end;
					end;
				end;
				ResetLoop(INr);
			end;
			ResetCompany (oldcomp);
			/*for (k=0;k<INq;k=k+1)begin
				MonSep = i - 1;
				startformat(15);
					outstring(0,0,INCode[k],false);
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					MonSep=MonSep-1;
					outstring(0,0,SaleMon[MonSep & INCode[k]],false);
					for (MonSep=1;MonSep<13;MonSep=MonSep+1) begin
						SaleMon[MonSep & INCode[k]] = blankval;
					end;
				endformat;
			end;*/

		
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Item ID",false);
			outstring(0,0,"Qty",false);
			outstring(0,0,"Month",false);
			outstring(0,0,"Quartal",false);
			outstring(0,0,"Year",false);
			outstring(0,0,"Company",false);
			outstring(0,0,"",false);
			outstring(0,0,"",false);
			if(RepSpec.flags[3]==0)then begin
				outstring(0,0,"Item ID",false);
				outstring(0,0,"Qty",false);
				outstring(0,0,"Month",false);
				outstring(0,0,"Quartal",false);
				outstring(0,0,"Year",false);
				outstring(0,0,"Company",false);
				outstring(0,0,"",false);
				outstring(0,0,"",false);
				outstring(0,0,"Item ID",false);
				outstring(0,0,"Qty",false);
				outstring(0,0,"Month",false);
				outstring(0,0,"Quartal",false);
				outstring(0,0,"Year",false);
				outstring(0,0,"Company",false);
				outstring(0,0,"",false);
			end;
		endformat;
	ResetCompany (oldcomp);
	
	
	for (k=0;k<INq;k=k+1) begin
		testf = false;
		if(RepSpec.flags[3]==0 and SalesThrYf[INCode[k]])then begin testf = true; end;
		if(RepSpec.flags[3]==1 and SalesOneYf[INCode[k]])then begin testf = true; end;
		if(testf)then begin
			for (MonSep=12;MonSep>0;MonSep=MonSep-1)begin
				if(MonSep>0)then begin Quart = 4; end;
				if(MonSep>3)then begin Quart = 3; end;
				if(MonSep>6)then begin Quart = 2; end;
				if(MonSep>9)then begin Quart = 1; end;
				startformat(15);
					outstring(0,0,"",false);
					outstring(0,0,"'" & INCode[k],false);
					outstring(0,0,SaleMon[MonSep & INCode[k] & Year],false);
					outstring(0,0,(13-MonSep),false);
					outstring(0,0,Quart,false);
					outstring(0,0,Year,false);
					outstring(0,0,vItemComp[INCode[k]],false);
					outstring(0,0,"",false);
					outstring(0,0,"",false);
					if(RepSpec.flags[3]==0)then begin
						outstring(0,0,"'" & INCode[k],false);
						Year = Year - 1;
						outstring(0,0,SaleMon[MonSep & INCode[k] & Year],false);
						outstring(0,0,(13-MonSep),false);
						outstring(0,0,Quart,false);
						outstring(0,0,Year,false);
						outstring(0,0,vItemComp[INCode[k]],false);
						outstring(0,0,"",false);
						outstring(0,0,"",false);
						outstring(0,0,"'" & INCode[k],false);
						Year = Year - 1;
						outstring(0,0,SaleMon[MonSep & INCode[k] & Year],false);
						outstring(0,0,(13-MonSep),false);
						outstring(0,0,Quart,false);
						outstring(0,0,Year,false);
						outstring(0,0,vItemComp[INCode[k]],false);
						outstring(0,0,"",false);
						year = year + 2;
					end;
				endformat;
			end;	
		end;
	end;
	endjob;
	
	
	
	
return;
end;







global procedure SesonalReorderRn(record RcVc RepSpec)
begin
	record INVc INr;
	record ItemHistVc IHr;
	record ItemStatusVc ISr;
	record POVc POr;
	row POVc POrw;
	record DIVc DIr;
	boolean TrHs,testf,datef,anndemaatef,compf,INCodef,CustCodef,salesf,offlocf;
	record IVVc IVr;
	row IVVc IVrw;
	vector val QtyOnHand,QtyOnOrder,QtyBackOrder;
	integer pos,mtrw,y,months,i,MonSep,AnnDem,IVqty,POPlacingTime,Margin,oldcomp,currcomp,compmtrw,j,CompDem,oldDemComp,brcnt,br,posdem;
	string 255 cmd,sCategory,sBrand,sType,sBrandName,BrDemPl,DeadCode,NPCode,DemComp,sCompName,sGroup,lstr;
	date backdate,trdate,AnnDemDate,FrontDate;
	val basesum, middleitprice,basesumprice,LTd;
	vector integer Mon;
	record CUVc CUr;
	vector val brandleadtime;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	longint quant;
	array string 255 INCode,INCategory,INName,INBrand,ABC,Seasonal,Recepy,arBR,INGroup,XYZ;
	record ORVc ORr;
	row ORVc ORrw;
	vector string 255 INmatstrv, CalculatedLeadTime, vItemComp, vBrand, vCategory, vGroup, overloc;
	vector integer arComp;
	vector boolean vDemComp,SalesThrYf,oldflagvec;
	record UserVc USr;
	record BPICategoryVc BPICategoryr;
	record BPIBrandVc BPIBrandr;
	record BPIGroupVc BPIGroupr;
	longint k,INq,il;
	integer olcnt,lenol;

	olcnt = 0;
	overloc[olcnt] = "ÅêÄä";
	olcnt = olcnt + 1;
	overloc[olcnt] = "BRAK";
	olcnt = olcnt + 1;
	overloc[olcnt] = "MIS";
	INq = 0;
	
	BPIBrandr.Code = "";
	while(loopmain(BPIBrandr,1,true))begin
		vBrand[BPIBrandr.Code] = BPIBrandr.Name;
	end;
	resetloop(BPIBrandr);
	
	BPICategoryr.Code = "";
	while(loopmain(BPICategoryr,1,true))begin
		vCategory[BPICategoryr.Code] = BPICategoryr.Name;
	end;
	resetloop(BPICategoryr);
	
	
	BPIGroupr.Code = "";
	while(loopmain(BPIGroupr,1,true))begin
		vGroup[BPIGroupr.Code] = BPIGroupr.Name;
	end;
	resetloop(BPICategoryr);
	
	
	
	oldcomp = CurrentCompany;
	
	for (i=1;i<29;i=i+1)begin
		vDemComp[i] = false;
	end;
	
	USr.Code = CurrentUser;
	if(ReadFirstMain(USr,1,true))then begin
		if(nonblank(USr.DemandPlannComp))then begin
			ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			while (nonblank(DemComp)) begin
				vDemComp[StringToInt(DemComp)] = true;
				ExtractObj(USr.DemandPlannComp,posdem,DemComp);
			end; 
		end else begin
			vDemComp[CurrentCompany] = true;
		end;
	end;
	
	startreportnoheaderjob("Manual RO Data");
		
		
		BlockLoad(Compb);
		compmtrw = matrowcnt(Compb);
	
		
		startformat(15);
			outstring(0,0,"Item ID",false);
			outstring(0,0,"Item Name",false);
			outstring(0,0,"Item Brand",false);
			outstring(0,0,"Item Group",false);
			outstring(0,0,"Set",false);
			outstring(0,0,"ABC,E",false);
			outstring(0,0,"XYZ,S",false);
			outstring(0,0,"Qty On-Hand",false);
			outstring(0,0,"Qty On-Order",false);
			outstring(0,0,"Qty Back-Order",false);
			outstring(0,0,"Item N-Level",false);
		endformat;
		
		
		
			
		for (j=0;j<compmtrw;j=j+1)begin
			compf = true;
			if(RepSpec.flags[1]==0)then begin
				j=compmtrw;
				matrowget(Compb,currentcompany-1,Comprw);
				sCompName = Comprw.CompName;
			end else begin
				matrowget(Compb,j,Comprw);
				if((Comprw.ActiveStatus==0 and ((j+1)!=32)))then begin
					sCompName = Comprw.CompName;
					if(RepSpec.flags[1]==2 and vDemComp[j+1])then begin
						SetCompany(j+1,false);
					end else begin
						if(RepSpec.flags[1]==1)then begin
							SetCompany(j+1,false);
						end else begin
							compf = false;
						end;
					end;
				end else begin
					compf = false;
				end;
			end;

			ORr.SerNr = -1;
			while (loopmain(ORr,1,true)) begin
				if(ORr.ShipMark==0 and ORr.InvMark>0)then begin
					mtrw = matrowcnt(ORr);
					for (y=0;y<mtrw;y=y+1) begin
						matrowget(ORr,y,ORrw);
						if(ORrw.Shipd2<1 and ORrw.Invd>0)then begin
							QtyBackOrder[ORrw.ArtCode] = QtyBackOrder[ORrw.ArtCode] + ORrw.Invd - ORrw.Shipd2;
						end;
					end;
				end;
			end;
			
			resetloop(ORr);
			
			backdate = addyear(currentdate,-3);
			
			
			resetloop(INr);
			INr.Code = "";
			while(loopmain(INr,1,compf))begin
				testf = true;
				if(INr.Terminated==1)then begin testf = false; end;
				if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand)then begin testf = false; end;
				if(nonblank(RepSpec.f5) and RepSpec.f5!=INr.BPIGroup)then begin testf = false; end;
				if(nonblank(RepSpec.f6) and RepSpec.f6!=INr.BPISubGroup)then begin testf = false; end;
				if(RepSpec.flags[3]==1 and (INr.ItemCat=="D" or INr.OutOfOrder==1))then begin testf = false; end;
				if(setinset("30",INr.DispGroups))then begin testf = false; end;
				if(setinset("31",INr.DispGroups))then begin testf = false; end;
				if(setinset("32",INr.DispGroups))then begin testf = false; end;
				if(setinset("33",INr.DispGroups))then begin testf = false; end;
				if(setinset("34",INr.DispGroups))then begin testf = false; end;
				if(setinset("35",INr.DispGroups))then begin testf = false; end;
				if(INr.ConsgType!=0)then begin
					testf = false;
				end;
				
				
				if(testf)then begin
					salesf = false;
					TrHs = true;
					IHr.ArtCode = INr.Code;
					IHr.TransDate = currentdate;
					while (loopbackkey("ArtCode",IHr,2,TrHs)) begin
						if(IHr.ArtCode!=INr.Code)then begin TrHs = false; end;
						if(IHr.TransDate<backdate)then begin TrHs = false; end;
						if(IHr.FileName=="IVVc" and TrHs)then begin
							salesf = true;
							TrHs = false;
						end;
					end;
					resetloop(IHr);
					if(!salesf)then begin
						testf = false;
					end else begin
						oldflagvec[INr.Code] = true;
					end;
				end;
				
				
				if(testf)then begin
					pos = 0;
					sBrand = vBrand[INr.BPIBrand];
					if(blank(sBrand))then begin
						sBrand = INr.BPIBrand;
					end;
					sCategory = vCategory[INr.BPICategory];
					if(blank(sCategory))then begin
						sCategory = INr.BPICategory;
					end;
					sGroup = vGroup[INr.BPIGroup];
					if(blank(sGroup))then begin
						sGroup = INr.BPIGroup;
					end;
					sBrandName = "";
					ExtractObj(INr.DispGroups,pos,cmd);
					while (nonblank(cmd)) begin
						DIr.Code = cmd;
						if(readfirstmain(DIr,1,true))then begin
							if(DIr.CType=="BRAND")then begin 
								//sBrand = DIr.Code; 
								//sBrandName = DIr.Name;
							end;
							//if(DIr.CType=="CATEGORY")then begin sCategory = DIr.Code; end;	
							if(DIr.CType=="TYPE")then begin sType = DIr.Code; end;	
						end;
						ExtractObj(INr.DispGroups,pos,cmd);
					end;
					INCodef = true; 
					for (k=0;k<INq;k=k+1)begin
						if(INCode[k]==INr.Code)then begin 
							INCodef = false; 
							if(blank(INName[k]))then begin INName[k] = INr.Name; end;
							if(blank(INBrand[k]))then begin INBrand[k] = sBrand; end;
							if(blank(ABC[k]))then begin ABC[k] = INr.ItemCat; end;
							if(blank(XYZ[k]))then begin XYZ[k] = INr.SubItemCat; end;
							if(blank(Seasonal[k]))then begin Seasonal[k] = INr.TypeSeasNeeds; end;
							if(blank(INCategory[k]))then begin INCategory[k] = sCategory; end;
							if(blank(INGroup[k]))then begin INGroup[k] = sGroup; end;
							if(blank(Recepy[k]))then begin Recepy[k] = INr.Recepy; end;
							k = INq + 1; 
						end;
					end;
					
					
					if(INCodef)then begin
						INCode[INq] = INr.Code;
						INName[INq] = INr.Name;
						INBrand[INq] = sBrand;
						INGroup[INq] = sGroup;
						ABC[INq] = INr.ItemCat;
						XYZ[INq] = INr.SubItemCat;
						Seasonal[INq] = INr.TypeSeasNeeds;
						INCategory[INq] = sCategory;
						Recepy[INq] = INr.Recepy;
						if(nonblank(vItemComp[INr.Code]) and !setinset(sCompName,vItemComp[INr.Code]))then begin
							vItemComp[INr.Code] = vItemComp[INr.Code] & "," & sCompName;
						end else begin
							vItemComp[INr.Code] = sCompName;
						end;
						INq = INq + 1;
					end;
					ISr.Code = INr.Code;
					TrHs = true;
					while (LoopMain(ISr,1,TrHs)) begin
						if(ISr.Code==INr.Code)then begin 
							offlocf = false;
							lstr = "";
							lstr = ISr.Location;
							lenol = 0;
							for(il=0;il<=olcnt;il=il+1)begin
								lenol = len(overloc[il]);
								for(y=0;y<=(len(lstr)-lenol);y=y+1)begin
									if(overloc[il]==UpperCase(mid(lstr,y,lenol)))then begin
										offlocf = true;
									end;
								end;
							end;
							
							if(ISr.Location==";;;")then begin offlocf = true; end;
							if(!offlocf)then begin
								QtyOnHand[INr.Code] = QtyOnHand[INr.Code] + ISr.Instock;
								QtyOnOrder[INr.Code] = QtyOnOrder[INr.Code] + ISr.POQty;
							end;
						end else begin
							TrHs = false;
						end;
					end;
					ResetLoop(ISr);
				end;
			end;
			ResetLoop(INr);
		end;
		ResetCompany (oldcomp);
		for (k=0;k<INq;k=k+1)begin
			if(oldflagvec[INCode[k]])then begin
				startformat(15);
					outstring(0,0,"'" & INCode[k],false);
					outstring(0,0,INName[k],false);
					outstring(0,0,INBrand[k],false);
					outstring(0,0,INGroup[k],false);
					outstring(0,0,Recepy[k],false);
					outstring(0,0,ABC[k],false);
					outstring(0,0,XYZ[k],false);
					outstring(0,0,QtyOnHand[INCode[k]],false);
					outstring(0,0,QtyOnOrder[INCode[k]],false);
					outstring(0,0,QtyBackOrder[INCode[k]],false);
					outstring(0,0,"",false);
				endformat;
			end;
		end;

	endjob;
	
return;
end;

procedure MySortStringArray(var array string astr,integer cnt)
begin
	integer i,j;
	string 100 tmp1,tmp2;
	
	if(cnt>1)then begin
		for(j=0;j<cnt;j=j+1)begin
			for(i=0;i<cnt-1;i=i+1)begin
				if(uppercase(astr[i])>uppercase(astr[i+1]))then begin
					tmp1 = astr[i];
					tmp2 = astr[i+1];
					astr[i] = tmp2;
					astr[i+1] = tmp1;
				end;
			end;
		end;
	end;
		

return;
end;

global procedure OldGetItemHistRn()
begin
	record INVc INr;
	record RhistVc RHr;
	record CompaniesBlock CBr;
	row CompaniesBlock CBrw;
	integer i,rwcnt,j,acnt,pos;
	string 200 tstr,brand,class;
	vector integer countdata;
	array string 100 aind;
	date ddd;
	record DIVc DIr;
	area aitems;
	
	
	blockload(CBr);
	For(i=0;i<matrowcnt(CBr);i=i+1) begin
		matrowget(CBr,i,CBrw);
	  if(i>2)then begin
	  	if(CompanyIsJWLikeCompany(i+1)==false)then begin
	  		setcompany(i+1,true);
	  		resetloop(INr);
	  		INr.Code = "";
	  		while(loopmain(INr,1,true))begin
	  			tstr = BuildRecordIdStr(INr,currentcompany);
	  			RHr.RecidStr = tstr;
					if(ReadFirstKey("RecidStr",RHr,1,true)) then begin
						if(RHr.TransDate>=stringtodate("31/5/2016"))then begin
							pos = 0;
							class = "";
							brand = "";
							ExtractObj(INr.DispGroups,pos,class);
							while(nonblank(class))begin
								DIr.Code = class;
								readfirstmain(DIr,1,true);
								if(DIr.CType=="BRAND")then begin
									brand = DIr.Name;
								end;
								ExtractObj(INr.DispGroups,pos,class);
							end;
							addtexttoarea(CBrw.CompName & chr(9) & INr.Code & chr(9) & brand & chr(9) & INr.Name & chr(13) & chr(10),aitems);
						end;
						//ddd = RHr.TransDate;
						//countdata[ddd.Year & "/" & ddd.Month] = countdata[ddd.Year & "/" & ddd.Month] + 1;
					end;
	  		end;
	  		
	  		logtext(0,"CompanyNr " & CBrw.CompName);
				writeareatofile(aitems,"Items_" & CBrw.CompName & ".txt",0);
				setareazerosize(aitems);
	  		
	  		/*logtext(0,"CompanyNr " & CBrw.CompName);
	  		GetVectorTags(countdata,aind);
	  		acnt = aind.length;
	  		MySortStringArray(aind,acnt);
				For(j=0;j<acnt;j=j+1) begin
					logtext(0,aind[j] & " _ " & countdata[aind[j]]);
				end; 
				ClearVector(countdata);
	  		*/
	  	end;
	  end else begin
	  	setcompany(i+1,true);
	  	resetloop(INr);
			INr.Code = "";
			while(loopmain(INr,1,true))begin
				tstr = BuildRecordIdStr(INr,currentcompany);
				RHr.RecidStr = tstr;
				if(ReadFirstKey("RecidStr",RHr,1,true)) then begin
					if(RHr.TransDate>=stringtodate("31/5/2016"))then begin
						pos = 0;
						class = "";
						brand = "";
						ExtractObj(INr.DispGroups,pos,class);
						while(nonblank(class))begin
							DIr.Code = class;
							readfirstmain(DIr,1,true);
							if(DIr.CType=="BRAND")then begin
								brand = DIr.Name;
							end;
							ExtractObj(INr.DispGroups,pos,class);
						end;
						addtexttoarea(CBrw.CompName & chr(9) & INr.Code & chr(9) & brand & chr(9) & INr.Name & chr(13) & chr(10),aitems);
					end;
					//ddd = RHr.TransDate;
					//countdata[ddd.Year & "/" & ddd.Month] = countdata[ddd.Year & "/" & ddd.Month] + 1;
				end;
			end;
			
			logtext(0,"CompanyNr " & CBrw.CompName);
			writeareatofile(aitems,"Items_" & CBrw.CompName & ".txt",0);
			setareazerosize(aitems);
			
			//GetVectorTags(countdata,aind);
			//acnt = aind.length;
	  	//MySortStringArray(aind,acnt);
			/*For(j=0;j<acnt;j=j+1) begin
				logtext(0,aind[j] & " _ " & countdata[aind[j]]);
			end;*/ 
			//ClearVector(countdata);
	  end;
	end;
	resetcompany(1);


return;
end;


global procedure GetItemHistRn()
begin
	record INVc INr;
	record RhistVc RHr;
	record CompaniesBlock CBr;
	row CompaniesBlock CBrw;
	integer i,rwcnt,j,acnt,pos;
	string 200 tstr,brand,class,model;
	vector integer countdata;
	array string 100 aind;
	date ddd;
	record DIVc DIr;
	area aitems;
	record ItemStatusVc ISr;
	record ItemHistVc IHr;
	boolean testf,testf1;
	vector boolean jwitemfnd,grfound;
	
	
	blockload(CBr);
	For(i=0;i<matrowcnt(CBr);i=i+1) begin
		matrowget(CBr,i,CBrw);
	  if(true)begin
	  	setcompany(i+1,true);
	  	addtexttoarea("Company" & chr(9) & "ItemCode" & chr(9) & "Brand" & chr(9) & "Model/Collection" & chr(9) & "Name" & chr(9) & "InStock" & chr(9) & "LastStockHistDate" & chr(13) & chr(10),aitems);
	  	resetloop(INr);
			INr.Code = "";
			while(loopmain(INr,1,true))begin
				testf1 = true;
				if(blank(INr.BPIGroup))then begin
					if(CompanyIsJWLikeCompany(i+1))then begin
						if(jwitemfnd[INr.Code])then begin
							testf1 = false;
						end;
					end;
				end;
				if(blank(INr.BPISubGroup) and testf1)then begin
					testf = false;
					ISr.Location = ";;;";
					ISr.Code = INr.Code;
					if(readfirstmain(ISr,2,true) and ISr.Instock>0)then begin
						testf = true;
					end;
					if(testf==false)then begin
						IHr.TransDate = currentdate;
						IHr.ArtCode = INr.Code;
						IHr.FileName = "IVVc";
						readlastkey("FNArtCode",IHr,2,false)begin
							if(IHr.ArtCode==INr.Code)then begin
								if(IHr.TransDate>=stringtodate("1/6/2016"))then begin
									testf = true;
								end;
							end;
						end;
					end;
					if(testf)then begin
						if(grfound[INr.Code & "_" & INr.Name])then begin
							testf = false;
						end else begin
							grfound[INr.Code & "_" & INr.Name] = true;
						end;
					end;
					if(testf)then begin
						
						if(CompanyIsJWLikeCompany(i+1))then begin
							jwitemfnd[INr.Code]=true;
						end;
						
						pos = 0;
						class = "";
						brand = "";
						model = "";
						ExtractObj(INr.DispGroups,pos,class);
						while(nonblank(class))begin
							DIr.Code = class;
							readfirstmain(DIr,1,true);
							if(DIr.CType=="BRAND")then begin
								brand = DIr.Name;
							end;
							if(DIr.CType=="MODEL")then begin
								model = DIr.Name;
							end;
							ExtractObj(INr.DispGroups,pos,class);
						end;
						addtexttoarea(CBrw.CompName & chr(9) & INr.Code & chr(9) & brand & chr(9) & model & chr(9) & INr.Name & chr(9) & ISr.Instock & chr(9) & IHr.TransDate & chr(13) & chr(10),aitems);
					end;
				end;
			end;
			
			logtext(0,"CompanyNr " & CBrw.CompName);
			writeareatofile(aitems,"BlankItems_" & CBrw.CompName & ".txt",0);
			setareazerosize(aitems);
	  end;
	end;
	resetcompany(1);


return;
end;

global procedure GetItemHistRn1()
begin
	record INVc INr;
	record RhistVc RHr;
	record CompaniesBlock CBr;
	row CompaniesBlock CBrw;
	integer i,rwcnt,j,acnt,pos;
	string 200 tstr,brand,class,model;
	vector integer countdata;
	array string 100 aind;
	date ddd;
	record DIVc DIr;
	area aitems;
	record ItemStatusVc ISr;
	record ItemHistVc IHr;
	boolean testf,testf1;
	vector boolean jwitemfnd,grfound;
	
	
	blockload(CBr);
	For(i=0;i<matrowcnt(CBr);i=i+1) begin
		matrowget(CBr,i,CBrw);
	  if(true)begin
	  	setcompany(i+1,true);
	  	addtexttoarea("Company" & chr(9) & "ItemCode" & chr(9) & "Brand" & chr(9) & "Model/Collection" & chr(9) & "Name" & chr(9) & "InStock" & chr(9) & "LastStockHistDate" & chr(13) & chr(10),aitems);
	  	resetloop(INr);
			INr.Code = "";
			while(loopmain(INr,1,true))begin
				testf1 = true;
				if(nonblank(INr.BPIGroup))then begin
					if(CompanyIsJWLikeCompany(i+1))then begin
						if(jwitemfnd[INr.Code])then begin
							testf1 = false;
						end else begin
							jwitemfnd[INr.Code]=true;
						end;
					end;
				end;
				if(nonblank(INr.BPIBrand) and testf1)then begin
					testf = true;
					
					if(testf)then begin
						if(grfound[INr.Code & "_" & INr.Name])then begin
							testf = false;
						end else begin
							grfound[INr.Code & "_" & INr.Name] = true;
						end;
					end;
					if(testf)then begin
						addtexttoarea(CBrw.CompName & chr(9) & INr.Code & chr(9) & brand & chr(9) & model & chr(9) & INr.Name & chr(9) & ISr.Instock & chr(9) & IHr.TransDate & chr(13) & chr(10),aitems);
					end;
				end;
			end;
			
			logtext(0,"CompanyNr " & CBrw.CompName);
	  end;
	end;
	resetcompany(1);
	logtext(0,"CompanyNr " & CBrw.CompName);
	writeareatofile(aitems,"AllFilesWithClass.txt",0);
	setareazerosize(aitems);

return;
end;

global procedure GlobOrdPORn(record RcVc RepSpec)
begin
	integer oldcomp,i,j,k;
	record POVc POr;
	row POVc POrw;
	row PUVc PUrw;
	record PUVc PUr;
	record INVc INr;
	boolean TrHs,testf;
	record ItemHistVc IHr;
	date outin;
	vector string 255 cat;
	record BtrxColourVc BClr;
	record BtrxMaterialVc BMr;
	record GlobalItemVc GIr;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	string 255 filename,tstr,inrcode;
	
	BClr.Code = "";
	while(LoopMain(BClr,1,true)) begin
		cat[BClr.Code] = BClr.Name;
	end;
	
	BMr.Code = "";
	while(LoopMain(BMr,1,true)) begin
		cat[BMr.Code] = BMr.Name;
	end;
	
	startreportnoheaderjob("");
	oldcomp = currentcompany;
	startformat(15);
			outstring(0,0,"çÓÏÂ Á‡Í‡Á‡",false);
			outstring(0,0,"Ñ‡Ú‡ Á‡Í‡Á‡",false);
			outstring(0,0,"ç‡ËÏ. ÔÓÒÚ.",false);
			outstring(0,0,"ÍÓÏÔ‡ÌËﬂ",false);	
			outstring(0,0,"äÓ‰ ÚÓ‚‡‡",false);
			outstring(0,0,"ÅÂÌ‰",false);
			outstring(0,0,"ç‡Á‚‡ÌËÂ",false);
			outstring(0,0,"äÓÎÎÂÍˆËﬂ",false);
			outstring(0,0,"å‡ÚÂË‡Î",false);
			outstring(0,0,"ñ‚ÂÚ",false);
			outstring(0,0,"äÓÎ-‚Ó",false);		
			outstring(0,0,"ñÂÌ‡",false);	
			outstring(0,0,"Ñ‡Ú‡ ÔÓÒÚÛÔÎÂÌËﬂ",false);	
			outstring(0,0,"Ñ‡Ú‡ ÒÓÁ‰‡ÌËﬂ",false);				
	endformat;
	BlockLoad(Compb);
	MatRowGet(Compb,currentcompany-1,Comprw);
	
	for(i=1;i<29;i=i+1) begin
		setcompany(i,false);
		POr.SerNr = "";
		TrHs=true;
		while(LoopMain(POr,1,true)) begin
			if(POr.TransDate>RepSpec.sStartDate and POr.TransDate<RepSpec.sEndDate) then begin
				  for(j=0;j<matrowcnt(POr);j=j+1) begin
						matrowget(POr,j,POrw);
						testf = false;
						INr.Code = POrw.ArtCode;
						if(ReadFirstMain(INr,1,true)) then begin
							GIr.Code = INr.GlobalArtCode;
							if(ReadFirstMain(GIr,1,true)) then begin end;
							startformat(15);
							outstring(0,0,POr.SerNr,false);
							outstring(0,0,POr.TransDate,false);
							outstring(0,0,POr.Addr0,false);
							outstring(0,0,GetCompanyShortCode(i),false);
							outstring(0,0,INr.Code,false);
							outstring(0,0,BPICodeToName(INr.BPIBrand),false);
							outstring(0,0,INr.Name,false);
							outstring(0,0,BPICodeToName(INr.BPICollection),false);
							outstring(0,0,cat[GIr.BPIMaterial],false);
							outstring(0,0,cat[GIr.BTRxProdColour],false);
							outstring(0,0,POrw.Quant,false);
							outstring(0,0,POrw.Price,false);
							PUr.PONr = POr.SerNr;
							if(readfirstKey("PONr",PUr,1,true)) then begin
								for(k=0;k<matrowcnt(PUr);k=k+1) begin
									matrowget(PUr,k,PUrw);
									if(PUrw.ArtCode==INr.Code) then begin
										testf = true;
									end;
									if(testf) then begin
										outin = PUr.TransDate;
									end else begin 
										outin = POr.PlanShip;
									end;
								end;
							end else begin
								outin = POr.PlanShip;
							end;	
							outstring(0,0,outin,false);
							IHr.ArtCode = INr.Code;
							if(ReadFirstKey("ArtCode",IHr,1,true)) then begin
								outstring(0,0,IHr.TransDate,false)
							end else begin
								outstring(0,0,POr.TransDate,false)
							end;
							inrcode = INr.Code;
							if (fileexists("webcust/" & Comprw.ShortName & "/" & inrcode & ".jpg")) then begin
								filename = "webcust/" & Comprw.ShortName & "/" & inrcode & ".jpg";
							end;
							if (fileexists("webcust/" & Comprw.ShortName & "/" & inrcode & ".png")) then begin
								filename = "webcust/" & Comprw.ShortName & "/" & inrcode & ".png";
							end;
							FindAndStoreINVcImgLink(INr,currentcompany,tstr,filename);
							if(nonblank(tstr))then begin
								tstr = right(tstr,len(tstr)-7);
								tstr ="idhansa.italdizain.az:8033" & tstr;
								outstring(0,0,tstr,false);
							end else begin
								outstring(0,0,"<td>Image not found</td>",false);
							end;
							endformat;
						end;	
					end;	
			end;		
		end;
		ResetLoop(POr);
	end;	
	setcompany(oldcomp,false);
	endjob;
return;	
end;




global procedure ItemCodeRn(record RcVc RepSpec)
begin
	integer oldcomp,i,j,k;
	record POVc POr;
	row POVc POrw;
	row PUVc PUrw;
	record PUVc PUr;
	record INVc INr;
	boolean TrHs,testf;
	record ItemHistVc IHr;
	String 255 lastcode;
	date outin;
	
	startreportnoheaderjob("");
	startformat(15);
		outstring(0,0,"ÑÛ·ÎËÛ˛˘ËÂÒﬂ 20 ÒËÏ‚ÓÎÓ‚",false);
		outstring(0,0,"äÓÎË˜ÂÒÚ‚Ó ÒËÏ‚ÓÎÓ‚",false);
		outstring(0,0,"Ñ‚ËÊÂÌËÂ ÔÓ ÚÓ‚‡‡Ï",false);
	endformat;
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(left(lastcode,20)==left(INr.Code,20))then begin
			startformat(15);
				outstring(0,0,INr.Code,false);
				outstring(0,0,len(INr.Code),false);
			IHr.ArtCode = INr.Code;
			if(ReadFirstKey("ArtCode",IHr,1,false))then begin
				if(IHr.ArtCode==INr.Code)then begin
					outstring(0,0,IHr.ArtCode & "(" & IHr.FileName & ")",false);
				end;
			end;
			endformat;
		end;
		lastcode = INr.Code;
	end;
	ResetLoop(INr);
	endjob;
return;	
end;
