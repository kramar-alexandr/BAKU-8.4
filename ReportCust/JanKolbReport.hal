//server-only
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode); //Edit***************************Sasha2,14:21 07.05.2015
external function val AbsoluteVal(val); //Edit***************************Sasha2,15:31 07.05.2015
external procedure ExtractObj(string,var Integer,var string); //Edit***************************Sasha2,11:56 08.05.2015
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val); //Edit***************************Sasha2,17:27 08.05.2015
external procedure LogProcTime(string,longint);

//Edit***************************Sasha2,12:42 07.05.2015 {
procedure CollectBrands(var string classlist)
begin
  record DIVc Dir;
  boolean testf;
    
    classlist = "";
    Dir.Code = "";
    while (LoopMain(Dir,1,true)) begin
      testf = true;
      if (Dir.CType!="BRAND") then begin testf = false; end;
      if (testf) then begin
        classlist = classlist & Dir.Code & ",";
      end;
    end;
    
  return;
end;


procedure CollectNewBrands(var string classlist)
begin
  record BPIBrandVc Brandr;
  boolean testf;
    
    classlist = "";
    Brandr.Code = "";
    while (LoopMain(Brandr,1,true)) begin
      classlist = classlist & Brandr.Code & ",";
    end;
    
  return;
end;

procedure Collectfullstocktotal(date ed,string location,var val fullstocktot)
begin
  record ItemHistVc IHr;
  boolean TrHs,testf;
		
		fullstocktot = 0;
		TrHs = true;
		if (NonBlank(location)) then begin
		  IHr.Location = location;
		end;
		resetloop(IHr);
		while(loopkey("SerNrPerLoc",IHr,1,TrHs)) begin
		  testf = true;
		  if(IHr.TransDate>ed)then begin testf = false; end;
		  if(nonblank(location) and location!=IHr.Location) then begin TrHs = false; testf = false; end; 
  		if (IHr.StockAffectf==0) then begin testf = false; end;
  		if (testf) then begin
  		  if (IHr.Qty>0) then begin
  		    fullstocktot = fullstocktot + IHr.TotCostPrice;
  		  end else begin
  		    fullstocktot = fullstocktot - IHr.TotCostPrice;
  		  end;
  		end;
		end;
  
return;
end; 


procedure CollectTurnOverTotals(var val totturnover,var val prtotturnover,date sd,date ed,string location,string basecur,
                                var vector val totturnoverBr,var vector val prtotturnoverBr,string classlist,boolean totalsumsf,boolean brandsumf)
begin
  record IVVc IVr;
  row IVVc IVrw;
  record INVc INr;
  string 20 keyname,brand;
  boolean TrHs,testf,testbrf;
  integer keys,i,rwcnt,sign,pos;
  val fr,to1,to2,br1,br2,rate;
  vector string 20 itembrand;
  
    if (NonBlank(location)) then begin
      IVr.Location = location;
      IVr.InvDate = ed;
      keyname = "Location";
      keys = 2;
    end else begin
      IVr.InvDate = ed;
      keyname = "InvDate";
      keys = 1;
    end;
    
    TrHs = true;
    while (LoopBackKey(keyname,IVr,keys,TrHs)) begin
      testf = true;
      if (IVr.InvDate>ed) then begin testf = false; end;
      if (IVr.OKFlag==0 or IVr.Invalid!=0) then begin testf = false; end;
      if (nonblank(location) and location!=IVr.Location and keys==1) then begin testf = false; end;
      if (nonblank(location) and location!=IVr.Location and keys==2) then begin TrHs = false; testf = false; end;
      if (GetYear(IVr.InvDate)<GetYear(addyear(sd,-1))) then begin TrHs = false; testf = false; end;
      if (testf) then begin
      
        if (IVr.CurncyCode==basecur) then begin
          rate = 1;
        end else begin
          if (IVr.FrRate!=0 and IVr.ToRateB1!=0) then begin
            rate = IVr.ToRateB1/IVr.FrRate;
          end else begin
            GetFullCurncyRate(IVr.CurncyCode,IVr.InvDate,fr,to1,to2,br1,br2);
            if (fr==0 or to1==0) then begin
              rate = 1;
            end else begin
              rate = to1/fr;
            end;
          end;
        end;
        
        sign = 1;
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          sign = -1;
        end;
        if (totalsumsf) then begin
          if (GetYear(IVr.InvDate)==GetYear(ed)) then begin
            totturnover = totturnover + IVr.Sum4*rate*sign;
          end;
          if (GetYear(IVr.InvDate)==GetYear(addyear(ed,-1))) then begin
            prtotturnover = prtotturnover + IVr.Sum4*rate*sign;
          end;
        end;
        if (brandsumf) then begin
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (NonBlank(IVrw.ArtCode)) then begin
              if (Blank(itembrand[IVrw.ArtCode])) then begin
                INr.Code = IVrw.ArtCode;
                if (ReadFirstMain(INr,1,true)) then begin
                  pos = 0;
                  brand = "";
									testbrf = true;
                	ExtractObj(classlist,pos,brand);
                	while (nonblank(brand) and testbrf) begin
                	  if (setinset(brand,INr.BPIBrand)) then begin
                	    itembrand[INr.Code] = brand;
                      if (GetYear(IVr.InvDate)==GetYear(ed)) then begin
                        totturnoverBr[brand] = totturnoverBr[brand] + IVrw.Sum*rate*sign;
                      end;
                      if (GetYear(IVr.InvDate)==GetYear(addyear(ed,-1))) then begin
                        prtotturnoverBr[brand] = prtotturnoverBr[brand] + IVrw.Sum*rate*sign;
                      end;
											testbrf = false;
                	  end;
                	  ExtractObj(classlist,pos,brand);
	                end;
                end;
              end else begin
                if (GetYear(IVr.InvDate)==GetYear(ed)) then begin
                  totturnoverBr[itembrand[IVrw.ArtCode]] = totturnoverBr[itembrand[IVrw.ArtCode]] + IVrw.Sum*rate*sign;
                end;
                if (GetYear(IVr.InvDate)==GetYear(addyear(ed,-1))) then begin
                  prtotturnoverBr[itembrand[IVrw.ArtCode]] = prtotturnoverBr[itembrand[IVrw.ArtCode]] + IVrw.Sum*rate*sign;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
        
  return;
end; 

function val GetIVrowSum(record ItemHistVc IHr,string basecur)
begin
  val res,sum,tsum;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean testf;
  integer sign;
    
    res = 0;
    IVr.SerNr = IHr.TransNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      Matrowget(IVr,IHr.Row,IVrw);
      testf = true;
      if (IVrw.ArtCode!=IHr.ArtCode) then begin testf = false; end;
      if (testf) then begin
        sign = 1;
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          sign = -1;
        end;
        sum = (IVrw.Sum/IVrw.Quant)*-IHr.Qty;
        if (IVr.CurncyCode!=basecur) then begin
          if (IVr.FrRate!=0 and IVr.ToRateB1!=0) then begin
            sum = round((sum/IVr.FrRate)*IVr.ToRateB1,DefaultCurRoundOff);
          end else begin
            CurValToOtherCur(IVr.InvDate,IVr.CurncyCode,sum,basecur,tsum,DefaultCurRoundOff);
            sum = tsum;
          end;
        end;
        res = sum*sign;
      end;
    end;
  
  GetIVrowSum = res;
return;
end;
//Edit***************************Sasha2,12:42 07.05.2015 }

global 
procedure BrandsAndStockCorrelationRn(record RcVc RepSpec)
begin
	record DIVc DIr;
	record INVc INr;
	record ItemHistVc IHr;
	record CTypeVc CTyper;
	date sd,ed;
	boolean intestf;
	string 200 classlist,location; //Edit***************************Sasha2,10:56 07.05.2015
	boolean testf,TrHs,INTrHs;
	array val turnover,pertr,stocexcons,perstockexcons,stockinccons,perstockinccons;
	val totturnover,totstocexcons,totstockinccons,fullstocktot;
	array val prturnover,prpertr,prstockexcons,prperstockexcons,prstockinccons,prperstockinccons;
	vector val totturnoverBr,prtotturnoverBr;
	val prtotturnover,prtotstockexcons,prtotstockinccons,temp,accuminccons,accumexcons; //Edit***************************Sasha2,11:37 13.05.2015
	integer i,keys,pos; //Edit***************************Sasha2,10:16 08.05.2015
	record BaseCurBlock bascur; //Edit***************************Sasha2,14:58 07.05.2015
	string 20 keyname,class; //Edit***************************Sasha2,10:17 08.05.2015
	longint curtick;
	vector val ItemBrand;
	
	curtick = getcurtick();
	sd = RepSpec.sStartDate;
	ed = RepSpec.sEndDate;
	classlist = RepSpec.f1;
	location = RepSpec.f2; //Edit***************************Sasha2,10:57 07.05.2015
	
	startreportjob("Brands & Stock Correlation");
	
	//Header(0,"00",0);
	//Header(0,"01",1);
	//Header(1,"10",0);
	Header(1,"11",1);
	Header(2,"20",0);
	Header(2,"21",1);
	Header(3,"30",0);
	Header(3,"31",1);
	endheader;
	
	if (GetYear(sd)!=GetYear(ed)) then begin
	  startformat(15);
	    outstring(0,0,"Start date and end date should be within same year",false);
	  endformat;
	end;
	
	if (RepSpec.Media!=mtScreen) then begin
	  startformat(15);
  	  outstring(0,0,"Store: " & location,false);
  	endformat;
  	startformat(15);
  	  outstring(0,0,"Peroid: " & sd & ":" & ed,false);
  	endformat;
  	startformat(15);
  	  outstring(0,0,"",false);
  	endformat;
	end;
	
	BlockLoad(bascur);
	if (blank(classlist)) then begin
	  CollectNewBrands(classlist);
	end;
	CollectTurnOverTotals(totturnover,prtotturnover,sd,ed,location,bascur.BaseCur1,totturnoverBr,prtotturnoverBr,classlist,false,true); //Edit***************************Sasha2,14:34 07.05.2015
	Collectfullstocktotal(ed,location,fullstocktot);
	
	pos = 0;
	ExtractObj(classlist,pos,class);
	while (nonblank(class)) begin //class = RepSpec.f1;
  	For(i=1;i<13;i=i+1) begin
  	  turnover[i] = 0;
  	  pertr[i] = 0;
  	  stocexcons[i] = 0;
  	  perstockexcons[i] = 0;
  	  stockinccons[i] = 0;
  	  perstockinccons[i] = 0;

  	  prturnover[i] = 0;
  	  prpertr[i] = 0;
  	  prstockexcons[i] = 0;
  	  prperstockexcons[i] = 0;
  	  prstockinccons[i] = 0;
  	  prperstockinccons[i] = 0;
  	end; 
  	
  	accumexcons = 0;
  	accuminccons = 0;
					
  	//INr.DispGroups = class;
  	INr.Code = "";
  	INTrHs = true;
  	resetloop(INr);
  	while(loopmain(/*"MyDispGroups",*/INr,1,INTrHs)) begin
  		intestf = true;
  		if(nonblank(class) and class==INr.BPIBrand)then begin intestf = false; /*INTrHs = false;*/ end;
  		if(INr.Terminated>0)then begin intestf = false; end;
  		if(intestf)then begin 
  			if (NonBlank(location)) then begin
  			  IHr.ArtCode = INr.Code;
          IHr.Location = location;
          keyname = "ArtCodeLoc";
          keys = 2;
  			end else begin
  			  IHr.ArtCode = INr.Code;
          keyname = "ArtCode";
          keys = 1;
  			end;
  			TrHs = true;
  			resetloop(IHr);
  			while(loopkey(keyname,IHr,keys,TrHs)) begin
  				testf = true;
  				if(IHr.TransDate>ed)then begin testf = false; end;
  				if(IHr.ArtCode!=INr.Code)then begin TrHs = false; testf = false; end;
  				if(nonblank(location) and location!=IHr.Location and keys==1) then begin testf = false; end; //Edit***************************Sasha2,15:52 07.05.2015
  				if(nonblank(location) and location!=IHr.Location and keys==2) then begin TrHs = false; testf = false; end; //Edit***************************Sasha2,15:52 07.05.2015
  
  				if(testf and GetYear(IHr.TransDate)==GetYear(ed)) then begin
  					if(IHr.TransDate<sd)then begin
  					  if (IHr.StockAffectf!=0) then begin 
    						if(IHr.Qty>0)then begin
    							if(INr.ConsgType==1)then begin
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end else begin
    								stocexcons[getmonth(IHr.TransDate)] = stocexcons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end; 
    						end else begin
    							if(INr.ConsgType==1)then begin
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end else begin
    								stocexcons[getmonth(IHr.TransDate)] = stocexcons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end; 
    						end;
    					end;
  					end else begin 
  						if(IHr.Qty>0)then begin
  						  if (IHr.FileName=="IVVc") then begin 
  						    turnover[getmonth(IHr.TransDate)] = turnover[getmonth(IHr.TransDate)] + GetIVrowSum(IHr,bascur.BaseCur1);
  						  end; 
  							if (IHr.StockAffectf!=0) then begin 
    							if(INr.ConsgType==1)then begin
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end else begin
    								stocexcons[getmonth(IHr.TransDate)] = stocexcons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end; 
    						end;
  						end else begin
  						  if (IHr.FileName=="IVVc") then begin 
  						    turnover[getmonth(IHr.TransDate)] = turnover[getmonth(IHr.TransDate)] + GetIVrowSum(IHr,bascur.BaseCur1);
  						  end; 
  							if (IHr.StockAffectf!=0) then begin 
    							if(INr.ConsgType==1)then begin
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end else begin
    								stocexcons[getmonth(IHr.TransDate)] = stocexcons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    								stockinccons[getmonth(IHr.TransDate)] = stockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end; 
    						end;	
  						end;
  					end;
  				end;
  				
  				if(testf and GetYear(IHr.TransDate)==GetYear(addyear(ed,-1))) then begin 
  					if(IHr.TransDate<addyear(sd,-1) or IHr.TransDate>addyear(ed,-1))then begin
  					  if (IHr.StockAffectf!=0) then begin 
    					  if(IHr.Qty>0)then begin
    							if(INr.ConsgType==1)then begin
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end else begin
    								prstockexcons[getmonth(IHr.TransDate)] = prstockexcons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end; 
    						end else begin
    							if(INr.ConsgType==1)then begin
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end else begin
    								prstockexcons[getmonth(IHr.TransDate)] = prstockexcons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end; 
      					end; 
    					end;
  					end else begin
  						if(IHr.Qty>0)then begin
  						  if (IHr.FileName=="IVVc") then begin 
  						    prturnover[getmonth(IHr.TransDate)] = prturnover[getmonth(IHr.TransDate)] + GetIVrowSum(IHr,bascur.BaseCur1);
  						  end; 
    						if (IHr.StockAffectf!=0) then begin
    							if(INr.ConsgType==1)then begin
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end else begin
    								prstockexcons[getmonth(IHr.TransDate)] = prstockexcons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] + IHr.TotCostPrice;
    							end; 
    					  end;
  						end else begin
  						  if (IHr.FileName=="IVVc") then begin 
  						    prturnover[getmonth(IHr.TransDate)] = prturnover[getmonth(IHr.TransDate)] + GetIVrowSum(IHr,bascur.BaseCur1);
  						  end; 
  							if (IHr.StockAffectf!=0) then begin
    							if(INr.ConsgType==1)then begin
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end else begin
    								prstockexcons[getmonth(IHr.TransDate)] = prstockexcons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    								prstockinccons[getmonth(IHr.TransDate)] = prstockinccons[getmonth(IHr.TransDate)] - IHr.TotCostPrice;
    							end; 
    						end;
  						end; 
  					end;
  				end;
  				
  				if(testf and GetYear(IHr.TransDate)<=GetYear(addyear(ed,-2)))then begin 
					  if (IHr.StockAffectf!=0) then begin 
  					  if(IHr.Qty>0)then begin
  							if(INr.ConsgType==1)then begin
  								accuminccons = accuminccons + IHr.TotCostPrice;
  							end else begin
  								accumexcons = accumexcons + IHr.TotCostPrice;
  								accuminccons = accuminccons + IHr.TotCostPrice;
  							end; 
  						end else begin
  							if(INr.ConsgType==1)then begin
  								accuminccons = accuminccons - IHr.TotCostPrice;
  							end else begin
  								accumexcons = accumexcons - IHr.TotCostPrice;
  								accuminccons = accuminccons - IHr.TotCostPrice;
  							end; 
    					end; 
  					end;
  				end;
  				
  			end;
  		end;
  	end;	

  	For(i=1;i<13;i=i+1) begin //convert month turnover to month balance for prevoius year
  	  accumexcons = accumexcons + prstockexcons[i];
  	  prstockexcons[i] = accumexcons;
  	  accuminccons = accuminccons + prstockinccons[i];
  	  prstockinccons[i] = accuminccons;
  	end;
  	
  	For(i=1;i<13;i=i+1) begin  //convert month turnover to month balance for current year
  	  accumexcons = accumexcons + stocexcons[i];
  	  stocexcons[i] = accumexcons;
  	  accuminccons = accuminccons + stockinccons[i];
  	  stockinccons[i] = accuminccons;
  	end;
  	
  	totstocexcons = stocexcons[1];
  	totstockinccons = stockinccons[1];
  	prtotstockexcons = prstockexcons[1];
  	prtotstockinccons = prstockinccons[1];
  	For(i=2;i<13;i=i+1) begin //Collect totals
  	  totstocexcons = totstocexcons + stocexcons[i];
  	  totstockinccons = totstockinccons + stockinccons[i];
  	  prtotstockexcons = prtotstockexcons + prstockexcons[i];
  	  prtotstockinccons = prtotstockinccons + prstockinccons[i];
  	end;
  	totstocexcons = totstocexcons/12;
	  totstockinccons = totstockinccons/12;
	  prtotstockexcons = prtotstockexcons/12;
	  prtotstockinccons = prtotstockinccons/12;
  	
  	For(i=1;i<13;i=i+1) begin //Count percent ratios
  	  pertr[i] = turnover[i]/totturnoverBr[class]*100;
  	  perstockexcons[i] = stocexcons[i]/fullstocktot*100;
  	  perstockinccons[i] = stockinccons[i]/fullstocktot*100;
  	  prpertr[i] = prturnover[i]/prtotturnoverBr[class]*100;
  	  prperstockexcons[i] = prstockexcons[i]/fullstocktot*100;
  	  prperstockinccons[i] = prstockinccons[i]/fullstocktot*100;
  	end;
  	
  	startformat(15);
  	endformat;
  	startformat(15);
  	  DIr.Code = class;
  	  ReadFirstMain(Dir,1,true);
  	  outstring(0,0,Dir.CType & ": " & class,false);
  	endformat;
  	
  	startformat(15);
  		outstring(0,0,"",false);
  		outstring(0,0,"Turnover",false);
  		outstring(0,0,"",false);
  		outstring(0,0,"% from total TO",false);
  		outstring(0,0,"",false);
  		outstring(0,0,"Total Stock excl. Cons.",false);
  		outstring(0,0,"",false);
  		outstring(0,0,"% Stock excl. Cons.",false);
  		outstring(0,0,"",false);
  		outstring(0,0,"Stock incl. Consi",false);
  		outstring(0,0,"",false);
  		outstring(0,0,"% Stock incl. Cons.",false);
  		outstring(0,0,"",false);
  	endformat;
  	startformat(15);
  		outstring(0,0,"",false);
  		outstring(0,0,getyear(addyear(sd,-1)),false);
  		outstring(0,0,getyear(sd),false);
  		outstring(0,0,getyear(addyear(sd,-1)),false);
  		outstring(0,0,getyear(sd),false);
  		outstring(0,0,getyear(addyear(sd,-1)),false);
  		outstring(0,0,getyear(sd),false);
  		outstring(0,0,getyear(addyear(sd,-1)),false);
  		outstring(0,0,getyear(sd),false);
  		outstring(0,0,getyear(addyear(sd,-1)),false);
  		outstring(0,0,getyear(sd),false);
  		outstring(0,0,getyear(addyear(sd,-1)),false);
  		outstring(0,0,getyear(sd),false);
  	endformat;
  	
  	For(i=1;i<13;i=i+1) begin
  		startformat(15);
  			outstring(0,0,i,false);
  			outstring(0,0,prturnover[i],false);
  			outstring(0,0,turnover[i],false);
  			outstring(0,0,prpertr[i],false);
  			outstring(0,0,pertr[i],false);
  			outstring(0,0,prstockexcons[i],false);
  			outstring(0,0,stocexcons[i],false);
  			outstring(0,0,prperstockexcons[i],false);
  			outstring(0,0,perstockexcons[i],false);
  			outstring(0,0,prstockinccons[i],false);
  			outstring(0,0,stockinccons[i],false);
  			outstring(0,0,prperstockinccons[i],false);
  			outstring(0,0,perstockinccons[i],false);
  		endformat;
  	end;
  	
  	startformat(15);
  		outstring(0,0,"TOTAL / AVERAGE",false);
  		outstring(0,0,prtotturnoverBr[class],false);
  		outstring(0,0,totturnoverBr[class],false);
  		outstring(0,0,"",false);
  		outstring(0,0,"",false);
  		outstring(0,0,prtotstockexcons,false);
  		outstring(0,0,totstocexcons,false);
  		outstring(0,0,"",false);
  		outstring(0,0,"",false);
  		outstring(0,0,prtotstockinccons,false);
  		outstring(0,0,totstockinccons,false);
  		outstring(0,0,"",false);
  		outstring(0,0,"",false);
  		outstring(0,0,"",false);
  		outstring(0,0,"",false);
  	endformat;
  	
  	ExtractObj(classlist,pos,class);
	end;
	
	
LBrandsAndStockCorrelationRn:;	
	endjob;
	
	LogProcTime("BrandsAndStockCorrelationRn",getcurtick() - curtick);
	
return;
end;