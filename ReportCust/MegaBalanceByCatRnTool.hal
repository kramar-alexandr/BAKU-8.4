//server-only
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure GetFindCustBalance(string,LongInt,var val,var val,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,Boolean,var Boolean);
external procedure ExtractObj(string,var Integer,var string);
external function string 200 ValToMyString(val,integer);
external procedure LogProcTime(string,longint);


SetLangMode(LangRussian,"RUS",0);

global function string 255 PrepareDispGroups(string dispgroups)
begin
	string 200 res,tstr;
	integer pos;
	record DIVc DIr;
	
	pos = 0;
	ExtractObj(dispgroups,pos,tstr);
  While (nonblank(tstr)) begin
    if(nonblank(tstr))then begin
    	DIr.Code = tstr;
    	if(readfirstmain(DIr,1,true))then begin
				if (NonBlank(DIr.CCat)) then begin
	     		res = res & DIr.CCat & ",";
				end else begin
					if (DIr.CType == "SUBGROUP") then begin
						res = res & "Other,";
					end;
				end;
    	end;
    end;
    ExtractObj(dispgroups,pos,tstr);
  end;
  if(nonblank(res))then begin
		res = left(res,len(res)-1);
	end;
	
	PrepareDispGroups = res;

return;
end;



global
procedure PrintStockStat1ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands,var val totusd)
begin
	val fr,to1,to2,br1,br2;
	val BrandsBalUSDtotal,BrandsBalUSDtotalcons;
	integer i;
	array val aBrandsBalEUR,aBrandsBalEURcons;
	array val aBrandsBalCHF,aBrandsBalCHFcons;
	array val aBrandsBalUSD,aBrandsBalUSDcons;
	date curdate;
	record ItemHistVc IHr;
	boolean TrHs,testf;
	record INVc INr;
	string 10 incurncy;
	integer sign;
	integer br;
	val totrow;
	longint curtick;
	
	curtick = getcurtick();
	startformat(15);
		outstring(0,0,"1",false);
		outstring(0,0,"Остаток товара на складе (FOB)",false);
	endformat;
	
	startformat(15);
		outstring(0,0,"",false);
		outstring(0,0,"Собственный товар",false);
	endformat;
	
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(nonblank(INr.LastPurchCurncyCode))then begin
			incurncy = INr.LastPurchCurncyCode;
		end else begin
			incurncy = "USDB";
		end;
		For(i=0;i<brandscnt;i=i+1) begin
			if(setinset(aBrands[i],PrepareDispGroups(INr.DispGroups)))then begin
				br = i;
			end;
		end; 
		IHr.TransDate = "";
		IHr.ArtCode = INr.Code;
		TrHs = true;
		curdate = "";
		while(loopkey("ArtCode",IHr,2,TrHs))begin
			testf = true;
			if(setinset("30",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("31",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("32",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("33",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("34",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("35",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
			if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
			if(IHr.StockAffectf==0)then begin testf = false; end;
			if(nonblank(location) and location!=IHr.Location)then begin testf = false; end;
			
			
			if(testf)then begin
				if(IHr.Qty>=0)then begin
					sign = 1;
				end else begin
					sign = -1;
				end;	
				
				switch(IHr.ConsigStock)begin
					case 0:
						switch(IHr.CurncyCode)begin
							case"EUR":aBrandsBalEUR[br] = aBrandsBalEUR[br] + IHr.TotCostPriceCurncy * sign;
							case"CHF":aBrandsBalCHF[br] = aBrandsBalCHF[br] + IHr.TotCostPriceCurncy * sign;
							case"USD":aBrandsBalUSD[br] = aBrandsBalUSD[br] + IHr.TotCostPriceCurncy * sign;
						end;
					case 1:
						switch(IHr.CurncyCode)begin
							case"EUR":aBrandsBalEURcons[br] = aBrandsBalEURcons[br] + IHr.TotCostPriceCurncy * sign;
							case"CHF":aBrandsBalCHFcons[br] = aBrandsBalCHFcons[br] + IHr.TotCostPriceCurncy * sign;
							case"USD":aBrandsBalUSDcons[br] = aBrandsBalUSDcons[br] + IHr.TotCostPriceCurncy * sign;
						end;	
						
				end;
			
			end;
			
		end;
		resetloop(IHr);
	end;
	
	
	incurncy = "EURB";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalEUR[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalEUR[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalEUR[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "CHFB";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalCHF[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalCHF[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalCHF[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "USDB";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalUSD[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalUSD[i],false);
			BrandsBalUSDtotal = BrandsBalUSDtotal + aBrandsBalUSD[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "USDB";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"Итого " & incurncy,false);
		outstring(150,0,BrandsBalUSDtotal*fr/to1,false);
	endformat;
	totusd = totusd + BrandsBalUSDtotal*fr/to1;
	
	startformat(15);
		outstring(0,0,"1.1",false);
		outstring(0,0,"Временный ввоз",false);
	endformat;
	
	incurncy = "EURB";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalEURcons[i];
	end;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalEURcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalEURcons[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "CHFB";
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalCHFcons[i];
	end;
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalCHFcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalCHFcons[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "USDB";
	totrow = 0;
	For(i=0;i<brandscnt;i=i+1) begin
		totrow = totrow + aBrandsBalUSDcons[i];
	end;
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(0,0,totrow,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandsBalUSDcons[i],false);
			BrandsBalUSDtotalcons = BrandsBalUSDtotalcons + aBrandsBalUSDcons[i]/fr*to1;
		end; 
	endformat;
	
	incurncy = "USDB";
	GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
	startformat(15);
		outstring(0,0,"",false);
		outstring(0,0,"",false);
		outstring(150,0,BrandsBalUSDtotalcons*fr/to1,false);
	endformat;
	LogProcTime("PrintStockStat1ByCat",getcurtick() - curtick);
return;
end;

global
procedure PrintStockIn2ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	val fr,to1,to2,br1,br2;
	val BrandsPUUSDtotal,BrandsPUUSDtotalcons;
	integer i;
	array val aBrandsPUEUR,aBrandsPUEURcons;
	array val aBrandsPUCHF,aBrandsPUCHFcons;
	array val aBrandsPUUSD,aBrandsPUUSDcons;
	date curdate;
	record ItemHistVc IHr;
	boolean TrHs,testf;
	record INVc INr;
	string 10 incurncy;
	integer sign;
	integer br;
	val totrow;
	longint curtick;
	
		curtick = getcurtick();
		startformat(15);
			outstring(0,0,"2",false);
			outstring(0,0,"Приход товара (FOB)",false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(0,0,"Собственный товар",false);
		endformat;
		
		
		INr.Code = "";
		while(loopmain(INr,1,true))begin
			if(nonblank(INr.LastPurchCurncyCode))then begin
				incurncy = INr.LastPurchCurncyCode;
			end else begin
				incurncy = "USDB";
			end;
			For(i=0;i<brandscnt;i=i+1) begin
				if(setinset(aBrands[i],PrepareDispGroups(INr.DispGroups)))then begin
					br = i;
				end;
			end; 
			IHr.TransDate = "";
			IHr.ArtCode = INr.Code;
			TrHs = true;
			curdate = "";
			while(loopkey("ArtCode",IHr,2,TrHs))begin
				testf = true;
				if(setinset("30",INr.DispGroups))then begin TrHs=false; testf = false; end;
				if(setinset("31",INr.DispGroups))then begin TrHs=false; testf = false; end;
				if(setinset("32",INr.DispGroups))then begin TrHs=false; testf = false; end;
				if(setinset("33",INr.DispGroups))then begin TrHs=false; testf = false; end;
				if(setinset("34",INr.DispGroups))then begin TrHs=false; testf = false; end;
				if(setinset("35",INr.DispGroups))then begin TrHs=false; testf = false; end;
				if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
				if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
				if(IHr.StockAffectf==0)then begin testf = false; end;
				if(nonblank(location) and location!=IHr.Location)then begin testf = false; end;
			
			
				if(testf)then begin
					if(IHr.Qty>=0)then begin
						sign = 1;
					end else begin
						sign = -1;
					end;
					
					if(IHr.TransDate>=sd and IHr.FileName=="PUVc")then begin
						switch(IHr.ConsigStock)begin
							case 0:
							switch(IHr.CurncyCode)begin
								case"EUR":aBrandsPUEUR[br] = aBrandsPUEUR[br] + IHr.TotCostPriceCurncy * sign;
								case"CHF":aBrandsPUCHF[br] = aBrandsPUCHF[br] + IHr.TotCostPriceCurncy * sign;
								case"USD":aBrandsPUUSD[br] = aBrandsPUUSD[br] + IHr.TotCostPriceCurncy * sign;
							end;
							case 1:
							switch(IHr.CurncyCode)begin
								case"EUR":aBrandsPUEURcons[br] = aBrandsPUEURcons[br] + IHr.TotCostPriceCurncy * sign;
								case"CHF":aBrandsPUCHFcons[br] = aBrandsPUCHFcons[br] + IHr.TotCostPriceCurncy * sign;
								case"USD":aBrandsPUUSDcons[br] = aBrandsPUUSDcons[br] + IHr.TotCostPriceCurncy * sign;
							end;
						end;
					end;
				end;
			end;
			resetloop(IHr);
		end;
		
		
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUEUR[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUCHF[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUCHF[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUUSD[i],false);
	  		BrandsPUUSDtotal = BrandsPUUSDtotal + aBrandsPUUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsPUUSDtotal*fr/to1,false);
		endformat;
		
		startformat(15);
			outstring(0,0,"2.1",false);
			outstring(0,0,"Временный ввоз",false);
		endformat;
		
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUEURcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUEURcons[i],false);
	  		BrandsPUUSDtotalcons = BrandsPUUSDtotalcons + aBrandsPUEURcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUCHFcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUCHFcons[i],false);
	  		BrandsPUUSDtotalcons = BrandsPUUSDtotalcons + aBrandsPUCHFcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsPUUSDcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsPUUSDcons[i],false);
	  		BrandsPUUSDtotalcons = BrandsPUUSDtotalcons + aBrandsPUUSDcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsPUUSDtotalcons*fr/to1,false);
		endformat;
		LogProcTime("PrintStockIn2ByCat", getcurtick() - curtick);
return;
end;

/*global
procedure PrintStockRet46(array val aBrandsRetEUR,array val aBrandsRetCHF,array val aBrandsRetUSD,integer brandscnt)
begin
	string 10 incurncy;
	val fr,to1,to2,br1,br2;
	val BrandsRetUSDtotal;
	integer i;
	
	startformat(15);
			outstring(0,0,"4.6",false);
			outstring(0,0,"Стоимость возврата от покупателей",false);
		endformat;
		
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetEUR[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetCHF[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetUSD[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsRetUSDtotal*fr/to1,false);
		endformat;
	
return;
end;*/

global
procedure PrintStockSelRet468ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	string 10 incurncy;
	val fr,to1,to2,br1,br2;
	array val aBrandsRetEUR;
	array val aBrandsRetCHF;
	array val aBrandsRetUSD;
	val BrandsRetUSDtotal;

	array val aBrandsSelEUR;
	array val aBrandsSelCHF;
	array val aBrandsSelUSD;
	val BrandsSelUSDtotal;
	
	array val aBrandsSelEURcons;
	array val aBrandsSelCHFcons;
	array val aBrandsSelUSDcons;
	val BrandsSelUSDtotalcons;
	
	record INVc INr;
	record IVVc IVr;
	boolean TrHs,testf;
	integer i,j,mtrw,sign,br;
	record ItemHistVc IHr;
	date curdate;
	val totrow;
	longint curtick;
	
	curtick = getcurtick();
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(nonblank(INr.LastPurchCurncyCode))then begin
			incurncy = INr.LastPurchCurncyCode;
		end else begin
			incurncy = "USDB";
		end;
		For(i=0;i<brandscnt;i=i+1) begin
			if(setinset(aBrands[i],PrepareDispGroups(INr.DispGroups)))then begin
				br = i;
			end;
		end; 
		IHr.TransDate = "";
		IHr.ArtCode = INr.Code;
		TrHs = true;
		curdate = "";
		while(loopkey("ArtCode",IHr,2,TrHs))begin
			testf = true;
			if(setinset("30",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("31",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("32",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("33",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("34",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("35",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
			if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
			if(IHr.StockAffectf==0)then begin testf = false; end;
			if(nonblank(location) and location!=IHr.Location)then begin testf = false; end;
			
			if(testf)then begin
				if(IHr.Qty>=0)then begin
					sign = 1;
				end else begin
					sign = -1;
				end;			
														
				if(IHr.TransDate>=sd and IHr.FileName=="RetVc")then begin
					switch(IHr.CurncyCode)begin
						case"EUR":aBrandsRetEUR[br] = aBrandsRetEUR[br] + IHr.TotCostPriceCurncy * sign;
						case"CHF":aBrandsRetCHF[br] = aBrandsRetCHF[br] + IHr.TotCostPriceCurncy * sign;
						case"USD":aBrandsRetUSD[br] = aBrandsRetUSD[br] + IHr.TotCostPriceCurncy * sign;
					end;
					BrandsRetUSDtotal = BrandsRetUSDtotal + IHr.TotCostPrice * sign;
				end;
				if(IHr.TransDate>=sd and IHr.FileName=="IVVc" and IHr.Qty>0)then begin
					IVr.SerNr = IHr.TransNr;
					ReadFirstMain(IVr,1,true);
					if (IVr.Invalid!=1) then begin
						switch(IHr.CurncyCode) begin
							case"EUR":aBrandsRetEUR[br] = aBrandsRetEUR[br] + IHr.TotCostPriceCurncy * sign;
							case"CHF":aBrandsRetCHF[br] = aBrandsRetCHF[br] + IHr.TotCostPriceCurncy * sign;
							case"USD":aBrandsRetUSD[br] = aBrandsRetUSD[br] + IHr.TotCostPriceCurncy * sign;
						end;
					end;
				end;
				if(IHr.TransDate>=sd and IHr.FileName=="IVVc" and IHr.Qty<=0)then begin
					switch(IHr.CurncyCode)begin
						case"EUR":aBrandsSelEUR[br] = aBrandsSelEUR[br] - IHr.TotCostPriceCurncy * sign;
											if(IHr.ConsigStock==1)then begin
												aBrandsSelEURcons[br] = aBrandsSelEURcons[br] + IHr.TotCostPriceCurncy * sign;
											end;
						case"CHF":aBrandsSelCHF[br] = aBrandsSelCHF[br] - IHr.TotCostPriceCurncy * sign;
											if(IHr.ConsigStock==1)then begin
												aBrandsSelCHFcons[br] = aBrandsSelCHFcons[br] - IHr.TotCostPriceCurncy * sign;
											end;
						case"USD":aBrandsSelUSD[br] = aBrandsSelUSD[br] - IHr.TotCostPriceCurncy * sign;
											if(IHr.ConsigStock==1)then begin
												aBrandsSelUSDcons[br] = aBrandsSelUSDcons[br] - IHr.TotCostPriceCurncy * sign;
											end;
					end;
				end;
				
			end;
		end;
		resetloop(IHr);
	end;
	resetloop(INr);
	
	
	
	startformat(15);
			outstring(0,0,"4.6",false);
			outstring(0,0,"Стоимость возврата от покупателей",false);
		endformat;
		
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsRetEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetEUR[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsRetCHF[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetCHF[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsRetUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetUSD[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsRetUSDtotal*fr/to1,false);
		endformat;
	
		startformat(15);
			outstring(0,0,"4.7",false);
			outstring(0,0,"Реализация товара,FOB",false);
		endformat;
		
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelEUR[i],false);
	  		BrandsSelUSDtotal = BrandsSelUSDtotal + aBrandsSelEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelCHF[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelCHF[i],false);
	  		BrandsSelUSDtotal = BrandsSelUSDtotal + aBrandsSelCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelUSD[i],false);
	  		BrandsSelUSDtotal = BrandsSelUSDtotal + aBrandsSelUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsSelUSDtotal*fr/to1,false);
		endformat;
		
		
		startformat(15);
			outstring(0,0,"4.8",false);
			outstring(0,0,"Реализация товара на консигнации, FOB",false);
		endformat;
		
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelEURcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelEURcons[i],false);
	  		BrandsSelUSDtotalcons = BrandsSelUSDtotalcons + aBrandsSelEURcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelCHFcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelCHFcons[i],false);
	  		BrandsSelUSDtotalcons = BrandsSelUSDtotalcons + aBrandsSelCHFcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsSelUSDcons[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsSelUSDcons[i],false);
	  		BrandsSelUSDtotalcons = BrandsSelUSDtotalcons + aBrandsSelUSDcons[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsSelUSDtotalcons*fr/to1,false);
		endformat;
	LogProcTime("PrintStockSelRet468ByCat",getcurtick() - curtick);
return;
end;

global 
procedure	PrintStockCLOut31ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	string 10 incurncy;
	record CLOutVc CLOutr;
	boolean TrHs,testf;
	val BrandsCLOutAZN,BrandsCLOutEUR,BrandsCLOutCHF,BrandsCLOutUSD,BrandsRetCLOutUSDtotal;
	record IVVc IVr;
	row IVVc IVrw;
	record ItemHistVc IHr;
	integer i,mtrw,j,br;
	record INVc INr;
	array val SumEUR;
	array val SumCHF;
	array val SumUSD;
	val TotSumUSD;
	integer sign;
	val rateusd,ratechf,rateeur;
	val t,fr,to1,to2,br1,br2;
	string 10 curcode;
	val totrow;
	longint curtick;
	
	curtick = getcurtick();
	curcode = "USDB";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	rateusd = fr * to1;
	
	curcode = "CHFB";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	ratechf = fr * to1;
	
	curcode = "EURB";
	GetFullCurncyRate(curcode,ed,fr,to1,to2,br1,br2);
	rateeur = fr * to1;
	
	
	 
		startformat(15);
			outstring(0,0,"3",false);
			outstring(0,0,"Расходы, в том числе",false);
		endformat;
		startformat(15);
			outstring(0,0,"3.1",false);
			outstring(0,0,"денежными средствами",false);
		endformat;
		
		TrHs = true;
		CLOutr.TransDate =sd;
		while(loopkey("TransDate",CLOutr,1,TrHs))begin
			testf = true;
			if(CLOutr.TransDate>ed)then begin TrHs = false; testf = false; end;
			if(CLOutr.OKFlag==0)then begin testf = false; end;
			if(CLOutr.Invalid==1)then begin testf = false; end;
		
			if(testf)then begin
				switch(CLOutr.CurncyCode)begin
					case"AZN":BrandsCLOutAZN = BrandsCLOutAZN + CLOutr.Total;
					case"EUR":BrandsCLOutEUR = BrandsCLOutEUR + CLOutr.Total;
					case"CHF":BrandsCLOutCHF = BrandsCLOutCHF + CLOutr.Total;
					case"USD":BrandsCLOutUSD = BrandsCLOutUSD + CLOutr.Total;
				end;
				BrandsRetCLOutUSDtotal = BrandsRetCLOutUSDtotal + CLOutr.Total;
			end;
		end;
		
		
		incurncy = "AZN";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutAZN,false);
		endformat;
		incurncy = "EUR";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutEUR,false);
		endformat;
		incurncy = "CHF";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutCHF,false);
		endformat;
		incurncy = "USD";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
	  	outstring(150+i*50,0,BrandsCLOutUSD,false);
		endformat;
	
		IVr.CustCode = "FOB";
		IVr.InvDate = sd;
		TrHs = true;
		while(loopkey("CustDate",IVr,2,TrHs))begin
			testf = true;
			if(IVr.CustCode!="FOB")then begin TrHs = false; testf = false; end;
			if(IVr.InvDate>ed)then begin TrHs = false; testf = false; end;
			if(nonblank(location) and IVr.Location!=location)then begin testf = false; end;
			if(IVr.OKFlag!=1)then begin testf = false; end;
			if(IVr.Invalid==1)then begin testf = false; end;
			//if(IVr.InvType!=1 and IVr.InvType!=3)then begin testf = false; end;
			
			
			if(testf)then begin
				mtrw = matrowcnt(IVr);
				For(i=0;i<mtrw;i=i+1) begin
	  			matrowget(IVr,i,IVrw);
	  			if(IVrw.stp==kInvoiceRowTypeNormal)then begin
	  				IHr.FileName = "IVVc";
	  				IHr.TransNr = IVr.SerNr;
	  				IHr.Row = i;
	  				if(readfirstkey("FNTransNr",IHr,3,true))then begin
	  					INr.Code = IHr.ArtCode;
	  					readfirstmain(INr,1,true);
	  					For(j=0;j<brandscnt;j=j+1) begin
								if(setinset(aBrands[j],PrepareDispGroups(INr.DispGroups)))then begin
									br = j;
								end;
							end;
							if(IHr.Qty>=0)then begin
								sign = -1;
							end else begin
								sign = 1;
							end;	
							switch(IHr.CurncyCode)begin
								case"EUR":SumEUR[br] = SumEUR[br] + IHr.TotCostPriceCurncy * sign;
													TotSumUSD = TotSumUSD + IHr.TotCostPrice * sign*rateeur/rateusd;
								case"CHF":SumCHF[br] = SumCHF[br] + IHr.TotCostPriceCurncy * sign;
													TotSumUSD = TotSumUSD + IHr.TotCostPrice * sign*ratechf/rateusd;
								case"USD":SumUSD[br] = SumUSD[br] + IHr.TotCostPriceCurncy * sign;
													TotSumUSD = TotSumUSD + IHr.TotCostPrice * sign;
							end;
	  				end;
	  			end;
				end; 
			end;
		end;
		
		startformat(15);
			outstring(0,0,"3.2",false);
			outstring(0,0,"товаром  (офисные расходы)",false);
		endformat;
		
		incurncy = "EURB";
			totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + SumEUR[i];
			end;
			startformat(15);
				outstring(0,0,"",false);
				outstring(100,0,incurncy,false);
				outstring(0,0,totrow,false);
				For(j=0;j<brandscnt;j=j+1) begin		
					outstring(150+j*50,0,SumEUR[j],false);
				end;
			endformat;
		incurncy = "CHFB";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + SumCHF[i];
			end;
			startformat(15);
				outstring(0,0,"",false);
				outstring(100,0,incurncy,false);
				outstring(0,0,totrow,false);
				For(j=0;j<brandscnt;j=j+1) begin		
					outstring(150+j*50,0,SumCHF[j],false);
				end;
			endformat;
		incurncy = "USDB";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + SumUSD[i];
			end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,SumUSD[j],false);
			end;
		endformat;
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого ( USD)",false);
			outstring(150+j*50,0,TotSumUSD,false);
		endformat;
		
		LogProcTime("PrintStockCLOut31ByCat", getcurtick() - curtick);
return;
end;

global
procedure PrintCashIn412ByCat(array val aBrandsCashAZN,array val aBrandsCashEUR,array val aBrandsCashUSD,array val aBrandsCCAZN,array val aBrandsCCUSD,integer brandscnt)
begin
		string 10 incurncy;
		integer j,i;
		val totrow;
		
		startformat(15);
			outstring(0,0,"4",false);
			outstring(0,0,"ВЫРУЧКА, в том числе  USD",false);
		endformat;
		startformat(15);
			outstring(0,0,"4.1",false);
			outstring(0,0,"Приход денежных средств (cash)",false);
		endformat;
		
		incurncy = "AZN";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashAZN[i];
			end;
			startformat(15);
				outstring(0,0,"",false);
				outstring(100,0,incurncy,false);
				outstring(0,0,totrow,false);
				/*For(j=0;j<brandscnt;j=j+1) begin
					outstring(150+j*50,0,aBrandsCashAZN[j],false);
				end;*/
			endformat;

		incurncy = "EURB";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashEUR[i];
			end;
			startformat(15);
				outstring(0,0,"",false);
				outstring(100,0,incurncy,false);
				outstring(0,0,totrow,false);
				/*For(j=0;j<brandscnt;j=j+1) begin		
					outstring(150+j*50,0,aBrandsCashEUR[j],false);
				end;*/
			endformat;
		incurncy = "USDB";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCashUSD[i];
			end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			/*For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCashUSD[j],false);
			end;*/
		endformat;
		
		startformat(15);
			outstring(0,0,"4.2",false);
			outstring(0,0,"Оплата посредством Терминала",false);
		endformat;
		
		incurncy = "AZN";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCCAZN[i];
			end;
		startformat(15);			
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			/*For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCCAZN[j],false);
			end;*/
		endformat;
		incurncy = "USDB";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + aBrandsCCUSD[i];
			end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			/*For(j=0;j<brandscnt;j=j+1) begin
				outstring(150+j*50,0,aBrandsCCUSD[j],false);
			end;*/
		endformat;
		
return;
end;


global 
procedure	PrintCLIn43ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	string 10 incurncy;
	record CLInVc CLInr;
	boolean TrHs,testf;
	array val BrandsCLInAZN,BrandsCLInEUR,BrandsCLInUSD;
	record IVVc IVr;
	row IVVc IVrw;
	record ItemHistVc IHr;
	integer i,mtrw,j,br;
	record INVc INr;
	array val SumEUR;
	array val SumCHF;
	array val SumUSD;
	val TotSumUSD;
	integer sign;
	val rateusd,ratechf,rateeur;
	val t,fr,to1,to2,br1,br2;
	string 10 curcode;
	val totrow;
		
	startformat(15);
		outstring(0,0,"4.3",false);
		outstring(0,0,"Приход от бутиков ювелирной Программы",false);
	endformat;
		
	TrHs = true;
	CLInr.TransDate =sd;
	while(loopkey("TransDate",CLInr,1,TrHs))begin
		testf = true;
		if(CLInr.TransDate>ed)then begin TrHs = false; testf = false; end;
		if(CLInr.OKFlag==0)then begin testf = false; end;
		if(CLInr.Invalid==1)then begin testf = false; end;
		if(CLInr.CorspCode!="76.01")then begin testf = false; end;
	
		if(testf)then begin
			For(i=0;i<brandscnt;i=i+1) begin
				if(setinset(PrepareDispGroups(CLInr.Objects),aBrands[i]))then begin
					switch(CLInr.CurncyCode)begin
						case"AZN":BrandsCLInAZN[i] = BrandsCLInAZN[i] + CLInr.Total;
						case"EUR":BrandsCLInEUR[i] = BrandsCLInEUR[i] + CLInr.Total;
						case"USD":BrandsCLInUSD[i] = BrandsCLInUSD[i] + CLInr.Total;
					end;
				end;
			end; 
		end;
	end;
		
		
		incurncy = "AZN";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + BrandsCLInAZN[i];
			end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  	outstring(150+i*50,0,BrandsCLInAZN[i],false);
	  	end;
		endformat;
		incurncy = "EURB";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + BrandsCLInEUR[i];
			end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  	outstring(150+i*50,0,BrandsCLInEUR[i],false);
	  	end;
		endformat;
		incurncy = "USDB";
		totrow = 0;
			For(i=0;i<brandscnt;i=i+1) begin
				totrow = totrow + BrandsCLInUSD[i];
			end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  	outstring(150+i*50,0,BrandsCLInUSD[i],false);
	  	end;
		endformat;
	
		
return;
end;

global
procedure PrintCUDEb445ByCat(date sd,date ed,string location)
begin
	record IVVc IVr;
	row IVVc IVrw;
	boolean TrHs,testf;
	val debUSD,debAZN,debEUR;
	val credUSD,credAZN,credEUR;
	record IPrsVc IPrsr;
	record IPVc IPr;
	row IPVc IPrw;
	integer mtrw,i;
	val ivfr,ivto1;
	val fr,to1,to2,br1,br2;
	string 10 curncy;
	boolean TrHs1,testf1;
	
		startformat(15);
			outstring(0,0,"4.4",false);
			outstring(0,0,"Погашена зад-ть Покупателей",false);
		endformat;
		
		IPr.TransDate = sd;
		TrHs = true;
		while(loopkey("TransDate",IPr,1,TrHs))BEGIN
			testf = true;
			if(IPr.TransDate>ed)then begin TrHs = false; testf = false; end;
			if(IPr.OKFlag==0)then begin testf = false; end;
			
			if(testf)then begin
				mtrw = matrowcnt(IPr);
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IPr,i,IPrw);
					if(IPrw.InvoiceNr>0)then begin
						IVr.SerNr = IPrw.InvoiceNr;
						if(readfirstmain(IVr,1,true) and (IVr.InvDate<sd or IVr.InvDate>ed))then begin
							switch(IPrw.RecCurncy)begin
								case"AZN":credAZN = credAZN + IPrw.RecVal;
								case"USD":credUSD = credUSD + IPrw.RecVal;
								case"EUR":credEUR = credEUR + IPrw.RecVal;								
							end;
						end;
					end;	  
				end; 
			end;
		end;
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"AZN",false);
			outstring(100,0,credAZN,false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"EUR",false);
			outstring(100,0,credEUR,false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"USD",false);
			outstring(100,0,credUSD,false);
		endformat;
		
		IVr.InvDate = sd;
		TrHs = true;
		while(loopkey("InvDate",IVr,1,TrHs))begin
			testf = true;
			if(IVr.InvDate>ed)then begin TrHs = false; testf = false; end;
			if(nonblank(location) and IVr.Location!=location)then begin testf = false; end;
			if(IVr.OKFlag!=1)then begin testf = false; end;
			if(IVr.InvType!=1 and IVr.InvType!=3)then begin testf = false; end;
			
			if(testf)then begin
				switch(IVr.CurncyCode)begin
					case"AZN":debAZN = debAZN + IVr.Sum4;
					case"USD":debUSD = debUSD + IVr.Sum4;
					case"EUR":debEUR = debEUR + IVr.Sum4;
				end;
				GetFullCurncyRate(IVrw.CurncyCode,IVr.InvDate,ivfr,ivto1,to2,br1,br2);
				if(ivfr==0 or ivto1==0)then begin
					ivfr = 1;
					ivto1 = 1;
				end;
				mtrw = matrowcnt(IVr);
				For(i=0;i<mtrw;i=i+1) begin
					matrowget(IVr,i,IVrw);
					
					if(IVrw.stp==kInvoiceRowTypePrepayment)then begin
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
						end;
					end;
					if(IVrw.stp==kInvoiceRowTypeCashPayment)then begin
						GetFullCurncyRate(IVrw.CurncyCode,IVr.InvDate,fr,to1,to2,br1,br2);
						if(fr==0 or to1==0)then begin
							fr = 1; to1 = 1;
						end;
						IVrw.Sum = IVrw.Sum/fr*to1*ivfr/ivto1;
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
						end;
					end;
					if(IVrw.stp==kInvoiceRowTypeCreditCardPayment)then begin
						curncy = "AZN";
						GetFullCurncyRate(curncy,IVr.InvDate,fr,to1,to2,br1,br2);
						if(fr==0 or to1==0)then begin
							fr = 1; to1 = 1;
						end;
						IVrw.Sum = IVrw.Sum/fr*to1*ivfr/ivto1;
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
						end;
					end;
					if(IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)then begin
						curncy = "AZN";
						GetFullCurncyRate(curncy,IVr.InvDate,fr,to1,to2,br1,br2);
						if(fr==0 or to1==0)then begin
							fr = 1; to1 = 1;
						end;
						IVrw.Sum = IVrw.Sum/fr*to1*ivfr/ivto1;
						switch(IVr.CurncyCode)begin
							case"AZN":debAZN = debAZN - IVrw.Sum;
							case"USD":debUSD = debUSD - IVrw.Sum;
							case"EUR":debEUR = debEUR - IVrw.Sum;
						end;
					end;  
				end;
				IPrsr.IVNr = IVr.SerNr;
				IPrsr.TransType = 1;
				IPrsr.TransDate = sd;
				TrHs1 = true;
				while(loopkey("IVDateKey",IPrsr,3,TrHs))begin
					testf1 = true;
					if(IPrsr.IVNr!=IVr.SerNr)then begin TrHs1 = false; testf1 = false; end;
					if(IPrsr.TransType!=1)then begin TrHs1 = false; testf1 = false; end;
					if(IPrsr.TransDate>sd)then begin TrHs1 = false; testf1 = false; end;
					
					if(testf1)then begin
						IPr.SerNr = IPrsr.TransNr;
						if(readfirstmain(IPr,1,true))then begin
							mtrw = matrowcnt(IPr);
							For(i=0;i<mtrw;i=i+1) begin
	  						matrowget(IPr,i,IPrw);
	  						if(IPrw.InvoiceNr==IVr.SerNr)then begin
	  							switch(IVr.CurncyCode)begin
										case"AZN":debAZN = debAZN - IPrw.RecVal;
										case"USD":debUSD = debUSD - IPrw.RecVal;
										case"EUR":debEUR = debEUR - IPrw.RecVal;
									end;
	  						end;
							end; 
						end;
					end;
				end;
				resetloop(IPrsr);
			end;
		end;
		
		startformat(15);
			outstring(0,0,"4.5",false);
			outstring(0,0,"Сформированная задолженность",false);
		endformat;
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"AZN",false);
			outstring(100,0,debAZN,false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"EUR",false);
			outstring(100,0,debEUR,false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"USD",false);
			outstring(100,0,debUSD,false);
		endformat;

return;
end;

procedure CalcBalByCat(date ed,string acc,var val BalAZN,var val BalEUR,var val BalUSD)
begin
	record MainVc Mainr;
	record TRVc TRr;
	row TRVc TRrw;
	record FBVc FBr;
	row FBVc FBrw;
	boolean TrHs,testf;
	integer i,mtrw;
	
	FBr.TransDate = "";
	TrHs = true;
	while(loopkey("TransSerNr",FBr,1,TrHs))begin
		testf = true;
		if(FBr.TransDate>ed)then begin TrHs = false; testf = false; end;
		
		if(testf)then begin
			mtrw = matrowcnt(FBr);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(FBr,i,FBrw);
	  		if(FBrw.AccNumber==acc)then begin
	  			BalAZN = BalAZN + FBrw.DebVal - FBrw.CredVal;
	  		end;
			end; 
		end;
	end;
	
	Mainr.TransNr = "";
	Mainr.AccNumber = acc;
	TrHs = true;
	while(loopmain(Mainr,2,TrHs))begin
		testf = true;
		if(Mainr.TransDate>ed)then begin TrHs = false; testf = false; end;
		if(Mainr.AccNumber!=acc)then begin TrHs = false; testf = false; end;

		if(testf)then begin
			TRr.Number = Mainr.TransNr;
			TRr.IntYc = Mainr.IntYc;
			if(readfirstmain(TRr,2,true))then begin
				mtrw = matrowcnt(TRr);
				For(i=0;i<mtrw;i=i+1) begin
	  			matrowget(TRr,i,TRrw);
					if(TRrw.AccNumber==acc)then begin
						switch(TRrw.Curncy)begin
						case "AZN":BalAZN = BalAZN + TRrw.CurDebVal - TRrw.CurCredVal;
						case "EUR":BalEUR = BalEUR + TRrw.CurDebVal - TRrw.CurCredVal;
						case "USD":BalUSD = BalUSD + TRrw.CurDebVal - TRrw.CurCredVal;
						otherwise BalAZN = BalAZN + TRrw.DebVal - TRrw.CredVal;
						end;
					end;
				end; 
			end;
		end;
	end;

return;
end;

global 
procedure	PrintCLIn5ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands,var val totusd)
begin
	string 10 incurncy;
	record CLInVc CLInr;
	boolean TrHs,testf;
	val BalAZN,BalEUR,BalUSD;
	record IVVc IVr;
	row IVVc IVrw;
	record ItemHistVc IHr;
	integer i,mtrw,j,br;
	record INVc INr;
	array val SumEUR;
	array val SumCHF;
	array val SumUSD;
	val TotSumUSD;
	integer sign;
	val rateusd,ratechf,rateeur;
	val t,fr,to1,to2,br1,br2;
	string 10 curcode;
	record MainVc Mainr;
	val tatalusd;
	
	curcode = "USD";
	GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
	rateusd = fr * to1;
	
	curcode = "CHF";
	GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
	ratechf = fr * to1;
	
	curcode = "EUR";
	GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
	rateeur = fr * to1;
	
	
	startformat(15);
		outstring(0,0,"5",false);
		outstring(0,0,"Остаток денежных средств",false);
	endformat;
	startformat(15);
		outstring(0,0,"5.1",false);
		outstring(0,0,"в том числе Баку",false);
	endformat;
	
	switch(location)begin
		case"CARTIER":CalcBalByCat(ed,"50/2/1",BalAZN,BalEUR,BalUSD);//Cartier Касса
		case"CHOPARD":CalcBalByCat(ed,"50/2/2",BalAZN,BalEUR,BalUSD);//Chopard Касса
		case"RC_DG":CalcBalByCat(ed,"50/2/3",BalAZN,BalEUR,BalUSD);//GlampireJ Касса
		case"RCOL1":CalcBalByCat(ed,"50/2/4",BalAZN,BalEUR,BalUSD);//Royal 1 Касса
		case"RCOL2":CalcBalByCat(ed,"50/2/5",BalAZN,BalEUR,BalUSD);//Royal 2 Касса
		case"TIMEPIECES":CalcBalByCat(ed,"50/2/6",BalAZN,BalEUR,BalUSD);//GlampireT Касса
	otherwise
	CalcBalByCat(ed,"50/2/1",BalAZN,BalEUR,BalUSD);//Cartier Касса
	CalcBalByCat(ed,"50/2/2",BalAZN,BalEUR,BalUSD);//Chopard Касса
	CalcBalByCat(ed,"50/2/3",BalAZN,BalEUR,BalUSD);//GlampireJ Касса
	CalcBalByCat(ed,"50/2/4",BalAZN,BalEUR,BalUSD);//Royal 1 Касса
	CalcBalByCat(ed,"50/2/5",BalAZN,BalEUR,BalUSD);//Royal 2 Касса
	CalcBalByCat(ed,"50/2/6",BalAZN,BalEUR,BalUSD);//GlampireT Касса
	end;
	
	tatalusd = tatalusd + BalAZN*rateusd;
	tatalusd = tatalusd + BalEUR/rateeur*rateusd;
	tatalusd = tatalusd + BalUSD;
	
	incurncy = "AZN";
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,BalAZN,false);
	endformat;
	incurncy = "EURB";
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,BalEUR,false);
	endformat;
	incurncy = "USDB";
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,BalUSD,false);
	endformat;
	
	startformat(15);
		outstring(0,0,"5.2",false);
		outstring(0,0,"в том числе WHT",false);
	endformat;
	
	BalAZN = blankval;
	BalEUR = blankval;
	BalUSD = blankval;
	switch(location)begin
		case"CARTIER":CalcBalByCat(ed,"52/1/1",BalAZN,BalEUR,BalUSD);//Cartier Банк Credit Suisse
		case"CHOPARD":CalcBalByCat(ed,"52/1/2",BalAZN,BalEUR,BalUSD);//Chopard Банк Credit Suisse
		case"RC_DG":CalcBalByCat(ed,"52/1/3",BalAZN,BalEUR,BalUSD);//GlampireJ Банк Credit Suisse
		case"RCOL1":CalcBalByCat(ed,"52/1/4",BalAZN,BalEUR,BalUSD);//Royal 1 Банк Credit Suisse
		case"RCOL2":CalcBalByCat(ed,"52/1/5",BalAZN,BalEUR,BalUSD);//Royal 2 Банк Credit Suisse
		case"TIMEPIECES":CalcBalByCat(ed,"52/1/6",BalAZN,BalEUR,BalUSD);//GlampireT Банк Credit Suisse
	otherwise
		CalcBalByCat(ed,"52/1/1",BalAZN,BalEUR,BalUSD);//Cartier Банк Credit Suisse
		CalcBalByCat(ed,"52/1/2",BalAZN,BalEUR,BalUSD);//Chopard Банк Credit Suisse
		CalcBalByCat(ed,"52/1/3",BalAZN,BalEUR,BalUSD);//GlampireJ Банк Credit Suisse
		CalcBalByCat(ed,"52/1/4",BalAZN,BalEUR,BalUSD);//Royal 1 Банк Credit Suisse
		CalcBalByCat(ed,"52/1/5",BalAZN,BalEUR,BalUSD);//Royal 2 Банк Credit Suisse
		CalcBalByCat(ed,"52/1/6",BalAZN,BalEUR,BalUSD);//GlampireT Банк Credit Suisse
	end;
	
	tatalusd = tatalusd + BalAZN * rateusd;
	tatalusd = tatalusd + BalEUR / rateeur * rateusd;
	tatalusd = tatalusd + BalUSD;
	
	incurncy = "AZN";
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,BalAZN,false);
	endformat;
	incurncy = "EURB";
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,BalEUR,false);
	endformat;
	incurncy = "USDB";
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,incurncy,false);
		outstring(150+i*50,0,BalUSD,false);
	endformat;
	
	incurncy = "USDB";
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"Итого " & incurncy,false);
		outstring(150+i*50,0,tatalusd,false);
	endformat;
	totusd = totusd + tatalusd;
return;
end;

//Edit***********************Vitalii 12:02 28.08.2014
global
procedure PrintStockVEPAy6ByCat(record RcVc RepSpec,array string aBrands,integer brandscnt)
begin
  record CUVc CUr;
	record OPrsVc OPrsr;
	record OPVc OPr;
	record VIVc VIr;
	record INVc INr;
	row OPVc OPrw;
	row VIVc VIrw;
	Integer i,j,k,rwcnt,rwcnt2;
	Boolean TrHs,testf;
	val PaymAZN,PaymEUR,PaymCHF,PaymUSD;
	array val aBrandPercent;
	array val aBrandPartAZN;
	array val aBrandPartEUR;
	array val aBrandPartCHF;
	array val aBrandPartUSD;
	
	startformat(15);
	outstring(0,0,"6",false);
	outstring(0,0,"Оплата поставщикам",false);
	endformat;

	CUr.Name = RepSpec.f1;
	//Edit-------------------Vitalii 11:20 27.03.2018
  TrHs = true;
  while(loopkey("Name",CUr,1,TrHs))begin
    testf = true;
    if(CUr.Name!=RepSpec.f1)then begin TrHs = false; testf = false; end;
    //if(CUr.Code>"0009999" or CUr.Code<"0000001")then begin testf = false; end;
    if ((CUr.VECat=="IDEA") and (currentcompany!=28))then begin testf = false; end;
    if ((CUr.VECat!="IDEA") and (currentcompany==28))then begin testf = false; end;

    if(testf)then begin
      TrHs = false;
    end;
  end;
  resetloop(CUr);
  //readfirstkey("Name",CUr,1,true);
	OPrsr.VECode = CUr.Code;
	OPrsr.TransDate = RepSpec.sStartDate;
	TrHs = true;
	while (loopmain(OPrsr,2,TrHs)) begin
		testf = true;
		if (OPrsr.TransDate>RepSpec.sEndDate) then begin TrHs = false; testf = false; end;
		if (OPrsr.TransType!=1) then begin testf = false; end;
		if (testf) then begin
			OPr.SerNr = OPrsr.TransNr;
			readfirstmain(OPr,1,true);
			rwcnt = MatRowCnt(OPr);
			for (i=0;i<rwcnt;i=i+1) begin
				MatRowGet(OPr,i,OPrw);
				if ((OPRsr.VINr == OPrw.VISerNr) and (OPrsr.VECode == OPrw.VECode)) then begin
					switch (OPrw.RecCurncy) begin
						case "AZN": PaymAZN = PaymAZN + OPrw.RecVal;
						case "EUR": PaymEUR = PaymEUR + OPrw.RecVal;
						case "CHF":	PaymCHF = PaymCHF + OPrw.RecVal;
						case "USD": PaymUSD = PaymUSD + OPrw.RecVal;
					end;
					VIr.SerNr = OPrw.VISerNr;
					for (k=0;k<brandscnt;k=k+1) begin
 						aBrandPercent[k] = 0;
					end; 
					readfirstmain(VIr,1,true);
					rwcnt2 = MatRowCnt(VIr);
					for (j=0;j<rwcnt2;j=j+1) begin
						MatRowGet(VIr,j,VIrw);
						INr.Code = VIrw.Item;
						readfirstmain(INr,1,true);
						for (k=0;k<brandscnt;k=k+1) begin
	  					if (setinset(aBrands[k],PrepareDispGroups(INr.DispGroups))) then begin
	  						aBrandPercent[k] = aBrandPercent[k] + VIrw.Sum;
	  					end;
						end; 
					end;
					For(i=0;i<brandscnt;i=i+1) begin
						aBrandPercent[i] = aBrandPercent[i]/VIr.PayVal;
						switch (OPrw.RecCurncy) begin
							case "AZN": aBrandPartAZN[i] = aBrandPartAZN[i] + aBrandPercent[i]*OPrw.RecVal;
							case "EUR": aBrandPartEUR[i] = aBrandPartEUR[i] + aBrandPercent[i]*OPrw.RecVal;
							case "CHF":	aBrandPartCHF[i] = aBrandPartCHF[i] + aBrandPercent[i]*OPrw.RecVal;
							case "USD": aBrandPartUSD[i] = aBrandPartUSD[i] + aBrandPercent[i]*OPrw.RecVal;
						end;

					end;
				end;
			end;
		end;
	end;

	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"AZN",false);
		outstring(0,0,PaymAZN,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandPartAZN[i],false);
		end;
	endformat;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"EURB",false);
		outstring(0,0,PaymEUR,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandPartEUR[i],false);
		end;
	endformat;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"CHFB",false);
		outstring(0,0,PaymCHF,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandPartCHF[i],false);
		end;
	endformat;
	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,"USDB",false);
		outstring(0,0,PaymUSD,false);
		For(i=0;i<brandscnt;i=i+1) begin
			outstring(150+i*50,0,aBrandPartUSD[i],false);
		end;
	endformat;
	
return;

end;
//EndEdit***********************Vitalii 12:02 28.08.2014


global 
procedure	PrintCLOut61ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	string 10 incurncy;
	record CLOutVc CLOutr;
	boolean TrHs,testf;
	array val BrandsCLOutAZN,BrandsCLOutEUR,BrandsCLOutUSD;
	record IVVc IVr;
	row IVVc IVrw;
	record ItemHistVc IHr;
	integer i,mtrw,j,br;
	record INVc INr;
	array val SumEUR;
	array val SumCHF;
	array val SumUSD;
	val TotSumUSD;
	integer sign;
	val rateusd,ratechf,rateeur;
	val t,fr,to1,to2,br1,br2;
	string 10 curcode;
	val totrow;
	
	
	curcode = "USD";
	GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
	rateusd = fr * to1;
	
	curcode = "CHF";
	GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
	ratechf = fr * to1;
	
	curcode = "EUR";
	GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
	rateeur = fr * to1;
	
	startformat(15);
		outstring(0,0,"6.1",false);
		outstring(0,0,"Оплата товара бутикам ювелирной Программы",false);
	endformat;
		
	TrHs = true;
	CLOutr.TransDate =sd;
	while(loopkey("TransDate",CLOutr,1,TrHs))begin
		testf = true;
		if(CLOutr.TransDate>ed)then begin TrHs = false; testf = false; end;
		if(CLOutr.OKFlag==0)then begin testf = false; end;
		if(CLOutr.Invalid==1)then begin testf = false; end;
		if(CLOutr.CorspCode!="76.08")then begin testf = false; end;
	
		if(testf)then begin
			For(i=0;i<brandscnt;i=i+1) begin
				if(setinset(PrepareDispGroups(CLOutr.Objects),aBrands[i]))then begin
					switch(CLOutr.CurncyCode)begin
						case"AZN":BrandsCLOutAZN[i] = BrandsCLOutAZN[i] + CLOutr.Total;
											TotSumUSD = TotSumUSD + CLOutr.Total/rateusd;
						case"EUR":BrandsCLOutEUR[i] = BrandsCLOutEUR[i] + CLOutr.Total;
											TotSumUSD = TotSumUSD + CLOutr.Total*rateeur/rateusd;
						case"USD":BrandsCLOutUSD[i] = BrandsCLOutUSD[i] + CLOutr.Total;
											TotSumUSD = TotSumUSD + CLOutr.Total;
					end;
				end;
			end; 
		end;
	end;
		
		
		incurncy = "AZN";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + BrandsCLOutAZN[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  	outstring(150+i*50,0,BrandsCLOutAZN[i],false);
	  	end;
		endformat;
		incurncy = "EURB";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + BrandsCLOutEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  	outstring(150+i*50,0,BrandsCLOutEUR[i],false);
	  	end;
		endformat;
		incurncy = "USDB";
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + BrandsCLOutUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  	outstring(150+i*50,0,BrandsCLOutUSD[i],false);
	  	end;
		endformat;
		incurncy = "USDB";
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого" & incurncy,false);
	  	outstring(150+i*50,0,TotSumUSD,false);
		endformat;
	
		
return;
end;

global
procedure PrintStockVECred7ByCat(date sd,date ed,integer brandscnt, array string aBrands,var val totusd,string location) 
begin
	val CUIVTotalUSD;
	val fr,to1,to2,br1,br2;
	string 10 incurncy;
	record CUVc CUr;
	boolean TrHs,testf;
	val CUIVAZN,CUIPAZN,CUIVEUR,CUIPEUR,CUIVCHF,CUIPCHF,CUIVUSD,CUIPUSD;
	array val CUIVAZNprc,CUIVEURprc,CUIVCHFprc,CUIVUSDprc;
	record OPrsVc OPrsr,OPrsr1;
	record VIVc VIr;
	row VIVc VIrw;
	integer i,mtrw,rwcnt,j;
	val CUDebSum;
	record OPVc OPr;
	row OPVc OPrw;
	record ORVc ORr;
	row ORVc ORrw;
	val prepayment,dif;
	boolean TrHs1,testf1;
	record INVc INr;
	record POVc POr;
	row POVc POrw;
	
	
	POr.SerNr = "";
	TrHs = true;
	while(loopkey("TransDate",POr,1,TrHs))begin
		testf = true;
		if(POr.TransDate>ed)then begin TrHs = false; testf = false; end;
		if(POr.OKFlag==0)then begin testf = false; end;
		if(POr.Location!=location and nonblank(location))then begin testf = false; end;
		if(POr.Closed>0)then begin testf = false; end;
		
		dif = 0;
		if(testf)then begin
			mtrw = matrowcnt(POr);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(POr,i,POrw);
	  		
	  		if(nonblank(POrw.ArtCode) and POrw.Quant>0)then begin
					INr.Code = POrw.ArtCode;
					if(Readfirstmain(INr,1,true))then begin
						For(j=0;j<brandscnt;j=j+1) begin
							if(setinset(aBrands[j],PrepareDispGroups(INr.DispGroups)))then begin
								switch(POr.CurncyCode)begin
									case"AZN":CUIVAZNprc[j] = CUIVAZNprc[j] + POrw.Price * POrw.Shipd2 - POrw.Price * POrw.Invd;
									case"EUR":CUIVEURprc[j] = CUIVEURprc[j] + POrw.Price * POrw.Shipd2 - POrw.Price * POrw.Invd;
									case"CHF":CUIVCHFprc[j] = CUIVCHFprc[j] + POrw.Price * POrw.Shipd2 - POrw.Price * POrw.Invd;
									case"USD":CUIVUSDprc[j] = CUIVUSDprc[j] + POrw.Price * POrw.Shipd2 - POrw.Price * POrw.Invd;
								end;
							end;
						end;
					end;
					switch(POr.CurncyCode)begin
						case"AZN":CUIVAZN = CUIVAZN + POrw.Price * POrw.Shipd2;
						case"EUR":CUIVEUR = CUIVEUR + POrw.Price * POrw.Shipd2;
						case"CHF":CUIVCHF = CUIVCHF + POrw.Price * POrw.Shipd2;
						case"USD":CUIVUSD = CUIVUSD + POrw.Price * POrw.Shipd2;
					end;
					switch(POr.CurncyCode)begin
						case"AZN":CUIPAZN = CUIPAZN + POrw.Price * POrw.Invd;
						case"EUR":CUIPEUR = CUIPEUR + POrw.Price * POrw.Invd;
						case"CHF":CUIPCHF = CUIPCHF + POrw.Price * POrw.Invd;
						case"USD":CUIPUSD = CUIPUSD + POrw.Price * POrw.Invd;
					end;
					dif = dif + POrw.Price * POrw.Shipd2 - POrw.Price * POrw.Invd;
				end;
	  	end;	
			
			if(dif!=0)then begin
				startformat(15);
					outstring(0,"DblPOVc",POr.SerNr,false);
					outstring(50,0,dif,false);
					outstring(100,0,POr.CurncyCode,false);
				endformat;
			end;
		end;
	end;
	
	
	startformat(15);
			outstring(0,0,"7",false);
			outstring(0,0,"Кредит. задолженность Поставщиков",false);
		endformat;
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"AZN",false);
			outstring(100,0,CUIVAZN - CUIPAZN,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVAZNprc[i],false);
			end; 
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"EUR",false);
			outstring(100,0,CUIVEUR - CUIPEUR,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVEURprc[i],false);
			end; 
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"CHF",false);
			outstring(100,0,CUIVCHF - CUIPCHF,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVCHFprc[i],false);
			end; 
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"USD",false);
			outstring(100,0,CUIVUSD - CUIPUSD,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVUSDprc[i],false);
			end; 
		endformat;
		
		CUIVTotalUSD = CUIVTotalUSD + (CUIVAZN - CUIPAZN);
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		CUIVTotalUSD = CUIVTotalUSD + (CUIVEUR - CUIPEUR)/fr*to1;
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		CUIVTotalUSD = CUIVTotalUSD + (CUIVCHF - CUIPCHF)/fr*to1;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		/*CUIVTotalUSD = CUIVTotalUSD + (CUIVUSD - CUIPUSD)/fr*to1;*/
		
		CUIVTotalUSD = CUIVTotalUSD*fr/to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"Итого USD",false);
			outstring(100,0,CUIVTotalUSD + (CUIVUSD - CUIPUSD),false);
		endformat;
		totusd = totusd - (CUIVTotalUSD + (CUIVUSD - CUIPUSD));
return;
end; 

global
procedure	PrintStockIVDeb8ByCat(date sd,date ed,integer brandscnt, array string aBrands,var val totusd,string location)
begin
	val CUIVTotalUSD;
	val fr,to1,to2,br1,br2;
	string 10 incurncy;
	record CUVc CUr;
	boolean TrHs,testf;
	val CUIVAZN,CUIPAZN,CUIVEUR,CUIPEUR,CUIVCHF,CUIPCHF,CUIVUSD,CUIPUSD;
	array val CUIVAZNprc,CUIVEURprc,CUIVCHFprc,CUIVUSDprc;
	record IPrsVc IPrsr,IPrsr1;
	record IVVc IVr;
	row IVVc IVrw;
	integer i,mtrw,rwcnt,j;
	val CUDebSum;
	record IPVc IPr;
	row IPVc IPrw;
	record ORVc ORr;
	row ORVc ORrw;
	val prepayment,dif;
	boolean TrHs1,testf1;
	record INVc INr;
	
	CUr.Code = "";
	while(loopmain(CUr,1,true))begin
		IPrsr.CustCode = CUr.Code;
		IPrsr.CustDate = "";
		IPrsr.TransType = 0;
		TrHs = true;
		while(loopkey("CustType",IPrsr,3,TrHs))begin
			if(IPrsr.CustCode!=CUr.Code)then begin TrHs = false; end;
			if(IPrsr.CustDate>ed)then begin TrHs = false; end;
			if(IPrsr.TransType!=0)then begin TrHs = false; end;
			
			if(TrHs)then begin
				IVr.SerNr = IPrsr.TransNr;
				if(readfirstmain(IVr,1,true)) begin
					testf = true;
					if(nonblank(location) and location!=IVr.Location)then begin testf = false; end;
					
					if(testf)then begin
						dif = 0;
						prepayment = 0;
						if(IVr.InvType==kInvoiceTypeCredit)then begin
							switch(IVr.CurncyCode)begin
								case"AZN":CUIVAZN = CUIVAZN - IVr.Sum4;
								case"EUR":CUIVEUR = CUIVEUR - IVr.Sum4;
								case"CHF":CUIVCHF = CUIVCHF - IVr.Sum4;
								case"USD":CUIVUSD = CUIVUSD - IVr.Sum4;
							end;
						end;
						if(IVr.InvType==kInvoiceTypeNormal)then begin
							switch(IVr.CurncyCode)begin
								case"AZN":CUIVAZN = CUIVAZN + IVr.Sum4;
								case"EUR":CUIVEUR = CUIVEUR + IVr.Sum4;
								case"CHF":CUIVCHF = CUIVCHF + IVr.Sum4;
								case"USD":CUIVUSD = CUIVUSD + IVr.Sum4;
							end;
						end;
						CUDebSum = 0;
						if(IVr.InvType==kInvoiceTypeNormal)then begin
							mtrw = matrowcnt(IVr);
							For(i=0;i<mtrw;i=i+1) begin
								matrowget(IVr,i,IVrw);
								if(IVrw.stp==kInvoiceRowTypeCashPayment)then begin
									GetFullCurncyRate(IVrw.CurncyCode,IVr.TransDate,fr,to1,to2,br1,br2);
									if(fr==0 or to1==0)then begin
										fr = 1;
										to1 =1;
									end;
									if(IVr.FrRate!=0)then begin
										CUDebSum = CUDebSum + IVrw.Sum*fr/to1*IVr.ToRateB1/IVr.FrRate;
									end else begin
										CUDebSum = CUDebSum + IVrw.Sum*fr/to1;
									end;
								end;
								if(IVrw.stp==kInvoiceRowTypeCreditCardPayment)then begin
									if(IVr.FrRate!=0)then begin
										CUDebSum = CUDebSum + IVrw.Sum*IVr.ToRateB1/IVr.FrRate;
									end else begin
										CUDebSum = CUDebSum + IVrw.Sum;
									end;
								end;
								if(IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)then begin
									if(IVr.FrRate!=0)then begin
										CUDebSum = CUDebSum + IVrw.Sum*IVr.ToRateB1/IVr.FrRate;
									end else begin
										CUDebSum = CUDebSum + IVrw.Sum;
									end;
								end; 
								if(IVrw.stp==kInvoiceRowTypePrepayment)then begin
									CUDebSum = CUDebSum + IVrw.Sum;
								end; 													
							end; 

							switch(IVr.CurncyCode)begin
								case"AZN":CUIVAZN = CUIVAZN - CUDebSum;
								case"EUR":CUIVEUR = CUIVEUR - CUDebSum;
								case"CHF":CUIVCHF = CUIVCHF - CUDebSum;
								case"USD":CUIVUSD = CUIVUSD - CUDebSum;
							end;
							dif = IVr.Sum4 - CUDebSum;
							TrHs1 = true;
							IPrsr1.IVNr = IVr.SerNr;
							IPrsr1.CustDate = "";
							while(loopkey("IVKeyCustDate",IPrsr1,2,TrHs1))begin
								testf1 = true;
								if(IPrsr1.CustDate>ed)then begin testf1 = false; TrHs1 = false; end;
								if(IPrsr1.IVNr!=IVr.SerNr)then begin testf1 = false; TrHs1 = false; end;
								if(IPrsr1.TransType!=1)then begin testf1 = false; end;
								
								if(testf1)then begin
									IPr.SerNr = IPrsr1.TransNr;
									if(readfirstmain(IPr,1,true))then begin
										mtrw = matrowcnt(IPr);
										For(i=0;i<mtrw;i=i+1) begin
											matrowget(IPr,i,IPrw);
												if(IPrsr1.IVNr>0 and IPrw.InvoiceNr==IPrsr1.IVNr and IPrsr1.CustDate==IPrw.PayDate)then begin
												if(testf)then begin
													switch(IPrw.InvCurncy)begin
														case"AZN":CUIPAZN = CUIPAZN + IPrw.InvVal;
														case"EUR":CUIPEUR = CUIPEUR + IPrw.InvVal;
														case"CHF":CUIPCHF = CUIPCHF + IPrw.InvVal;
														case"USD":CUIPUSD = CUIPUSD + IPrw.InvVal;
													end;
													dif = dif - IPrw.InvVal;
												end;
											end;
										end; 
									end;
								end;
							end;
							resetloop(IPrsr1);
							
							if(dif!=0)then begin
								/*startformat(15);
									outstring(0,"DblIVVc",IVr.SerNr,false);
									Outstring(50,0,IVr.CurncyCode,false);
									Outstring(100,0,dif,false);
								endformat;*/
								
								mtrw = matrowcnt(IVr);
								For(i=0;i<mtrw;i=i+1) begin
									matrowget(IVr,i,IVrw);
									if(IVrw.stp==kInvoiceRowTypeNormal and nonblank(IVrw.ArtCode) and IVrw.Quant>0)then begin
										INr.Code = IVrw.ArtCode;
										if(Readfirstmain(INr,1,true))then begin
											For(j=0;j<brandscnt;j=j+1) begin
												if(setinset(aBrands[j],PrepareDispGroups(INr.DispGroups)))then begin
													switch(IVr.CurncyCode)begin
														case"AZN":CUIVAZNprc[j] = CUIVAZNprc[j] + dif*IVrw.Sum/IVr.Sum4;
														case"EUR":CUIVEURprc[j] = CUIVEURprc[j] + dif*IVrw.Sum/IVr.Sum4;
														case"CHF":CUIVCHFprc[j] = CUIVCHFprc[j] + dif*IVrw.Sum/IVr.Sum4;
														case"USD":CUIVUSDprc[j] = CUIVUSDprc[j] + dif*IVrw.Sum/IVr.Sum4;
													end;
												end;
											end;
										end;
									end;
								end; 
							end;
						end;
					end;
				end;
			end;
		end;
		resetloop(IPrsr);
	end;
	
	startformat(15);
			outstring(0,0,"8",false);
			outstring(0,0,"Задолженность Покупателей",false);
		endformat;
		
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"AZN",false);
			outstring(100,0,CUIVAZN - CUIPAZN,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVAZNprc[i],false);
			end; 
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"EUR",false);
			outstring(100,0,CUIVEUR - CUIPEUR,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVEURprc[i],false);
			end; 
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"CHF",false);
			outstring(100,0,CUIVCHF - CUIPCHF,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVCHFprc[i],false);
			end; 
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"USD",false);
			outstring(100,0,CUIVUSD - CUIPUSD,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,CUIVUSDprc[i],false);
			end; 
		endformat;
		
		CUIVTotalUSD = CUIVTotalUSD + (CUIVAZN - CUIPAZN);
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		CUIVTotalUSD = CUIVTotalUSD + (CUIVEUR - CUIPEUR)/fr*to1;
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		CUIVTotalUSD = CUIVTotalUSD + (CUIVCHF - CUIPCHF)/fr*to1;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		/*CUIVTotalUSD = CUIVTotalUSD + (CUIVUSD - CUIPUSD)/fr*to1;*/
		
		CUIVTotalUSD = CUIVTotalUSD*fr/to1;
		startformat(15);
			outstring(0,0,"",false);
			outstring(50,0,"Итого USD",false);
			outstring(100,0,CUIVTotalUSD + (CUIVUSD - CUIPUSD),false);
		endformat;
		totusd = totusd + CUIVTotalUSD + (CUIVUSD - CUIPUSD);
	
return;
end;





global
procedure PrintStockRetFob9ByCat(integer brandscnt,date sd, date ed,string location,array string aBrands)
begin
	string 10 incurncy;
	val fr,to1,to2,br1,br2;
	array val aBrandsRetEUR;
	array val aBrandsRetCHF;
	array val aBrandsRetUSD;
	val BrandsRetUSDtotal;

	array val aBrandsSelEUR;
	array val aBrandsSelCHF;
	array val aBrandsSelUSD;
	val BrandsSelUSDtotal;
	
	array val aBrandsSelEURcons;
	array val aBrandsSelCHFcons;
	array val aBrandsSelUSDcons;
	val BrandsSelUSDtotalcons;
	
	record INVc INr;
	boolean TrHs,testf;
	integer i,j,mtrw,sign,br;
	record ItemHistVc IHr;
	date curdate;
	record IVVc IVr;
	record RetVc Retr;
	val totrow;
  record CUVc CUr;//Edit-------------------Vitalii 16:04 13.11.2017
	
	INr.Code = "";
	while(loopmain(INr,1,true))begin
		if(nonblank(INr.LastPurchCurncyCode))then begin
			incurncy = INr.LastPurchCurncyCode;
		end else begin
			incurncy = "USDB";
		end;
		For(i=0;i<brandscnt;i=i+1) begin
			if(setinset(aBrands[i],PrepareDispGroups(INr.DispGroups)))then begin
				br = i;
			end;
		end; 
		IHr.TransDate = "";
		IHr.ArtCode = INr.Code;
		TrHs = true;
		curdate = "";
		while(loopkey("ArtCode",IHr,2,TrHs))begin
			testf = true;
			if(setinset("30",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("31",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("32",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("33",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("34",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(setinset("35",INr.DispGroups))then begin TrHs=false; testf = false; end;
			if(IHr.TransDate>ed)then begin testf = false; TrHs = false; end;
			if(IHr.ArtCode!=INr.Code)then begin testf = false; TrHs = false; end;
			if(IHr.StockAffectf==0)then begin testf = false; end;
			if(nonblank(location) and location!=IHr.Location)then begin testf = false; end;
			if(testf and IHr.FileName=="IVVc")then begin
				IVr.SerNr = IHr.TransNr;
				if(readfirstmain(IVr,1,true))then begin
					/*if(IVr.CustCode!="FOB36")then begin
						testf = false;
					end;*/
          if (left(IVr.CustCode,3)=="FOB") then begin//Edit-------------------Vitalii 15:52 13.11.2017
            CUr.Code = IVr.CustCode;
            readfirstmain(CUr,1,true);
            if (CUr.CustCat=="STORE") then begin
              testf = false;
            end;
          end;
				end;
			end;
			if(testf and IHr.FileName=="RetVc")then begin
				Retr.SerNr = IHr.TransNr;
				if(readfirstmain(Retr,1,true))then begin
					/*if(Retr.CustCode!="FOB36")then begin
						testf = false;
					end;*/
          if (left(Retr.CustCode,3)=="FOB") then begin//Edit-------------------Vitalii 15:52 13.11.2017
            CUr.Code = Retr.CustCode;
            readfirstmain(CUr,1,true);
            if (CUr.CustCat=="STORE") then begin
              testf = false;
            end;
          end;
				end;
			end;
			
			if(testf)then begin
				if(IHr.Qty>=0)then begin
					sign = 1;
				end else begin
					sign = -1;
				end;			
														
				if(IHr.TransDate>=sd and IHr.FileName=="RetVc")then begin
					switch(IHr.CurncyCode)begin
						case"EUR":aBrandsRetEUR[br] = aBrandsRetEUR[br] + IHr.TotCostPriceCurncy * sign;
						case"CHF":aBrandsRetCHF[br] = aBrandsRetCHF[br] + IHr.TotCostPriceCurncy * sign;
						case"USD":aBrandsRetUSD[br] = aBrandsRetUSD[br] + IHr.TotCostPriceCurncy * sign;
					end;
					BrandsRetUSDtotal = BrandsRetUSDtotal + IHr.TotCostPrice * sign;
				end;
				
				if(IHr.TransDate>=sd and IHr.FileName=="IVVc" and IHr.Qty>0)then begin
					switch(IHr.CurncyCode)begin
						case"EUR":aBrandsRetEUR[br] = aBrandsRetEUR[br] + IHr.TotCostPriceCurncy * sign;
						case"CHF":aBrandsRetCHF[br] = aBrandsRetCHF[br] + IHr.TotCostPriceCurncy * sign;
						case"USD":aBrandsRetUSD[br] = aBrandsRetUSD[br] + IHr.TotCostPriceCurncy * sign;
					end;
				end;
			end;
		end;
		resetloop(IHr);
	end;
	resetloop(INr);
	
	
	
	startformat(15);
		outstring(0,0,"9",false);
		outstring(0,0,"Возврат от покупателей (FOB)",false);
	endformat;
		
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsRetEUR[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetEUR[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetEUR[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsRetCHF[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetCHF[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetCHF[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		totrow = 0;
		For(i=0;i<brandscnt;i=i+1) begin
			totrow = totrow + aBrandsRetUSD[i];
		end;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,incurncy,false);
			outstring(0,0,totrow,false);
			For(i=0;i<brandscnt;i=i+1) begin
	  		outstring(150+i*50,0,aBrandsRetUSD[i],false);
	  		BrandsRetUSDtotal = BrandsRetUSDtotal + aBrandsRetUSD[i]/fr*to1;
			end; 
		endformat;
		
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"Итого " & incurncy,false);
	  	outstring(150,0,BrandsRetUSDtotal*fr/to1,false);
		endformat;
	
	
return;
end;


global
procedure PrintRates10ByCat(date ed)
begin
	val rateAZN,rateEUR,rateCHF,rateUSD;
	string 10 incurncy;
	val fr,to1,to2,br1,br2;

		rateAZN = 1;
		incurncy = "EURB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		rateEUR = fr/to1;
		incurncy = "CHFB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		rateCHF = fr/to1;
		incurncy = "USDB";
		GetFullCurncyRate(incurncy,ed,fr,to1,to2,br1,br2);
		rateUSD = fr/to1;
		
		startformat(15);
			outstring(0,0,"11",false);
			outstring(0,0,"Курс на отчетную дату",false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"AZN/USD",false);
			outstring(200,0,ValToMyString(1/rateUSD,5),false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"EUR/USD",false);
			outstring(200,0,ValToMyString(rateUSD/rateEUR,5),false);
		endformat;
		startformat(15);
			outstring(0,0,"",false);
			outstring(100,0,"CHF/USD",false);
			outstring(200,0,ValToMyString(rateCHF/rateUSD,5),false);
		endformat;

return;
end;