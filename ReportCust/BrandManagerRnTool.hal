external procedure AddVATSumToVATSum(record SMVc,record SMVc);
external procedure ClearAcums();
external procedure ReadFBRow(record RcVc,record FBVc,string,var Integer,var val,
                    record SMVc,Integer,string,var Boolean,
                    var val,val,val,var val,var val,var LongInt,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,
                    var array string,var array val,var array val,var array val,var Integer);
external procedure ReadRADRecord(record RcVc,record RegArchiveDetailVc,string,var Integer,var val,
                    record SMVc,Integer,string,var Boolean,
                    var val,val,val,var val,var val,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,
                    var array string,var array val,var array val,var array val,var Integer);
external procedure ReadSMRow(record RcVc,record SMVc,string,Date,var Integer,var val,
                    record SMVc,Integer,Integer,var Boolean,
                    var val,val,val,var val,var val,var LongInt,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,
                    var array string,var array val,var array val,var array val,var Integer);
external procedure ReadTrRow(record RcVc,record TRVc,record BaseCurBlock,string,var Integer,var val,
                    record SMVc,Integer,string,var Boolean,
                    var val,var val,var val,var val,var val,var LongInt,
                    var Boolean,Array Boolean,Array string,Array string,Array LongInt,
                    record AccVc,Boolean,var array string,var array val,var array val,var array val,var Integer);
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external function Boolean AccInRange(string,string);
external procedure FindAccSD(Date,var Date,var Boolean);
external procedure LogProcTime(string,longint);

function
Boolean MainLoopNext(Array Boolean mhractivef,Array Boolean mhrfoundf,Array Boolean mhrfirstf,
                     Array Boolean mhrheaderf,Array Boolean mhrotflag,Array LongInt mhrLLoop,
                     Array string mhrvc,Array string mhrckey,Array string mhrfromstr,Array string mhrtostr,
                     Integer arrcnt)
BEGIN
  Boolean res;
  record ObjVc Objr;
  record AccVc Accr;
  
  if (mhractivef[arrcnt]==false) then begin
    goto LMainLoopNext;
  end;
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopNext;
  end;
L22MainLoopNext:;  
  if (mhrfirstf[arrcnt]==false) then begin
    if (mhrvc[arrcnt]=="AccVc") then begin
      SetLoopPosition(Accr,mhrLLoop[arrcnt]);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Accr,1,true);
      mhrLLoop[arrcnt] = GetLoopPosition(Accr);
    end;
    if (mhrvc[arrcnt]=="ObjVc") then begin
      SetLoopPosition(Objr,mhrLLoop[arrcnt]);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Objr,1,true);
      mhrLLoop[arrcnt] = GetLoopPosition(Objr);
    end;
  end else begin
    if (mhrvc[arrcnt]=="AccVc") then begin
      SetLoopPosition(Accr,mhrLLoop[arrcnt]-1);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Accr,1,true);
    end;
    if (mhrvc[arrcnt]=="ObjVc") then begin
      SetLoopPosition(Objr,mhrLLoop[arrcnt]-1);
      mhrfoundf[arrcnt] = LoopKey(mhrckey[arrcnt],Objr,1,true);
    end;
  end;
  mhrfirstf[arrcnt] = false;  
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopNext;
  end;
  
  if (mhrvc[arrcnt]=="AccVc") then begin
    if (nonblank(mhrfromstr[arrcnt])) then begin
      if (Accr.AccNumber<mhrfromstr[arrcnt]) then begin
        mhrfoundf[arrcnt] = false;
      end;
    end;
    if (nonblank(mhrtostr[arrcnt])) then begin
      if (Accr.AccNumber>mhrtostr[arrcnt]) then begin
        mhrfoundf[arrcnt] = false;
      end;
    end;
  end;
  if (mhrvc[arrcnt]=="ObjVc") then begin
    if (mhrotflag[arrcnt]) then begin
      if (Objr.OTCode!=mhrfromstr[arrcnt]) then begin
        mhrfoundf[arrcnt] = false;
      end;
    end else begin
      if (nonblank(mhrfromstr[arrcnt])) then begin
        if (Objr.Code<mhrfromstr[arrcnt]) then begin
          mhrfoundf[arrcnt] = false;
        end;
      end;
      if (nonblank(mhrtostr[arrcnt])) then begin      
        if (Objr.Code>mhrtostr[arrcnt]) then begin
          mhrfoundf[arrcnt] = false;
        end;
      end;
    end;
  end;
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopNext;
  end;
  if (mhrvc[arrcnt]=="AccVc") then begin
    if (Accr.GroupAcc!=0) then begin
      goto L22MainLoopNext;
    end;
  end;
  mhrheaderf[arrcnt] = false;
  res = true;
LMainLoopNext:;
  MainLoopNext = res;
  RETURN;
END;

procedure MainLoopAccp(Array string mhrckey,Array string mhrvc,Array LongInt mhrLLoop,record AccVc resAccrp)
BEGIN
  record AccVc Accr;
  Boolean TrHs;  
    
  RecordCopy(resAccrp,Accr);
  if (mhrvc[0]=="AccVc") then begin
    SetLoopPosition(Accr,mhrLLoop[0]-1);
    TrHs = true;
    if (LoopKey(mhrckey[0],Accr,1,TrHs)) then begin
      if (TrHs) then begin
        RecordCopy(resAccrp,Accr);
      end;
    end;
    goto LMainLoopAccp;
  end;
  if (mhrvc[1]=="AccVc") then begin
    SetLoopPosition(Accr,mhrLLoop[1]-1);
    TrHs = true;
    if (LoopKey(mhrckey[1],Accr,1,TrHs)) then begin
      if (TrHs) then begin
        RecordCopy(resAccrp,Accr);
      end;
    end;
    goto LMainLoopAccp;
  end;
  if (mhrvc[2]=="AccVc") then begin
    SetLoopPosition(Accr,mhrLLoop[2]-1);
    TrHs = true;
    if (LoopKey(mhrckey[2],Accr,1,TrHs)) then begin
      if (TrHs) then begin
        RecordCopy(resAccrp,Accr);
      end;
    end;
    goto LMainLoopAccp;
  end;
LMainLoopAccp:;
  RETURN;
END;

function Boolean CurUserAccBlockedTest(string accnr)
BEGIN
  Boolean resb;
  record UserVc Userr;
  record AccessVc Accessr;
  
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    Accessr.Code = Userr.AccessGroup;
    if (ReadFirstMain(Accessr,1,true)) then begin
      if (AccInRange(accnr,Accessr.BlockAccs)) then begin
        resb = true;
      end;
    end;
  end else begin
  end;  
  CurUserAccBlockedTest = resb;
  RETURN;
END;

procedure MainInnerLoop(record RcVc RepSpec,Boolean showbasecurf,record SMVc VATSump,var Boolean FirstTrans,var val CurBal,Date AccumStartDate,
                        Boolean resUseAccum,var val TotSumDebet,var val TotSumCredit,var val TotSumDebetCur,var val TotSumCreditCur,
                        var Boolean headeroutf,Array Boolean mhractivef,Array Boolean mhrfoundf,Array LongInt mhrLLoop,
                        Array Boolean mhrfirstf,Array Boolean mhrheaderf,Array Boolean mhrotflag,
                        Array string mhrfromstr,Array string mhrtostr,Array string mhrckey,Array string mhrvc,Boolean printf,var val TotSumFwBal,var val TotSumBal,
                        var LongInt TotTransCnt)
BEGIN
  val v;
  val MainIS,MainOS,tmpMainOS;
  LongInt MainCnt,tmpMainCnt;
  record MainVc mainr;
  record TRVc MR3;
  record FBVc FBr;
  record RegArchiveDetailVc RADr;
  record SMVc SMr;
  record CYBlock CompYear;
  record AccVc Accr;
  Boolean TrHs,testf;
  Integer OldTransMonth;
  val SumDebet,SumCredit;
  Integer curcnt;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  record BaseCurBlock BCb;
  record SMVc VATSumr;
  
  MainCnt = 0;
  MainLoopAccp(mhrckey,mhrvc,mhrLLoop,Accr);
  headeroutf = false;
  BlockLoad(CompYear);  
  BlockLoad(BCb);  
  testf = true;
  if (CurUserAccBlockedTest(Accr.AccNumber)) then begin
    testf = false;
  end;
  if (testf) then begin  
    FirstTrans = true;

    FindNLAccBal(Accr.AccNumber,RepSpec.ObjStr,RepSpec.ObjType,Accr.AccType,AccumStartDate,RepSpec.sStartDate,
                 RepSpec.SimVerf,RepSpec.basecurncy,resUseAccum,RepSpec.CurncyCode,RepSpec.IncDaughter,RepSpec.f3,"",CurBal);

    TotSumDebetCur = blankval;
    TotSumCreditCur = blankval;
    if (nonblank(Accr.Curncy)) then begin
      FindNLAccBal(Accr.AccNumber,RepSpec.ObjStr,RepSpec.ObjType,Accr.AccType,AccumStartDate,RepSpec.sStartDate,
                   RepSpec.SimVerf,RepSpec.basecurncy,resUseAccum,Accr.Curncy,RepSpec.IncDaughter,RepSpec.f3,"",v);

      if (v>0) then begin
        TotSumDebetCur = v;
      end else begin
        TotSumCreditCur = v;
      end;
    end;
    MainIS = CurBal;
    MainOS = CurBal;
    if (Accr.AccType==0) then begin
      if (CompYear.NS1[0]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;
    if (Accr.AccType==1) then begin
      if (CompYear.NS1[1]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
        TotSumCreditCur = -TotSumCreditCur;
        TotSumDebetCur = -TotSumDebetCur;
      end;
    end;
    if (Accr.AccType==2) then begin
      if (CompYear.NS1[2]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;
    if (Accr.AccType==3) then begin
      if (CompYear.NS1[3]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;
    if (Accr.AccType==4) then begin
      if (CompYear.NS1[4]==1) then begin
        MainOS = -MainOS;
        MainIS = -MainIS;
      end;
    end;      
  end;
  if (testf) then begin
    if (RepSpec.ArtMode==0) then begin
      SumDebet = blankval;
      SumCredit = blankval;
    end else begin
      SumDebet = 0;
      SumCredit = 0;
    end;
    OldTransMonth = 0;
    TrHs = true;
    mainr.AccNumber = Accr.AccNumber;
    mainr.TransDate = RepSpec.sStartDate;
    while (LoopKey("MainKey",mainr,2,TrHs)) begin    
      if (TrHs) then begin
        if (mainr.TransDate>RepSpec.sEndDate) then begin
          TrHs = false;
        end;
      end;
      if (TrHs) then begin
        if (mainr.AccNumber!=Accr.AccNumber) then begin
          TrHs = false;
        end;
      end;      
      if (TrHs) then begin
        if (mainr.FileName=="TRVc") then begin
          MR3.Number = mainr.TransNr;
          MR3.IntYc = mainr.IntYc;
          if (ReadFirstMain(MR3,2,true)) then begin

            testf = true;
            switch (RepSpec.flags[26]) begin
              case 1: if (MR3.SeqNr>0) then begin testf = false; end;
              case 2: if (MR3.SeqNr<=0) then begin testf = false; end;
            end;
            if (testf) then begin
              tmpMainOS = blankval;
              tmpMainCnt = MainCnt;
              if (mainr.TransDate==MR3.TransDate) then begin
			    ReadTrRow(RepSpec,MR3,BCb,RepSpec.ObjStr,OldTransMonth,tmpMainOS,
                          VATSumr,RepSpec.basecurncy,RepSpec.CurncyCode,FirstTrans,
                          CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,MainCnt,
                          headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,false,
                          acur,av1,av2,av3,curcnt);
                if (tmpMainCnt!=MainCnt) then begin
                  if (RepSpec.ArtMode==0) or (blank(RepSpec.ObjStr)) or (RepSpec.ArtMode!=0 and nonblank(RepSpec.ObjStr)) then begin
                    MainOS = tmpMainOS;
                  end else begin
                    MainOS = MainOS + tmpMainOS;
                  end;
                end;              
              end;
            end;
          end;
        end;
        if (mainr.FileName=="FBVc") then begin
            FBr.SerNr = mainr.TransNr;
            if (ReadFirstMain(FBr,1,true)) then begin
              if (mainr.TransDate==FBr.TransDate) then begin
                if ((blank(RepSpec.ObjStr) and blank(FBr.Objects))) or 
                   ((nonblank(RepSpec.ObjStr) and SetInSet(RepSpec.ObjStr,FBr.Objects) and SetInSet(FBr.Objects,RepSpec.ObjStr))) then begin
                  tmpMainOS = blankval;
                  tmpMainCnt = MainCnt;
                  ReadFBRow(RepSpec,FBr,RepSpec.ObjStr,OldTransMonth,tmpMainOS,
                            VATSumr,RepSpec.basecurncy,RepSpec.CurncyCode,FirstTrans,
                            CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,MainCnt,
                            headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,false,
                           acur,av1,av2,av3,curcnt);
                  if (tmpMainCnt!=MainCnt) then begin
                    MainOS = tmpMainOS;
                  end;
                end;
              end;
            end;
        end;
        if (mainr.FileName=="RegArchiveDetailVc") then begin
            RADr.SerNr = mainr.TransNr;
            if (ReadFirstMain(RADr,1,true)) then begin
              if (mainr.TransDate==RADr.TransDate) then begin
                tmpMainOS = blankval;
                tmpMainCnt = MainCnt;
                ReadRADRecord(RepSpec,RADr,RepSpec.ObjStr,OldTransMonth,tmpMainOS,
                          VATSumr,RepSpec.basecurncy,RepSpec.CurncyCode,FirstTrans,
                          CurBal,TotSumDebetCur,TotSumCreditCur,SumDebet,SumCredit,
                          headeroutf,mhrheaderf,mhrvc,mhrckey,mhrLLoop,Accr,false,
                          acur,av1,av2,av3,curcnt);
                if (tmpMainCnt!=MainCnt) then begin
                  MainOS = tmpMainOS;
                end;
              end;
            end;
        end;
      end;
    end;
    if ((headeroutf) or (RepSpec.UsedOnly==0)) then begin
      if (ProgramType==typHansaRaama) then begin          
        if (Accr.AccType==0) then begin
          if (CompYear.NS1[0]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==1) then begin
          if (CompYear.NS1[1]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==2) then begin
          if (CompYear.NS1[2]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==3) then begin
          if (CompYear.NS1[3]==1) then begin
            MainIS = -MainIS;
          end;
        end;
        if (Accr.AccType==4) then begin
          if (CompYear.NS1[4]==1) then begin
            MainIS = -MainIS;
          end;
        end;  
      end;
    end;
  end;
  TotSumDebet = TotSumDebet + SumDebet;
  TotSumCredit = TotSumCredit + SumCredit;
  TotSumCredit = -TotSumCredit;
  TotSumFwBal = TotSumFwBal + MainIS;
  TotSumBal = TotSumBal + MainOS;
  AddVATSumToVATSum(VATSumr,VATSump);
  RETURN;
END;

procedure MainLoopInit(record RcVc RepSpec,Integer lnr,
                       Array string mhrvc,Array string mhrfromstr,Array string mhrtostr,
                       Array Boolean mhractivef,Array Boolean mhrotflag,Integer arrcnt,
                       string specstr)
BEGIN
  Boolean accs;
  record OTVc OTr;
  string 20 fromstr,tostr;
  
  if (RepSpec.flags[11]==lnr) then begin
    accs = true;
    mhrvc[arrcnt] = "AccVc";
  end else begin
    mhrvc[arrcnt] = "ObjVc";
  end;
  mhrfromstr[arrcnt] = FirstInRange(specstr,20);
  mhrtostr[arrcnt] = LastInRange(specstr,20);
  mhractivef[arrcnt] = true;
  if (accs==false) then begin
    mhrotflag[arrcnt] = false;
    if (blank(specstr)) then begin
      mhractivef[arrcnt] = false;
    end else begin
      OTr.Code = specstr;
      if (ReadFirstMain(OTr,1,true)) then begin
        mhrotflag[arrcnt] = true;
      end;
    end;
  end;
  RETURN;
END;

procedure MainLoopStart(Array Boolean mhractivef,Array Boolean mhrfirstf,Array Boolean mhrfoundf,
                        Array Boolean mhrotflag,Array LongInt mhrLLoop,
                        Array string mhrvc,Array string mhrckey,Array string mhrfromstr,Integer arrcnt)
BEGIN
  record ObjVc Objr;
  record AccVc Accr;
  
  if (mhractivef[arrcnt]==false) then begin 
    goto LMainLoopStart; 
  end;
  mhrfirstf[arrcnt] = true;
  if (mhrvc[arrcnt]=="AccVc") then begin
    mhrckey[arrcnt] = "AccNumber";
    Accr.AccNumber = mhrfromstr[arrcnt];
    mhrfoundf[arrcnt] = LoopKey("AccNumber",Accr,1,true);
    mhrLLoop[arrcnt] = GetLoopPosition(Accr);
  end;
  if (mhrvc[arrcnt]=="ObjVc") then begin
    if (mhrotflag[arrcnt]) then begin
      mhrckey[arrcnt] = "OTCode";
      Objr.OTCode = mhrfromstr[arrcnt];
      mhrfoundf[arrcnt] = LoopKey("OTCode",Objr,1,true);
      mhrLLoop[arrcnt] = GetLoopPosition(Objr);
    end else begin
      mhrckey[arrcnt] = "Code";
      Objr.Code = mhrfromstr[arrcnt];
      mhrfoundf[arrcnt] = LoopKey("Code",Objr,1,true);
      mhrLLoop[arrcnt] = GetLoopPosition(Objr);
    end;
  end;
LMainLoopStart:;
  RETURN;
END;

procedure MainLoopAddObj(var record RcVc RepSpec,Array Boolean mhractivef,Array Boolean mhrfoundf,
                         Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,Integer arrcnt)
BEGIN
  record ObjVc Objr;
 
  if (mhractivef[arrcnt]==false) then begin
    goto LMainLoopAddObj;
  end;
  if (mhrvc[arrcnt]=="AccVc") then begin
    goto LMainLoopAddObj;
  end;
  if (mhrfoundf[arrcnt]==false) then begin
    goto LMainLoopAddObj;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    RepSpec.ObjStr = RepSpec.ObjStr & ",";
  end;
  
  SetLoopPosition(Objr,mhrLLoop[arrcnt]-1);
  if (LoopKey(mhrckey[arrcnt],Objr,1,true)) then begin
    RepSpec.ObjStr = RepSpec.ObjStr & Objr.Code;
  end;  
LMainLoopAddObj:;
  RETURN;
END;

procedure MainLoopAddObjs(var record RcVc RepSpec,Array Boolean mhractivef,Array Boolean mhrfoundf,
                          Array string mhrvc,Array string mhrckey,Array LongInt mhrLLoop,Integer arrcnt,string orgobjstr)
BEGIN
  RepSpec.ObjStr = orgobjstr;
  MainLoopAddObj(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,0);
  MainLoopAddObj(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,1);
  MainLoopAddObj(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,2);
  RETURN;
END;


procedure RunBMTool(var record RcVc RepSpec,Boolean showbasecurf,Date AccumStartDate,var Boolean resUseAccum,var val TotSumDebet,var val TotSumCredit,record SMVc VATSumr,Boolean printf,var val totsumFwBal,var val TotSumBal,var LongInt TotTransCnt)
BEGIN
  Integer i;
  string 60 objtype;
  string 255 orgobjstr;
  Boolean FirstTrans;
  val TotSumDebetCur,TotSumCreditCur;
  val CurBal;
  Integer arrcnt;
  Boolean headeroutf,found;
  Array Boolean mhractivef;
  Array string 20 mhrfromstr;
  Array string 20 mhrtostr;
  Array string 60 mhrckey;
  Array string 20 mhrvc;
  Array Boolean mhrfoundf;
  Array LongInt mhrLLoop;
  Array Boolean mhrfirstf;
  Array Boolean mhrheaderf;
  Array Boolean mhrotflag;
  record AccVc Accr;
    
  RepSpec.long1 = 0;
  RepSpec.long2 = 0;  
  objtype = "";
  
  TotSumDebet = blankval;
  TotSumCredit = blankval;
  TotSumDebetCur = blankval;
  TotSumCreditCur = blankval;
  TotTransCnt = 0;

  totsumFwBal = blankval;
  TotSumBal = blankval;


  orgobjstr = RepSpec.ObjStr;
  MainLoopInit(RepSpec,0,mhrvc,mhrfromstr,mhrtostr,mhractivef,mhrotflag,0,RepSpec.f4);
  MainLoopInit(RepSpec,1,mhrvc,mhrfromstr,mhrtostr,mhractivef,mhrotflag,1,RepSpec.f5);
  MainLoopInit(RepSpec,2,mhrvc,mhrfromstr,mhrtostr,mhractivef,mhrotflag,2,RepSpec.f6);
	

  MainLoopStart(mhractivef,mhrfirstf,mhrfoundf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,0);
L22MainRn:;
  if (MainLoopNext(mhractivef,mhrfoundf,mhrfirstf,mhrheaderf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,mhrtostr,0)==false) then begin
    goto L88MainRn;
  end;
  found = true;

  if (mhractivef[1]) then begin
    MainLoopStart(mhractivef,mhrfirstf,mhrfoundf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,1);
L33MainRn:;
    if (MainLoopNext(mhractivef,mhrfoundf,mhrfirstf,mhrheaderf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,mhrtostr,1)==false) then begin
      goto L22MainRn;
    end;
  end;
  if (mhractivef[2]) then begin
    MainLoopStart(mhractivef,mhrfirstf,mhrfoundf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,2);
L44MainRn:;
    if (MainLoopNext(mhractivef,mhrfoundf,mhrfirstf,mhrheaderf,mhrotflag,mhrLLoop,mhrvc,mhrckey,mhrfromstr,mhrtostr,2)==false) then begin
      goto L33MainRn;
    end;
  end;  
  MainLoopAddObjs(RepSpec,mhractivef,mhrfoundf,mhrvc,mhrckey,mhrLLoop,arrcnt,orgobjstr);

  MainInnerLoop(RepSpec,showbasecurf,VATSumr,FirstTrans,CurBal,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,TotSumDebetCur,TotSumCreditCur,
                headeroutf,mhractivef,mhrfoundf,mhrLLoop,
                mhrfirstf,mhrheaderf,mhrotflag,mhrfromstr,mhrtostr,mhrckey,mhrvc,printf,totsumFwBal,TotSumBal,TotTransCnt);

  goto L44MainRn;
L88MainRn:;
  RETURN;
END;

global
procedure BrandManagerRnTool(record RcVc specRepSpec, var val TotSumDebet, var val TotSumCredit, var val TotSumFwBal, var val TotSumBal)
BEGIN
	Date AccumStartDate;
	Boolean resUseAccum;
	LongInt TotTransCnt;
	record SMVc VATSumr;
	record RcVc RepSpec;
	longint curtick;
	
	curtick = getcurtick();
	RecordCopy(RepSpec,specRepSpec);
	//RepSpec = specRepSpec;
	//RepSpec.f1 = "";
	RepSpec.f3 = "";
	RepSpec.f5 = "";
	RepSpec.ObjType = "";
	RepSpec.SimVerf = 0;
	RepSpec.basecurncy = 0;
	RepSpec.ArtMode = 0;
	RepSpec.UsedOnly = 1;
	RepSpec.LastAcc = 0;
	RepSpec.PocketPC = 0;
	RepSpec.IncDaughter = 0;
	RepSpec.flags[1] = 0;
	RepSpec.flags[4] = 0;
	RepSpec.flags[5] = 0;
	RepSpec.flags[8] = 0;
	RepSpec.flags[11] = 0;
	RepSpec.flags[12] = 0;
	RepSpec.flags[21] = 1;
	RepSpec.flags[22] = 1;
	RepSpec.flags[23] = 0;
	RepSpec.flags[26] = 0;
	RepSpec.flags[27] = 0;
	RepSpec.flags[28] = 0;
	RepSpec.flags[29] = 0;

	TotTransCnt = 0;
	TotSumFwBal = 0;
	TotSumBal = 0;
	
	//FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);
	AccumStartDate = StringToDate("1/1/1900");
	resUseAccum = true;
	ClearAcums;
	RunBMTool(RepSpec,false,AccumStartDate,resUseAccum,TotSumDebet,TotSumCredit,VATSumr,true,TotSumFwBal,TotSumBal,TotTransCnt);
	LogProcTime("BrandManagerRnTool",getcurtick() - curtick);
	RETURN;
END;