remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
remote procedure GetBaseCurncy(Integer,var string);
external procedure ExtractObj(string,var Integer,var string);
external function longint DateDiff(date,date);
remote procedure ItemStockStatExtWebRn(record RcVc,var area,string);
remote procedure ItemStockStatExtWebNewRn(record RcVc,var area,string);
remote procedure SalesReportExtPictRn(record RcVc,var area,string);
external procedure GetUserName(string,var string);
//Edit---------------Vitalii 16:23 21.05.2015
external procedure FindNLAccBal(string,string,string,Integer,Date,Date,Integer,Integer,Boolean,string,Integer,string,string,var val);
external procedure YcToStr(Integer,var string);
external function Boolean CorspTRTest(record TRVc,record AccVc,Integer,var val,var val);
external procedure GetObjs(string,string,var string);
external function boolean CompanyIsJWLikeCompany(Integer);
external procedure SendUpdateLoyaltyCardToCRM(var record LoyaltyCardVc);
external  function string 100 BPICodeToName(string);
remote function string 255 GetCompanyShortCode(string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external procedure CollectNameByCode(var vector string);
remote inner procedure LogProcTime(string,longint);
remote procedure GetPriceItem(string,var val,var val);
remote function Boolean GetTempItemPrice(var val,string,var string, date,var string); 
remote function string 60 UserDefined(string,string);
external function string 255 NormalizeStrToJson (string);



SetLangMode(LangRussian,"RUS",0); //Edit***************************Sasha2,17:21 11.12.2014




global procedure ExportTableToExcelNewINRn(record RcVc RepSpec)
begin
  record NewINVc NewINr;
  row NewINVc NewINrw;
  Integer rwcnt,i,wn;
	record ConsCompBlock CPb;
 
  blockload(CPb);
	
  NewINr.SerNr = RepSpec.long1;
  if (ReadFirstMain(NewINr,1,true)) then begin	  
  rwcnt=MatRowCnt(NewINr);
 
	StartReportJob("ExportToExcel");
	

	StartFormat(15);
	OutString(0,0,"Номер: " & NewINr.SerNr,true);
	OutString(0,0,"Бренд: " & NewINr.Brand,true);
	OutString(0,0,"Группа: " & NewINr.Group,true);
	OutString(0,0,"Пользователь: " & NewINr.SalesMan,false);
	OutString(0,0,"Дата: " & NewINr.TransDate,false);
	OutString(0,0,"Компании: " & NewINr.UserStr5,false);
	EndFormat;
	Black_Divider(0,1);


	StartFormat(15);
	if(CPb.OKFlag==0) then begin
		OutString(0,0,"Товар",true);
		OutString(0,0,"Наименование",true);
	end else begin 
		OutString(0,0,"Товар",true);
		OutString(0,0,"Код товара",true);
		OutString(0,0,"Наименование",true);
	end;
	
	OutString(0,0,"Штрих-код",true);
	OutString(0,0,"Альтернативный код",true);
	OutString(0,0,"Collection",true);
	OutString(0,0,"Е.И.",true);
	
	OutString(0,0,"GroupC1",true);
	OutString(0,0,"Sub-Group",true);
	OutString(0,0,"Category",true);
	OutString(0,0,"Material",true);
	OutString(0,0,"Color",true);
	OutString(0,0,"Group",true);
	
	OutString(0,0,"BTRx Группа",true);
	OutString(0,0,"BTRx Название продукта",true);
	OutString(0,0,"BTRx Цвет ремешка",true);
	OutString(0,0,"BTRx Мат. ремешка",true);
	
	OutString(0,0,"BTRx Цвет часов",true);
	OutString(0,0,"BTRx Мат. часов",true);
	OutString(0,0,"BTRx Центр. кам.",true);
	OutString(0,0,"Year",true);
	OutString(0,0,"Life",true);
	OutString(0,0,"BTRx Лим. товар",true);
	
	OutString(0,0,"BTRx Гарантия",true);
	OutString(0,0,"BTRx Длина",true);
	OutString(0,0,"BTRx Ширина",true);
	OutString(0,0,"BTRx Высота",true);
	OutString(0,0,"BTRx Диаметр",true);
	OutString(0,0,"BTRx Объем",true);
	
	OutString(0,0,"BTRx Вес",true);
	OutString(0,0,"BTRx Размер",true);
	OutString(0,0,"BTRx Ед.изм.",true);
	OutString(0,0,"BTRx Все материалы",true);
	OutString(0,0,"BTRx Усложнения",true);
	OutString(0,0,"BTRx Диаметр корп.",true);
	
	OutString(0,0,"BTRx Механизм часов",true);
	OutString(0,0,"BTRx Запас хода",true);
	OutString(0,0,"BTRx Водонепрон.",true);
	OutString(0,0,"BTRx Наполнение",true);
	OutString(0,0,"BTRx Защ. от микр.",true);
	
	OutString(0,0,"Size",true);
	OutString(0,0,"Use",true);
	OutString(0,0,"Sex",true);
	OutString(0,0,"Plating",true);
	OutString(0,0,"CC Collection",true);
	OutString(0,0,"CountInSet",true);
	
	OutString(0,0,"Clarity",true);
	OutString(0,0,"Weight",true);
	OutString(0,0,"Cut",true);
	OutString(0,0,"Shape",true);
	OutString(0,0,"WeightOfMat",true);	
	OutString(0,0,"BTRx Карат. камня",true);
	
	OutString(0,0,"BTRx Дополн. описание",true);
	OutString(0,0,"BTRx Уход",true);
	OutString(0,0,"BTRx Защ. от царапин",true);
	OutString(0,0,"BTRx Особ. продукта",true);
	
	OutString(0,0,"Stone",true);
	OutString(0,0,"Strap",true);
	OutString(0,0,"Odour",true);
	OutString(0,0,"Comment",true);
	OutString(0,0,"Тип товара",true);
	
	OutString(0,0,"Серийный учет",true);
	OutString(0,0,"Код EKN",true);
	OutString(0,0,"ПП Код",true);
	if(CPb.OKFlag==0) then begin
		OutString(0,0,"Альтернативный код",true);
	end;
	
	OutString(0,0,"Новый Штрих-код",true);
	OutString(0,0,"Новый код пост.",true);
	EndFormat;
	Black_Divider(0,1);
	

	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(NewINr,i,NewINrw)
		StartFormat(15);
		
		if(CPb.OKFlag==0) then begin
			OutString(0,0,NewINrw.Code,false);
			OutString(0,0,NewINrw.Name,false);
		end else begin 
			OutString(0,0,NewINrw.Code,false);
			OutString(0,0,NewINrw.VendorCode,false);
			OutString(0,0,NewINrw.Name,false);
		end;
		
		OutString(0,0,NewINrw.BarCode,false);
		OutString(0,0,NewINrw.AlternativeCode,false);
		OutString(0,0,NewINrw.Collection,false);
		OutString(0,0,NewINrw.Unittext,false);
		
		OutString(0,0,NewINrw.GroupCl,false);
		OutString(0,0,NewINrw.SubGroupCl,false);
		OutString(0,0,NewINrw.classif31,false);
		OutString(0,0,NewINrw.Material,false);
		OutString(0,0,NewINrw.Color,false);
		OutString(0,0,NewINrw.Group,false);
		
		OutString(0,0,NewINrw.BTRxGroup,false);
		OutString(0,0,NewINrw.ProductNameCode,false);
		OutString(0,0,NewINrw.StrapColourCode,false);
		OutString(0,0,NewINrw.StrapMat,false);
		
		OutString(0,0,NewINrw.ClockFaceColourCode,false);
		OutString(0,0,NewINrw.ClockFaceMaterialCode,false);
		OutString(0,0,NewINrw.StoneScattA2,false);
		OutString(0,0,NewINrw.High,false);
		OutString(0,0,NewINrw.Life2,false);
		OutString(0,0,NewINrw.LimitedGood,false);
		
		OutString(0,0,NewINrw.Warranty,false);
		OutString(0,0,NewINrw.Length2,false);
		OutString(0,0,NewINrw.Width2,false);
		OutString(0,0,NewINrw.Height2,false);
		OutString(0,0,NewINrw.Diameter2,false);
		OutString(0,0,NewINrw.Volume2,false);
		
		OutString(0,0,NewINrw.Weight2,false);
		OutString(0,0,NewINrw.ItemSize,false);
		OutString(0,0,NewINrw.UnitOfMeasurement,false);
		OutString(0,0,NewINrw.AllMaterials,false);
		OutString(0,0,NewINrw.Complications,false);
		OutString(0,0,NewINrw.CaseDiameter,false);
		
		OutString(0,0,NewINrw.WatchMechanism,false);
		OutString(0,0,NewINrw.PowerReserve,false);
		OutString(0,0,NewINrw.WaterResistant,false);
		OutString(0,0,NewINrw.Filling,false);
		OutString(0,0,NewINrw.MicrowaveSafe,false);
		
		OutString(0,0,NewINrw.SizeCl,false);
		OutString(0,0,NewINrw.UseCl,false);
		OutString(0,0,NewINrw.SexCl,false);
		OutString(0,0,NewINrw.PlatingCl,false);
		OutString(0,0,NewINrw.UserStr2,false);
		OutString(0,0,NewINrw.CountInSet,false);
			
		OutString(0,0,NewINrw.ClaritySC,false);
		OutString(0,0,NewINrw.WeightCl,false);
		OutString(0,0,NewINrw.CutCl,false);
		OutString(0,0,NewINrw.ShapeCut,false);
		OutString(0,0,NewINrw.WeightOfMat,false);
		OutString(0,0,NewINrw.DiamondsCarat,false);
		
		OutString(0,0,NewINrw.AddProdDesc,false);
		OutString(0,0,NewINrw.Care,false);
		OutString(0,0,NewINrw.Sctrchresistant,false);
		OutString(0,0,NewINrw.ProdFeat,false);		
		
		OutString(0,0,NewINrw.StoneCl,false);
		OutString(0,0,NewINrw.Strap,false);
		OutString(0,0,NewINrw.OdourCl,false);
		OutString(0,0,NewINrw.UserStr1,false);
		OutString(0,0,NewINrw.ConsgType,false);
		
		OutString(0,0,NewINrw.SerNrf,false);
		OutString(0,0,NewINrw.EKNCode,false);
		OutString(0,0,NewINrw.CPSCode,false);
		if(CPb.OKFlag==0) then begin
			OutString(0,0,NewINrw.AlternativeCode,false);
		end;
		OutString(0,0,NewINrw.NewBarCode,false);
		OutString(0,0,NewINrw.NewVECode,false);
		EndFormat;
	end;		
	EndJob;

  end;

return;
end;









global procedure ExportTableNamesParamToExcelNewINRn(record RcVc RepSpec)
begin
  record NewINVc NewINr;
  row NewINVc NewINrw;
  Integer rwcnt,i,wn;
	record ConsCompBlock CPb;
	record BPIBrandVc Brandr;
	record BPICollectionVc Collectr;
	record BPIGroupVc Groupr;
	record BPISubGroupVc SGroupr;
	record BPICategoryVc BPICategoryr;
	record BPIMaterialVc BPIMaterialr;
	record BPIColorVc BPIColorr;
	record BPIShapeVc BPIShaper;
	record BPISizeVc BPISizer;
	record BPIUseVc BPIUser;
	record BPISexVc BPISexr;
	record BPIPlatingVc BPIPlatingr;
	record BPIClarityVc BPIClarityr;
	record BPIWeightVc BPIWeightr;
	record BPICutVc BPICutr;
	record BPIStoneVc BPIStoner;
	record BPIStrapVc BPIStrapr;
	record BPIOdourVc BPIOdourr;
	record BTRxBrandVc BTRxBrandr;
	record BTRxMaterialVc BTRxMaterialr;
	record BTRxColourVc BTRxColorr;
	record BTRxSizeVc BTRxSizer;
	record BTRxSexVc BTRxSexr;
	record BTRxPlatingVc BTRxPlatingr;
	record BTRxStoneVc BTRxStoner;
	record BTRxStrapVc BTRxStrapr;
	record BTRxOdourVc BTRxOdourr;
	record BtrxInternalCatVc BtrxInternalCatr;
	record BtrxFirstLevelCatVc BtrxFirstLevelCatr;
	record BtrxSecondLevelCatVc BtrxSecondLevelCatr;
	record BtrxThirdLevelCatVc BtrxThirdLevelCatr;
	record BtrxCertificateVc BtrxCertificater;
	record BtrxWatchMechanVc BtrxWatchMechanr;
	record BtrxPowerReserveVc BtrxPowerReserver;
	record BtrxWatchGradeVc BtrxWatchGrader;
	record BtrxPhoneModelVc BtrxPhoneModelr;
	record BtrxFillingVc BtrxFillingr;
	record BtrxTypeVc BtrxTyper;
	record BtrxWaterResistantVc BtrxWatResr;
	record BtrxStrapMatVc BtrxStrapMatr;
	record BtrxBracelMatVc BtrxBracelMatr;
	record BtrxCollectionVc BtrxCollectionr;
	record BtrxCollectionGroupVc BtrxCollectionGroupr; 
	record BtrxStoveCompatVc BtrxStoveCompatr;
	record BtrxComplicationsVc BtrxComplicationsr;
	record BtrxMicrowaveProtectVc BtrxMicrowaveProtectr;
	record BtrxAllMaterialsVc BtrxAllMaterialsr;
	record BtrxPrecMetalContVc BtrxPrecMetalContr;
	record BtrxCaseDiamVc BtrxCaseDiamr;
	record BtrxProductNameVc BtrxProductNamer;
	record BtrxGroupsVc BtrxGroupr;

	
	
  blockload(CPb);
	
  NewINr.SerNr = RepSpec.long1;
  if (ReadFirstMain(NewINr,1,true)) then begin	  
  rwcnt=MatRowCnt(NewINr);
 
	StartReportJob("ExportToExcel");
	

	StartFormat(15);
	OutString(0,0,"Номер: " & NewINr.SerNr,true);
	OutString(0,0,"Бренд: " & NewINr.Brand,true);
	OutString(0,0,"Группа: " & NewINr.Group,true);
	OutString(0,0,"Пользователь: " & NewINr.SalesMan,false);
	OutString(0,0,"Дата: " & NewINr.TransDate,false);
	OutString(0,0,"Компании: " & NewINr.UserStr5,false);
	EndFormat;
	Black_Divider(0,1);


	StartFormat(15);
	if(CPb.OKFlag==0) then begin
		OutString(0,0,"Товар",true);
		OutString(0,0,"Наименование",true);
	end else begin 
		OutString(0,0,"Товар",true);
		OutString(0,0,"Код товара",true);
		OutString(0,0,"Наименование",true);
	end;
	
	OutString(0,0,"Штрих-код",true);
	OutString(0,0,"Альтернативный код",true);
	OutString(0,0,"Collection",true);
	OutString(0,0,"Е.И.",true);
	
	OutString(0,0,"GroupC1",true);
	OutString(0,0,"Sub-Group",true);
	OutString(0,0,"Category",true);
	OutString(0,0,"Material",true);
	OutString(0,0,"Color",true);
	OutString(0,0,"Group",true);
	
	OutString(0,0,"BTRx Группа",true);
	OutString(0,0,"BTRx Название продукта",true);
	OutString(0,0,"BTRx Цвет ремешка",true);
	OutString(0,0,"BTRx Мат. ремешка",true);
	
	OutString(0,0,"BTRx Цвет часов",true);
	OutString(0,0,"BTRx Мат. часов",true);
	OutString(0,0,"BTRx Центр. кам.",true);
	OutString(0,0,"Year",true);
	OutString(0,0,"Life",true);
	OutString(0,0,"BTRx Лим. товар",true);
	
	OutString(0,0,"BTRx Гарантия",true);
	OutString(0,0,"BTRx Длина",true);
	OutString(0,0,"BTRx Ширина",true);
	OutString(0,0,"BTRx Высота",true);
	OutString(0,0,"BTRx Диаметр",true);
	OutString(0,0,"BTRx Объем",true);
	
	OutString(0,0,"BTRx Вес",true);
	OutString(0,0,"BTRx Размер",true);
	OutString(0,0,"BTRx Ед.изм.",true);
	OutString(0,0,"BTRx Все материалы",true);
	OutString(0,0,"BTRx Усложнения",true);
	OutString(0,0,"BTRx Диаметр корп.",true);
	
	OutString(0,0,"BTRx Механизм часов",true);
	OutString(0,0,"BTRx Запас хода",true);
	OutString(0,0,"BTRx Водонепрон.",true);
	OutString(0,0,"BTRx Наполнение",true);
	OutString(0,0,"BTRx Защ. от микр.",true);
	
	OutString(0,0,"Size",true);
	OutString(0,0,"Use",true);
	OutString(0,0,"Sex",true);
	OutString(0,0,"Plating",true);
	OutString(0,0,"CC Collection",true);
	OutString(0,0,"CountInSet",true);
	
	OutString(0,0,"Clarity",true);
	OutString(0,0,"Weight",true);
	OutString(0,0,"Cut",true);
	OutString(0,0,"Shape",true);
	OutString(0,0,"WeightOfMat",true);	
	OutString(0,0,"BTRx Карат. камня",true);
	
	OutString(0,0,"BTRx Дополн. описание",true);
	OutString(0,0,"BTRx Уход",true);
	OutString(0,0,"BTRx Защ. от царапин",true);
	OutString(0,0,"BTRx Особ. продукта",true);
	
	OutString(0,0,"Stone",true);
	OutString(0,0,"Strap",true);
	OutString(0,0,"Odour",true);
	OutString(0,0,"Comment",true);
	OutString(0,0,"Тип товара",true);
	
	OutString(0,0,"Серийный учет",true);
	OutString(0,0,"Код EKN",true);
	OutString(0,0,"ПП Код",true);
	if(CPb.OKFlag==0) then begin
		OutString(0,0,"Альтернативный код",true);
	end;
	
	OutString(0,0,"Новый Штрих-код",true);
	OutString(0,0,"Новый код пост.",true);
	EndFormat;
	Black_Divider(0,1);
	

	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(NewINr,i,NewINrw)
		StartFormat(15);
		
		if(CPb.OKFlag==0) then begin
			OutString(0,0,NewINrw.Code,false);
			OutString(0,0,NewINrw.Name,false);
		end else begin 
			OutString(0,0,NewINrw.Code,false);
			OutString(0,0,NewINrw.VendorCode,false);
			OutString(0,0,NewINrw.Name,false);
		end;
		
		OutString(0,0,NewINrw.BarCode,false);
		OutString(0,0,NewINrw.AlternativeCode,false);
		Collectr.Code = NewINrw.Collection;
		if (ReadFirstMain(Collectr,1,true)) then begin
			OutString(0,0,Collectr.Name,false);
		end else begin
			OutString(0,0,NewINrw.Collection,false);
		end;
		OutString(0,0,NewINrw.Unittext,false);
		Groupr.Code = NewINrw.GroupCl;
		if (ReadFirstMain(Groupr,1,true)) then begin
			OutString(0,0,Groupr.Name,false);
		end else begin
			OutString(0,0,NewINrw.GroupCl,false);
		end;		
		SGroupr.Code = NewINrw.SubGroupCl;
		if (ReadFirstMain(SGroupr,1,true)) then begin
			OutString(0,0,SGroupr.Name,false);
		end else begin
			OutString(0,0,NewINrw.SubGroupCl,false);
		end;
		BPICategoryr.Code = NewINrw.classif31;
		if (ReadFirstMain(BPICategoryr,1,true)) then begin
			OutString(0,0,BPICategoryr.Name,false);
		end else begin
			OutString(0,0,NewINrw.classif31,false);
		end;
		BPIMaterialr.Code = NewINrw.Material;
		if (ReadFirstMain(BPIMaterialr,1,true)) then begin
			OutString(0,0,BPIMaterialr.Name,false);
		end else begin
			OutString(0,0,NewINrw.Material,false);
		end;
		BPIColorr.Code = NewINrw.Color;
		if (ReadFirstMain(BPIColorr,1,true)) then begin
			OutString(0,0,BPIColorr.Name,false);
		end else begin
			OutString(0,0,NewINrw.Color,false);
		end;
		Groupr.Code = NewINrw.Group;
		if (ReadFirstMain(Groupr,1,true)) then begin
			OutString(0,0,Groupr.Name,false);
		end else begin
			OutString(0,0,NewINrw.Group,false);
		end;
		BtrxGroupr.Code = NewINrw.BTRxGroup;
		if (ReadFirstMain(BtrxGroupr,1,true)) then begin
			OutString(0,0,BtrxGroupr.Name,false);
		end else begin
			OutString(0,0,NewINrw.BTRxGroup,false);
		end;
		BtrxProductNamer.Code = NewINrw.ProductNameCode;
		if (ReadFirstMain(BtrxProductNamer,1,true)) then begin
			OutString(0,0,BtrxProductNamer.Name,false);
		end else begin
			OutString(0,0,NewINrw.ProductNameCode,false);
		end;
		BTRxColorr.Code = NewINrw.StrapColourCode;
		if (ReadFirstMain(BTRxColorr,1,true)) then begin
			OutString(0,0,BTRxColorr.Name,false);
		end else begin
			OutString(0,0,NewINrw.StrapColourCode,false);
		end;
		BTRxMaterialr.Code = NewINrw.StrapMat;
		if (ReadFirstMain(BTRxMaterialr,1,true)) then begin
			OutString(0,0,BTRxMaterialr.Name,false);
		end else begin
			OutString(0,0,NewINrw.StrapMat,false);
		end;
		BTRxColorr.Code = NewINrw.ClockFaceColourCode;
		if (ReadFirstMain(BTRxColorr,1,true)) then begin
			OutString(0,0,BTRxColorr.Name,false);
		end else begin
			OutString(0,0,NewINrw.ClockFaceColourCode,false);
		end;
		BTRxMaterialr.Code = NewINrw.ClockFaceMaterialCode;
		if (ReadFirstMain(BTRxMaterialr,1,true)) then begin
			OutString(0,0,BTRxMaterialr.Name,false);
		end else begin
			OutString(0,0,NewINrw.ClockFaceMaterialCode,false);
		end;
		OutString(0,0,NewINrw.StoneScattA2,false);
		OutString(0,0,NewINrw.High,false);
		OutString(0,0,NewINrw.Life2,false);
		OutString(0,0,NewINrw.LimitedGood,false);
		OutString(0,0,NewINrw.Warranty,false);
		OutString(0,0,NewINrw.Length2,false);
		OutString(0,0,NewINrw.Width2,false);
		OutString(0,0,NewINrw.Height2,false);
		OutString(0,0,NewINrw.Diameter2,false);
		OutString(0,0,NewINrw.Volume2,false);
		OutString(0,0,NewINrw.Weight2,false);
		OutString(0,0,NewINrw.ItemSize,false);
		OutString(0,0,NewINrw.UnitOfMeasurement,false);
		BtrxAllMaterialsr.Code = NewINrw.AllMaterials;
		if (ReadFirstMain(BtrxAllMaterialsr,1,true)) then begin
			OutString(0,0,BtrxAllMaterialsr.Name,false);
		end else begin
			OutString(0,0,NewINrw.AllMaterials,false);
		end;
		BtrxComplicationsr.Code = NewINrw.Complications;
		if (ReadFirstMain(BtrxComplicationsr,1,true)) then begin
			OutString(0,0,BtrxComplicationsr.Name,false);
		end else begin
			OutString(0,0,NewINrw.Complications,false);
		end;
		OutString(0,0,NewINrw.CaseDiameter,false);
		BtrxWatchMechanr.Code = NewINrw.WatchMechanism;
		if (ReadFirstMain(BtrxWatchMechanr,1,true)) then begin
			OutString(0,0,BtrxWatchMechanr.Name,false);
		end else begin
			OutString(0,0,NewINrw.WatchMechanism,false);
		end;
		BtrxPowerReserver.Code = NewINrw.PowerReserve;
		if (ReadFirstMain(BtrxPowerReserver,1,true)) then begin
			OutString(0,0,BtrxPowerReserver.Name,false);
		end else begin
			OutString(0,0,NewINrw.PowerReserve,false);
		end;
		BtrxWatResr.Code = NewINrw.WaterResistant;
		if (ReadFirstMain(BtrxWatResr,1,true)) then begin
			OutString(0,0,BtrxWatResr.Name,false);
		end else begin
			OutString(0,0,NewINrw.WaterResistant,false);
		end;
		BtrxFillingr.Code = NewINrw.Filling;
		if (ReadFirstMain(BtrxFillingr,1,true)) then begin
			OutString(0,0,BtrxFillingr.Name,false);
		end else begin
			OutString(0,0,NewINrw.Filling,false);
		end;
		BtrxMicrowaveProtectr.Code = NewINrw.MicrowaveSafe;
		if (ReadFirstMain(BtrxMicrowaveProtectr,1,true)) then begin
			OutString(0,0,BtrxMicrowaveProtectr.Name,false);
		end else begin
			OutString(0,0,NewINrw.MicrowaveSafe,false);
		end;
		BPISizer.Code = NewINrw.SizeCl;
		if (ReadFirstMain(BPISizer,1,true)) then begin
			OutString(0,0,BPISizer.Name,false);
		end else begin
			OutString(0,0,NewINrw.SizeCl,false);
		end;
		BPIUser.Code = NewINrw.UseCl;
		if (ReadFirstMain(BPIUser,1,true)) then begin
			OutString(0,0,BPIUser.Name,false);
		end else begin
			OutString(0,0,NewINrw.UseCl,false);
		end;
		BPISexr.Code = NewINrw.SexCl;
		if (ReadFirstMain(BPISexr,1,true)) then begin
			OutString(0,0,BPISexr.Name,false);
		end else begin
			OutString(0,0,NewINrw.SexCl,false);
		end;
		BPIPlatingr.Code = NewINrw.PlatingCl;
		if (ReadFirstMain(BPIPlatingr,1,true)) then begin
			OutString(0,0,BPIPlatingr.Name,false);
		end else begin
			OutString(0,0,NewINrw.PlatingCl,false);
		end;
		OutString(0,0,NewINrw.UserStr2,false);
		OutString(0,0,NewINrw.CountInSet,false);
		BPIClarityr.Code = NewINrw.ClaritySC;
		if (ReadFirstMain(BPIClarityr,1,true)) then begin
			OutString(0,0,BPIClarityr.Name,false);
		end else begin
			OutString(0,0,NewINrw.ClaritySC,false);
		end;
		BPIWeightr.Code = NewINrw.WeightCl;
		if (ReadFirstMain(BPIWeightr,1,true)) then begin
			OutString(0,0,BPIWeightr.Name,false);
		end else begin
			OutString(0,0,NewINrw.WeightCl,false);
		end;
		BPICutr.Code = NewINrw.CutCl;
		if (ReadFirstMain(BPICutr,1,true)) then begin
			OutString(0,0,BPICutr.Name,false);
		end else begin
			OutString(0,0,NewINrw.CutCl,false);
		end;
		BPIShaper.Code = NewINrw.ShapeCut;
		if (ReadFirstMain(BPIShaper,1,true)) then begin
			OutString(0,0,BPIShaper.Name,false);
		end else begin
			OutString(0,0,NewINrw.ShapeCut,false);
		end;
		OutString(0,0,NewINrw.WeightOfMat,false);
		OutString(0,0,NewINrw.DiamondsCarat,false);
		OutString(0,0,NewINrw.AddProdDesc,false);
		OutString(0,0,NewINrw.Care,false);
		OutString(0,0,NewINrw.Sctrchresistant,false);
		OutString(0,0,NewINrw.ProdFeat,false);		
		BPIStoner.Code = NewINrw.StoneCl;
		if (ReadFirstMain(BPIStoner,1,true)) then begin
			OutString(0,0,BPIStoner.Name,false);
		end else begin
			OutString(0,0,NewINrw.StoneCl,false);
		end;
		BPIStrapr.Code = NewINrw.Strap;
		if (ReadFirstMain(BPIStrapr,1,true)) then begin
			OutString(0,0,BPIStrapr.Name,false);
		end else begin
			OutString(0,0,NewINrw.Strap,false);
		end;
		BPIOdourr.Code = NewINrw.OdourCl;
		if (ReadFirstMain(BPIOdourr,1,true)) then begin
			OutString(0,0,BPIOdourr.Name,false);
		end else begin
			OutString(0,0,NewINrw.OdourCl,false);
		end;
		OutString(0,0,NewINrw.UserStr1,false);
		OutString(0,0,NewINrw.ConsgType,false);
		OutString(0,0,NewINrw.SerNrf,false);
		OutString(0,0,NewINrw.EKNCode,false);
		OutString(0,0,NewINrw.CPSCode,false);
		if(CPb.OKFlag==0) then begin
			OutString(0,0,NewINrw.AlternativeCode,false);
		end;
		OutString(0,0,NewINrw.NewBarCode,false);
		Collectr.Code = NewINrw.Collection;
		OutString(0,0,NewINrw.NewVECode,false);
		EndFormat;
	end;		
	EndJob;

  end;

return;
end;








global procedure MiddleInvoiceOrderRn(record RcVc RepSpec)
begin
  record IVVc IVr;
  row IVVc IVrw;
  record ORVc ORr;
  row ORVc ORrw;
  integer i,mtrw;
  boolean TrHs,testf,first;
  string 50 key;
  integer fl;
  record CYBlock CYb;
  val day,total,dayqty,totalqty;
  integer invday,invtotal;
  date curdat;
  val fr,to1,to2,br1,br2,ivfr,ivto;
  string 20 curncy;
  Array string 50 acrncy;// Edit ************************** Tuesday, 19 March 2013 15:48:06
  Array Boolean achangecrncyf;// Edit ************************** Tuesday, 19 March 2013 15:48:52
  Integer acrncnt;// Edit ************************** Tuesday, 19 March 2013 15:48:51
	longint curtick;
	
	curtick = getcurtick();
	CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);// Edit ************************** Wednesday, 19 June 2013 13:59:15
	curncy = acrncy[0];// Edit ************************** Wednesday, 19 June 2013 13:59:14


	blockload(CYb);

	startreportnoheaderjob(USetStr(31167));

	startformat(15);
		outstring(0,0,"",false);
		outstring(100,0,USetStr(31102),false);
		outstring(150,0,RepSpec.sStartDate & ":" & RepSpec.sEndDate,false);
	endformat;
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,getyear(RepSpec.sStartDate),false);
		outstring(50,0,"",false);
		outstring(100,0,CYb.BusinessName,false);
		outstring(150,0,RepSpec.f1,false);
		outstring(190,0,USetStr(31218),false);
		if(nonblank(RepSpec.f2))then begin
			outstring(240,0,RepSpec.f2,false);
			outstring(300,0,USetStr(31219),false);
		end;
	endformat;
	black_divider(0,1);
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,USetStr(31220),false);
		outstring(50,0,USetStr(31221),false);
		outstring(120,0,USetStr(31222),false);
		outstring(170,0,USetStr(31223),false);
		outstring(240,0,USetStr(31224),false);
	endformat;
	startformat(15);
	endformat;

	key = "OrdDate";
	fl = 1;
	/*
	if(nonblank(RepSpec.f1))then begin
		key = "MachineName";
		IVr.MachineName = RepSpec.f1;
		fl = 2;
	end;
	*/


	ORr.OrdDate = RepSpec.sStartDate;
	TrHs = true;
	curdat = stringtodate("1/1/2000");
	day = 0;
	dayqty = 0;
	total = 0;
	totalqty = 0;
	invday = 0;
	invtotal = 0;
	first = true;
	while(loopkey(key,ORr,fl,TrHs))begin
		if(first)then begin
			curdat = ORr.OrdDate;
			first = false;
		end;
		if(curdat!=ORr.OrdDate and invday>0)then begin
			startformat(15);
				outstring(0,0,curdat,false);
				outstring(50,0,invday,false);
				outstring(120,0,day,false);
				outstring(170,0,day/invday,false);
				outstring(240,0,dayqty,false);
			endformat;
			invday = 0;
			day = 0;
			dayqty = 0;
			curdat = ORr.OrdDate;
		end;
		testf = true;
		if(ORr.OrdDate<RepSpec.sStartDate or ORr.OrdDate>RepSpec.sEndDate)then begin TrHs = false; testf = false; end;
		if(nonblank(RepSpec.f1) and ORr.LocalMachineCode!=RepSpec.f1)then begin testf = false; end;
		if(nonblank(RepSpec.f3) and ORr.Location!=RepSpec.f3)then begin testf = false; end;
		if(nonblank(RepSpec.f2) and RepSpec.f2!=ORr.SalesMan)then begin testf = false; end;
		if(ORr.OKFlag==0)then begin testf = false; end;

		if(testf)then begin
			ivfr = 1; ivto = 1;
			fr = 1; to1 = 1;
			if(ORr.CurncyCode!=curncy)then begin
				ivfr = ORr.FrRate;
				ivto = ORr.ToRateB1;
				if(ivfr==0 or ivto==0)then begin
					ivfr = 1;	ivto = 1;
				end;
				GetFullCurncyRate(curncy,ORr.OrdDate,fr,to1,to2,br1,br2);
				if(fr==0 or to1==0)then begin
					fr = 1;	to1 = 1;
				end;
			end;
			invday = invday + 1;
			invtotal = invtotal + 1;
			day = day + ORr.Sum4/ivfr*ivto*fr/to1;

			mtrw = matrowcnt(ORr);
			For(i=0;i<mtrw;i=i+1) begin
	  		matrowget(ORr,i,ORrw);
	  		//if(IVrw.stp==kInvoiceRowTypeNormal and IVrw.Quant!=0)then begin
	  		if(nonblank(ORrw.ArtCode) and ORrw.Quant!=0 /*and ORrw.Sum!=0*/)then begin
	  			dayqty = dayqty + ORrw.Quant;
	  			totalqty = totalqty + ORrw.Quant;
	  		end;
			end;

			total = total + ORr.Sum4/ivfr*ivto*fr/to1;
		end;
	end;
	if(invday>0)then begin
		startformat(15);
			outstring(0,0,curdat,false);
			outstring(50,0,invday,false);
			outstring(120,0,day,false);
			outstring(170,0,day/invday,false);
			outstring(240,0,dayqty,false);
		endformat;
		invday = 0;
		day = 0;
		dayqty = 0;
		curdat = ORr.OrdDate;
	end;
	gray_divider(0,1);
	startformat(15);
	endformat;
	startformat(15);
		outstring(0,0,USetStr(31211),false);
		outstring(50,0,invtotal,false);
		outstring(120,0,total,false);
		outstring(170,0,total/invtotal,false);
		outstring(240,0,totalqty,false);
	endformat;

	endjob;
	LogProcTime("BayAcivityButiqueRn",getcurtick()-curtick);
return;
end;

global procedure StockMovPricingRn(record RcVc RepSpec)
begin
	record StockMovVc SMr,SM2r;
	row StockMovVc SMrw,SM2rw;
	integer i,mtrw,k,smmtrw;
	record PLDefVc PLDr;
	record PLVc PLr;
	string 20 curcode,curdef,basecur;
	val totqty,totsumb1;
	boolean curfoundf;
	val fr,to1,to2,br1,br2;
	Array string 50 acrncy;
  Array Boolean achangecrncyf;
  Integer acrncnt;
	longint curtick;
	
	curtick = getcurtick();
	totqty = 0;
	recordnew(SM2r);
	startreportnoheaderjob(USetStr(31166));
		startformat(15);
			outstring(0,0,USetStr(31231),false);
			outstring(150,0,USetStr(31204),false);
			outstring(300,0,USetStr(31165) & " RRP",true);
			outstring(320,0,USetStr(31121),false);
			outstring(400,0,USetStr(31122),true);
			outstring(1,0,USetStr(31164) &" RRP",true);
		endformat;
	PLDr.Code = "RRP";
	readfirstmain(PLDr,1,true);
	curcode = PLDr.CurncyCode;
	curdef = curcode;
	SMr.SerNr = RepSpec.long1;
	if(readfirstmain(SMr,1,true))then begin
		mtrw = matrowcnt(SMr);
		if(mtrw>0)then begin
			for(i=0;i<mtrw;i=i+1)begin
				matrowget(SMr,i,SMrw);
				curcode = curdef;
				PLr.ArtCode = SMrw.ArtCode;
				PLr.PLCode = "RRP";
				PLr.SerialNr = SMrw.SerialNr;
				readfirstkey("SerialNr",PLr,3,true);
				if(nonblank(PLr.CurncyCode))then begin
					curcode = PLr.CurncyCode;
				end;
				startformat(15);
					outstring(0,0,SMrw.ArtCode,false);
					outstring(150,0,SMrw.Spec,false);
					outstring(300,0,PLr.ExVatPrice,true);
					outstring(320,0,SMrw.OrdQuant,false);
					outstring(400,0,SMrw.OrdQuant*PLr.ExVatPrice,true);
					outstring(1,0,curcode,true);
				endformat;
				totqty = totqty + SMrw.OrdQuant;
				GetFullCurncyRate(curcode,currentdate,fr,to1,to2,br1,br2);
				if(fr==0 or to1==0)then begin
					fr=1; to1=1;
				end;
				totsumb1 = totsumb1 + SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
				smmtrw = matrowcnt(SM2r);
				if(smmtrw>0)then begin
					curfoundf = false;
					For(k=0;k<smmtrw;k=k+1) begin
						matrowget(SM2r,k,SM2rw);
	  				if(SM2rw.ArtCode==curcode)then begin
	  					SM2rw.OldPrice = SM2rw.OldPrice + SMrw.OrdQuant*PLr.ExVatPrice;
							SM2rw.NewPrice = SM2rw.NewPrice + SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
	  					curfoundf = true;
	  					matrowput(SM2r,k,SM2rw);
	  				end;
					end;
					if(curfoundf==false)then begin
	  				SM2rw.ArtCode = curcode;
						SM2rw.OldPrice = SMrw.OrdQuant*PLr.ExVatPrice;
						SM2rw.NewPrice = SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
						matrowput(SM2r,smmtrw,SM2rw);
					end;

				end else begin
					SM2rw.ArtCode = curcode;
					SM2rw.OldPrice = SMrw.OrdQuant*PLr.ExVatPrice;
					SM2rw.NewPrice = SMrw.OrdQuant*PLr.ExVatPrice/fr*to1;
					matrowput(SM2r,0,SM2rw);
				end;
			end;
		end;
	end;

	if(totqty<>0)then begin
		Black_Divider(320,1);
		startformat(15);
			outstring(300,0,USetStr(31074),true);
			outstring(320,0,totqty,false);
		endformat;
		smmtrw = matrowcnt(SM2r);
		if(smmtrw>0)then begin
			Gray_Divider(0,1);
			startformat(15);
				outstring(400,0,USetStr(31076),true);
				outstring(1,0,USetStr(31164),true);
			endformat;
			For(k=0;k<smmtrw;k=k+1) begin
				matrowget(SM2r,k,SM2rw);
				startformat(15);
					outstring(400,0,SM2rw.OldPrice,true);
					outstring(1,0,SM2rw.ArtCode,true);
				endformat;
			end;

		end;
		GetBaseCurncy(1,basecur);
		startformat(15);
			outstring(1,0,USetStr(31163) & basecur,true);
		endformat;
		startformat(15);
			outstring(1,0,totsumb1,true);
		endformat;

		CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
		if(acrncnt>1)then begin
			Gray_Divider(300,1);
			startformat(15);
				outstring(1,0,USetStr(31162),true);
			endformat;
			For(i=1;i<acrncnt;i=i+1) begin
				GetFullCurncyRate(acrncy[i],currentdate,fr,to1,to2,br1,br2);
				if(fr==0 or to1==0)then begin
					fr=1; to1=1;
				end;
	  		startformat(15);
					outstring(400,0,totsumb1*fr/to1,true);
					outstring(1,0,acrncy[i],true);
				endformat;
			end;
		end;
	end;

	endjob;
	LogProcTime("BayAcivityButiqueRn",getcurtick()-curtick);
return;
end;


global procedure StockMovSumCostRn(record RcVc RepSpec)
begin
	record StockMovVc SMr,SM2r;
	row StockMovVc SMrw,SM2rw;
	integer i,mtrw,k,smmtrw;
	record PLDefVc PLDr;
	record PLVc PLr;
	string 20 curcode,curdef,basecur;
	val totqty,totsumb1;
	boolean curfoundf;
	val fr,to1,to2,br1,br2;
	Array string 50 acrncy;
  Array Boolean achangecrncyf;
  Integer acrncnt;
	longint curtick;
	
	curtick = getcurtick();
	totqty = 0;
	startreportnoheaderjob(USetStr(31161));
		startformat(15);
			outstring(0,0,USetStr(31231),false);
			outstring(100,0,USetStr(31204),false);
			outstring(300,0,USetStr(31160),true);
			outstring(320,0,USetStr(31121),false);
			outstring(400,0,USetStr(31122),true);
		endformat;
	SMr.SerNr = RepSpec.long1;
	if(readfirstmain(SMr,1,true))then begin
		mtrw = matrowcnt(SMr);
		if(mtrw>0)then begin
			for(i=0;i<mtrw;i=i+1)begin
				matrowget(SMr,i,SMrw);
				startformat(15);
					outstring(0,0,SMrw.ArtCode,false);
					outstring(100,0,SMrw.Spec,false);
					outstring(300,0,SMrw.NewPrice,true);
					outstring(320,0,SMrw.OrdQuant,false);
					outstring(400,0,SMrw.OrdQuant*SMrw.NewPrice,true);
				endformat;
				totqty = totqty + SMrw.OrdQuant;
				totsumb1 = totsumb1 + SMrw.OrdQuant*SMrw.NewPrice;
			end;
		end;
	end;

	if(totqty<>0)then begin
		Black_Divider(320,1);
		startformat(15);
			outstring(300,0,USetStr(31211),true);
			outstring(320,0,totqty,false);
			outstring(400,0,totsumb1,true);
		endformat;
	end;

	endjob;
	LogProcTime("StockMovSumCostRn",getcurtick()-curtick);
return;
end;


function longint FindIHReference(var longint source,string artcode)
begin
	record ItemHistVc IHr;
	boolean testf;
	longint res;
	integer counter;

	res = -1;
	counter = 0;
	testf = true;
	IHr.SerNr = source;
	while(readfirstmain(IHr,1,true) and testf)begin
		if(IHr.FileName=="PUVc")then begin
			res = IHr.SerNr;
			goto LFindIHReference;
			testf = false;
		end else begin
			IHr.SerNr = IHr.Source;
		end;
		if(IHr.ArtCode!=artcode)then begin
			testf = false;
		end;
		if(counter>20)then begin
			testf = false;
		end;
		counter = counter + 1;
	end;

LFindIHReference:;
	FindIHReference = res;
return;
end;

global procedure ConsignationReportRn(record RcVc RepSpec)
begin
	record INConsVc INCr;
	record ItemStatusVc ISr;
	record ItemHistVc IHr,IH2r;
	integer pos;
	string 255 class;
	record DIVc DIr;
	record INVc INr;
	boolean TrHs,testf,TrHs1,testf1;
	val totqty,selqty,retqty,prosroch;
	string 255 brand,type; //Edit***************************Sasha2,15:42 28.01.2016
	longint curtick;


	curtick = getcurtick();
	startreportnoheaderjob(USetStr(31159));

		startformat(15);
			outstring(0,0,USetStr(31231),false);
			outstring(50,0,USetStr(31204),false);
			outstring(200,0,USetStr(31044),false);
			outstring(250,0,USetStr(31105),false);
			outstring(320,0,USetStr(31150),false);
			outstring(1,0,USetStr(31158),true);
		endformat;

		black_divider(0,1);
		if(nonblank(RepSpec.f1))then begin
			INCr.Code = RepSpec.f1;
		end else begin
			INCr.Code = "";
		end;
		TrHs = true;
		While(loopmain(INCr,1,TrHs)) begin
			testf = true;

			if(nonblank(RepSpec.f1) and INCr.Code!=RepSpec.f1)then begin TrHs=false; testf = false; end;

			if(nonblank(RepSpec.f2))then begin
				INr.Code = INCr.Code;
				readfirstmain(INr,1,true);
				pos = 0;
    		brand = "";
    		ExtractObj(INr.DispGroups,pos,class);
    		while (NonBlank(class)) begin
    		  DIr.Code = class;
    		  if (readfirstmain(DIr,1,true)) then begin
    		    if (DIr.CType=="BRAND") then begin
    		      brand = DIr.Name;
    		      pos = len(INr.DispGroups);
    		    end;
    		  end;
    		  ExtractObj(INr.DispGroups,pos,class);
    		end;
    		if(brand!=RepSpec.f2)then begin
					testf = false;
				end;
				
				/*pos = 0;
				ExtractObj(INr.DispGroups,pos,class);
				if(class!=RepSpec.f2)then begin
					testf = false;
				end;*/
			end;
			if(testf)then begin
				ISr.Code = INCr.Code;
				ISr.Location = ";;;";
				if(readfirstmain(ISr,2,true))then begin
					INr.Code = INCr.Code;
					readfirstmain(INr,1,true);
					startformat(15);
						outstring(0,0,INCr.Code,false);
						outstring(50,0,INCr.Name,false);
						
						pos = 0;
						brand = "";
        		type = "";
        		ExtractObj(INr.DispGroups,pos,class);
        		while (NonBlank(class)) begin
        		  DIr.Code = class;
        		  if (readfirstmain(DIr,1,true)) then begin
        		    if (DIr.CType=="BRAND") then begin
        		      brand = DIr.Name;
        		    end;
        		    if (DIr.CType=="TYPE") then begin
        		      type = DIr.Name;
        		    end;
        		  end;
        		  ExtractObj(INr.DispGroups,pos,class);
        		end;
        		outstring(200,0,brand,false);
        		outstring(250,0,type,false);
						
						/*pos = 0;
						ExtractObj(INr.DispGroups,pos,class);
						DIr.Code = class;
						readfirstmain(DIr,1,true);
						outstring(200,0,DIr.Name,false);
						ExtractObj(INr.DispGroups,pos,class);
						DIr.Code = class;
						readfirstmain(DIr,1,true);
						outstring(250,0,DIr.Name,false);*/
						
						outstring(320,0,ISr.Instock,false);
						outstring(1,0,INCr.Days,true);
					endformat;
					Gray_divider(0,1);
					startformat(15);
						outstring(80,0,USetStr(31157) & " №",true);
						outstring(100,0,USetStr(31156),false);
						outstring(160,0,USetStr(31121),false);
					endformat;
					IHr.ArtCode = INr.Code;
					IHr.FileName = "PUVc";
					TrHs1 = true;
					totqty = 0;
					prosroch = 0;
					while(loopkey("FNArtCode",IHr,2,TrHs1))begin
						testf1 = true;
						if(IHr.ArtCode!=INr.Code or IHr.FileName!="PUVc")then begin testf1=false; TrHs1 = false; end;
						if(IHr.Invalid>0)then begin testf=false; end;

						if(testf1)then begin
							startformat(15);
								outstring(80,0,IHr.TransNr,true);
								outstring(100,0,IHr.TransDate,false);
								outstring(160,0,IHr.Qty,false);
							endformat;
							totqty = totqty + IHr.Qty;
							selqty = 0;
							retqty = 0;
							IH2r.ArtCode = IHr.ArtCode;
							While(loopkey("ArtCode",IH2r,1,true) and IH2r.ArtCode==IHr.ArtCode) begin
								if(IH2r.Source>0 and FindIHReference(IH2r.Source,IH2r.ArtCode)>0)then begin
									if(IH2r.FileName=="IVVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31155) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										selqty = selqty + IH2r.Qty;
									end;
									if(IH2r.FileName=="SHVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31154) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										selqty = selqty + IH2r.Qty;
									end;
									if(IH2r.FileName=="SDVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31153) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										retqty = retqty + IH2r.Qty;
									end;
									if(IH2r.FileName=="RetVc")then begin
										startformat(15);
											outstring(250,0,USetStr(31111) & " №",true);
											outstring(260,0,IH2r.TransNr,false);
											outstring(290,0,IH2r.TransDate,false);
											outstring(330,0,IH2r.Qty,false);
											outstring(350,0,IH2r.Location,false);
										endformat;
										retqty = retqty + IH2r.Qty;
									end;
								end;
							end;
							resetloop(IH2r);
							if(selqty<>0 or retqty<>0)then begin
								gray_divider(250,350);
							end;
							if(selqty<>0)then begin
								startformat(15);
									outstring(250,0,USetStr(31152),true);
									outstring(330,0,-selqty,false);
								endformat;
							end;
							if(retqty<>0)then begin
								startformat(15);
									outstring(250,0,USetStr(31151),true);
									outstring(330,0,-retqty,false);
								endformat;
							end;
							startformat(15);
								outstring(250,0,USetStr(31150),true);
								outstring(330,0,IHr.Qty + selqty + retqty,false);
							endformat;
							if((IHr.Qty + retqty)>0)then begin
								startformat(15);
									outstring(1,0,USetStr(31149),true);
								endformat;
								startformat(15);
									outstring(400,0,USetStr(31121),false);
									outstring(1,0,USetStr(31148),true);
								endformat;
								startformat(15);
									outstring(400,0,IHr.Qty + retqty,false);
									outstring(1,0,datediff(currentdate,IHr.TransDate),true);
								endformat;
								if(datediff(currentdate,IHr.TransDate)>0)then begin
									prosroch = prosroch + IHr.Qty + retqty;
								end;
							end;
						end;
					end;
					resetloop(IHr);
					gray_divider(100,1);
					startformat(15);
						outstring(100,0,USetStr(31211),false);
						outstring(160,0,totqty,false);
						outstring(390,0,USetStr(31147),true);
						outstring(400,0,prosroch,false);
					endformat;
					black_divider(0,1);
				end;
			end;
		end;

	endjob;
	LogProcTime("ConsignationReportRn",getcurtick() - curtick);
return;
end;


global  procedure OstatkiSKartinkamiRn(record RcVc RepSpec)
begin
	record INVc INr;
	string 255 res, checkEmptFilter;
	record Attach2Vc Attachr;
	record RLinkVc RLr;
	string 255 uid;
	longint lenth;
	area attach,attachnew,webpage1;
	string 255 filename,tstr;
	string 20 rowcolor,pricecolor;
	record ItemStatusVc ISr;
	boolean filefind;
	integer wn;
	//record RcVc RepSpec;
	string 255 serverip;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	integer mtrw,i;
	boolean userlocation;
	record UserVc User;
	integer pos;
	string 50 uloc,location,compfolder;
	record ProgramStatusBlock PSb;
	longint curtick;

	location = RepSpec.f2;
	userlocation = false;
	checkEmptFilter = RepSpec.f1 & RepSpec.f2 & RepSpec.f3 & RepSpec.f4 & RepSpec.f5 & RepSpec.f7 & RepSpec.f8;
	curtick = getcurtick();
	if (nonblank(checkEmptFilter)) then begin
		if(userlocation)then begin
			messagebox(0,USetStr(31014));
		end else begin
			if(false)then begin
				Messagebox(0,USetStr(31145));
			end else begin
				closewindow(wn);
				if(right(RepSpec.ObjStr,5)==".html" or right(RepSpec.ObjStr,4)==".htm")then begin
					filename = RepSpec.ObjStr;
				end else begin
					filename = RepSpec.ObjStr & ".html";
				end;
				//createfile(filename);
				//closefile;
				serverip = RepSpec.f6;
				setareazerosize(webpage1);
				ItemStockStatExtWebRn(RepSpec,webpage1,serverip);
				writeareatofile(webpage1,filename,0);

				messagebox(0,USetStr(31146));
				LogProcTime("OstatkiSKartinkamiRn",getcurtick() - curtick);
			end;
		end;
	end else begin
		Messagebox(0,USetStr(36354));
	end;
end;

global  procedure OstatkiSKartinkamiNewRn(record RcVc RepSpec)
begin
	record INVc INr;
	string 255 res, checkEmptFilter;
	record Attach2Vc Attachr;
	record RLinkVc RLr;
	string 255 uid;
	longint lenth;
	area attach,attachnew,webpage1;
	string 255 filename,tstr;
	string 20 rowcolor,pricecolor;
	record ItemStatusVc ISr;
	boolean filefind;
	integer wn;
	//record RcVc RepSpec;
	string 255 serverip;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	integer mtrw,i;
	boolean userlocation;
	record UserVc User;
	integer pos;
	string 50 uloc,location,compfolder;
	record ProgramStatusBlock PSb;
	longint curtick;
	
	curtick = getcurtick();
	location = RepSpec.f2;
	userlocation = false;
	checkEmptFilter = RepSpec.f1 & RepSpec.f2 & RepSpec.f3 & RepSpec.f4 & RepSpec.f5 & RepSpec.f7 & RepSpec.f8;
	if (nonblank(checkEmptFilter)) then begin
		if(userlocation)then begin
			messagebox(0,USetStr(31014));
		end else begin
			if(false)then begin
				Messagebox(0,USetStr(31145));
			end else begin
				closewindow(wn);
				if(right(RepSpec.ObjStr,5)==".html" or right(RepSpec.ObjStr,4)==".htm")then begin
					filename = RepSpec.ObjStr;
				end else begin
					filename = RepSpec.ObjStr & ".html";
				end;
				//createfile(filename);
				//closefile;
				serverip = RepSpec.f6;
				setareazerosize(webpage1);
				ItemStockStatExtWebNewRn(RepSpec,webpage1,serverip);
				writeareatofile(webpage1,filename,0);

				messagebox(0,USetStr(31146));
			end;
		end;
	end else begin
		Messagebox(0,USetStr(36354));
	end;
	LogProcTime("OstatkiSKartinkamiNewRn",getcurtick() - curtick);
end;

global  procedure ProdajiSKartinkamiRn(record RcVc RepSpec)
begin
	record INVc INr;
	string 255 res, checkEmptFilter;
	record Attach2Vc Attachr;
	record RLinkVc RLr;
	string 255 uid;
	longint lenth;
	area attach,attachnew,webpage1;
	string 255 filename,tstr;
	string 20 rowcolor,pricecolor;
	record ItemStatusVc ISr;
	boolean filefind;
	integer wn;
	//record RcVc RepSpec;
	string 255 serverip;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	integer mtrw,i;
	boolean userlocation;
	record UserVc User;
	integer pos;
	string 50 uloc,location,compfolder;
	record ProgramStatusBlock PSb;
	longint alenth;
	string 255 res1;
	longint curtick;
	
	curtick = getcurtick();

	blockload(PSb);
	blockload(Cb);

	/*compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort & "/" & Cbrw.ShortName;*/
	serverip = RepSpec.f6;
	//setcompany(3,false);
	/*wn = curwindow;
	deselectwindow(wn,true);
	selectwindow(wn);
	getwindowrecord(wn,RepSpec);*/

	location = RepSpec.f2;
	userlocation = false;

	//setexportcodepage("CP1251");
	
	checkEmptFilter = RepSpec.f1 & RepSpec.f2 & RepSpec.f4;
	
	if (nonblank(checkEmptFilter)) then begin 
		if(userlocation)then begin
			Messagebox(0,USetStr(31014));
		end else begin
			if(false)then begin
				Messagebox(0,USetStr(31145));
			end else begin
				closewindow(wn);
				if(right(RepSpec.ObjStr,5)==".html" or right(RepSpec.ObjStr,4)==".htm")then begin
					filename = RepSpec.ObjStr;
				end else begin
					filename = RepSpec.ObjStr & ".html";
				end;
				//createfile(filename);
				//closefile;

				//setareazerosize(webpage1);
				SalesReportExtPictRn(RepSpec,webpage1,serverip);
				//writeareatofile(webpage1,filename,0);
				//weboutarea(webpage1);
				messagebox(0,USetStr(31146));
			end;
		end;
	end else begin
		Messagebox(0,USetStr(36354));
	end;
	LogProcTime("ProdajiSKartinkamiRn",getcurtick() - curtick);
end;

global
function string 60 SalesWithImagesRClassDefaultFileName(record RcVc RepSpec)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	longint curtick;
	
	curtick = getcurtick();
  res = "SalesWithImages.html";
  SalesWithImagesRClassDefaultFileName = res;
	LogProcTime("SalesWithImagesRClassDefaultFileName",getcurtick() - curtick);
  return;
end;

global
function Boolean SalesWithImagesRClassOnOpenWindow(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;
	
	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);

	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort;// & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;
  putwindowrecord(wn,RepSpec);
	
	SalesWithImagesRClassOnOpenWindow = true;
  return;
end;

global
procedure SalesWithImagesRClassReportDefaults(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);
	reportdefaults(RepSpec,"SalesWithImagesRClass");
	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort;// & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;

  putwindowrecord(wn,RepSpec);

  return;
end;

global
function string 60 ItemStockStatExtWebRClassDefaultFileName(record RcVc RepSpec)
begin
	string 60 res;

  res = "OstatkiWithImages.html";;
  ItemStockStatExtWebRClassDefaultFileName = res;
  return;
end;


global
function boolean ItemStockStatExtWebRClassOnOpenWindow(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);

	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort;// & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;
  putwindowrecord(wn,RepSpec);
	
	ItemStockStatExtWebRClassOnOpenWindow = true;
  return;
end;

global
procedure ItemStockStatExtWebRClassReportDefaults(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);
	reportdefaults(RepSpec,"ItemStockStatExtWebRClass");
	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort;// & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;

  putwindowrecord(wn,RepSpec);

  return;
end;



global
procedure ArtRClassReportDefaults(integer wn)
begin
	string 60 res,serverip;
	record ProgramStatusBlock PSb;
	integer compnr;
	record CompaniesBlock Cb;
	row CompaniesBlock Cbrw;
	record RcVc RepSpec;

	blockload(PSb);
	blockload(Cb);

	getwindowrecord(wn,RepSpec);
	reportdefaults(RepSpec,"ArtRClass");
	 DeselectWindow(wn,false);
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
	compnr = currentcompany;
	matrowget(Cb,compnr-1,Cbrw);
	serverip = Cbrw.TCPIP & ":" & PSb.httpPort;// & "/" & Cbrw.ShortName;
  RepSpec.f6 = serverip;

  putwindowrecord(wn,RepSpec);
	 SelectWindow(wn);
  return;
end;




global procedure TestRn(record RcVc RepSpec)
begin
	record POVc POr;
	row POVc POrw;
	integer i,mtrw;
	record INVc INr;
	longint curtick;

	startreportnoheaderjob("test");
	
	curtick = getcurtick();
	startformat(15);
		outstring(0,0,"PO",false);
		outstring(50,0,"rw",false);
		outstring(100,0,"Art",false);
		outstring(150,0,"Unit1",false);
		outstring(200,0,"Unit2",false);
	endformat;

	POr.SerNr = "";
	while(loopmain(POr,1,true))begin
		mtrw = matrowcnt(POr);
		For(i=0;i<mtrw;i=i+1) begin
			matrowget(POr,i,POrw);
			INr.Code = POrw.ArtCode;
			readfirstmain(INr,1,true);
			If(INr.Unittext!=POrw.UnitCode)then begin
				startformat(15);
					outstring(0,0,POr.SerNr,false);
					outstring(50,0,i+1,false);
					outstring(100,0,POrw.ArtCode,false);
					outstring(150,0,POrw.UnitCode,false);
					outstring(200,0,INr.Unittext,false);
				endformat;
			end;
		end;

	end;
	LogProcTime("TestRn",getcurtick() - curtick);
	endjob;

return;
end;


global
procedure DblSDVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  24.02.2015
begin
  Integer wn;
  record SDVc SDr;

  SDr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(SDr,1,true)) then begin
    wn = OpenWindow("SDDClass",1,0,"","",SDr);
  end;
  return;
end;

global
procedure DblPUVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  25.02.2015
begin
  Integer wn;
  record PUVc PUr;

  PUr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(PUr,1,true)) then begin
    wn = OpenWindow("PUDClass",1,0,"","",PUr);
  end;
  return;
end;

global
procedure DblSHVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record SHVc SHr;

  SHr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(SHr,1,true)) then begin
    wn = OpenWindow("SHDClass",1,0,"","",SHr);
  end;
  return;
end;

global
procedure DblStockMovVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record StockMovVc SMr;

  SMr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(SMr,1,true)) then begin
    wn = OpenWindow("StockMovDClass",1,0,"","",SMr);
  end;
  return;
end;

global
procedure DblRetVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record RetVc Retr;

  Retr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(Retr,1,true)) then begin
    wn = OpenWindow("RetDClass",1,0,"","",Retr);
  end;
  return;
end;

global
procedure DblRetPUVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record RetPUVc Retr;

  Retr.SerNr = StringToLongInt(dblstr);

  if (ReadFirstMain(Retr,1,true)) then begin
    wn = OpenWindow("RetPUDClass",1,0,"","",Retr);
  end;
  return;
end;

global
procedure DblIVVcOpen(string dblstr,string l,Integer currepwn)	//Edit----------------------Dima  23.03.2015
begin
  Integer wn;
  record IVVc IVr;

  IVr.SerNr = StringToLongInt(l);

  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
  end;
  return;
end;


procedure ExtractClassificationsFromINVc(string artcode,var string type, var string brand)	//Edit----------------------Dima  23.02.2015
begin
	record INVc INr;
	record DIVc DIr;
	integer pos;
	string 15 classification;

	INr.Code = artcode;
	if (ReadFirstMain(INr,1,true)) then begin

		pos = 0;
  	ExtractObj(INr.DispGroups,pos,classification);
  	while(nonblank(classification)) begin
  		DIr.Code = classification;
			if(ReadFirstMain(DIr,1,true) and (DIr.CType=="BRAND")) then begin
						brand = DIr.Name;
			end else begin
					if(ReadFirstMain(DIr,1,true) and (DIr.CType=="TYPE")) then begin
						type = DIr.Name;
					end;
			end;
  		ExtractObj(INr.DispGroups,pos,classification);
  	end;
	end;

return;
end;

procedure HeaderLocations(string a,  var string res)	//Edit----------------------Dima  23.02.2015
begin
  if (blank(a)) then begin
     res = USetStr(8961);
  end else begin
     res = USetStr(2768);
     res = res &": " & a;
  end;
return;
end;



global
procedure FoundersRn(record RcVc RepSpec)  					//Edit----------------------Dima  23.02.2015
begin
  record SDVc SDr;
  row SDVc SDrw;
  record ObjVc Objr;
  record PLVc PLr;
  integer rw,rwcnt,i,pos;
  string 200 tstr;
  string 30 objct,type,brand,founder;
  boolean testf,TrHs;
  val sum;
	longint curtick;
	
	curtick = getcurtick();

  StartReportJob(USetStr(31322));
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
  HeaderLocations(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
	EndHeader;

	StartFormat(15);
		OutString(0,0,USetStr(31203),false);		//ArtCode
		OutString(90,0,USetStr(12003),false);		//Type
		OutString(140,0,USetStr(31205),false);	//Brand
		OutString(200,0,USetStr(31169),false);	//Currency
		OutString(240,0,USetStr(12004),false);	//Quantity
		OutString(280,0,USetStr(31122),false);	//Sum
		OutString(320,0,USetStr(35001),false);	//Founder
		OutString(390,0,USetStr(12001),false);	//Date
		OutString(440,0,USetStr(13214),false);	//Document

	EndFormat;

	TrHs = true;
	SDr.TransDate = RepSpec.sStartDate;

	While(LoopKey("TransDate",SDr,1,TrHs))begin
		testf = true;

		if (SDr.TransDate > RepSpec.sEndDate) then begin
			testf = false;
			TrHs = false;
		end;

		if (nonblank(RepSpec.f1) and (RepSpec.f1 != SDr.Location)) then begin
			testf = false;
		end;

		if (testf) then begin
			pos = 0;
  		ExtractObj(SDr.Objects,pos,objct);
  		testf = false;
  		while(nonblank(objct)) begin
  			Objr.Code = objct;
				if(ReadFirstMain(Objr,1,true) and (Objr.OTCode=="FOUND")) then begin
						testf = true;
						founder = Objr.Comment;
						goto LBreakObjSearch4;
				end;
  			ExtractObj(SDr.Objects,pos,objct);
  		end;
			LBreakObjSearch4:;
		end;


		if(testf)  then begin

				rwcnt = MatRowCnt(SDr);

				for(i=0; i<rwcnt; i=i+1) begin
					MatRowGet(SDr,i,SDrw);
					ExtractClassificationsFromINVc(SDrw.ArtCode,type,brand);

					PLr.PLCode = "FOB36";
					PLr.ArtCode = SDrw.ArtCode;
					ReadFirstMain(PLr,2,true);
					sum = PLr.ExVatPrice * SDrw.Qty;

					StartFormat(15);
						OutString(0,0,SDrw.ArtCode,false);
						OutString(90,0,type,false);
						OutString(140,0,brand,false);
						OutString(200,0,PLr.CurncyCode,false);
						OutString(240,0,SDrw.Qty,false);
						OutVal(280,0,sum,M4Val,false);
						OutString(320,0,founder,false);
						OutString(390,0,SDr.TransDate,false);
						OutStringID(440,"DblSDVcOpen",SDr.SerNr,false,SDr.SerNr);

					EndFormat;

				end;
		end;

	end;
	
	LogProcTime("FoundersRn",getcurtick() - curtick);

	EndJob;

return;
end;



global
procedure PUInvoicingRn(record RcVc RepSpec)  					//Edit----------------------------------Dima  24.02.2015
begin
	record PUVc PUr;
	row PUVc PUrw;
	record POVc POr;
	row POVc POrw;
	record VIVc VIr;
	row VIVc VIrw;
  integer rw,rwcnt,i,pos;
  boolean testf,TrHs,testf3,testf4,TrHs3;
  val PUSum,POSum,VISum;
  boolean withoutPO,foundVI;
	longint curtick;
	
	curtick = getcurtick();
	
	withoutPO=!RepSpec.flags[1];

	StartReportJob(USetStr(35003));
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
	EndHeader;

	StartFormat(15);
		OutString(0,0,USetStr(22421),false);		//Vendor
		OutString(90,0,USetStr(22419),false);		//PU Number
		OutString(140,0,USetStr(31156),false);	//Date
		OutString(220,0,USetStr(31122),false);	//Sum
		OutString(300,0,USetStr(35004),false);	//Invoiced
		OutString(400,0,USetStr(2475),false);		//Difference

	EndFormat;


	TrHs = true;
	
	PUr.TransDate = RepSpec.sStartDate;
	While(LoopKey("TransDate",PUr,1,TrHs))begin
		testf = true;

		if (PUr.TransDate > RepSpec.sEndDate) then begin
			testf = false;
			TrHs = false;
		end;

		if (nonblank(RepSpec.f1) and (RepSpec.f1 != PUr.VECode)) then begin
			testf = false;
		end;

		if (nonblank(RepSpec.f2) and (RepSpec.f2 != PUr.Location)) then begin
			testf = false;
		end;


		if (testf) then begin
				PUSum = 0;
				rwcnt = MatRowCnt(PUr);
				for(i=0;i<rwcnt;i=i+1) begin
					MatRowGet(PUr,i,PUrw);
					PUSum = PUSum + PUrw.UPrice * PUrw.Quant;
				end;

					VIr.POSerNr = PUr.PONr;
					VISum = 0;
					TrHs3 = true;

					While(LoopKey("POSerNr",VIr,1,TrHs3)) begin
							testf3 = true;

							if (VIr.TransDate > RepSpec.sEndDate  or VIr.TransDate < RepSpec.sStartDate) then begin
								testf3 = false;
							end;

				 			if (VIr.POSerNr != PUr.PONr  or VIr.POSerNr<0) then begin
								TrHs3 = false;
								testf3 = false;
							end;

							if (testf3) then begin
									foundVI = true;
									rwcnt = MatRowCnt(VIr);
									for(i=0;i<rwcnt;i=i+1) begin
										MatRowGet(VIr,i,VIrw);
											testf4 = true;

											if (VIrw.PUNr > 0  and VIrw.PUNr!=PUr.SerNr)	then begin
													goto LBreakInvLoop1;
											end;

											if (VIrw.stp == kInvoiceRowTypePrepayment) then begin testf4 = false; end;

											if(testf4) then begin
												VISum = VISum + VIrw.Sum;
											end;
									end;
							end;

							LBreakInvLoop1:;
					end;
					ResetLoop(VIr);


					//if exist PU and VI only, without PO record--------------------------------------------------------------
					//and invoices(VI) were not found previously
					
					if (withoutPO and (foundVI==false)) then begin

						VISum = 0;
						TrHs3 = true;
						VIr.TransDate = RepSpec.sStartDate;
						While(LoopKey("TransDate",VIr,1,TrHs3)) begin
								testf3 = true;

								if (VIr.TransDate > RepSpec.sEndDate) then begin
									testf3 = false;
									TrHs3 = false;
								end;

								if (testf3) then begin
									rwcnt = MatRowCnt(VIr);
									for(i=0;i<rwcnt;i=i+1) begin
										MatRowGet(VIr,i,VIrw);
											testf4 = true;

											if ((VIrw.PUNr > 0  and VIrw.PUNr!=PUr.SerNr)  or (VIrw.PUNr < 0))	then begin
													goto LBreakInvLoop2;
											end;

											if (VIrw.stp == kInvoiceRowTypePrepayment) then begin testf4 = false; end;

											if(testf4) then begin
												VISum = VISum + VIrw.Sum;
											end;
									end;
									LBreakInvLoop2:;
								end;

						end;
						ResetLoop(VIr);

					end;
					foundVI = false;

					StartFormat(15);
						OutString(0,0,PUr.VEName,false);
						OutStringID(90,"DblPUVcOpen",PUr.SerNr,false,PUr.SerNr);
						OutString(140,0,PUr.TransDate,false);
						OutVal(220,0,PUSum,M4Val,false);
						OutVal(300,0,VISum,M4Val,false);
						OutVal(400,0,PUSum-VISum,M4Val,false);

					EndFormat;


		end;


	end;


	EndJob;
	LogProcTime("PUInvoicingRn",getcurtick() - curtick);
return;
end;

global
procedure InvoicesToExcelRn(record RcVc RepSpec)
begin
record IVVc IVr;
boolean TrHs;

	TrHs = true;
	StartReportNoHeaderJob("ExportToExcel");
	IVr.InvDate = RepSpec.sStartDate;
			StartFormat(15);
				OutString(0,0,"Но.",false);
				OutString(2,0,"ОК",true);
				OutString(3,0,"Дата сч/ф",false);
				OutString(4,0,"Склад",false);
				OutString(3,0,"Счет Но.",false);
				if(currentcompany==29)then begin
				OutString(3,0,"Btrx№",false);
				end;
				OutString(4,0,"Клиент",false);
				OutString(0,0,"Наим.",false);
				OutString(2,0,"Итого",true);
				OutString(4,0,"Вал.",false);
			EndFormat;
  while (LoopKey("InvDate",IVr,1,TrHs)) begin	
		if(IVr.InvDate > RepSpec.sEndDate) then begin TrHs = false; end;
		if(TrHs) then begin
			StartFormat(15);
				OutString(0,0,IVr.SerNr,false);
				if(IVr.OKFlag==0) then begin
					OutString(3,0,"",false);
				end else begin
					OutString(2,0,IVr.OKFlag,true);
				end;	
				OutString(3,0,IVr.InvDate,false);
				OutString(4,0,IVr.Location,false);
				if(IVr.OrderNr>0) then begin
					OutString(3,0,IVr.OrderNr,false);
				end else begin 
					OutString(3,0,"",false);
				end;
				if(currentcompany==29)then begin
				OutString(3,0,IVr.OfficialSerNr,false);
				end;
				OutString(4,0,IVr.CustCode,false);
				OutString(0,0,IVr.Addr0,false);
				OutString(2,0,IVr.Sum4,true);
				OutString(4,0,IVr.CurncyCode,false);
			EndFormat;
		end;
	
	end;
	EndJob;
return;
end;

global
procedure VInvoicesToExcelRn(record RcVc RepSpec)
begin
record VIVc VIVr;
boolean TrHs;

	TrHs = true;
	StartReportNoHeaderJob("ExportToExcel");
	VIVr.InvDate = RepSpec.sStartDate;
			StartFormat(15);
				OutString(0,0,"Но.",false);
				OutString(2,0,"ОК",true);
				OutString(3,0,"Дата сч/ф",false);
				OutString(3,0,"Дата проводки",false);
				if(CurrentCompany!=29)then begin
					OutString(3,0,"№ счета поставщика",false);
					OutString(3,0,"Номер сч/ф пост.",false);
				end else begin
					OutString(3,0,"Зак.Btrx №",false);
					OutString(3,0,"Btrx-сч/ф №",false);
				end;
				OutString(4,0,"Поставщик",false);
				OutString(0,0,"Наим.",false);
				OutString(2,0,"Всего",true);
				OutString(4,0,"Вал.",false);
			EndFormat;
  while (LoopKey("InvDate",VIVr,1,TrHs)) begin	
		if(VIVr.InvDate > RepSpec.sEndDate) then begin TrHs = false; end;
		if(TrHs) then begin
			StartFormat(15);
				OutString(0,0,VIVr.SerNr,false);
				if(VIVr.OKFlag==0) then begin
					OutString(3,0,"",false);
				end else begin
					OutString(2,0,VIVr.OKFlag,true);
				end;	
				OutString(3,0,VIVr.InvDate,false);
				OutString(3,0,VIVr.TransDate,false);
				if(VIVr.POSerNr>0) then begin
					OutString(3,0,VIVr.POSerNr,false);
				end else begin
					OutString(3,0,"",false);
				end;
				OutString(3,0,VIVr.InvoiceNr,false);
				OutString(3,0,VIVr.VECode,false);
				OutString(4,0,VIVr.VEName,false);
				OutString(0,0,VIVr.PayVal,false);
				OutString(4,0,VIVr.CurncyCode,false);
			EndFormat;
		end;
	
	end;
	EndJob;
return;
end;

global
procedure ExportInvoiceToExcelRn(record RcVc RepSpec)  					//Edit----------------------Dima  04.03.2015
begin
  record IVVc IVr;
  row	IVVc IVrw;
  record LocationVc Locr;
  Integer rwcnt,i,wn,curcomp;
  string 255 tstr;
  string 5 cur;
  val noRebSum;
  val fr,to1,to2,br1,br2;
  longint curtick;
	
	curtick = getcurtick();
  curcomp = CurrentCompany;
  noRebSum=0;
  IVr.SerNr = RepSpec.long1;
  if (ReadFirstMain(IVr,1,true)) then begin	 
  
  Locr.Code = IVr.Location;
  ReadFirstMain(Locr,1,true);
   

	StartReportNoHeaderJob("ExportToExcel");
	
		StartFormat(15);
		OutString(0,0,USetStr(31024),false);
		OutString(2,0,IVr.Location,true);
		OutString(3,0,"",false);
		OutString(4,0,"",false);
		OutString(3,0,USetStr(31133),false);
		GetUserName(IVr.SalesMan,tstr);
		OutString(4,0,tstr,false);
		EndFormat;
		OutString(1,0,Locr.Addr0,true);
		EndFormat;
		OutString(1,0,Locr.Phone,true);
		EndFormat;
		OutString(0,0,USetStr(2562),false);
		OutString(1,0,IVr.SerNr,true);
		OutString(1,0,"",false);
		OutString(1,0,"",false);
		OutString(0,0,USetStr(35005),false);
		OutString(1,0,"",false);	
		OutString(1,0,IVr.CustCode,true);
		if(NonBlank(IVr.RebCode)) then begin
			OutString(1,0,"",false);
			OutString(1,0,"",false);
			OutString(1,0,USetStr(31267),false);
			OutString(1,0,IVr.RebCode,true);
		end;
		EndFormat;
		OutString(1,0,USetStr(31262),false);
		OutString(1,0,IVr.InvDate,true);	
		EndFormat;
		
		OutString(1,0,"__________________________________________________________________________________________________________________________________",false);
		EndFormat;
	  OutString(1,0,USetStr(31231),false);
	  OutString(1,0,"",false);
	  OutString(1,0,USetStr(12003),false);
	  OutString(1,0,"",false);
	  OutString(1,0,"",false);
	  OutString(1,0,"",false);
	  OutString(1,0,USetStr(12004),false);
	  OutString(1,0,"",false);
	  OutString(1,0,USetStr(12005),false);
    if curcomp==13 then begin//Edit-------------------Vitalii 11:51 31.05.2016
      OutString(1,0,USetStr(12005) & " " & USetStr(10524) & " USD",false);
    end;
	  OutString(1,0,USetStr(12006),false);
	  OutString(1,0,USetStr(12448),false);
    if curcomp==13 then begin//Edit-------------------Vitalii 11:51 31.05.2016
      OutString(1,0,USetStr(12448) & " " & USetStr(10524) & " USD",false);
    end;
	  EndFormat;
  	rwcnt=MatRowCnt(IVr); 
    if curcomp==13 then begin//Edit-------------------Vitalii 11:51 31.05.2016
      fr=0; to1=0;
      cur = "USD";
      GetFullCurncyRate(cur,currentdate,fr,to1,to2,br1,br2);
      if(fr==0 or to1==0)then begin
        fr=1; to1=1;
      end;
    end;
  	for(i=0;i<rwcnt;i=i+1) begin
			MatRowGet(IVr,i,IVrw);
			if(IVrw.stp==kInvoiceRowTypeNormal) then begin
				OutString(1,0,IVrw.ArtCode,true);
				OutString(1,0,"",false);
				OutString(1,0,IVrw.Spec,true);
				OutString(1,0,"",false);
				OutString(1,0,"",false);
				OutString(1,0,"",false);
				OutString(1,0,IVrw.Quant,true);
				OutString(1,0,"",false);
				OutString(1,0,IVrw.Price,true);
        if curcomp==13 then begin//Edit-------------------Vitalii 11:51 31.05.2016
          OutString(1,0,IVrw.Price*fr/to1,true);
        end;
				OutString(1,0,IVrw.vRebate,true);
				OutString(1,0,IVrw.Sum,true);
        if curcomp==13 then begin//Edit-------------------Vitalii 11:52 31.05.2016
          OutString(1,0,IVrw.Sum*fr/to1,true);
        end;
        EndFormat;
				noRebSum = noRebSum + IVrw.Price*IVrw.Quant;
			end;	
		end;
		OutString(1,0,"__________________________________________________________________________________________________________________________________",false);
		EndFormat;
		StartFormat(15);
    OutString(1,0,"",false);	
		OutString(1,0,USetStr(12867),false);
		OutString(1,0,noRebSum,true);
    OutString(1,0,"",false);
	  
	  if (NonBlank(IVr.RebCode)) then begin
	  	OutString(1,0,USetStr(31267),false);
			OutString(1,0,IVr.RebCode,true);
	  	OutString(1,0,"",false);
	  	OutString(1,0,"",false);
		end else begin
			OutString(1,0,"",false);
			OutString(1,0,"",false);
			OutString(1,0,"",false);
			OutString(1,0,"",false);
		end;
 	  OutString(1,0,USetStr(24193) & ":",false);
		OutString(1,0,IVr.Sum4,true);
    OutString(1,0,IVr.Sum4*fr/to1,true);
	  OutString(1,0,"",false);	
    EndFormat;
    
    if curcomp==13 then begin//Edit-------------------Vitalii 11:52 31.05.2016
      StartFormat(15);
      OutString(1,0,"",false);	
      OutString(1,0,USetStr(12880) & " " & USetStr(10524) & " USD" & ":",false);
      OutString(1,0,noRebSum*fr/to1,true);
      OutString(1,0,"",false);
      
      OutString(1,0,"",false);
      OutString(1,0,"",false);
      OutString(1,0,"",false);
      OutString(1,0,"",false);
      OutString(1,0,USetStr(24193) & " " & USetStr(10524) & " USD" & ":",false);
      OutString(1,0,IVr.Sum4*fr/to1,true);
      OutString(1,0,"",false);
      EndFormat;
    end;
	EndJob;
	end;
	LogProcTime("ExportInvoiceToExcelRn",getcurtick() - curtick);
return;
end;

global procedure CheckItemHistErrorRn()
begin
	record INVc INr;
	record ItemHistVc IHr;
	boolean testf,TrHs;
	record LocationVc Locr;
	val qty;
	
	
	startreportnoheaderjob("check");
		INr.Code = "";
		while(loopmain(INr,1,true))begin
		//if(readfirstmain(INr,1,true))then begin	
			Locr.Code = "";
			while(loopmain(Locr,1,true))begin
				IHr.ArtCode = INr.Code;
				IHr.Location = Locr.Code;
				TrHs = true;
				qty = 0;
				while(loopkey("ArtCodeLoc",IHr,2,TrHs))begin
					if(IHr.ArtCode!=INr.Code or IHr.Location!=Locr.Code)then begin TrHs = false; end;

					if(TrHs and IHr.StockAffectf==1)then begin
						qty = qty + IHr.Qty;
						if(qty<0)then begin
							TrHs = false;
							startformat(15);
								outstring(0,0,IHr.ArtCode,false);
								outstring(0,0,IHr.FileName,false);
								outstring(0,0,IHr.TransNr,false);
								outstring(0,0,IHr.TransDate,false);
								outstring(0,0,IHr.SerNr,false);
							endformat;
						end;
					end;
				end;
				resetloop(IHr);
			end;
			resetloop(Locr);
		end;
	endjob;
	
return;
end;


global procedure SameBarCodesRn()		//Edit----------------------Dima  18.09.2015
begin
record INVc INr;
array string 30 samecodes;
String 30 prevCode;
integer i,k,step;

	StartReportNoHeaderJob("The same barcodes");
	
/*	
	While(LoopKey("BarCode",INr,1,true)) begin
	
					startformat(15);
						outstring(20,0,INr.Code,false);
						outstring(100,0,INr.BarCode,false);
						if (prevCode == INr.BarCode) then begin
								outstring(200,0,"SAME",false);
						end;
					endformat;
					prevCode = INr.BarCode;
	end;
*/	


	prevCode = "";
	step = 50;
	
	ReadFirstKey("BarCode",INr,1,true);
	prevCode = INr.BarCode;
	
	INr.BarCode = "";
	k=0;
	While(LoopKey("BarCode",INr,1,true)) begin
		if (prevCode==INr.BarCode and nonblank(INr.BarCode)) then begin
			samecodes[k] = INr.Code;
			k=k+1;
		end else begin	
			if (k>1) then begin
					startformat(15);
						outstring(20,0,prevCode,false);
					for(i=0;i<k;i=i+1) begin
						outstring(100+step*i,0,samecodes[i],false);
					end;
					endformat;
			end;
			
			samecodes[0] = INr.Code;
			k=1;
			prevCode = INr.BarCode;
		end;		
	end;
	
	EndJob;	
  
end;



function string 200 OutJWAttribute(string attribute)
begin
string 200 str;
	str = attribute;
	if (blank(attribute)) then begin
		str = " ";
	end;
OutJWAttribute = str;
return;
end;

	
global procedure AllJWAttributesRn(record RcVc RepSpec)
begin
	record INVc INr;

	
	StartReportNoHeaderJob("JW Attributes");
	
		startformat(15);
			outstring(0,0,"Item",false);
			outstring(0,0,"Metal",false);
			outstring(0,0,"Weight",false);
			outstring(0,0,"Size",false);
			outstring(0,0,"Length",false);
			outstring(0,0,"Collection",false);
			outstring(0,0,"Stone",false);
			outstring(0,0,"Colour",false);
			outstring(0,0,"Clarity",false);
			outstring(0,0,"Certificate",false);
			outstring(0,0,"Minor Stone",false);
			outstring(0,0,"Watch Brand",false);
			outstring(0,0,"Style",false);
			outstring(0,0,"Watch Metal",false);
			outstring(0,0,"Movement",false);
			outstring(0,0,"Bracelet",false);
			outstring(0,0,"watch colour",false);
			outstring(0,0,"durability",false);
			outstring(0,0,"Other",false);
		endformat;		
	
	
		//INr.Code = "";
	
		while(loopmain(INr,1,true)) begin
		
			
					startformat(15);
						outstring(0,0,OutJWAttribute(INr.Code),false);
						outstring(0,0,OutJWAttribute(INr.Metal),false);
						outstring(0,0,OutJWAttribute(INr.RowWeight),false);
						outstring(0,0,OutJWAttribute(INr.Size),false);
						outstring(0,0,OutJWAttribute(INr.Length),false);
						outstring(0,0,OutJWAttribute(INr.Reference),false);
						outstring(0,0,OutJWAttribute(INr.MajStoneDet),false);
						outstring(0,0,OutJWAttribute(INr.Colour),false);
						outstring(0,0,OutJWAttribute(INr.Clarity),false);
						outstring(0,0,OutJWAttribute(INr.Cert),false);
						outstring(0,0,OutJWAttribute(INr.MinStoneDet),false);
						outstring(0,0,OutJWAttribute(INr.WatchBrand),false);
						outstring(0,0,OutJWAttribute(INr.StyleName),false);
						outstring(0,0,OutJWAttribute(INr.WatchMetal),false);
						outstring(0,0,OutJWAttribute(INr.Movement),false);
						outstring(0,0,OutJWAttribute(INr.BrcStr),false);
						outstring(0,0,OutJWAttribute(INr.Gender),false);
						outstring(0,0,OutJWAttribute(INr.Other),false);
						outstring(0,0,OutJWAttribute(INr.Other2),false);												
												
					endformat;
	
					

		end;		
		
	EndJob;
	
end;





global function string 100 GetBrand(string artcode)		//Edit----------------------Dima  15.03.2016
begin
string 50 brand,classCode;
record INVc INr;
record DIVc DIr;
integer pos;

	brand = "";
	INr.Code = artcode;
	if (ReadFirstMain(INr,1,true)) then begin
		if (nonblank(INr.DispGroups)) then begin
			ExtractObj(INr.DispGroups,pos,classCode);
			while (NonBlank(classCode)) begin
			  DIr.Code = classCode;
			  if (readfirstmain(DIr,1,true)) then begin
			    if (DIr.CType=="Brand") then begin
			      brand = DIr.Name;
			      goto LbreakGetBrand;
			    end;
			  end;
			  ExtractObj(INr.DispGroups,pos,classCode);
			end;   
		end;
	end;
	
LbreakGetBrand:;	
GetBrand = brand;
return;
end;



function boolean  CheckInvoiceIsSpecial1_1(record IVVc IVr,var val subSum, var val loySum)
begin
row IVVc IVrw;
integer i;
boolean res;
	res = false;
	for(i=0;i<MatRowCnt(IVr);i=i+1) begin
		MatRowGet(IVr,i,IVrw);
		if (IVrw.stp==9) then begin			//Special offer 1+1
			res = true;
			i = MatRowCnt(IVr);
			subSum = IVrw.Sum;
			loySum = IVr.Sum4 - subSum;
		end;
	end; 

CheckInvoiceIsSpecial1_1 = res;
return;	 
end;



global procedure SpecialOffer1_1Rn(record RcVc RepSpec)		//Edit----------------------Dima  15.03.2016
begin
record IVVc IVr;
row IVVc IVrw;
integer rw,i;
val subSum,loySum,coef;
string 100 tstr,brand;
boolean TrHs,testf,loyaltyRows;
val totalSum,totalLoySum;
longint curtick;

	curtick = getcurtick();
	StartReportJob(USetStr(35074));	
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
  HeaderLocations(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;  
  if(nonblank(RepSpec.f2)) then begin
  	Header(rw,USetStr(31226) & ": " & RepSpec.f2,1);
  	rw = rw + 1;	
  end;
	EndHeader;

	
	startformat(15);
	OutString(0,0,USetStr(35075),false);	//Inovoice
	OutString(30,0,USetStr(35076),false);	//date
	OutString(70,0,USetStr(35078),false);	//location
	OutString(100,0,USetStr(35077),false);//artcode
	OutString(150,0,USetStr(35084),false);//name
	OutString(260,0,USetStr(35079),false);//brand
	OutString(320,0,USetStr(31160),false);//cost
	OutString(360,0,USetStr(35080),false);//sum
	OutString(390,0,USetStr(35081),false);//loypoints
	OutString(430,0,USetStr(35082),false);//%
	OutString(460,0,USetStr(35083),false);//difference
	endformat;
	Black_Divider(0,1);
	
	TrHs = true;
	IVr.TransDate = RepSpec.sStartDate;
	While(LoopKey("TransDate",IVr,1,TrHs)) begin
		testf = true;
		if (IVr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (nonblank(RepSpec.f1) and IVr.Location!=RepSpec.f1) then begin testf=false; end;
		if (CheckInvoiceIsSpecial1_1(IVr,subSum,loySum)==false) then begin testf = false; end;
		
		if (testf) then begin
			loyaltyRows = false;
  		for(i=0;i<MatRowCnt(IVr);i=i+1) begin
  			MatRowGet(IVr,i,IVrw);
  			brand = GetBrand(IVrw.ArtCode);
  			if (IVrw.stp==kInvoiceRowTypeNormal and loyaltyRows) then begin
  				if ((nonblank(RepSpec.f2) and RepSpec.f2==brand)  or blank(RepSpec.f2)) then begin
  			
  					coef = subSum/loySum;
  					if (coef>1) then begin coef = 1; end;
  					
  					startformat(15);
						OutString(0,0,IVr.SerNr,false);	
						OutString(30,0,IVr.TransDate,false);	
						OutString(70,0,IVr.Location,false);	
						OutString(100,0,IVrw.ArtCode,false);
						OutString(150,0,IVrw.Spec,false);
						OutString(260,0,GetBrand(IVrw.ArtCode),false);
						OutString(320,0,IVrw.FIFORowVal,false);
						OutString(360,0,IVrw.Sum,false);
						OutString(390,0,IVrw.Sum*coef,false);
						OutString(430,0,coef*100 & "%",false);
						OutString(460,0,IVrw.Sum-IVrw.Sum*coef,false);	
						endformat;
						
						totalSum = totalSum + IVrw.Sum;
						totalLoySum = totalLoySum + IVrw.Sum*coef;
  				end;
  			end;
  			
  			if (IVrw.stp==9) then begin 
  				loyaltyRows = true; 
  			end;	
			end;
		end;
	end;
	
	
	if (totalSum>0) then begin
		Black_Divider(0,1);
		OutString(0,0,"",false);
		OutString(0,0,"",false);
		OutString(0,0,"",false);
		OutString(0,0,"",false);
		OutString(0,0,"",false);
		OutString(280,0,USetStr(31211),false);
		OutString(350,0,totalSum,false);
		OutString(390,0,totalLoySum,false);
		OutString(430,0,"",false);
		OutString(460,0,totalSum-totalLoySum,false);
	end;		
	
	EndJob;
  LogProcTime("SpecialOffer1_1Rn",getcurtick() - curtick);
end;

global procedure GiftCertRn(record RcVc RepSpec)
begin
record GCVc GCr;
record GCSVc GCSr;
record GCRVc GCRr;
record IVVc IVr;
integer i,comp,curcomp;
row IVVc IVrw;
boolean okflag;	
longint curtick;
		
	curtick = getcurtick();
	curcomp=CurrentCompany;
	startreportnoheaderjob("Отчет по подарочным сертификатам");
		startformat(15);
			outstring(0,0,"Подарочные сертификаты выпущенные",false);
		endformat;
		startformat(15);
			outstring(0,0,"Номер в хансе",false);
			outstring(0,0,"Дата создания",false);
			outstring(0,0,"Сумма",false);
			outstring(0,0,"Магазин",false);
			outstring(0,0,"Срок действия",false);
			outstring(0,0,"OK Flag",false);
			outstring(0,0,"Закрыт",false);
			outstring(0,0,"Штрихкод",false);
		endformat;
		while(loopmain(GCr,1,true))begin
			startformat(15);
			outstring(0,0,GCr.SerNr,false);
			outstring(0,0,GCr.TransDate,false);
			outstring(0,0,GCr.Amount,false);
			outstring(0,0,GCr.Comment,false);
			outstring(0,0,GCr.ExpiryDate,false);
			outstring(0,0,GCr.OKFlag,false);
			outstring(0,0,GCr.Closed,false);
			outstring(0,0,GCr.BarCode,false);
		endformat;
		end;
		
		startformat(15);
		endformat;
		startformat(15);
			outstring(0,0,"Подарочные сертификаты проданные",false);
		endformat;
		startformat(15);
			outstring(0,0,"Номер в хансе",false);
			outstring(0,0,"Дата",false);
			outstring(0,0,"Сумма",false);
			outstring(0,0,"Магазин",false);
			outstring(0,0,"Срок действия",false);
			outstring(0,0,"Закрыт",false);
			outstring(0,0,"Номер сч/ф",false);
			outstring(0,0,"Штрихкод",false);
			outstring(0,0,"Остаток",false);
			outstring(0,0,"Магазин",false);
		endformat;
		while(loopmain(GCSr,1,true))begin
			startformat(15);
			outstring(0,0,GCSr.SerNr,false);
			outstring(0,0,GCSr.TransDate,false);
			outstring(0,0,GCSr.Amount,false);
			outstring(0,0,GCSr.Comment,false);
			outstring(0,0,GCSr.ExpiryDate,false);
			outstring(0,0,GCSr.Closed,false);
			outstring(0,0,GCSr.InvSerNr,false);
			outstring(0,0,GCSr.BarCode,false);
			outstring(0,0,GCSr.Balance,false);
			for(comp=1;comp<29;comp=comp+1) begin
				SetCompany(comp,false);
				IVr.SerNr = GCSr.InvSerNr;
			
				readfirstmain(IVr,1,true);
				okflag=false;
				for(i=0;i<MatRowCnt(IVr);i=i+1) begin
					MatRowGet(IVr,i,IVrw);
					if(IVrw.stp==kInvoiceRowTypeGiftVoucherSold AND GCSr.SerNr==IVrw.GCNr) then begin
						outstring(0,0,IVr.Location,false);
						goto ENDLOOPFORCOMP;
					end;	
				end;
			end;	
			ENDLOOPFORCOMP:;
			SetCompany(curcomp,false);
			endformat;
		end;
		
		startformat(15);
		endformat;
		startformat(15);
			outstring(0,0,"Подарочные сертификаты полученные",false);
		endformat;
		startformat(15);
			outstring(0,0,"№",false);
			outstring(0,0,"Дата",false);
			outstring(0,0,"Номинал",false);
			outstring(0,0,"Сумма обналичивания",false);
			outstring(0,0,"Магазин",false);
			outstring(0,0,"Штрихкод",false);
			outstring(0,0,"Номер сч/ф",false);
			outstring(0,0,"Номер проданного ПС",false);
			outstring(0,0,"Магазин",false);
			outstring(0,0,"Сумма чека",false);
			outstring(0,0,"Валюта",false);
		endformat;
		endformat;
		while(loopmain(GCRr,1,true))begin
			startformat(15);
			outstring(0,0,GCRr.SerNr,false);
			outstring(0,0,GCRr.TransDate,false);
			GCr.SerNr = GCRr.GCSSerNr;
			readfirstmain(GCr,1,true);
			outstring(0,0,GCr.Amount,false);// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 08 06 2018 y. о 23:09:33
			outstring(0,0,GCRr.Amount,false);
			outstring(0,0,GCRr.Comment,false);
			outstring(0,0,GCRr.BarCode,false);
			outstring(0,0,GCRr.InvSerNr,false);
			outstring(0,0,GCRr.GCSSerNr,false);
			IVr.SerNr = GCRr.InvSerNr;
			readfirstmain(IVr,1,true);
			outstring(0,0,IVr.Location,false);
			outstring(0,0,IVr.Sum4,false);
			outstring(0,0,IVr.CurncyCode,false);
		endformat;
		end;
	endjob;
	LogProcTime("GiftCertRn",getcurtick() - curtick);
return;
end;


global procedure GlobSertStatRn(record RcVc RepSpec)
begin
	record GlobalGiftVaucherVc GGVr;
	row GlobalGiftVaucherVc GGVrw;
	integer mtrw,i;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  string 255 compname;
  longint curtick;
	
	curtick = getcurtick();
  blockload(Compb);
	
	startreportnoheaderjob("Информация по ваучеру");
		if(nonblank(RepSpec.f1))then begin
			GGVr.BarCode = RepSpec.f1;
			if(readfirstkey("BarCode",GGVr,1,true))then begin
				startformat(15);
					outstring(0,0,"Штрихкод:",false);
					outstring(100,0,GGVr.BarCode,false);
				endformat;
				startformat(15);
					outstring(0,0,"Дата создания:",false);
					outstring(100,0,GGVr.CreateDate,false);
				endformat;
				startformat(15);
					outstring(0,0,"Дата продажи:",false);
					outstring(100,0,GGVr.StartDate,false);
				endformat;
				startformat(15);
					outstring(0,0,"Текущий баланс:",false);
					outstring(100,0,GGVr.Bal,false);
				endformat;
				startformat(15);
					outstring(0,0,"Изначальный баланс:",false);
					outstring(100,0,GGVr.TotBalance,false);
				endformat;
				
				startformat(15);
					outstring(0,0,"История",false);
				endformat;
				startformat(15);
					outstring(0,0,"Комания",false);
					outstring(100,0,"Сч/ф",false);
					outstring(200,0,"Сумма",false);
				endformat;
				
				Gray_Divider(0,1);
				mtrw = matrowcnt(GGVr);
				for(i=0;i<mtrw;i=i+1)begin
					matrowget(GGVr,i,GGVrw);
				
					compname = "";
					if(GGVrw.CompNr>0 and GGVrw.CompNr<=matrowcnt(Compb))then begin
						matrowget(Compb,GGVrw.CompNr-1,Comprw);
						compname = Comprw.CompName;
					end;
										
					startformat(15);
						outstring(0,0,compname,false);
						outstring(100,0,GGVrw.InvoiceNr,false);
						outstring(200,0,GGVrw.Sum,false);
					endformat;
				end;
				
			end;
		end;
	endjob;
	LogProcTime("GlobSertStatRn",getcurtick() - curtick);
return;
end;


global procedure TestCUDatesRn(record RcVc RepSpec)
begin
	Record CUVc CUr;
	integer mtrw,i;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  string 255 compname;
  longint curtick;
	
	curtick = getcurtick();
  blockload(Compb);
	
	startreportnoheaderjob("Даты");
		mtrw = matrowcnt(Compb);
		
		startformat(15);
			outstring(0,0,"CustCode",false);
			outstring(0,0,"Company",false);
			outstring(0,0,"DateChanged",false);
			outstring(0,0,"DateCreated",false);
			outstring(0,0,"UserDate1",false);
			outstring(0,0,"UserDate1",false);
			outstring(0,0,"UserDate3",false);
			outstring(0,0,"BirthDate",false);
			outstring(0,0,"VisaExpiry",false);
			outstring(0,0,"VATNrCheckDate",false);
			outstring(0,0,"BirthRebateLastDate",false);
			outstring(0,0,"WedDate",false);
			outstring(0,0,"SuprDate",false);
		endformat;
		
		for(i=1;i<mtrw+1;i=i+1)begin
			setcompany(i,false);
			
			if(i==1 or i==10)then begin
				CUr.Code = "";
				while(loopmain(CUr,1,true))begin
					startformat(15);
						outstring(0,0,CUr.Code,false);
						outstring(0,0,i+1,false);
						outstring(0,0,CUr.DateChanged,false);
						outstring(0,0,CUr.DateCreated,false);
						outstring(0,0,CUr.UserDate1,false);
						outstring(0,0,CUr.UserDate1,false);
						outstring(0,0,CUr.UserDate3,false);
						outstring(0,0,CUr.BirthDate,false);
						outstring(0,0,CUr.VisaExpiry,false);
						outstring(0,0,CUr.VATNrCheckDate,false);
						outstring(0,0,CUr.BirthRebateLastDate,false);
						outstring(0,0,CUr.WedDate,false);
						outstring(0,0,CUr.SuprDate,false);
					endformat;
				end;	
				resetloop(CUr);
			end;
			
		end;
		
	endjob;
	LogProcTime("TestCUDatesRn",getcurtick() - curtick);
return;
end;

/*global updating procedure ItemsBrendGRn()
begin
record BPIBrandVc BBr;
vector string 100 vbrand;
vector string 100 vgrp;
record INVc INr;
record ITVc ITr;
integer CompQty,i,OldComp;
record CompaniesBlock Compb;
row CompaniesBlock Comprw;
boolean TrHs,testf;

startreportnoheaderjob("Товары");
		
		startformat(15);
			outstring(0,0,"Компания",false);
			outstring(0,0,"код товара",false);
			outstring(0,0,"група",false);
			outstring(0,0,"бренд",false);
		endformat;	
TrHs=true;
BBr.Code="";
while(LoopMain(BBr,1,TrHs)) begin
	vbrand[BBr.Code]=BBr.Name;
end;	

CompQty = 28;
OldComp = CurrentCompany;
BlockLoad(Compb);
	for (i=1;i<CompQty;i=i+1)begin
		matrowget(Compb,i+1,Comprw);
		if(Comprw.ActiveStatus==0)then begin
			SetCompany(i+1,false);
			ITr.Code="";
			TrHs=true;
			while(LoopMain(ITr,1,TrHs)) begin
				vgrp[ITr.Code]=ITr.Comment;
			end;
			ResetLoop(ITr);
			INr.Code="";
			TrHs=true;
			while(LoopMain(INr,1,TrHs)) begin
				testf = true;
				If(nonblank(INr.BPIBrand) And vgrp[INr.Group] != vbrand[INr.BPIBrand]) then begin
					If(vgrp[INr.Group] == "GLASHUTTE" and vbrand[INr.BPIBrand]== "GLASHUTTE ORIGINAL") then begin testf=false; end;
					If(vgrp[INr.Group] == "L’EPEE" and vbrand[INr.BPIBrand]== "L'EPEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Carrera Carrera" and vbrand[INr.BPIBrand]== "CARRERA Y CARRERA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Zancan Silver/Steel" and vbrand[INr.BPIBrand]== "Zancan" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LALIQUE PARFUME REGULAR" and vbrand[INr.BPIBrand]== "LALIQUE PARFUME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Stephen Webster Silver" and vbrand[INr.BPIBrand]== "STEPHEN WEBSTER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SHAUNLEANE" and vbrand[INr.BPIBrand]== "SHAUN LEANE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SIA Home Fashion" and vbrand[INr.BPIBrand]== "SIA HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ALEXANDRE TURPAULT(Махра)" and vbrand[INr.BPIBrand]== "ALEXANDRE TURPAULT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ALEXANDRE TURPAULT(покрывало)" and vbrand[INr.BPIBrand]== "ALEXANDRE TURPAULT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ALEXANDRE TURPAULT(Постель)" and vbrand[INr.BPIBrand]== "ALEXANDRE TURPAULT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea-house" and vbrand[INr.BPIBrand]== "ANDREA HOUSE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(аксессуары)" and vbrand[INr.BPIBrand]== "ANDREA HOUSE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(декоративные подушки)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Antonini" and vbrand[INr.BPIBrand]== "ALEXANDRE TURPAULT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ALEXANDRE TURPAULT(Махра)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(махра)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(одеяла)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(подушки)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(скатерти)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Apm ART DECO" and vbrand[INr.BPIBrand]== "APM MONACO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Apm GRAPHITE" and vbrand[INr.BPIBrand]== "APM MONACO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Apm LUMIERE" and vbrand[INr.BPIBrand]== "APM MONACO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Apm XL" and vbrand[INr.BPIBrand]== "APM MONACO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Aquanova (Terry)" and vbrand[INr.BPIBrand]== "AQUANOVA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Aquanova (Accessories)" and vbrand[INr.BPIBrand]== "AQUANOVA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT BARWARE" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT BEAUTY" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT CUT STEMWARE" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT DECORATIVE ITEMS" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT DECORATIVE PIECES" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT DESK ITEMS" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT JEWELLERY" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT LIGHTS" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT LIMITED EDITIONS" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT PITCHER,JUGS,BOTTLES" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT REPLACEMENT STEMWARE" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT TABLEWARE SUNDRIES" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BEKA LOW COST" and vbrand[INr.BPIBrand]== "BEKA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BERNARDAUD GIFT" and vbrand[INr.BPIBrand]== "BERNARDAUD" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BERNARDAUD PORCELAIN" and vbrand[INr.BPIBrand]== "BERNARDAUD" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BERNARDAUD JEWELLERY" and vbrand[INr.BPIBrand]== "BERNARDAUD" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Bodum for Coin" and vbrand[INr.BPIBrand]== "BODUM" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BOSS(махра)" and vbrand[INr.BPIBrand]== "BOSS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BOSS(постель)" and vbrand[INr.BPIBrand]== "BOSS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BRABANTIA KITCHEN" and vbrand[INr.BPIBrand]== "BRABANTIA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BRABANTIA LOW COST" and vbrand[INr.BPIBrand]== "BRABANTIA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Brabantiya" and vbrand[INr.BPIBrand]== "BRABANTIA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley Accessories" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley BOHO" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley Rock" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley romantic" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley Timeless" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BUGATTI LUXURY" and vbrand[INr.BPIBrand]== "BUGATTI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Calvin Klein (махра)" and vbrand[INr.BPIBrand]== "CALVIN KLEIN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Calvin Klein (постель)" and vbrand[INr.BPIBrand]== "CALVIN KLEIN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Calvin Klein (экпозиция)" and vbrand[INr.BPIBrand]== "CALVIN KLEIN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CHRISTOFLE (Аксессуары)" and vbrand[INr.BPIBrand]== "CHRISTOFLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CHRISTOFLE (Приборы)" and vbrand[INr.BPIBrand]== "CHRISTOFLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CHRISTOFLE (Стекло)" and vbrand[INr.BPIBrand]== "CHRISTOFLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CHRISTOFLE (Фарфор)" and vbrand[INr.BPIBrand]== "CHRISTOFLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CINELLI (Duvets)" and vbrand[INr.BPIBrand]== "CINELLI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CINELLI (Pillows)" and vbrand[INr.BPIBrand]== "CINELLI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Cofur aht" and vbrand[INr.BPIBrand]== "COFUR" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Cogal Robe" and vbrand[INr.BPIBrand]== "COGAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DEKORATIEF  LOW COST" and vbrand[INr.BPIBrand]== "DEKORATIEF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DESCAMPS(АКСЕССУАРЫ)" and vbrand[INr.BPIBrand]== "DESCAMPS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DESCAMPS(детское)" and vbrand[INr.BPIBrand]== "DESCAMPS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DESCAMPS(махра)" and vbrand[INr.BPIBrand]== "DESCAMPS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DESCAMPS(подушки)" and vbrand[INr.BPIBrand]== "DESCAMPS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DESCAMPS(постель))" and vbrand[INr.BPIBrand]== "DESCAMPS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DIBBERN Porcelain" and vbrand[INr.BPIBrand]== "DIBBERN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DONDI SVAD (декоротивные подушки)" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DONDI SVAD (детское  махра)" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DONDI SVAD (детское  постель)" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DONDI SVAD (махра)" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DONDI SVAD (постель)" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DONDI SVAD (скатерти)" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DONDI SVAD (Specail offer)" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Dupon" and vbrand[INr.BPIBrand]== "Dupont" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "EDG Accessories" and vbrand[INr.BPIBrand]== "EDG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "EDG FLOWERS" and vbrand[INr.BPIBrand]== "EDG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Egizia Promo" and vbrand[INr.BPIBrand]== "EGIZIA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Fischbacher (махра)" and vbrand[INr.BPIBrand]== "CHRISTIAN FISCHBACHER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Fischbacher (ОДЕЯЛА)" and vbrand[INr.BPIBrand]== "CHRISTIAN FISCHBACHER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Fischbacher (подушки)" and vbrand[INr.BPIBrand]== "CHRISTIAN FISCHBACHER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Fischbacher (постель)" and vbrand[INr.BPIBrand]== "CHRISTIAN FISCHBACHER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "FFRETTE(АКСЕССУАРЫ)" and vbrand[INr.BPIBrand]== "FRETTE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "FRETTE(МАХРА)" and vbrand[INr.BPIBrand]== "FRETTE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "FRETTE(НИЖНЕЕ БЕЛЬЕ)" and vbrand[INr.BPIBrand]== "FRETTE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "FRETTE(ОДЕЯЛА)" and vbrand[INr.BPIBrand]== "FRETTE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "FRETTE(ПОДУШКИ)" and vbrand[INr.BPIBrand]== "FRETTE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "FRETTE(Постель)" and vbrand[INr.BPIBrand]== "FRETTE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GLASHUTTE" and vbrand[INr.BPIBrand]== "GLASHUTTE ORIGINAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO ARGENTO CORNICA" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO CESA ACCESSORIES" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO CESA CUTLERY" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO DOGALE ACCESSORIES" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO GREGGIO ACCESSORIES" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO GREGGIO CUTLERY" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO LOVELIES ACCESSORIES" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO MASSINI ACCESSORIES" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO OLRY ACCESSORIES" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO OLRY CUTLERY" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO ROYAL COLLECTION" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO SILVERPLATE" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO SILVERPLATE CUTLERY" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HEREND(Аксессуары)" and vbrand[INr.BPIBrand]== "HEREND" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HAVILAND TABLEWARE" and vbrand[INr.BPIBrand]== "HAVILAND" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GUZZINI FORME CASA" and vbrand[INr.BPIBrand]== "GUZZINI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HEREND(Фарфор)" and vbrand[INr.BPIBrand]== "HEREND" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HEREND(Фигурки)" and vbrand[INr.BPIBrand]== "HEREND" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HERING ACCESSORIES" and vbrand[INr.BPIBrand]== "HEREND" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HERING GLASSES" and vbrand[INr.BPIBrand]== "HEREND" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HERING PORCELAIN" and vbrand[INr.BPIBrand]== "HEREND" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HOMMERS" and vbrand[INr.BPIBrand]== "HOMERS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HOMMERS DS" and vbrand[INr.BPIBrand]== "HOMERS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "IVV EVERYDAY" and vbrand[INr.BPIBrand]== "IVV" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "IVV Novelties " and vbrand[INr.BPIBrand]== "IVV" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "IVV POS" and vbrand[INr.BPIBrand]== "IVV" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "IVV PROMO" and vbrand[INr.BPIBrand]== "IVV" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "JAIMIES discounted" and vbrand[INr.BPIBrand]== "JAIMIES" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Jalla(махра)" and vbrand[INr.BPIBrand]== "JALLA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Jalla(одеяла)" and vbrand[INr.BPIBrand]== "JALLA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Jalla(подушки)" and vbrand[INr.BPIBrand]== "JALLA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Jalla(постель)" and vbrand[INr.BPIBrand]== "JALLA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "JARDIN SECRET(махра)" and vbrand[INr.BPIBrand]== "JARDIN SECRET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "JARDIN SECRET(постель)" and vbrand[INr.BPIBrand]== "JARDIN SECRET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "JUDITH RIPKA SILVER" and vbrand[INr.BPIBrand]== "JUDITH RIPKA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Kaiser Gourmet" and vbrand[INr.BPIBrand]== "KAISER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "KARE Accessories" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "KARE Furniture" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "KARE Price Hero" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Kate International Down production" and vbrand[INr.BPIBrand]== "KATE INTERNATIONAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Kate International Textile" and vbrand[INr.BPIBrand]== "KATE INTERNATIONAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Katrine Leuze" and vbrand[INr.BPIBrand]== "KATRIN LEUZE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Kauffman" and vbrand[INr.BPIBrand]== "KAUFFMANN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "kauffman Duvet" and vbrand[INr.BPIBrand]== "KAUFFMANN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "kauffman Pillow" and vbrand[INr.BPIBrand]== "KAUFFMANN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LA JACUARD FRANCAIS" and vbrand[INr.BPIBrand]== "LE JACQUARD" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LALIQUE GENERAL" and vbrand[INr.BPIBrand]== "LALIQUE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LALIQUE JEWELERY" and vbrand[INr.BPIBrand]== "LALIQUE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LALIQUE PARFUME JAQUAR" and vbrand[INr.BPIBrand]== "LALIQUE PARFUME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LALIQUE PARFUME REGULAR" and vbrand[INr.BPIBrand]== "LALIQUE PARFUME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LALIQUE PARFUME CRYSTAL" and vbrand[INr.BPIBrand]== "LALIQUE PARFUME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LE_CREUSET_CAST" and vbrand[INr.BPIBrand]== "LE CREUSET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LE_CREUSET_CERA" and vbrand[INr.BPIBrand]== "LE CREUSET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LE_CREUSET_KET" and vbrand[INr.BPIBrand]== "LE CREUSET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LE_CREUSET_MIL" and vbrand[INr.BPIBrand]== "LE CREUSET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LE_CREUSET_STON" and vbrand[INr.BPIBrand]== "LE CREUSET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LENOX ACCESSORIES" and vbrand[INr.BPIBrand]== "LENOX" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LENOX BUTTERFLY MEDOW" and vbrand[INr.BPIBrand]== "LENOX" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LENOX CRYSTAL" and vbrand[INr.BPIBrand]== "LENOX" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LENOX DISNEY" and vbrand[INr.BPIBrand]== "LENOX" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LENOX NEW YEAR" and vbrand[INr.BPIBrand]== "LENOX" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LENOX TABLEWARE" and vbrand[INr.BPIBrand]== "LENOX" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Louis De poortere" and vbrand[INr.BPIBrand]== "LOUIS DE POORTERE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Luxenter EDURNE" and vbrand[INr.BPIBrand]== "LUXENTER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Luxenter HAPPY GEMS" and vbrand[INr.BPIBrand]== "LUXENTER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Luxenter MOMENTS" and vbrand[INr.BPIBrand]== "LUXENTER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Luxenter SILVER" and vbrand[INr.BPIBrand]== "LUXENTER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "MILLEFIORI  MILLEFIORI" and vbrand[INr.BPIBrand]== "MILLEFIORI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Misaki CULTURED GOLD" and vbrand[INr.BPIBrand]== "MISAKI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Misaki CULTURED RHODIUM" and vbrand[INr.BPIBrand]== "MISAKI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Misaki CULTURED ROSE GOLD" and vbrand[INr.BPIBrand]== "MISAKI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Misaki HAND MADE GLASS PEARLS GOLD" and vbrand[INr.BPIBrand]== "MISAKI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Misaki HAND MADE GLASS PEARLS RHODIUM" and vbrand[INr.BPIBrand]== "MISAKI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Misaki HAND MADE GLASS PEARLS ROSE GOLD" and vbrand[INr.BPIBrand]== "MISAKI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Misaki HAND MADE GLASS PEARLS STEEL" and vbrand[INr.BPIBrand]== "MISAKI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "MOSER ARMUDU" and vbrand[INr.BPIBrand]== "MOSER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "MOSER BAKU" and vbrand[INr.BPIBrand]== "MOSER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "MOSER CRYSTAL SETS" and vbrand[INr.BPIBrand]== "MOSER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "MOSER VASES&ACCESSORIES" and vbrand[INr.BPIBrand]== "MOSER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "NINA RICCI(Махра)" and vbrand[INr.BPIBrand]== "NINA RICCI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "NINA RICCI(Постель)" and vbrand[INr.BPIBrand]== "NINA RICCI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "PLAUENER (одеяла)" and vbrand[INr.BPIBrand]== "PLAUENER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "PLAUENER (подушки)" and vbrand[INr.BPIBrand]== "PLAUENER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "PLAUENER (постель)" and vbrand[INr.BPIBrand]== "PLAUENER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "RALPH LAUIREN HOME(МАХРА)" and vbrand[INr.BPIBrand]== "RALPH LAUREN HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "RALPH LAUREN HOME(АКСЕССУАРЫ)" and vbrand[INr.BPIBrand]== "RALPH LAUREN HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "RALPH LAUREN HOME(БЕЛЬЕ)" and vbrand[INr.BPIBrand]== "RALPH LAUREN HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "RALPH LAUREN HOME(Декоративные подушки)" and vbrand[INr.BPIBrand]== "RALPH LAUREN HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Raulph Lauren общий" and vbrand[INr.BPIBrand]== "RALPH LAUREN HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ROBB&BERKING ACCESSORIES" and vbrand[INr.BPIBrand]== "ROBBE BERKING" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ROBB&BERKING CUTLERY" and vbrand[INr.BPIBrand]== "ROBBE BERKING" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Rosenthal (Аксессуары)" and vbrand[INr.BPIBrand]== "ROSENTHAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Rosenthal (Стекло)" and vbrand[INr.BPIBrand]== "ROSENTHAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Rosenthal Studio-Line (Аксессуары)" and vbrand[INr.BPIBrand]== "ROSENTHAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Rosenthal Studio-Line (Стекло)" and vbrand[INr.BPIBrand]== "ROSENTHAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Rosenthal Studio-Line (Фарфор)" and vbrand[INr.BPIBrand]== "ROSENTHAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Sambonet Kids " and vbrand[INr.BPIBrand]== "SAMBONET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Sambonet promo" and vbrand[INr.BPIBrand]== "SAMBONET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (махра)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (ОДЕЯЛА)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (ПОДУШКИ)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (постель)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (classic)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (Special Offer)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SCHOTT ZWIESEL POS" and vbrand[INr.BPIBrand]== "SCHOTT ZWIESEL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SCHOTT ZWIESEL PROMO" and vbrand[INr.BPIBrand]== "SCHOTT ZWIESEL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schott Zwiesl Promo" and vbrand[INr.BPIBrand]== "SCHOTT ZWIESEL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SIA HOME FASHION" and vbrand[INr.BPIBrand]== "SIA HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SIA Home Fashion" and vbrand[INr.BPIBrand]== "SIA HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Somma throws" and vbrand[INr.BPIBrand]== "SOMMA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Stephen Webster Silver" and vbrand[INr.BPIBrand]== "STEPHEN WEBSTER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Svad Dondi Bedcovers" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Svad Dondi Textile" and vbrand[INr.BPIBrand]== "SVAD DONDI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Thomas Sabo Charm Club" and vbrand[INr.BPIBrand]== "THOMAS SABO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Thomas Sabo Sterling Silver" and vbrand[INr.BPIBrand]== "THOMAS SABO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "TOMMY HILFIGER(махра)" and vbrand[INr.BPIBrand]== "TOMMY HILFIGER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "TOMMY HILFIGER(постель)" and vbrand[INr.BPIBrand]== "TOMMY HILFIGER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "TVS LOW COST" and vbrand[INr.BPIBrand]== "TVS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VAN_REMORT" and vbrand[INr.BPIBrand]== "VAN REMORTEL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Versace (Аксессуары)" and vbrand[INr.BPIBrand]== "VERSACE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Versace (Приборы)" and vbrand[INr.BPIBrand]== "VERSACE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Versace (Стекло)" and vbrand[INr.BPIBrand]== "VERSACE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Versace (Фарфор)" and vbrand[INr.BPIBrand]== "VERSACE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Accessories" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Christmas" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Classic" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Country" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Cutlery" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Home Decor" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Kids" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Metropolitan" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "VILLEROY & BOCH Stemware" and vbrand[INr.BPIBrand]== "VILLEROY & BOCH" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEDGWOOD GIFTS&ACCESSORIES" and vbrand[INr.BPIBrand]== "WEDGWOOD" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE GUESTBOOK " and vbrand[INr.BPIBrand]== "WEDGWOOD" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Weissfee bedlinen" and vbrand[INr.BPIBrand]== "WEISSFEE " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE NAPKIN" and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE PLACEMAT" and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE TABLECENTER" and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE TABLECLOTH" and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Weissfee terry" and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Accessories" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Bistro" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Black Line" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF COFFEE MACHINES" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Consumer electrics" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Cookware" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Cutlery" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Frying pans" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF HOTEL" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Kettles" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Kids" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Knives" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Pressure cookers" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Profi" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WMF Tea pots" and vbrand[INr.BPIBrand]== "WMF" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "y.Delorme общий" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YANKEE CANDLE  CLASSIC COLLECTION" and vbrand[INr.BPIBrand]== "YANKEE CANDLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YANKEE CANDLE ACCESSORIES" and vbrand[INr.BPIBrand]== "YANKEE CANDLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YANKEE CANDLE POS" and vbrand[INr.BPIBrand]== "YANKEE CANDLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Yves Delorme ( Laurence Tavernier )" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YVES DELORME (Аксессуары)" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YVES DELORME (Детское)" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YVES DELORME (Кухон.полотенца и скатерти)" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YVES DELORME (Одеяла)" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YVES DELORME (Подушки)" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YVES DELORME (постели)" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "YVES DELORME(махра)" and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Zancan Silver/Steel" and vbrand[INr.BPIBrand]== "Zancan" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LE_CREUSET_CAST " and vbrand[INr.BPIBrand]== "LE CREUSET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Louis De poortere" and vbrand[INr.BPIBrand]== "LOUIS DE POORTERE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "EDG FLOWERS " and vbrand[INr.BPIBrand]== "EDG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CoinCasa" and vbrand[INr.BPIBrand]== "COIN CASA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "NACHTMANN FOR COIN" and vbrand[INr.BPIBrand]== "NACHTMANN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "EDG Accessories" and vbrand[INr.BPIBrand]== "EDG" ) then begin testf=false; end;
					If(blank(vgrp[INr.Group])) then begin testf=false; end;
					If(vgrp[INr.Group] == "Bodum for Coin " and vbrand[INr.BPIBrand]== "BODUM" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CINELLI (Duvets)  " and vbrand[INr.BPIBrand]== "CINELLI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CINELLI (Pillows)  " and vbrand[INr.BPIBrand]== "CINELLI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Cogal Towel" and vbrand[INr.BPIBrand]== "COGAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "EDG FLOWERS" and vbrand[INr.BPIBrand]== "EDG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "EDG Accessories" and vbrand[INr.BPIBrand]== "EDG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Kaiser Gourmet " and vbrand[INr.BPIBrand]== "KAISER" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley Timeless" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley BOHO" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Aquanova (Terry)" and vbrand[INr.BPIBrand]== "AQUANOVA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (махра)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(постель)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Cofur aht" and vbrand[INr.BPIBrand]== "COFUR " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DEKORATIEF  LOW COST" and vbrand[INr.BPIBrand]== "DEKORATIEF  " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley Timeless" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley Rock" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley BOHO" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley Accessories" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (постель)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DESCAMPS(постель)" and vbrand[INr.BPIBrand]== "DESCAMPS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ALEXANDRE TURPAULT(Махра) " and vbrand[INr.BPIBrand]== "ALEXANDRE TURPAULT " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Fischbacher (постель)" and vbrand[INr.BPIBrand]== "CHRISTIAN FISCHBACHER " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Aquanova (Terry) " and vbrand[INr.BPIBrand]== "AQUANOVA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (махра)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ALEXANDRE TURPAULT(Постель) " and vbrand[INr.BPIBrand]== "ALEXANDRE TURPAULT " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Yves Delorme ( Laurence Tavernier )  " and vbrand[INr.BPIBrand]== "YVES DELORME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "FRETTE(АКСЕССУАРЫ)" and vbrand[INr.BPIBrand]== "FRETTE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Somma throws" and vbrand[INr.BPIBrand]== "SOMMA " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEDGWOOD TABLEWARE" and vbrand[INr.BPIBrand]== "WEDGWOOD" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ALEXANDRE TURPAULT(покрывало) " and vbrand[INr.BPIBrand]== "ALEXANDRE TURPAULT " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HERING PORCELAIN" and vbrand[INr.BPIBrand]== "HERING" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BACCARAT TABLEWARE" and vbrand[INr.BPIBrand]== "BACCARAT" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE GUESTBOOK" and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE NAPKIN " and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Rosenthal (Фарфор)" and vbrand[INr.BPIBrand]== "ROSENTHAL" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea-house " and vbrand[INr.BPIBrand]== "ANDREA HOUSE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SIA Home Fashion " and vbrand[INr.BPIBrand]== "SIA HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE NAPKIN " and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					
					
					If(vgrp[INr.Group] == "ALESSI POS" and vbrand[INr.BPIBrand]== "ALESSI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANVERSA(аксессуары)" and vbrand[INr.BPIBrand]== "ANVERSA" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Buckley romantic" and vbrand[INr.BPIBrand]== "BUCKLEY LONDON " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "BUGATTI LUXURY" and vbrand[INr.BPIBrand]== "BUGATTI " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ChronoVision Movers" and vbrand[INr.BPIBrand]== "CHRONOVISION" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Classic Porcelain" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "CRISTOFLE JEWELLERY" and vbrand[INr.BPIBrand]== "CHRISTOFLE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "DAUM PRESTIGE" and vbrand[INr.BPIBrand]== "DAUM" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Dinh Van " and vbrand[INr.BPIBrand]== "DINH VAN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Fischbacher (махра)" and vbrand[INr.BPIBrand]== "CHRISTIAN FISCHBACHER " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "GREGGIO CUSTOMIZED" and vbrand[INr.BPIBrand]== "GREGGIO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Gres" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HELIO" and vbrand[INr.BPIBrand]== "HELIOS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HERING ACCESSORIES" and vbrand[INr.BPIBrand]== "HERING" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "HERING GLASSES" and vbrand[INr.BPIBrand]== "HERING" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "High Porcelain" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Hulchi Belluni " and vbrand[INr.BPIBrand]== "HULCHI BELLUNI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "LE_CREUSET_MIL " and vbrand[INr.BPIBrand]== "LE CREUSET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Lighting" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Light&Living*3" and vbrand[INr.BPIBrand]== "LIGHT&LIVING" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Louis De poortere  " and vbrand[INr.BPIBrand]== "LOUIS DE POORTERE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Luxenter EDURNE" and vbrand[INr.BPIBrand]== "LUXENTER " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Matt Porcelain" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Naturo Fantastic" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Others" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ReDeco" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (ОДЕЯЛА)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (ПОДУШКИ)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (ПОДУШКИ)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (classic)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Schlossberg (Special Offer)" and vbrand[INr.BPIBrand]== "SCHLOSSBERG " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SIA_High" and vbrand[INr.BPIBrand]== "SIA HOME" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Table Lamp" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Tag Heuer" and vbrand[INr.BPIBrand]== "TAG HEUER " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "The Fifth Season" and vbrand[INr.BPIBrand]== "ROBERTO COIN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE GUESTBOOK " and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE NAPKIN " and vbrand[INr.BPIBrand]== "WEISSFEE " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE NAPKINS" and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE PLACEMAT " and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE RUNNER " and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "WEISSFEE TABLECENTER " and vbrand[INr.BPIBrand]== "WEISSFEE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Weissfee terry" and vbrand[INr.BPIBrand]== "WEISSFEE " ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Zancan Watches " and vbrand[INr.BPIBrand]== "Zancan" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Consignment (Временный  ввоз)" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "De Bethune CHF" and vbrand[INr.BPIBrand]== "DAUM" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Cento" and vbrand[INr.BPIBrand]== "ROBERTO COIN" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Morellato" and vbrand[INr.BPIBrand]== "JUST CAVALLI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANDREA_ACC" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea Accessories" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANDREA_EKS" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "ANDREA_FU" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea-house " and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea-K" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea-K-Accessories" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea-K-Ekspo                            " and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Andrea-K-Furniture" and vbrand[INr.BPIBrand]== "KARE" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Consignment (Временный  ввоз)" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "SOHER" and vbrand[INr.BPIBrand]== "LLADRO" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Sambonet" and vbrand[INr.BPIBrand]== "Paderno" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "PADERNO" and vbrand[INr.BPIBrand]== "SAMBONET" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Morellato" and vbrand[INr.BPIBrand]== "MASERATI" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "KOSTA BODA" and vbrand[INr.BPIBrand]== "ORREFORS" ) then begin testf=false; end;
					If(vgrp[INr.Group] == "Morellato" and vbrand[INr.BPIBrand]== "TRUSSARDI" ) then begin testf=false; end;
					
					
					if(testf) then begin
						startformat(15);
						outstring(0,0,CurrentCompany,false);
						outstring(0,0,INr.Code,false);
						outstring(0,0,vgrp[INr.Group],false);
						outstring(0,0,vbrand[INr.BPIBrand],false);
						endformat;	
						INr.BPIBrand = "";
						INr.BPICollection = "";
						INr.BPIGroup = "";
						INr.BPISubGroup = "";
						INr.BPICategory = "";
						INr.BPIMaterial = "";
						INr.BPIColor = "";
						INr.BPIShape = "";
						INr.BPISize = "";
						INr.BPIUse = "";
						INr.BPISex = "";
						INr.BPIPlating = "";
						INr.BPIClarity = "";
						INr.BPIWeight = "";
						INr.BPICut = "";
						INr.BPIStone = "";
						INr.BPIStrap = "";
						INr.BPIOdour = "";
						recordstore(INr,true);
					end;
			  end;
			end;	
			ResetLoop(INr);
		end;
	end;
endjob;
return;
end;	*/

global updating procedure ItemsBrendCuvcGRn()
begin
record BPIBrandVc BBr;
array string 100 vbrand,vbrname,vit,vitname,vcu,vcuname;
record CUVc CUr;
record ITVc ITr;
integer CompQty,i,OldComp;
record CompaniesBlock Compb;
row CompaniesBlock Comprw;
boolean TrHs,testf;

startreportnoheaderjob("Товары");
		
		startformat(15);
			outstring(0,0,"Code br",false);
			outstring(50,0,"Name br",false);
			outstring(150,0,"Code gr",false);
			outstring(200,0,"Name gr",false);
			outstring(300,0,"Code Cu",false);
			outstring(350,0,"Name Cu",false);
		endformat;	
TrHs=true;
BBr.Code="";
i=0;
while(LoopMain(BBr,1,TrHs)) begin
 vbrand[i]=BBr.Code;
 vbrname[i]=BBr.Name;
 i=i+1;
end;
ResetLoop(BBr);
for(i=1;i<29;i=i+1)begin
	if(CompanyIsJWLikeCompany(i)==false or i==3)then begin
		TrHs=true;
		i=0;
		ITr.Code="";
		while(LoopMain(ITr,1,TrHs)) begin
			vit[i]=ITr.Code;
			vitname[i]=ITr.Comment;
			 i=i+1;
		end;	
		ResetLoop(ITr);
	end;
end;
TrHs=true;
i=0;
CUr.Code="";
CUr.VEType = 1;
while(Loopkey("VEActCode",CUr,1,TrHs)) begin
 testf=true;
 if(CUr.VEType!=1) then begin testf=false; TrHs = false; end;
 if(testf) then begin
		vcu[i]=CUr.Code;
		vcuname[i]=CUr.Name;
		i=i+1;
	end;
end;




for(i=0; i<vbrand.length  or i<vbrname.length or i<vit.length or i<vitname.length or i<vcu.length or i<vcuname.length;i=i+1) begin
	startformat(15);
			outstring(0,0,vbrand[i],false);
			outstring(50,0,vbrname[i],false);
			outstring(150,0,vit[i],false);
			outstring(200,0,vitname[i],false);
			outstring(300,0,vcu[i],false);
			outstring(350,0,vcuname[i],false);
		endformat;	
end;

endjob;

return; 
end;	



global function string 255 GetDITypeName(string diset,string Type)
begin
	record DIVc DIr;
	string 100 res,class;
	integer pos;
	
	pos = 0;
	class = "";
	ExtractObj(diset,pos,class);
	while(nonblank(class))begin
		DIr.Code = class;
		readfirstmain(DIr,1,true);
		if(DIr.CType==Type)then begin
			res = DIr.Name;
		end;
		
		ExtractObj(diset,pos,class);
	end;
	
	GetDITypeName = res;
	
return;
end;

global updating procedure UpLoyRn()
begin
  boolean TrHs;
	integer i;
	record LoyaltyCardVc LCr;
		i=0;
		TrHs=true;
		LCr.SerNr="";
		While(LoopMain(LCr,1,TrHs)) begin
			i=i+1;
			if(i==10) then begin TrHs=false; end;
			SendUpdateLoyaltyCardToCRM(LCr);
			millisleep(1000);
		end;	
return;
end;



global procedure SHCompletedRn(record RcVc RepSpec)
begin
  record SHVc SHr;
	row SHVc SHrw;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	integer OldComp,i,mtrw,shmtrw,j,LocComp,gORcnt,k;
	longint s, lcnt, l;
	string 255 CompName, Location;
	Boolean TrHs,testf;
	record ORVc ORr, GlobORr;
	row	ORVc ORrw, GlobORrw;
	array integer tab;
	val ECItSum;
	vector string 255 vComp, vStock, vSerNr, vOffORNr, vItemName, vItemCode;
	vector val vQuant, vSum;
	vector date vDate;
	vector integer vQtySpec;
	array string 255 SHarr, Locarr;
	vector boolean vLocf;
	longint curtick;
	
	curtick = getcurtick();
	LocComp = CurrentCompany;
	blockload(Compb);
	
	OldComp = CurrentCompany;
	
	startreportnoheaderjob("Все Товары");
	tab[0] = 20;
	tab[1] = 60;
	tab[2] = 120;
	tab[3] = 170;
	tab[4] = 220;
	tab[5] = 270;
	tab[6] = 320;
	tab[7] = 420;
	
	StartFormat(15);
		outstring(20,0,"Date:",false);
		outstring(20,0,CurrentDate,false);
		outstring(20,0,CurrentTime,false);
	endformat;
	StartFormat(15);
	
		outstring(20,0,"Company",false);
		outstring(120,0,"Stock",false);
		outstring(220,0,"Serial Nr",false);
		outstring(320,0,"Official ORNr",false);
		outstring(420,0,"Date",false);
		outstring(420,0,"Item Name",false);
		outstring(420,0,"Item Code",false);
		outstring(420,0,"Quant",false);
		outstring(420,0,"Sum",false);
		

	
	endformat;
	
	lcnt = 0;
	s = 0;
	mtrw = matrowcnt(Compb);
	for (i=0;i<mtrw;i=i+1) begin
		CompName = "";
		MatRowGet(Compb,i,Comprw);
		if(Comprw.ActiveStatus==0)then begin
			CompName = Comprw.CompName;
			SetCompany(i+1,false);
			LocComp = i+1;
			TrHs = true;
			SHr.SerNr = "";
			SHr.Sorting = "COMPLETED";
			while (LoopKey("Sorting",SHr,2,TrHs)) begin
				Location = "";
				testf = true;
				if(SHr.Sorting!="COMPLETED")then begin TrHs = false; testf = false; end;
				if(SHr.OKFlag!=0)then begin testf = false; end;
				if(testf)then begin
					if(!vLocf[SHr.Location])then begin
						Locarr[lcnt] = SHr.Location;
						lcnt = lcnt + 1;
						vLocf[SHr.Location] = true;
					end;
					SHarr[s] = SHr.SerNr & "-" & Comprw.CompName;
					vComp[SHr.SerNr & "-" & Comprw.CompName] = Comprw.CompName;
					shmtrw = matrowcnt(SHr);
					for(j=0;j<shmtrw;j=j+1)begin
						matrowget(SHr,j,SHrw);
						if(nonblank(Location) and !SetInSet(SHrw.Location,Location))then begin
							Location = Location & ", " & SHrw.Location;
						end;
						if(blank(Location))then begin
							Location = SHrw.Location;
						end;
					end;
					if(blank(Location))then begin
						Location = SHr.Location;
					end;
					vStock[SHr.SerNr & "-" & Comprw.CompName] = SHr.Location;
					vSerNr[SHr.SerNr & "-" & Comprw.CompName] = SHr.SerNr;
					ORr.SerNr = SHr.OrderNr;
					vDate[SHr.SerNr & "-" & Comprw.CompName] = SHr.ShipDate;
					shmtrw = matrowcnt(SHr);
					vQtySpec[SHr.SerNr & "-" & Comprw.CompName] = shmtrw;
					for(j=0;j<shmtrw;j=j+1)begin
						matrowget(SHr,j,SHrw);
						vItemName[SHr.SerNr & "-" & Comprw.CompName & "-" & j] = SHrw.Spec;
						vItemCode[SHr.SerNr & "-" & Comprw.CompName & "-" & j] = SHrw.ArtCode;
						vQuant[SHr.SerNr & "-" & Comprw.CompName & "-" & j] = SHrw.Ordered;
						ECItSum = 0;
						if(setcompany(29,false))then begin
							GlobORr.SerNr = mid(SHrw.SerialNr,3,len(SHrw.SerialNr)-12);
							if(ReadFirstMain(GlobORr,1,true))then begin
								vOffORNr[SHr.SerNr & "-" & Comprw.CompName] = GlobORr.CustOrdNr;
								gORcnt = matrowcnt(GlobORr);
								for (k=0;k<gORcnt;k=k+1)begin
									matrowget(GlobORr,k,GlobORrw);
									if(GlobORrw.ArtCode==right(SHrw.SerialNr,8))then begin
										ECItSum = GlobORrw.Sum / GlobORrw.Quant;
										k = gORcnt;
									end;
								end;
							end;
						end;
						vSum[SHr.SerNr & "-" & Comprw.CompName & "-" & j] = ECItSum*SHrw.Ordered;
						ResetCompany(LocComp);
					end;
					s = s + 1;
				end;
			end;
			resetloop(SHr);
		end;
	end;
	
	
	
	for(l=0;l<lcnt;l=l+1)begin
		for(i=0;i<s;i=i+1)begin
			testf = true;
			if(Locarr[l]!=vStock[SHarr[i]])then begin testf = false; end; 
			if(nonblank(RepSpec.f1) and Locarr[l]!=RepSpec.f1)then begin testf = false; end; 
			if(testf)then begin
				StartFormat(15);
					outstring(20,0,vComp[SHarr[i]],false);
					outstring(120,0,vStock[SHarr[i]],false);
					outstring(220,0,vSerNr[SHarr[i]],false);
					outstring(220,0,vOffORNr[SHarr[i]],false);
					outstring(420,0,vDate[SHarr[i]],false);
				endformat;
				for(j=0;j<vQtySpec[SHarr[i]];j=j+1)begin
					matrowget(SHr,j,SHrw);
					StartFormat(15);
						outstring(420,0,"",false);
						outstring(420,0,"",false);
						outstring(420,0,"",false);
						outstring(420,0,"",false);
						outstring(420,0,"",false);
						outstring(420,0,vItemName[SHarr[i] & "-" & j],false);
						outstring(420,0,vItemCode[SHarr[i] & "-" & j],false);
						outstring(420,0,vQuant[SHarr[i] & "-" & j],false);
						outstring(460,0,vSum[SHarr[i] & "-" & j],false);
					endformat;
				end;
			end;
		end;
	end;
	
	
	
	ResetCompany(OldComp);
	
	StartFormat(15);
		outstring(20,0,"Курьер 1:",false);
	endformat;
	
	EndJob;
	
	LogProcTime("SHCompletedRn",getcurtick() - curtick);
return;
end;





global procedure AllMyGoodsRn(record RcVc RepSpec)
begin
record INVc INr;
record BPIBrandVc BBr;
record BPICollectionVC BCr;
record BPIColorVC BClr;
record BPIMaterialVc BMr;
record BPISizeVc BSr;
record BPIGroupVc BGr;
record BPISubGroupVc BSGr;
record BPICategoryVc BCatr;
string 255 companies;
string 255 text;
vector string 50 vit;
longint curcomp,i,qnt;
integer pos, OldComp;
array string 100 tags;
vector string 50 code;
vector string 50 group,groupn;
vector string 50 name;
vector string 50 size,sizen;
vector string 50 material,materialn;
vector string 50 collection,collectionn;
vector string 50 brand,brandn;
vector string 50 subgroup,subgroupn;
vector string 50 category,categoryn;
vector string 50 colour,colourn;
vector string 50 recepy,companiesn;
vector val qtInStock;
vector date lastupd; 
vector boolean flag;
boolean testf,compin;
record ItemStatusVc ISr;
longint curtick;

	curtick = getcurtick();
	OldComp = CurrentCompany;

	BBr.Code="";
	While(LoopMain(BBr,1,true)) begin
		brandn[BBr.Code]=BBr.Name;
	end;	

	BCr.Code="";
	While(LoopMain(BCr,1,true)) begin
		collectionn[BCr.Code]=BCr.Name;
	end;	
	
	BClr.Code="";
	While(LoopMain(BClr,1,true)) begin
		colourn[BClr.Code]=BClr.Name;
	end;	

	BMr.Code="";
	While(LoopMain(BMr,1,true)) begin
		materialn[BMr.Code]=BMr.Name;
	end;	
	
	BGr.Code="";
	While(LoopMain(BGr,1,true)) begin
		groupn[BGr.Code]=BGr.Name;
	end;
	
	BCatr.Code="";
	While(LoopMain(BCatr,1,true)) begin
		categoryn[BCatr.Code]=BCatr.Name;
	end;
	
	BSGr.Code="";
	While(LoopMain(BSGr,1,true)) begin
		subgroupn[BSGr.Code]=BSGr.Name;
	end;	

	for(i=0;i<29;i=i+1) begin
		companiesn[i]=GetCompanyShortCode(i);
	end;
	i=0;		
	startreportnoheaderjob("Все Товары");
		startformat(15);
			outstring(0,0,"Code",false);
			outstring(0,0,"Name",false);
			outstring(0,0,"Model",false);
			outstring(0,0,"Colour",false);
			outstring(0,0,"Material",false);
			outstring(0,0,"Size",false);
			outstring(0,0,"Set Code",false);
			outstring(0,0,"Group",false);
			outstring(0,0,"SubGroup",false);
			outstring(0,0,"Category",false);
			outstring(50,0,"Brand",false);
			outstring(50,0,"Comp",false);
			outstring(0,0,"Last upd",false);
			outstring(0,0,"In stock",false);
		endformat;	
		
	for(curcomp=1;curcomp<34;curcomp=curcomp+1) begin
		compin = true;
		
		CompanyIsJWLikeCompany(curcomp);
		if(curcomp!=3 and CompanyIsJWLikeCompany(curcomp))begin compin = false; end;
		if(curcomp==10)begin compin = false; end;
		if(curcomp==11)begin compin = false; end;
		if(curcomp==12)begin compin = false; end;
		if(curcomp==18)begin compin = false; end;
		if(curcomp==29)begin compin = false; end;
		if(curcomp==18)begin compin = false; end;
		
		if(compin)then begin
			setcompany(curcomp,false);
			INr.Code="";
			while (LoopMain(INr,1,true)) begin
				testf=true;
				if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand) then begin testf = false; end;
				if(nonblank(RepSpec.f2) and RepSpec.f2!=INr.BPIGroup) then begin testf = false; end;
				if(nonblank(RepSpec.f3) and RepSpec.f3!=INr.BPISubGroup) then begin testf = false; end;
				if(testf) then begin
					if(nonblank(INr.BPIBrand)) then begin
						if(nonblank(vit[INr.Code & INr.BPIBrand])) then begin
							vit[INr.Code & INr.BPIBrand]=vit[INr.Code & INr.BPIBrand] & "," & CurrentCompany;
							name[INr.Code & INr.BPIBrand]=INr.Name;
							brand[INr.Code & INr.BPIBrand]=INr.BPIBrand;
							code[INr.Code & INr.BPIBrand]=INr.Code;
							size[INr.Code & INr.BPIBrand]=INr.BPISize;
							material[INr.Code & INr.BPIBrand]=INr.BPIMaterial;
							collection[INr.Code & INr.BPIBrand]=INr.BPICollection;
							subgroup[INr.Code & INr.BPIBrand]=INr.BPISubGroup;
							group[INr.Code & INr.BPIBrand]=INr.BPIGroup;
							colour[INr.Code & INr.BPIBrand]=INr.BPIColor;
							category[INr.Code & INr.BPIBrand]=INr.BPICategory;
							lastupd[INr.Code & INr.BPIBrand]=INr.LastPriceChange;
							recepy[INr.Code & INr.BPIBrand]=INr.Recepy;
							ISr.Code = INr.Code;
							ISr.Location = ";;;";
							If(readfirstmain(ISr,2,true))then begin
								qtInStock[INr.Code & INr.BPIBrand]=qtInStock[INr.Code & INr.BPIBrand]+ISr.Instock;
							end;	
							if(!flag[INr.Code & INr.BPIBrand])then begin
								tags[i] = INr.Code & INr.BPIBrand;
								i=i+1;
							end;	
							flag[INr.Code & INr.BPIBrand]=true;
						end else begin 
							vit[INr.Code & INr.BPIBrand]=CurrentCompany;
							name[INr.Code & INr.BPIBrand]=INr.Name;
							brand[INr.Code & INr.BPIBrand]=INr.BPIBrand;
							code[INr.Code & INr.BPIBrand]=INr.Code;
							size[INr.Code & INr.BPIBrand]=INr.BPISize;
							material[INr.Code & INr.BPIBrand]=INr.BPIMaterial;
							collection[INr.Code & INr.BPIBrand]=INr.BPICollection;
							subgroup[INr.Code & INr.BPIBrand]=INr.BPISubGroup;
							category[INr.Code & INr.BPIBrand]=INr.BPICategory;
							group[INr.Code & INr.BPIBrand]=INr.BPIGroup;
							lastupd[INr.Code & INr.BPIBrand]=INr.LastPriceChange;
							colour[INr.Code & INr.BPIBrand]=INr.BPIColor;
							recepy[INr.Code & INr.BPIBrand]=INr.Recepy;
							ISr.Code = INr.Code;
							ISr.Location = ";;;";
							If(readfirstmain(ISr,2,true)) then begin
								qtInStock[INr.Code & INr.BPIBrand]=qtInStock[INr.Code & INr.BPIBrand]+ISr.Instock;
							end;	
							if(!flag[INr.Code & INr.BPIBrand]) then begin
								tags[i] = INr.Code & INr.BPIBrand;
								i=i+1;
							end;	
							flag[INr.Code & INr.BPIBrand]=true;
						end;	
					end else begin
						if(nonblank(vit[INr.Code & INr.Group])) then begin
							vit[INr.Code & INr.Group]=vit[INr.Code & INr.Group] & "," & CurrentCompany;
							name[INr.Code & INr.Group]=INr.Name;
							brand[INr.Code & INr.Group]=INr.Group;
							code[INr.Code & INr.Group]=INr.Code;
							size[INr.Code & INr.Group]=INr.BPISize;
							material[INr.Code & INr.Group]=INr.BPIMaterial;
							group[INr.Code & INr.Group]=INr.BPIGroup;
							collection[INr.Code & INr.Group]=INr.BPICollection;
							subgroup[INr.Code & INr.Group]=INr.BPISubGroup;
							category[INr.Code & INr.Group]=INr.BPICategory;
							lastupd[INr.Code & INr.Group]=INr.LastPriceChange;
							colour[INr.Code & INr.Group]=INr.BPIColor;
							recepy[INr.Code & INr.Group]=INr.Recepy;
							ISr.Code = INr.Code;
							ISr.Location = ";;;";
							If(readfirstmain(ISr,2,true)) then begin
								qtInStock[INr.Code & INr.Group]=qtInStock[INr.Code & INr.Group]+ISr.Instock;
							end;	
							if(!flag[INr.Code & INr.Group]) then begin
								tags[i] = INr.Code & INr.Group;
								i=i+1;
							end;	
							flag[INr.Code & INr.Group]=true;
						end else begin 
							vit[INr.Code & INr.Group]=CurrentCompany;
							name[INr.Code & INr.Group]=INr.Name;
							brand[INr.Code & INr.Group]=INr.Group;
							code[INr.Code & INr.Group]=INr.Code;
							size[INr.Code & INr.Group]=INr.BPISize;
							material[INr.Code & INr.Group]=INr.BPIMaterial;
							collection[INr.Code & INr.Group]=INr.BPICollection;
							subgroup[INr.Code & INr.Group]=INr.BPISubGroup;
							category[INr.Code & INr.Group]=INr.BPICategory;
							lastupd[INr.Code & INr.Group]=INr.LastPriceChange;
							group[INr.Code & INr.Group]=INr.BPIGroup;
							colour[INr.Code & INr.Group]=INr.BPIColor;
							recepy[INr.Code & INr.Group]=INr.Recepy;
							ISr.Code = INr.Code; 
							ISr.Location = ";;;";
							If(readfirstmain(ISr,2,true)) then begin
								qtInStock[INr.Code & INr.Group]=qtInStock[INr.Code & INr.Group]+ISr.Instock;
							end;	
							if(!flag[INr.Code & INr.Group]) then begin
								tags[i]=INr.Code & INr.Group;
								i=i+1;
							end;	
							flag[INr.Code & INr.Group]=true;
						end;	
					end;
				end;	
			end;
			ResetLoop(INr);
		end;
	end;
	ResetCompany(OldComp);
	for(i=0;i<tags.length;i=i+1) begin
		startformat(15);
			outstring(0,0,code[tags[i]],false);
			outstring(0,0,name[tags[i]],false);
			outstring(0,0,collectionn[collection[tags[i]]],false);
			outstring(0,0,colourn[colour[tags[i]]],false);
			outstring(0,0,materialn[material[tags[i]]],false);
			outstring(0,0,sizen[size[tags[i]],false);
			outstring(0,0,recepy[tags[i]],false);
			outstring(50,0,groupn[group[tags[i]]],false);	
			outstring(50,0,subgroupn[subgroup[tags[i]]],false);
			outstring(50,0,categoryn[category[tags[i]]],false);
			outstring(50,0,brandn[brand[tags[i]]],false);
			pos=0;
			text="";
			companies="";
			ExtractObjWithSeparator(",",vit[tags[i]],true,pos,text);
			while (nonblank(text)) begin
				if(nonblank(companies)) then begin
					companies=companies &","&companiesn[stringtoint(text)];
				end else begin
					companies=companiesn[stringtoint(text)];
				end;	
				ExtractObjWithSeparator(",",vit[tags[i]],true,pos,text);
			end;	
			outstring(50,0,companies,false);	
			outstring(50,0,lastupd[tags[i]],false);
			outstring(50,0,qtInStock[tags[i]],false);
		endformat;	
	end;
	LogProcTime("AllMyGoodsRn",getcurtick() - curtick);
endjob;
return;
end;	



global procedure AllMyGoodsListRn(record RcVc RepSpec)
begin
	record INVc INr;
	record BPIBrandVc BPIBrandr;
	record BPICollectionVc BPICollectionr;
	record BPIGroupVc BPIGroupr;
	record BPISubGroupVc BPISubGroupr;
	record BPICategoryVc BPICategoryr;
	record BPIMaterialVc BPIMaterialr;
	record BPIColorVc BPIColorr;
	record BPIShapeVc BPIShaper;
	record BPISizeVc BPISizer;
	record BPIUseVc BPIUser;
	record BPISexVc BPISexr;
	record BPIPlatingVc BPIPlatingr;
	record BPIClarityVc BPIClarityr;
	record BPIWeightVc BPIWeightr;
	record BPICutVc BPICutr;
	record BPIStoneVc BPIStoner;
	record BPIStrapVc BPIStrapr;
	record BPIOdourVc BPIOdourr;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
	string 255 companies;
	string 255 text;
	vector string 50 vit,vcompname;
	longint curcomp,i,qnt;
	integer pos, OldComp;
	array string 100 tags;
	vector string 50 code;
	vector string 50 group,groupn;
	vector string 50 name;
	vector string 50 size;
	vector string 50 material,materialn;
	vector string 50 collection,collectionn;
	vector string 50 brand,brandn,shape,use,sex,plating,clar,weight,cut,stone,strap,odour;
	vector string 50 subgroup,subgroupn;
	vector string 50 category,categoryn;
	vector string 50 colour,colourn;
	vector string 50 recepy,companiesn;
	vector val qtInStock;
	vector date lastupd; 
	vector boolean flag;
	boolean testf,compin;
	record ItemStatusVc ISr;
	longint curtick;
	
	blockload(Compb);
	for(i=0;i<matrowcnt(Compb);i=i+1)begin
		matrowget(Compb,i,Comprw);
		vcompname[i] = Comprw.CompName;
	end;
	
	curtick = getcurtick();
	OldComp = CurrentCompany;
	
	BPIOdourr.Code="";
	While(LoopMain(BPIOdourr,1,true)) begin
		odour[BPIOdourr.Code]=BPIOdourr.Name;
	end;
	
	BPIStrapr.Code="";
	While(LoopMain(BPIStrapr,1,true)) begin
		strap[BPIStrapr.Code]=BPIStrapr.Name;
	end;
	
	BPIStoner.Code="";
	While(LoopMain(BPIStoner,1,true)) begin
		stone[BPIStoner.Code]=BPIStoner.Name;
	end;
	
	BPICutr.Code="";
	While(LoopMain(BPICutr,1,true)) begin
		cut[BPICutr.Code]=BPICutr.Name;
	end;
	
	BPIWeightr.Code="";
	While(LoopMain(BPIWeightr,1,true)) begin
		weight[BPIWeightr.Code]=BPIWeightr.Name;
	end;
	
	BPIClarityr.Code="";
	While(LoopMain(BPIClarityr,1,true)) begin
		clar[BPIClarityr.Code]=BPIClarityr.Name;
	end;
	
	BPIPlatingr.Code="";
	While(LoopMain(BPIPlatingr,1,true)) begin
		plating[BPIPlatingr.Code]=BPIPlatingr.Name;
	end;
	
	BPISexr.Code="";
	While(LoopMain(BPISexr,1,true)) begin
		sex[BPISexr.Code]=BPISexr.Name;
	end;
	
	BPIUser.Code="";
	While(LoopMain(BPIUser,1,true)) begin
		use[BPIUser.Code]=BPIUser.Name;
	end;
	
	BPISizer.Code="";
	While(LoopMain(BPISizer,1,true)) begin
		size[BPISizer.Code]=BPISizer.Name;
	end;
	
	BPIShaper.Code="";
	While(LoopMain(BPIShaper,1,true)) begin
		shape[BPIShaper.Code]=BPIShaper.Name;
	end;
	
	BPIBrandr.Code="";
	While(LoopMain(BPIBrandr,1,true)) begin
		brandn[BPIBrandr.Code]=BPIBrandr.Name;
	end;	

	BPICollectionr.Code="";
	While(LoopMain(BPICollectionr,1,true)) begin
		collectionn[BPICollectionr.Code]=BPICollectionr.Name;
	end;	
	
	BPIColorr.Code="";
	While(LoopMain(BPIColorr,1,true)) begin
		colourn[BPIColorr.Code]=BPIColorr.Name;
	end;	

	BPIMaterialr.Code="";
	While(LoopMain(BPIMaterialr,1,true)) begin
		materialn[BPIMaterialr.Code]=BPIMaterialr.Name;
	end;	
	
	BPIGroupr.Code="";
	While(LoopMain(BPIGroupr,1,true)) begin
		groupn[BPIGroupr.Code]=BPIGroupr.Name;
	end;
	
	BPICategoryr.Code="";
	While(LoopMain(BPICategoryr,1,true)) begin
		categoryn[BPICategoryr.Code]=BPICategoryr.Name;
	end;
	
	BPISubGroupr.Code="";
	While(LoopMain(BPISubGroupr,1,true)) begin
		subgroupn[BPISubGroupr.Code]=BPISubGroupr.Name;
	end;	


	i=0;		
	startreportnoheaderjob("Все Товары");
		startformat(15);
			outstring(0,0,"From Company",false);
			outstring(0,0,"Code",false);
			outstring(0,0,"Name",false);
			outstring(50,0,"Brand",false);
			outstring(0,0,"Collection",false);			
			outstring(0,0,"Group",false);
			outstring(0,0,"SubGroup",false);
			outstring(0,0,"Category",false);
			outstring(0,0,"Material",false);
			outstring(0,0,"Colour",false);
			outstring(0,0,"Year",false);	
			outstring(0,0,"Life",false);	
			outstring(0,0,"Size",false);
			outstring(0,0,"Use",false);
			outstring(0,0,"Sex",false);
			outstring(0,0,"Plating",false);
			outstring(0,0,"CC Collection",false);
			outstring(0,0,"Clarity",false);
			outstring(0,0,"Weight",false);
			outstring(0,0,"Cut",false);
			outstring(0,0,"Shape",false);
			outstring(0,0,"Stone",false);
			outstring(0,0,"Strap",false);
			outstring(0,0,"Odour",false);			
			
			/*
			outstring(0,0,INr.Code,false);
			outstring(0,0,INr.Name,false);
			outstring(50,0,brandn[INr.BPIBrand],false);
			outstring(0,0,collectionn[INr.BPICollection],false);								
			outstring(50,0,groupn[INr.BPIGroup],false);	
			outstring(50,0,subgroupn[INr.BPISubGroup],false);
			outstring(50,0,categoryn[INr.BPICategory],false);
			outstring(0,0,materialn[INr.BPIMaterial],false);
			outstring(0,0,colourn[INr.BPIColor],false);
			outstring(0,0,INr.High,false);								
			outstring(0,0,INr.Life2,false);	
			outstring(0,0,size[INr.BPISize],false);
			outstring(0,0,use[INr.BPIUse],false);
			outstring(0,0,sex[INr.BPISex],false);
			outstring(0,0,plating[INr.BPIPlating],false);
			outstring(0,0,INr.MainDisp,false);	
			outstring(0,0,clar[INr.BPIClarity],false);
			outstring(0,0,weight[INr.BPIWeight],false);
			outstring(0,0,cut[INr.BPICut],false);
			outstring(0,0,shape[INr.BPIShape],false);
			outstring(0,0,stone[INr.BPIStone],false);
			outstring(0,0,strap[INr.BPIStrap],false);
			outstring(0,0,odour[INr.BPIOdour],false);	
			*/
			
							
		endformat;	
		
	for(curcomp=1;curcomp<34;curcomp=curcomp+1) begin
		compin = true;
		
		CompanyIsJWLikeCompany(curcomp);
		if(curcomp!=3 and CompanyIsJWLikeCompany(curcomp))begin compin = false; end;
		if(curcomp==10)begin compin = false; end;
		if(curcomp==11)begin compin = false; end;
		if(curcomp==12)begin compin = false; end;
		if(curcomp==18)begin compin = false; end;
		if(curcomp==29)begin compin = false; end;
		if(curcomp==18)begin compin = false; end;
		
		if(compin)then begin
			setcompany(curcomp,false);
			INr.Code="";
			while (LoopMain(INr,1,true)) begin
				testf=true;
				if(nonblank(RepSpec.f1) and RepSpec.f1!=INr.BPIBrand) then begin testf = false; end;
				if(nonblank(RepSpec.f2) and RepSpec.f2!=INr.BPIGroup) then begin testf = false; end;
				if(nonblank(RepSpec.f3) and RepSpec.f3!=INr.BPISubGroup) then begin testf = false; end;
				if(testf) then begin
					if(nonblank(INr.BPIBrand) and flag[INr.Code & INr.BPIBrand]==false) then begin
							startformat(15);
								outstring(0,0,vcompname[curcomp-1],false);
								outstring(0,0,INr.Code,false);
								outstring(0,0,INr.Name,false);
								outstring(50,0,brandn[INr.BPIBrand],false);
								outstring(0,0,collectionn[INr.BPICollection],false);								
								outstring(50,0,groupn[INr.BPIGroup],false);	
								outstring(50,0,subgroupn[INr.BPISubGroup],false);
								outstring(50,0,categoryn[INr.BPICategory],false);
								outstring(0,0,materialn[INr.BPIMaterial],false);
								outstring(0,0,colourn[INr.BPIColor],false);
								outstring(0,0,INr.High,false);								
								outstring(0,0,INr.Life2,false);	
								outstring(0,0,size[INr.BPISize],false);
								outstring(0,0,use[INr.BPIUse],false);
								outstring(0,0,sex[INr.BPISex],false);
								outstring(0,0,plating[INr.BPIPlating],false);
								if (currentCompany==25) then begin
									outstring(0,0,INr.CCCollectName,false);	
								end else begin
									outstring(0,0,"",false);	
								end;
								outstring(0,0,clar[INr.BPIClarity],false);
								outstring(0,0,weight[INr.BPIWeight],false);
								outstring(0,0,cut[INr.BPICut],false);
								outstring(0,0,shape[INr.BPIShape],false);
								outstring(0,0,stone[INr.BPIStone],false);
								outstring(0,0,strap[INr.BPIStrap],false);
								outstring(0,0,odour[INr.BPIOdour],false);	
								
							endformat;	
							flag[INr.Code & INr.BPIBrand] = true;
					end;
				end;	
			end;
			ResetLoop(INr);
		end;
	end;
	ResetCompany(OldComp);
	
LogProcTime("AllMyGoodsListRn",getcurtick() - curtick);
endjob;
return;
end;	


global procedure AllCollectionsRn(record RcVc RepSpec)
begin
record INVc INr;
record BPIBrandVc BBr;
record BPICollectionVC BCr;
record BPIColorVC BClr;
record BPIMaterialVc BMr;
record BPISizeVc BSr;
record BPIGroupVc BGr;
record BPISubGroupVc BSGr;
record BPICategoryVc BCatr;
string 255 companies;
string 255 text;
vector string 50 vit;
longint curcomp,i,qnt;
integer pos, OldComp;
array string 100 tags;
vector string 50 code;
vector string 50 group,groupn;
vector string 50 name;
vector string 50 size,sizen;
vector string 50 material,materialn;
vector string 50 collection,collectionn;
vector string 50 brand,brandn;
vector string 50 subgroup,subgroupn;
vector string 50 category,categoryn;
vector string 50 colour,colourn;
vector string 50 recepy,companiesn;
vector val qtInStock;
vector date lastupd; 
vector boolean flag;
boolean testf,compin;
record ItemStatusVc ISr;
longint curtick;
	
	curtick = getcurtick();
	OldComp = CurrentCompany;

	BBr.Code="";
	While(LoopMain(BBr,1,true)) begin
		brandn[BBr.Code]=BBr.Name;
	end;	

	BCr.Code="";
	While(LoopMain(BCr,1,true)) begin
		collectionn[BCr.Code]=BCr.Name;
	end;	
	
	BClr.Code="";
	While(LoopMain(BClr,1,true)) begin
		colourn[BClr.Code]=BClr.Name;
	end;	

	BMr.Code="";
	While(LoopMain(BMr,1,true)) begin
		materialn[BMr.Code]=BMr.Name;
	end;	
	
	BGr.Code="";
	While(LoopMain(BGr,1,true)) begin
		groupn[BGr.Code]=BGr.Name;
	end;
	
	BCatr.Code="";
	While(LoopMain(BCatr,1,true)) begin
		categoryn[BCatr.Code]=BCatr.Name;
	end;
	
	BSGr.Code="";
	While(LoopMain(BSGr,1,true)) begin
		subgroupn[BSGr.Code]=BSGr.Name;
	end;	

	for(i=0;i<29;i=i+1) begin
		companiesn[i]=GetCompanyShortCode(i);
	end;
	i=0;		
	startreportnoheaderjob("Все Товары");
		startformat(15);
			outstring(0,0,"Code",false);
			outstring(0,0,"Name",false);
			outstring(0,0,"Model",false);
			outstring(0,0,"Colour",false);
			outstring(0,0,"Material",false);
			outstring(0,0,"Size",false);
			outstring(0,0,"Set Code",false);
			outstring(0,0,"Group",false);
			outstring(0,0,"SubGroup",false);
			outstring(0,0,"Category",false);
			outstring(50,0,"Brand",false);
			outstring(50,0,"Comp",false);
			outstring(0,0,"Last upd",false);
			outstring(0,0,"In stock",false);
		endformat;	
		
	for(curcomp=1;curcomp<34;curcomp=curcomp+1) begin
		compin = true;
		
		CompanyIsJWLikeCompany(curcomp);
		if(curcomp!=3 and CompanyIsJWLikeCompany(curcomp))begin compin = false; end;
		if(curcomp==10)begin compin = false; end;
		if(curcomp==11)begin compin = false; end;
		if(curcomp==12)begin compin = false; end;
		if(curcomp==18)begin compin = false; end;
		if(curcomp==29)begin compin = false; end;
		if(curcomp==18)begin compin = false; end;
		
		if(compin)then begin
			setcompany(curcomp,false);
			INr.Code="";
			while (LoopMain(INr,1,true)) begin
				testf=true;
				if(blank(INr.BPICollection)) then begin testf = false; end;
				if(blank(INr.BPIBrand)) then begin testf = false; end;
				
				if(testf) then begin
					if(flag[INr.BPICollection & INr.BPIBrand]==false) then begin
						flag[INr.BPICollection & INr.BPIBrand] = true;
						startformat(15);
							outstring(50,0,brandn[INr.BPIBrand],false);
							outstring(0,0,collectionn[INr.BPICollection],false);
						endformat;	
					end;
				end;	
			end;
			ResetLoop(INr);
		end;
	end;
	ResetCompany(OldComp);
	LogProcTime("AllCollectionsRn",getcurtick() - curtick);

endjob;
return;
end;	


global procedure ExportTableToExcelStockMovRn(record RcVc RepSpec)	//Edit--------Dima 
begin	
  record StockMovVc StockMovr;
  row	StockMovVc StockMovrw;
  Integer rwcnt,i,wn;
	longint curtick;
	
	curtick = getcurtick();
  // logtext(0,"dfg");
  StockMovr.SerNr = RepSpec.long1;
  if (ReadFirstMain(StockMovr,1,true)) then begin	  
  rwcnt=MatRowCnt(StockMovr);
	StartReportJob("ExportToExcel");
	
	EndHeader;

	SetRepCol(2,50);
	SetRepCol(3,100);
	SetRepCol(4,150);
	SetRepCol(5,200);
	SetRepCol(6,250);
	SetRepCol(7,300);
	SetRepCol(8,350);
	SetRepCol(9,400);
	SetRepCol(10,450);
	SetRepCol(11,500);
	SetRepCol(12,550);
	SetRepCol(13,600);


	StartFormat(15);
	OutString(0,0,"№",true);
	OutString(2,0,"Товар",true);
	OutString(3,0,"Треб. кол.",false);
	OutString(4,0,"Отпр.кол.",false);
	OutString(5,0,"Получ.кол.",false);
	OutString(6,0,"Наименование",false);
	OutString(7,0,"Старая цена",false);
	OutString(8,0,"Накл.расх.",false);
	OutString(9,0,"Новая цена",false);
	EndFormat;
	Black_Divider(0,1);

	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(StockMovr,i,StockMovrw)
		StartFormat(15);			
		OutString(0,0,i+1,false);
		OutString(2,0,StockMovrw.ArtCode,false);
		OutString(3,0,StockMovrw.OrdQuant,false);
		OutString(4,0,StockMovrw.SentQuant,false);
		OutString(5,0,StockMovrw.Quant,false);
		OutString(6,0,StockMovrw.Spec,false);
		//OutString(7,0,StockMovrw.OldPrice,false);
		OutVal(7,0,StockMovrw.OldPrice,M4Val,false);
		OutString(8,0,StockMovrw.ExtraSCost,false);
		//OutString(9,0,StockMovrw.NewPrice,false);
		OutVal(9,0,StockMovrw.NewPrice,M4Val,false);		
		


		EndFormat;	
	end;		
	EndJob;

  end;
	LogProcTime("ExportTableToExcelStockMovRn",getcurtick() - curtick);
return;
end;

global procedure ItemNewClassRn(record RcVc RepSpec)
begin
vector string 100 nameByCode;
record INVc INr;
integer i,oldComp;
vector boolean diff;
longint j,curtick;

	curtick = getcurtick();
	oldComp = CurrentCompany;
	CollectNameByCode(nameByCode);
	startreportnoheaderjob("Все Товары");

	StartFormat(15);
	OutString(0,0,"Code",false);
	OutString(2,0,"Name",false);
	OutString(3,0,"BPIBrand",false);
	OutString(4,0,"BPICollection",false);
	OutString(5,0,"BPIGroup",false);
	OutString(6,0,"BPISubGroup",false);
	OutString(7,0,"BPICategory",false);
	OutString(8,0,"BPIMaterial",false);
	OutString(9,0,"BPIColor",false);
	OutString(10,0,"BPIShape",false);
	OutString(11,0,"BPISize",false);
	OutString(12,0,"BPIUse",false);
	OutString(13,0,"BPISex",false);
	OutString(14,0,"BPIPlating",false);
	OutString(15,0,"BPIClarity",false);
	OutString(16,0,"BPIWeight",false);
	OutString(17,0,"BPICut",false);
	OutString(18,0,"BPIStone",false);
	OutString(19,0,"BPIStrap",false);
	OutString(20,0,"BPIOdour",false);
	EndFormat;
	j=0;
for(i=1;i<29;i=i+1) begin

SetCompany(i,false);
ResetLoop(INr);
	INr.Code = "";
	While(LoopMain(INr,1,true)) begin
		if(nonblank(INr.BPISubGroup)and(nonblank(INr.BPICollection) or nonblank(INr.BPICategory) or nonblank(INr.BPIMaterial) or nonblank(INr.BPIColor) or nonblank(INr.BPIShape) or nonblank(INr.BPISize)or nonblank(INr.BPIUse)or nonblank(INr.BPISex)or nonblank(INr.BPIPlating)or nonblank(INr.BPIClarity)or nonblank(INr.BPIWeight)) and diff[INr.Code & INr.BPIBrand]==false ) then begin
			j=j+1;
			diff[INr.Code & INr.BPIBrand] = true;
			StartFormat(15);
			OutString(0,0,INr.Code,false);
			OutString(2,0,INr.Name,false);
			OutString(3,0,nameByCode[INr.BPIBrand],false);
			OutString(4,0,nameByCode[INr.BPICollection],false);
			OutString(5,0,nameByCode[INr.BPIGroup],false);
			OutString(6,0,nameByCode[INr.BPISubGroup],false);
			OutString(7,0,nameByCode[INr.BPICategory],false);
			OutString(8,0,nameByCode[INr.BPIMaterial],false);
			OutString(9,0,nameByCode[INr.BPIColor],false);
			OutString(10,0,nameByCode[INr.BPIShape],false);
			OutString(11,0,nameByCode[INr.BPISize],false);
			OutString(12,0,nameByCode[INr.BPIUse],false);
			OutString(13,0,nameByCode[INr.BPISex],false);
			OutString(14,0,nameByCode[INr.BPIPlating],false);
			OutString(15,0,nameByCode[INr.BPIClarity],false);
			OutString(16,0,nameByCode[INr.BPIWeight],false);
			OutString(17,0,nameByCode[INr.BPICut],false);
			OutString(18,0,nameByCode[INr.BPIStone],false);
			OutString(19,0,nameByCode[INr.BPIStrap],false);
			OutString(20,0,nameByCode[INr.BPIOdour],false);
			EndFormat;
		end;	
	end;
end;	
	EndJob;
	SetCompany(oldComp,false);
	LogProcTime("ItemNewClassRn",getcurtick() - curtick);
return;
end;	



global function boolean CheckUserBrands(string user, var vector boolean res)
begin
	record UserBrandsVc UBrandr;
	row UserBrandsVc UBrandrw;
	integer mtrw,i;
	boolean found;
	
	UBrandr.Code = user;
	if(readfirstmain(UBrandr,1,true))then begin
		mtrw = matrowcnt(UBrandr);
		For(i=0;i<mtrw;i=i+1) begin
			found = true;
	  	matrowget(UBrandr,i,UBrandrw);
	  	res[UBrandrw.Brand] = true;
		end; 
	end;	
	
	CheckUserBrands = found;
	
return;
end;

global procedure ExportTableToExcelPURn(record RcVc RepSpec)	//Edit--------Dima 
begin
  record PUVc PUr;
  row	PUVc PUrw;
  Integer rwcnt,i,wn;
  
  PUr.SerNr = RepSpec.long1;
  if (ReadFirstMain(PUr,1,true)) then begin	  
  rwcnt=MatRowCnt(PUr);
 
	StartReportJob("ExportToExcel");
	
	EndHeader;

	SetRepCol(2,50);
	SetRepCol(3,100);
	SetRepCol(4,150);
	SetRepCol(5,200);
	SetRepCol(6,250);
	SetRepCol(7,300);
	SetRepCol(8,350);
	SetRepCol(9,400);
	SetRepCol(10,450);
	SetRepCol(11,500);
	SetRepCol(12,550);
	SetRepCol(13,600);

	if (CurrentCompany!=18) then begin
		StartFormat(15);
		OutString(0,0,"№",true);
		OutString(2,0,"Товар",true);
		OutString(3,0,"Кол-во",false);
		OutString(4,0,"Ед.",false);
		OutString(5,0,"Наименование",false);
		OutString(6,0,"Цена",false);
		OutString(7,0,"Себест.",false);
		OutString(8,0,"Сумма",false);
		EndFormat;
		Black_Divider(0,1);
	end else begin
		StartFormat(15);
		OutString(0,0,"№",true);
		OutString(2,0,"Товар",true);
		OutString(3,0,"Код.П.",true);
		OutString(4,0,"Кол-во",false);
		OutString(5,0,"Ед.",false);
		OutString(6,0,"Наименование",false);
		OutString(7,0,"Цена",false);
		OutString(8,0,"Себест",false);
		OutString(9,0,"Сумма",false);
		EndFormat;
		Black_Divider(0,1);
	end;

	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(PUr,i,PUrw)
		if (CurrentCompany!=18) then begin
			StartFormat(15);			
			OutString(0,0,i+1,false);
			OutString(2,0,PUrw.ArtCode,false);
			OutString(3,0,PUrw.Quant,false);
			OutString(4,0,PUrw.UnitCode,false);
			OutString(5,0,PUrw.Spec,false);
			OutString(6,0,PUrw.UPrice,false);
			OutVal(7,0,PUrw.CostPrice,M4Val,false);//Edit----------------------Dima  26.04.2016
			OutString(8,0,PUrw.Sum,false);
			EndFormat;	
		end else begin
			StartFormat(15);			
			OutString(0,0,i+1,false);
			OutString(2,0,PUrw.ArtCode,false);
			OutString(3,0,PUrw.VIReconComment,false);
			OutString(4,0,PUrw.Quant,false);
			OutString(5,0,PUrw.UnitCode,false);
			OutString(6,0,PUrw.Spec,false);
			OutString(7,0,PUrw.UPrice,false);
			OutVal(8,0,PUrw.CostPrice,M4Val,false);//Edit----------------------Dima  26.04.2016
			OutString(9,0,PUrw.Sum,false);
			EndFormat;	
		end;
	end;		
	EndJob;

  end;

return;
end;

global procedure ExportTableToExcelBigPURn(record RcVc RepSpec)	//Edit--------Dima 
begin
  record BigPUVc BigPUr;
  row	BigPUVc BigPUrw;
  Integer rwcnt,i,wn;
  string 100 label;
  
  BigPUr.SerNr = RepSpec.long1;
  if (ReadFirstMain(BigPUr,1,true)) then begin	  
  rwcnt=MatRowCnt(BigPUr);
 
	StartReportJob("ExportToExcel");
	
	EndHeader;

	
		StartFormat(15);
outstring(0,0,"#",false);
outstring(0,0,"Товар",false);
outstring(0,0,"Код товара",false);
outstring(0,0,"Кол-во",false);
outstring(0,0,"Описание",false);
outstring(0,0,"Тип товара",false);
outstring(0,0,"Склад",false);
outstring(0,0,"Серийный номер",false);

if (UserCanAction("ViewMoneyInf",true))then begin outstring(0,0,"Цена",false); end;
if (UserCanAction("ViewMoneyInf",true))then begin outstring(0,0,"Себестоимость",false); end;
if (UserCanAction("ViewMoneyInf",true))then begin outstring(0,0,"Валюта",false); end;
if (UserCanAction("ViewMoneyInf",true))then begin outstring(0,0,"Сумма",false); end;

outstring(0,0,"Заказ №",false);
outstring(0,0,"Строка",false);
outstring(0,0,"Место",false);
outstring(0,0,"Вес",false);
outstring(0,0,"Камень",false);
outstring(0,0,"Россыпь",false);
outstring(0,0,"Фрахт",false);
outstring(0,0,"Таможня",false);

label = UserDefined("AccBlock","PUCost1");
if (blank(label)) then begin label = "Затр.т.конс";end;
outstring(0,0,label,false);
label = UserDefined("AccBlock","PUCost2");
if (blank(label)) then begin label = "Таможня конс.";end;
outstring(0,0,label,false);
label = UserDefined("AccBlock","PUCost3");
if (blank(label)) then begin label = "Затр. 3";end;
outstring(0,0,label,false);
label = UserDefined("AccBlock","PUCost4");
if (blank(label)) then begin label = "Затр. 4";end;
outstring(0,0,label,false);
label = UserDefined("AccBlock","PUCost5");
if (blank(label)) then begin label = "Затр. 5";end;
outstring(0,0,label,false);
outstring(0,0,"Отм.15%",false);
outstring(0,0,"Нал.15%",false);
  
  
  
		EndFormat;
		Black_Divider(0,1);

	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(BigPUr,i,BigPUrw)
			StartFormat(15);			
			OutString(0,0,i+1,false);
			outstring(0,0,BigPUrw.ArtCode,false);
      outstring(0,0,BigPUrw.VEItemCode,false);
      outstring(0,0,BigPUrw.Quant,false);
      outstring(0,0,BigPUrw.Spec,false);
      outstring(0,0,BigPUrw.ItemConsgType,false);
      outstring(0,0,BigPUrw.Location,false);
      outstring(0,0,BigPUrw.SerialNr,false);

      if (UserCanAction("ViewMoneyInf",true))then begin outval(0,0,BigPUrw.UPrice,m45val,false); end;
      if (UserCanAction("ViewMoneyInf",true))then begin outval(0,0,BigPUrw.CostPrice,m45val,false); end;
      if (UserCanAction("ViewMoneyInf",true))then begin outstring(0,0,BigPUrw.CurrencyItem,false); end;
      if (UserCanAction("ViewMoneyInf",true))then begin outval(0,0,BigPUrw.Sum,m45val,false); end;

      outstring(0,0,BigPUrw.FromOrdNr,false);
      outstring(0,0,BigPUrw.FromOrdrowNr,false);
      outstring(0,0,BigPUrw.Position,false);
      outstring(0,0,BigPUrw.WeightRow,false);
      outstring(0,0,BigPUrw.CaratRow,false);
      outstring(0,0,BigPUrw.CaratplacerRow,false);
      outval(0,0,BigPUrw.ShipCost,m45val,false);
      outval(0,0,BigPUrw.CustomsCost,m45val,false);
      
      label = UserDefined("AccBlock","PUCost1");
      if (blank(label)) then begin label = "Затр.т.конс";end;
      outval(0,0,BigPUrw.RowCost1,m45val,false);
      label = UserDefined("AccBlock","PUCost2");
      if (blank(label)) then begin label = "Таможня конс.";end;
      outval(0,0,BigPUrw.RowCost2,m45val,false);
      label = UserDefined("AccBlock","PUCost3");
      if (blank(label)) then begin label = "Затр. 3";end;
      outval(0,0,BigPUrw.RowCost3,m45val,false);
      label = UserDefined("AccBlock","PUCost4");
      if (blank(label)) then begin label = "Затр. 4";end;
      outval(0,0,BigPUrw.RowCost4,m45val,false);
      label = UserDefined("AccBlock","PUCost5");
      if (blank(label)) then begin label = "Затр. 5";end;
      outval(0,0,BigPUrw.RowCost5,m45val,false);
      outval(0,0,BigPUrw.Tax15Percentf,m45val,false);
      outval(0,0,BigPUrw.Tax15Percent,m45val,false);

			EndFormat;	
	end;		
	EndJob;

  end;

return;
end;

global procedure ExportTableToExcelPORn(record RcVc RepSpec)	//Edit--------Irkan
begin
  record POVc POr;
  row	POVc POrw;
  Integer rwcnt,i,wn;
  
  POr.SerNr = RepSpec.long1;
  if (ReadFirstMain(POr,1,true)) then begin	  
  rwcnt=MatRowCnt(POr);
 
	StartReportJob("ExportToExcel");
	
	EndHeader;
	
	SetRepCol(2,50);
	SetRepCol(3,100);
	SetRepCol(4,150);
	SetRepCol(5,200);
	SetRepCol(6,250);
	SetRepCol(7,300);
	SetRepCol(8,350);
	SetRepCol(9,400);
	SetRepCol(10,450);
	SetRepCol(11,500);
	SetRepCol(12,550);
	SetRepCol(13,600);
	SetRepCol(14,650);
	SetRepCol(15,700);
	SetRepCol(16,750);
	SetRepCol(17,800);
	SetRepCol(18,850);
	SetRepCol(19,900);
	SetRepCol(20,950);
	SetRepCol(21,1000);
	SetRepCol(22,1050);
	SetRepCol(22,1100);
	SetRepCol(22,1150);
	SetRepCol(22,1200);
	SetRepCol(22,1250);
	SetRepCol(22,1300);
	SetRepCol(22,1350);
	SetRepCol(22,1400);
	SetRepCol(22,1450);
	SetRepCol(22,1500);
	SetRepCol(22,1550);
	SetRepCol(22,1600);
	SetRepCol(22,1650);
	SetRepCol(22,1700);
	SetRepCol(22,1750);
	SetRepCol(22,1800);
	SetRepCol(22,1850);
	SetRepCol(22,1900);
	SetRepCol(22,1950);
	SetRepCol(22,2000);
	SetRepCol(22,2050);
	SetRepCol(22,2100);
	SetRepCol(22,2150);
	SetRepCol(22,2200);
	
	
	StartFormat(15);
	OutString(0,0,"№",true);
	OutString(2,0,"Товар",true);
	OutString(3,0,"Товар пост.",true);
	OutString(4,0,"Кол-во",false);
	OutString(5,0,"Ед.",false);
	OutString(6,0,"Наименование",false);
	OutString(6,0,"Обыч./кл.",false);
	OutString(7,0,"Цена",false);
	OutString(8,0,"%",false);
	OutString(9,0,"Сумма",false);
	OutString(10,0,"НДС",false);
	OutString(11,0,"Ш.н.",false);
	OutString(12,0,"Счет опр.",false);
	OutString(13,0,"Тип товара",false);
	OutString(14,0,"Объекты",false);
	OutString(15,0,"Ед.пост.",false);
	OutString(16,0,"Кол. пост.",false);
	OutString(17,0,"Пост. 1",false);
	OutString(18,0,"Пост. 2",false);
	OutString(19,0,"Сч/ф",false);
	OutString(20,0,"№ паллеты",false);
	OutString(21,0,"Проект",false);
	OutString(22,0,"№ ТР.",false);
	OutString(23,0,"TREO",false);
	OutString(24,0,"Вес",false);
	OutString(25,0,"Кар. камня",false);
	OutString(26,0,"Кар. россыпи",false);
	OutString(27,0,"Вал. бренда",false);
	OutString(28,0,"Запл. отгрузка",false);
	OutString(29,0,"Фрахт",false);
	OutString(30,0,"Таможня",false);
	OutString(31,0,"EAN Код",false);
	OutString(32,0,"Классификация",false);
	OutString(33,0,"PP №",false);
	OutString(34,0,"Код поставщика",false);
	OutString(35,0,"Коллекция",false);
	OutString(36,0,"Браслет/ремешок",false);
	OutString(37,0,"Цвет циферблата",false);
	OutString(38,0,"Метал",false);
	OutString(39,0,"Каратность",false);
	OutString(40,0,"Article",false);
	OutString(41,0,"Prmsd Dt",false);
	OutString(42,0,"Product Code",false);
	EndFormat;
	Black_Divider(0,1);
	
	
	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(POr,i,POrw)
		StartFormat(15);			
		OutString(0,0,i+1,false);
		OutString(2,0,POrw.ArtCode,false);
		OutString(3,0,POrw.VEArtCode,false);
		OutString(4,0,POrw.Quant,false);
		OutString(5,0,POrw.UnitCode,false);
		OutString(6,0,POrw.Spec,false);
		OutString(6,0,POrw.ItemConsgType,false);
		OutString(7,0,POrw.Price,false);
		OutString(8,0,POrw.vRebate,false);
		OutString(9,0,POrw.Sum,false);
		OutString(10,0,POrw.VATCode,false);
		OutString(11,0,POrw.TaxTemplateCode,false);
		OutString(12,0,POrw.CostAcc,false);
		OutString(13,0,POrw.ConsgType,false);
		OutString(14,0,POrw.Objects,false);
		OutString(15,0,POrw.VEUnit,false);
		OutString(16,0,POrw.VEQuant,false);
		OutString(17,0,POrw.Shipd1,false);
		OutString(18,0,POrw.Shipd2,false);
		OutString(19,0,POrw.Invd,false);
		OutString(20,0,POrw.PalletNr,false);
		OutString(21,0,POrw.PRCode,false);
		OutString(22,0,POrw.WSNr,false);
		OutString(23,0,POrw.TREO,false);
		OutString(24,0,POrw.WeightRow,false);
		OutString(25,0,POrw.CaratRow,false);
		OutString(26,0,POrw.CaratplacerRow,false);
		OutString(27,0,POrw.BrndCurrCode,false);
		OutString(28,0,POrw.PlanShipRow,false);
		OutString(29,0,POrw.ShipCost,false);
		OutString(30,0,POrw.CustomsCost,false);
		OutString(31,0,POrw.EAN13Code,false);
		OutString(32,0,POrw.xClassification,false);
		OutString(33,0,POrw.PPNum,false);
		OutString(34,0,POrw.Comment,false);
		OutString(35,0,POrw.Reference,false);
		OutString(36,0,POrw.BrcStr,false);
		OutString(37,0,POrw.Gender,false);
		OutString(38,0,POrw.Metal,false);
		OutString(39,0,POrw.MajStoneDet,false);
		OutString(40,0,POrw.IDAltCode,false);
		OutString(41,0,POrw.IDPrmsdDt,false);
		OutString(42,0,POrw.IDProductCode,false);
		EndFormat;	
	end;		
	
	EndJob;

  end;

return;
end;

global procedure ExportTableToExcelORRn(record RcVc RepSpec)	// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 20 02 2020 y. at 11:23:44 AM
begin
  record ORVc ORr;
  row	ORVc ORrw;
  Integer rwcnt,i,wn;
  
  ORr.SerNr = RepSpec.long1;
  if (ReadFirstMain(ORr,1,true)) then begin	  
  rwcnt=MatRowCnt(ORr);
 
	StartReportJob("ExportToExcel");
	
	EndHeader;

	SetRepCol(2,50);
	SetRepCol(3,100);
	SetRepCol(4,150);
	SetRepCol(5,200);
	SetRepCol(6,250);
	SetRepCol(7,300);
	SetRepCol(8,350);
	SetRepCol(9,400);
	SetRepCol(10,450);
	SetRepCol(11,500);
	SetRepCol(12,550);
	SetRepCol(13,600);


	StartFormat(15);
	OutString(0,0,"№",true);
	OutString(2,0,"Товар",true);
	OutString(2,0,"Код Поставщика",true);
	OutString(3,0,"Кол-во",false);
	OutString(5,0,"Наименование",false);
	OutString(6,0,"Цена",false);
	OutString(7,0,"%",false);
	OutString(8,0,"Сумма",false);
	EndFormat;
	Black_Divider(0,1);

	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(ORr,i,ORrw)
		StartFormat(15);			
		OutString(0,0,i+1,false);
		OutString(2,0,ORrw.ArtCode,false);
		OutString(2,0,ORrw.GlobalItemArtCode,false);
		OutString(3,0,ORrw.Quant,false);
		OutString(5,0,ORrw.Spec,false);
		OutString(6,0,ORrw.Price,false);
		OutString(7,0,ORrw.vRebate,false);//Edit----------------------Irkan  26.04.2016
		OutString(8,0,ORrw.Sum,false);
		EndFormat;	
	end;		
	EndJob;

  end;

return;
end;

global procedure ExportTableToExcelSDRn(record RcVc RepSpec)	//Edit--------Irkan
begin
  record SDVc SDr;
  row	SDVc SDrw;
  Integer rwcnt,i,wn;
  
  SDr.SerNr = RepSpec.long1;
  if (ReadFirstMain(SDr,1,true)) then begin	  
  rwcnt=MatRowCnt(SDr);
 
	StartReportJob("ExportToExcel");
	
	EndHeader;
	
	SetRepCol(0,50);
	SetRepCol(1,50);
	SetRepCol(2,100);
	SetRepCol(3,150);
	SetRepCol(4,200);
	SetRepCol(5,250);
	SetRepCol(6,300);
	SetRepCol(7,350);
	SetRepCol(8,400);
	SetRepCol(9,450);
	SetRepCol(10,500);
	SetRepCol(11,550);
	SetRepCol(12,600);
	SetRepCol(13,650);
	SetRepCol(14,700);
	SetRepCol(15,750);
	SetRepCol(16,800);
	SetRepCol(17,850);
	SetRepCol(18,900);
	SetRepCol(19,950);
	SetRepCol(20,1000);
	SetRepCol(21,1050);
	SetRepCol(22,1100);
	SetRepCol(23,1150);
	SetRepCol(24,1200);
	SetRepCol(25,1250);
	SetRepCol(26,1300);
	SetRepCol(27,1350);
	SetRepCol(28,1400);
	SetRepCol(29,1450);
	SetRepCol(30,1500);
	SetRepCol(31,1550);
	SetRepCol(32,1600);
	
	StartFormat(15);
	OutString(0,0,"№",true);
	OutString(1,0,"Номер",true);
	OutString(2,0,"Дата операции",true);
	OutString(3,0,"Причина",false);
	OutString(4,0,"OK",false);
	OutString(5,0,"Счёт оприх.",false);
	OutString(6,0,"Класс",false);
	OutString(7,0,"Ссылка",false);
	OutString(8,0,"Счёт издержек",false);
	OutString(9,0,"Склад",false);
	OutString(10,0,"Кратк. код",false);
	OutString(11,0,"Проект",false);
	OutString(12,0,"Объекты",false);
	
	OutString(13,0,"Серийный номер",false);
	OutString(14,0,"Товар",false);
	OutString(15,0,"К-во.",false);
	OutString(16,0,"Описание",false);
	OutString(17,0,"Местопол.",false);
	OutString(18,0,"Позиция",false);
	OutString(19,0,"Коэф.",false);
	OutString(20,0,"Кратк. код",false);
	OutString(21,0,"Счёт стоим.",false);
	OutString(22,0,"Объекты",false);
	OutString(23,0,"FIFO",false);
	OutString(24,0,"FIFO по стр.",false);
	OutString(25,0,"Рецепт",false);
	OutString(26,0,"Проект",false);
	OutString(27,0,"Баз. цена",false);
	OutString(28,0,"Ширина",false);
	OutString(29,0,"Высота",false);
	OutString(30,0,"Глубина",false);
	
	OutString(31,0,"Общ. кол-во",false);
	OutString(32,0,"Коммент.",false);

	EndFormat;
	Black_Divider(0,1);
	
	
	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(SDr,i,SDrw)
		StartFormat(15);			
		OutString(0,0,i+1,false);
		OutString(1,0,SDr.SerNr,false);
		OutString(2,0,SDr.TransDate,false);
		OutString(3,0,SDr.Reason,false);
		OutString(4,0,SDr.OKFlag,false);
		OutString(5,0,SDr.CostAcc,false);
		OutString(6,0,SDr.SDClass,false);
		OutString(7,0,SDr.RefStr,false);
		OutString(8,0,SDr.CostAcc,false);
		OutString(9,0,SDr.Location,false);
		OutString(10,0,SDr.ACShort,false);
		OutString(11,0,SDr.PRCode,false);
		OutString(12,0,SDr.Objects,false);
		
		OutString(13,0,SDrw.SerialNr,false);
		OutString(14,0,SDrw.ArtCode,false);
		OutString(15,0,SDrw.Qty,false);
		OutString(16,0,SDrw.Spec,false);
		OutString(17,0,SDrw.Location,false);
		OutString(18,0,SDrw.PosCode,false);
		OutString(19,0,SDrw.Coefficient,false);
		OutString(20,0,SDrw.ACShort,false);
		OutString(21,0,SDrw.CostAcc,false);
		OutString(22,0,SDrw.Objects,false);
		OutString(23,0,SDrw.FIFO,false);
		OutString(24,0,SDrw.FIFORowVal,false);
		OutString(25,0,SDrw.Recepy,false);
		OutString(26,0,SDrw.PRCodeRow,false);
		OutString(27,0,SDrw.BasePrice,false);
		OutString(28,0,SDrw.UnitXval,false);
		OutString(29,0,SDrw.UnitYval,false);
		OutString(30,0,SDrw.UnitZval,false);
		
		OutString(31,0,SDr.TotQty,false);
		OutString(32,0,SDr.Comment,false);
		EndFormat;	
	end;		
	
	EndJob;

  end;

return;
end;

global procedure ExportTableToExcelSHRn(record RcVc RepSpec)	//Edit--------Irkan
begin
  record SHVc SHr;
  row	SHVc SHrw;
  Integer rwcnt,i,wn;
  
  SHr.SerNr = RepSpec.long1;
  if (ReadFirstMain(SHr,1,true)) then begin	  
  rwcnt=MatRowCnt(SHr);
 
	StartReportJob("ExportToExcel");
	
	EndHeader;
	
	SetRepCol(0,50);
	SetRepCol(1,50);
	SetRepCol(2,100);
	SetRepCol(3,150);
	SetRepCol(4,200);
	SetRepCol(5,250);
	SetRepCol(6,300);
	SetRepCol(7,350);
	SetRepCol(8,400);
	SetRepCol(9,450);
	SetRepCol(10,500);
	SetRepCol(11,550);
	SetRepCol(12,600);
	SetRepCol(13,650);
	SetRepCol(14,700);
	SetRepCol(15,750);
	SetRepCol(16,800);
	SetRepCol(17,850);
	SetRepCol(18,900);
	SetRepCol(19,950);
	SetRepCol(20,1000);
	SetRepCol(21,1050);
	SetRepCol(22,1100);
	SetRepCol(23,1150);
	SetRepCol(24,1200);
	SetRepCol(25,1250);
	SetRepCol(26,1300);
	SetRepCol(27,1350);
	SetRepCol(28,1400);
	SetRepCol(29,1450);
	SetRepCol(30,1500);
	SetRepCol(31,1550);
	SetRepCol(32,1600);
	SetRepCol(33,1650);
	SetRepCol(34,1700);
	SetRepCol(35,1750);
	SetRepCol(36,1800);
	SetRepCol(37,1850);
	SetRepCol(38,1900);
	SetRepCol(39,1950);
	SetRepCol(40,2000);
	SetRepCol(41,2050);
	SetRepCol(42,2100);
	SetRepCol(43,2150);
	SetRepCol(44,2200);
	SetRepCol(45,2250);
	SetRepCol(46,2300);
	SetRepCol(47,2350);
	SetRepCol(48,2400);
	SetRepCol(49,2450);
	SetRepCol(50,2500);
	SetRepCol(51,2550);
	SetRepCol(52,2600);
	SetRepCol(53,2650);
	SetRepCol(54,2700);
	SetRepCol(55,2750);
	SetRepCol(56,2800);
	SetRepCol(57,2850);
	SetRepCol(58,2900);
	SetRepCol(59,2950);
	SetRepCol(60,3000);
	SetRepCol(61,3050);
	SetRepCol(62,3100);
	SetRepCol(63,3150);
	SetRepCol(64,3200);
	SetRepCol(65,3250);
	SetRepCol(66,3300);
	SetRepCol(67,3350);
	SetRepCol(68,3400);
	SetRepCol(69,3450);
	SetRepCol(70,3500);
	SetRepCol(71,3550);
	SetRepCol(72,3600);
	SetRepCol(73,3650);
	SetRepCol(74,3700);
	SetRepCol(75,3750);
	SetRepCol(76,3800);
	SetRepCol(77,3850);
	SetRepCol(78,3900);
	
	StartFormat(15);
	OutString(0,0,"№",true);
	OutString(1,0,"Но.",true);
	OutString(2,0,"Клиент",true);
	OutString(3,0,"Наим.",false);
	OutString(4,0,"PR Nr.",false);
	OutString(5,0,"Офиц. номер",false);
	OutString(6,0,"TREO Но.",false);
	OutString(7,0,"OK",false);
	OutString(8,0,"Дата",false);
	OutString(9,0,"Местополож.",false);
	OutString(10,0,"Готовность к отгр.",false);
	OutString(11,0,"Объекты",false);
	OutString(12,0,"Филиал",false);
	OutString(13,0,"Проект",false);
	OutString(14,0,"Подпись",false);
	OutString(15,0,"Номер заказа",false);
	OutString(16,0,"Тел. сообщение",false);
	OutString(17,0,"Коммент.",false);
	
	OutString(18,0,"Товар",false);
	OutString(19,0,"Наимен.",false);
	OutString(20,0,"Номер товара клиента",false);
	OutString(21,0,"Заказано",false);
	OutString(22,0,"На складе",false);
	OutString(23,0,"Доступно",false);
	OutString(24,0,"Серийный номер",false);
	OutString(25,0,"Объекты",false);
	OutString(26,0,"Знач. склада",false);
	OutString(27,0,"Срок годности",false);
	OutString(28,0,"Склад",false);
	OutString(29,0,"Место",false);
	OutString(30,0,"Цена обратной закупки",false);
	OutString(31,0,"FIFO по строке",false);
	OutString(32,0,"Ср. взв., осн. вал-2",false);
	OutString(33,0,"Отпускная цена",false);
	OutString(34,0,"Коэфф.",false);
	OutString(35,0,"Структура",false);
	OutString(36,0,"Источник",false);
	OutString(37,0,"Отфактурирован",false);
	OutString(38,0,"Дата отправки",false);
	OutString(39,0,"Время отправки",false);
	OutString(40,0,"Счет реал.",false);
	OutString(41,0,"Счет стоим.",false);
	OutString(42,0,"Шир.",false);
	OutString(43,0,"Выс.",false);
	OutString(44,0,"Выс.",false);
	OutString(45,0,"Упаковок",false);
	OutString(46,0,"Тип",false);
	OutString(47,0,"Описание",false);
	OutString(48,0,"OrdRow",false);
	
	OutString(49,0,"Общее кол-во",false);
	OutString(50,0,"Способ отгр.",false);
	OutString(51,0,"Заявлен. значение",false);
	OutString(52,0,"E-Shipment status",false);
	OutString(53,0,"Итого кол-во",false);
	OutString(54,0,"Итого вес",false);
	OutString(55,0,"Итого объем",false);
	OutString(56,0,"Использовать адрес для выст. счета",false);
	OutString(57,0,"Сумма налога",false);
	OutString(58,0,"Собрана электронная отгрузка",false);
	OutString(59,0,"Трансп. №",false);
	OutString(60,0,"Упаковки",false);
	OutString(61,0,"Языка",false);
	OutString(62,0,"Инстр.по трансп.",false);
	OutString(63,0,"Из города",false);
	OutString(64,0,"В город",false);
	OutString(65,0,"Из дока",false);
	OutString(66,0,"В док",false);
	OutString(67,0,"Трансп. компания",false);
	OutString(68,0,"Наим.",false);
	OutString(69,0,"ИНН",false);
	OutString(70,0,"Инф. о машине",false);
	OutString(71,0,"Водитель",false);
	OutString(72,0,"CMR",false);
	OutString(73,0,"Код адреса",false);
	OutString(74,0,"Отгрузка",false);
	OutString(75,0,"Адрес",false);
	OutString(76,0,"Страны",false);
	OutString(77,0,"Регион",false);
	OutString(78,0,"Комментарий",false);

	EndFormat;
	Black_Divider(0,1);
	
	
	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(SHr,i,SHrw)
		StartFormat(15);			
		OutString(0,0,i+1,false);
		OutString(1,0,SHr.SerNr,false);
		OutString(2,0,SHr.CustCode,false);
		OutString(3,0,SHr.Addr0,false);
		OutString(4,0,SHr.PRNr,false);
		OutString(5,0,SHr.OfficialSerNr,false);
		OutString(6,0,SHr.TREONr,false);
		OutString(7,0,SHr.OKFlag,false);
		OutString(8,0,SHr.ShipDate,false);
		OutString(9,0,SHr.Location,false);
		OutString(10,0,SHr.Sorting,false);
		OutString(11,0,SHr.Objects,false);
		OutString(12,0,SHr.BranchID,false);
		OutString(13,0,SHr.PRCode,false);
		OutString(14,0,SHr.Sign,false);
		OutString(15,0,SHr.OrderNr,false);
		OutString(16,0,SHr.Check1,false);
		OutString(17,0,SHr.Comment,false);
		
		OutString(18,0,SHrw.ArtCode,false);
		OutString(19,0,SHrw.Spec,false);
		OutString(20,0,SHrw.CustArtCode,false);
		OutString(21,0,SHrw.Ordered,false);
		OutString(22,0,SHrw.InStock,false);
		OutString(23,0,SHrw.Ship,false);
		OutString(24,0,SHrw.SerialNr,false);
		OutString(25,0,SHrw.Objects,false);
		OutString(26,0,SHrw.FIFORowVal,false);
		OutString(27,0,SHrw.BestBefore,false);
		OutString(28,0,SHrw.Location,false);
		OutString(29,0,SHrw.PosCode,false);
		OutString(30,0,SHrw.BBCostPrice,false);
		OutString(31,0,SHrw.FIFORowVal,false);
		OutString(32,0,SHrw.WAB2,false);
		OutString(33,0,SHrw.BasePrice,false);
		OutString(34,0,SHrw.Coefficient,false);
		OutString(35,0,SHrw.Recepy,false);
		OutString(36,0,SHrw.Source,false);
		OutString(37,0,SHrw.Invd,false);
		OutString(38,0,SHrw.DespatchRowDate,false);
		OutString(39,0,SHrw.DespatchRowTime,false);
		OutString(40,0,SHrw.SalesAcc,false);
		OutString(41,0,SHrw.CostAcc,false);
		OutString(42,0,SHrw.UnitXval,false);
		OutString(43,0,SHrw.UnitYval,false);
		OutString(44,0,SHrw.UnitZval,false);
		OutString(45,0,SHrw.RowPackages,false);
		OutString(46,0,SHrw.PackageType,false);
		OutString(47,0,SHrw.PackageDesc,false);
		OutString(48,0,SHrw.OrdRow,false);
		
		OutString(49,0,SHr.TotQty,false);
		OutString(50,0,SHr.ShipMode,false);
		OutString(51,0,SHr.DeclaredVal,false);
		OutString(52,0,SHr.EShipStatus,false);
		OutString(53,0,SHr.TotQty,false);
		OutString(54,0,SHr.TotWeight,false);
		OutString(55,0,SHr.TotVolume,false);
		OutString(56,0,SHr.Check2,false);
		OutString(57,0,SHr.TAX1Sum,false);
		OutString(58,0,SHr.EShipmentCreated,false);
		OutString(59,0,SHr.TransportNumber,false);
		OutString(60,0,SHr.Packages,false);
		OutString(61,0,SHr.LangCode,false);
		OutString(62,0,SHr.TransportDirect,false);
		OutString(63,0,SHr.FromCity,false);
		OutString(64,0,SHr.ToCity,false);
		OutString(65,0,SHr.FromDock,false);
		OutString(66,0,SHr.ToDock,false);
		OutString(67,0,SHr.FreightCode,false);
		OutString(68,0,SHr.FreightCompany,false);
		OutString(69,0,SHr.FreightCompanyRegNr,false);
		OutString(70,0,SHr.TruckInfo,false);
		OutString(71,0,SHr.Driver,false);
		OutString(72,0,SHr.CMRText,false);
		OutString(73,0,SHr.DelAddrCode,false);
		OutString(74,0,SHr.Addr1,false);
		OutString(75,0,SHr.Addr1,false);
		OutString(76,0,SHr.DelCountry,false);
		OutString(77,0,SHr.Region,false);
		OutString(78,0,SHr.Comment,false);
		EndFormat;	
	end;		
	
	EndJob;

  end;

return;
end;

global
procedure PWrongRn(record RcVc RepSpec)
begin
  record RoundBlock RoundRec;
  record PUVc PUr;
  record POVc POr;
  record LocationVc Locr;
  Boolean TrHs;
  Boolean testf;
  LongInt frorder,toorder;
  val totsum,pursumval;// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 8 December 2017 15:25:24
  LongInt afr,ato;
  val rowsum;
  val totunitsum,totfreight,totcustoms,totextra;
  val t,t2;
  Integer rw;
  String 255 tstr;
  String 20 ckey;
  Integer i,rwcnt,k;
  row PUVc PUrw;
  row POVc POrw;
  val pursum;
  val unitsum,sumquant,freight,customs,extra,totsumquant;
  string 50 crncy;
  record INVc INr;
  string 20 frit,toit;
  string 20 frin,toin;
	longint curtick;
	record BPIBrandVc BPIBrandr;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	integer comp,CompQty,oldComp;
	date sDate;
	val rowPrice;
	string 255 rowCost;
	record ItemHistVc IHr;
	
	
	logtext(0,"PWrongRn start");
	oldComp = currentCompany;
	BlockLoad(Compb);
	sDate = addDay(currentdate, -150);
	CompQty = matrowcnt(Compb);
	
	startreportnoheaderjob("Wrong PUr");
	
	StartFormat(15);
	OutString(0,0,"Компания",false);
	OutString(60,0,"Поступление",false);
	OutString(100,0,"Таможня строки",false);
	OutString(140,0,"Таможня пост.",false);
	OutString(200,0,"Цена строки",false);
	OutString(250,0,"Заказ",false);
	OutString(300,0,"Остаток по IH",false);
	EndFormat
	
  for(comp=0;comp<CompQty;comp=comp+1) begin
		matrowget(Compb,comp,Comprw);
		if(Comprw.ActiveStatus==0) then begin
			SetCompany(comp+1,false);
			PUr.TransDate = currentdate;
			TrHs = true;
			while(LoopBackKey("TransDate",PUr,1,TrHs)) begin
				testf = false;
				if(PUr.TransDate<sDate) then begin TrHs = false; end;
				rwcnt = matrowcnt(PUr);
				for(i=0;i<rwcnt;i=i+1) begin
					matrowget(PUr,i,PUrw);
					if(PUrw.UPrice>999 and StringToVal(PUrw.CustomsCost,M4Val)>=1 and StringToVal(PUrw.CustomsCost,M4Val)<=10)then begin 
						testf = true; 
						rowCost = PUrw.CustomsCost;
						rowPrice = PUrw.UPrice;
					end;
				end;
				if(testf) then begin
					
					StartFormat(15);
					OutString(0,0,Comprw.ShortName,false);
					OutString(60,"DblPUVc",PUr.SerNr,false);
					OutString(100,0,rowCost,false);
					OutString(140,0,PUr.CustomsCost,false);
					OutString(200,0,rowPrice,false);
					OutString(250,0,PUr.PONr,false);
					OutString(250,0,PUr.TransDate,false);
					EndFormat
					
					rwcnt = matrowcnt(PUr);
					for(i=0;i<rwcnt;i=i+1) begin
						matrowget(PUr,i,PUrw);
						if(PUrw.UPrice>999 and StringToVal(PUrw.CustomsCost,M4Val)>=1 and StringToVal(PUrw.CustomsCost,M4Val)<=10)then begin 
							IHr.FileName = "PUVc";
							IHr.TransNr = PUr.SerNr;
							IHr.Row = i;
							if(readfirstkey("FNTransNr",IHr,3,true))then begin
								StartFormat(15);
									OutString(200,0,IHr.ArtCode,false);
									OutString(300,0,IHr.RemQty,false);
									EndFormat
							end;
						end;
					end;
					
					
					
					
				end;	
			end;
			ResetLoop(PUr);
		end;
	end;	
	
	
	StartFormat(15);
	OutString(0,0,"Компания",false);
	OutString(60,0,"Заказ поставщику",false);
	OutString(100,0,"Таможня строки",false);
	OutString(140,0,"Таможня пост.",false);
	OutString(200,0,"Цена строки",false);
	EndFormat
	
  for(comp=0;comp<CompQty;comp=comp+1) begin
		matrowget(Compb,comp,Comprw);
		if(Comprw.ActiveStatus==0) then begin
			SetCompany(comp+1,false);
			POr.TransDate = currentdate;
			TrHs = true;
			while(LoopBackKey("TransDate",POr,1,TrHs)) begin
				testf = false;
				if(POr.TransDate<sDate) then begin TrHs = false; end;
				rwcnt = matrowcnt(POr);
				for(i=0;i<rwcnt;i=i+1) begin
					matrowget(POr,i,POrw);
					if(POrw.Price>999 and StringToVal(POrw.CustomsCost,M4Val)>=1 and StringToVal(POrw.CustomsCost,M4Val)<=10)then begin 
						testf = true; 
						rowCost = POrw.CustomsCost;
						rowPrice = POrw.Price;
					end;
				end;
				if(testf) then begin
					StartFormat(15);
					OutString(0,0,Comprw.ShortName,false);
					OutString(60,"DblPOVc",POr.SerNr,false);
					OutString(100,0,rowCost,false);
					OutString(140,0,POr.CustomsCost,false);
					OutString(200,0,rowPrice,false);
					EndFormat
				end;	
			end;
			ResetLoop(POr);
		end;
	end;	
	
		
  EndJob;
	ResetCompany(oldComp);
	logtext(0,"PWrongRn end");
  return;
end;


global procedure CustBlankInfoRn(record RcVc RepSpec)
begin
	record CUVc CUr;
	boolean TrHs,testf;

	StartReportNoheaderJob("ѕустые ‘»ќ");
	
	
/* old structure	
	startformat(15);
		OutString(0,0,"Код",false);
		OutString(130,0,"Наименование",false);
		OutString(300,0,"Телефон",false);
		OutString(300,0,"Доп. телефон",false);
		OutString(300,0,"Моб. телефон",false);
		OutString(300,0,"eMail",false);
		OutString(300,0,"Скидка",false);
		OutString(300,0,"Дата создания",false);
		OutString(300,0,"Создан в магазине(склад)",false);
		OutString(300,0,"Название",false);
		OutString(300,0,"Комментарий к созданию",false);
		OutString(300,0,"Комментарий",false);
		OutString(300,0,"Отключен от рассылки",false);
		OutString(300,0,"Статус",false);
		OutString(300,0,"Адрес",false);
	endformat;
*/	
	
	
	
	startformat(15);
		OutString(0,0,"Код",false);
		OutString(100,0,"Наименование",false);
		OutString(200,0,"Имя",false);
		OutString(300,0,"Фамилия",false);
		OutString(400,0,"Отчество",false);
		OutString(400,0,"Дата создания",false);
	endformat;	
		
	TrHs = true;
	CUr.Code = "";
	CUr.CUType = 1;
	startformat(15);
		OutString(0,0,"Клиеты:",false);
	EndFormat;		
	while(loopKey("ActCode",CUr,2,TrHs))begin
		testf = true;
		if(CUr.blockedFlag!=0) then begin testf = false; end;
		if(CUr.CUType==0) then begin testf = false; TrHs = false; end;
		if(nonblank(CUr.CRMLName)) then begin testf = false; end;
		if(testf)then begin		
		
		
			startformat(15);
				OutString(0,"DblCUVc",CUr.Code,false);
				OutString(100,0,CUr.Name,false);
				OutString(200,0,CUr.CRMName,false);
				OutString(300,0,CUr.CRMLName,false);
				OutString(400,0,CUr.CRMPatr,false);
				OutString(500,0,CUr.DateCreated,false);
			EndFormat;					
		end;
	end;
	Black_Divider(0,1);
	ResetLoop(CUr);
	TrHs = true;
	CUr.Code = "";
	CUr.EmployeeType = 1;
	startformat(15);
		OutString(0,0,"Сотрудники:",false);
	EndFormat;		
	while(loopKey("EmployeeActCode",CUr,2,TrHs))begin
		testf = true;
		if(CUr.blockedFlag!=0) then begin testf = false; end;
		if(CUr.EmployeeType==0) then begin testf = false; TrHs = false; end;
		if(nonblank(CUr.CRMLName)) then begin testf = false; end;
		if(testf)then begin		
		
		
			startformat(15);
				OutString(0,"DblCUVc",CUr.Code,false);
				OutString(100,0,CUr.Name,false);
				OutString(200,0,CUr.CRMName,false);
				OutString(300,0,CUr.CRMLName,false);
				OutString(400,0,CUr.CRMPatr,false);
				OutString(500,0,CUr.DateCreated,false);
			EndFormat;					
		end;
	end;
	

	endjob;
return;
end;

global procedure CustCloseOkRn(record RcVc RepSpec)
begin
	record CUVc CUr;
	boolean TrHs,testf;
	vector string 255 Codes;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	integer comp,CompQty,oldComp,i;
	record ORVc ORr;
	record IVVc IVr;
	record LoyaltyCardVc LCr;
	array string 255 tags;
	record CSVc CSr;
	
	logtext(0,"CustCloseOkRn start");
	oldComp = currentCompany;
	BlockLoad(Compb);
	CompQty = matrowcnt(Compb);
	CUr.Code = "";
	CUr.CUType = 1;
	TrHs = true;
	while(LoopKey("ActCode",CUr,2,TrHs)) begin
		if(CUr.CUType!=1) then begin TrHs = false; end;
		if(TrHs) then begin
			testf = false;
			LCr.CustCode = CUr.Code;
			if(ReadFirstKey("ActCustCode",LCr,1,true)) then begin testf = true; end;
			if(!testf) then begin
				for(comp=0;comp<CompQty;comp=comp+1) begin
					matrowget(Compb,comp,Comprw);
					if(Comprw.ActiveStatus==0) then begin
						SetCompany(comp+1,false);
						ORr.CustCode = CUr.Code;
						if(ReadFirstKey("CustCode",ORr,1,true)) then begin testf = true; end;
						CSr.CustCode = CUr.Code;
						if(ReadFirstMain(CSr,1,true))then begin testf = true; end;
					end;
					if(testf) then begin comp = CompQty; end;
				end;	
			end;	
			if(!testf) then begin Codes[CUr.Code] = CUr.Code; end;
		end;	
	end;
	StartReportNoheaderJob("готовые к удалению");
	ResetCompany(oldComp);
	getvectortags(Codes,tags);
	startformat(15);
		OutString(0,0,"Код",false);
		OutString(0,0,"Наименование",false);
		OutString(0,0,"Имя",false);
		OutString(0,0,"Фамилия",false);
		OutString(0,0,"Отчество",false);
		OutString(0,0,"Дата создания",false);
		OutString(0,0,"Категория клиента",false);
		OutString(0,0,"Классификация",false);
		OutString(0,0,"Город",false);
		OutString(0,0,"Улица",false);
		OutString(0,0,"Дом",false);
		OutString(0,0,"Квартира",false);
		OutString(0,0,"Индекс",false);
		OutString(0,0,"Отдел",false);
		OutString(0,0,"Телефон",false);
		OutString(0,0,"Мобильный телефон",false);
		OutString(0,0,"Дата рождения",false);
		OutString(0,0,"Гражданство",false);
		OutString(0,0,"Тип",false);
		OutString(0,0,"E-mail",false);
		OutString(0,0,"WWW адрес",false);
		OutString(0,0,"Продавец",false);
		OutString(0,0,"Наим. компании",false);
		OutString(0,0,"Дата создания",false);
		OutString(0,0,"Карточка заведена в магазине(склад)",false);
		OutString(0,0,"Карточка заведена в компании",false);
		OutString(0,0,"Коментарий к созданию карточки",false);
		OutString(0,0,"Карточка создана сотрудником",false);
		OutString(0,0,"CRM id",false);
	endformat;	
	for(i=0;i<tags.length;i=i+1) begin
		CUr.Code = tags[i];
		if(ReadFirstMain(CUr,1,true)) then begin
			startformat(15);
			OutString(0,"DblCUVc",CUr.Code,false);
			OutString(0,0,CUr.Name,false);
			OutString(0,0,CUr.CRMName,false);
			OutString(0,0,CUr.CRMLName,false);
			OutString(0,0,CUr.CRMPatr,false);
			OutString(0,0,CUr.DateCreated,false);
			OutString(0,0,CUr.CustCat,false);
			OutString(0,0,CUr.Classification,false);
			OutString(0,0,CUr.InvAddr4,false);
			OutString(0,0,CUr.InvAddr0,false);
			OutString(0,0,CUr.InvAddr1,false);
			OutString(0,0,CUr.InvAddr2,false);
			OutString(0,0,CUr.InvAddr3,false);
			OutString(0,0,CUr.Department,false);
			OutString(0,0,CUr.Phone,false);
			OutString(0,0,CUr.Mobile,false);
			OutString(0,0,CUr.BirthDate,false);
			OutString(0,0,CUr.Nationality,false);
			OutString(0,0,CUr.CustType,false);
			OutString(0,0,CUr.eMail,false);
			OutString(0,0,CUr.wwwAddr,false);
			OutString(0,0,CUr.SalesMan,false);
			OutString(0,0,CUr.Comment,false);
			OutString(0,0,CUr.DateCreated,false);
			OutString(0,0,CUr.CreateLocation,false);
			OutString(0,0,CUr.CreateCompany,false);
			OutString(0,0,CUr.CreateComment,false);
			OutString(0,0,CUr.CurEmplCreator,false);
			OutString(0,0,CUr.CRMid,false);
			endformat;	
		end;
	end;
	endjob;
	logtext(0,"CustCloseOkRn end");
end;	










global procedure GlobalItemExtProvRn(record RcVc RepSpec)
begin
	record GlobalItemVc GIr;
	row GlobalItemVc GIrw;
	record BTRxBrandVc BTRxBrandr;
	boolean TrHs, testf;
	record ExpProvItemRegVc EPIRr;
	string 255 ExtPrPref;
	
	
	StartReportNoheaderJob("Отчет по товарам сторонних поставщиков");
	startformat(15);
		OutString(0,0,"Global Code",false);
		OutString(0,0,"Hansa Code",false);
		OutString(0,0,"Name",false);
		OutString(0,0,"Name AZ",false);
		OutString(0,0,"Name RU",false);
		OutString(0,0,"Brand",false);
		OutString(0,0,"Price",false);
		OutString(0,0,"Dealer price",false);
	endformat;	
	EPIRr.PrefCode = RepSpec.f1;
	if (nonblank(RepSpec.f1) and ReadFirstKey("PrefCode",EPIRr,1,true)) then begin
		ExtPrPref = RepSpec.f1;
	end;
	
	
	EPIRr.SerNr = StringToLongInt(RepSpec.f1);
	if (nonblank(RepSpec.f1) and blank(ExtPrPref) and ReadFirstMain(EPIRr,1,true)) then begin
		ExtPrPref = EPIRr.PrefCode;
	end;
	
	if (blank(RepSpec.f2)) then begin
		if (nonblank(ExtPrPref)) then begin
			GIr.HansaCode = ExtPrPref;
		end else begin
			GIr.HansaCode = "";
		end;
		TrHs = true;
		while (loopkey("HansaCode",GIr,1,TrHs)) begin
			testf = true;
			if (nonblank(RepSpec.f1) and ExtPrPref!=left(GIr.HansaCode,len(ExtPrPref))) then begin TrHs = false; testf = false; end;
			if (nonblank(RepSpec.f3) and RepSpec.f3!=GIr.BPIBrand) then begin testf = false; end;
			if (nonblank(RepSpec.f2) and RepSpec.f2!=GIr.HansaCode and RepSpec.f2!=GIr.Code) then begin testf = false; end;
			if (testf) then begin
				BTRxBrandr.Code = GIr.BPIBrand;
				if (ReadFirstMain(BTRxBrandr,1,true)) then begin  end;
				startformat(15);
					OutString(0,0,GIr.Code,false);
					OutString(0,0,GIr.HansaCode,false);
					OutString(0,0,GIr.Name,false);
					OutString(0,0,GIr.NameAZ,false);
					OutString(0,0,GIr.NameRUS,false);
					OutString(0,0,BTRxBrandr.Name,false);
					OutString(0,0,GIr.Price,false);
					OutString(0,0,GIr.DealPrice,false);
				endformat;
			end;
		end;
	end else begin
		GIr.Code = RepSpec.f2;
		if (ReadFirstMain(GIr,1,true)) then begin
			BTRxBrandr.Code = GIr.BPIBrand;
			if (ReadFirstMain(BTRxBrandr,1,true)) then begin  end;
			startformat(15);
				OutString(0,0,GIr.Code,false);
				OutString(0,0,GIr.HansaCode,false);
				OutString(0,0,GIr.Name,false);
				OutString(0,0,GIr.NameAZ,false);
				OutString(0,0,GIr.NameRUS,false);
				OutString(0,0,BTRxBrandr.Name,false);
				OutString(0,0,GIr.Price,false);
				OutString(0,0,GIr.DealPrice,false);
			endformat;
		end else begin
			GIr.HansaCode = RepSpec.f2;
			if (ReadFirstKey("HansaCode",GIr,1,true)) then begin
				BTRxBrandr.Code = GIr.BPIBrand;
				if (ReadFirstMain(BTRxBrandr,1,true)) then begin  end;
				startformat(15);
					OutString(0,0,GIr.Code,false);
					OutString(0,0,GIr.HansaCode,false);
					OutString(0,0,GIr.Name,false);
					OutString(0,0,GIr.NameAZ,false);
					OutString(0,0,GIr.NameRUS,false);
					OutString(0,0,BTRxBrandr.Name,false);
					OutString(0,0,GIr.Price,false);
					OutString(0,0,GIr.DealPrice,false);
				endformat;
			end;
		end;
	end;
	endjob;
		
end;	







global procedure ZRepRn(record RcVc RepSpec)
begin
	record ZREpVc ZREpr;
	boolean TrHs, testf;
	Integer CompQty, comp;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	record StoreGroupBlock SGb;
	record AZHatZRepBlock AZHZPB;
	record LocationVc Locr;
	
	
	SetCompany (18,false);
	blockload(Compb);
	blockload(AZHZPB);
	CompQty = matrowcnt(Compb);
	
	startreportnoheaderjob("Выгрузка данных по наличным приходам из Z-отчета");
	
	StartFormat(15);
		OutString(0,0,AZHZPB.Hat1,false);
		OutString(0,0,"",false);
		OutString(0,0,AZHZPB.Hat2,false);
		if (RepSpec.sStartDate==RepSpec.sEndDate) then begin
			OutString(0,0,DateToString(RepSpec.sStartDate,"DD/MM/YYYY"),false);
		end else begin
			OutString(0,0,DateToString(RepSpec.sStartDate,"DD/MM/YYYY") & " - " & DateToString(RepSpec.sEndDate,"DD/MM/YYYY"),false);
		end;
	EndFormat;
	
	StartFormat(15);
		OutString(0,0,AZHZPB.Hat3,false);
		OutString(0,0,"",false);
		OutString(0,0,AZHZPB.Hat4,false);
		OutString(0,0,"",false);
		OutString(0,0,AZHZPB.Hat5,false);
	EndFormat;
	
	StartFormat(15);
		OutString(0,0,AZHZPB.Hat6,false);
		OutString(0,0,AZHZPB.Hat7,false);
		OutString(0,0,AZHZPB.Hat6,false);
		OutString(0,0,AZHZPB.Hat7,false);
		OutString(0,0,AZHZPB.Hat6,false);
		OutString(0,0,AZHZPB.Hat7,false);
		OutString(0,0,AZHZPB.Hat8,false);
		OutString(0,0,AZHZPB.Hat9,false);
	EndFormat;
	
  for(comp=0;comp<CompQty;comp=comp+1) begin
		matrowget(Compb,comp,Comprw);
		if(Comprw.ActiveStatus==0) then begin
			SetCompany(comp+1,false);
			blockload(SGb);
			if (SGb.StoreGroup==RepSpec.flags[0]) then begin
				ZREpr.TransDate = RepSpec.sStartDate;
				TrHs = true;
				while (loopkey("TransDate",ZREpr,1,TrHs)) begin
					testf = true;
					if (ZREpr.TransDate>RepSpec.sEndDate) then begin TrHs = false; testf = false; end;
					if (testf) then begin
					
						Locr.Code = ZREpr.ShopLocation;
						if (ReadFirstMain(Locr,1,true)) then begin
							
						end;
						StartFormat(15);
							OutString(0,0,Locr.Entity1C,false);
							OutString(0,0,Locr.EntityName1C,false);
							OutString(0,0,Locr.Store1C,false);
							OutString(0,0,Locr.StoreName1C,false);
							OutString(0,0,"",false);
							OutString(0,0,Locr.StoreName1C,false);
							OutString(0,0,ZREpr.saleCashSum + ZREpr.correctionCashSum - ZREpr.moneyBackCashSum - ZREpr.rollbackCashSum,false);
							OutString(0,0,ZREpr.reportNumber,false);
						EndFormat;
					end;
				end;
				ResetLoop(ZREpr);
			end;
		end;
	end;
	endjob;
end;	

global procedure GlobalItemClassInStock()
begin
	record GlobalItemVc GIr;
	row GlobalItemVc GIrw;
	record BtrxFirstLevelCatVc BtrxFirstLevelCatr;
	record BtrxSecondLevelCatVc BtrxSecondLevelCatr;
	record BtrxThirdLevelCatVc BtrxThirdLevelCatr;
	record BTRxBrandVc BTRxBrandr;
	record BTRxMaterialVc BTRxMaterialr;
	record BTRxColourVc BTRxColorr;
	record BTRxSizeVc BTRxSizer;
	record BTRxSexVc BTRxSexr;
	record BTRxPlatingVc BTRxPlatingr;
	record BTRxStoneVc BTRxStoner;
	record BTRxStrapVc BTRxStrapr;
	record BTRxOdourVc BTRxOdourr;
	record BtrxCollectionVc BtrxCollectionr;
	record BPIGroupVc BPIGroupr;
	record BPISubGroupVc BPISubGroupr;
	record BPIShapeVc BPIShaper;
	record BPICategoryVc BPICategoryr;
	record INVc INr;
	boolean TrHs, INrf, testf, Instf;
	area BodyAr;
	longint i,j;
	string 255 LocCodes, FileName;
	val LocInstock;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	vector boolean Girf, Instockf;
	record ItemStatusVc ISr;
	val fr,to1,to2,br1,br2,TempItemPrice,tprice;  
	val ITRebate,price,FOBPrice;
	record PLVc PLr;
	date td,tdp;
	string 255 file1,file2,obj,crn,tpcurrency;
	vector string 255 vBPIGroupr, vBPISubGroupr, vBPICategoryr; // Edit ************* Ihor Trubachov 25*08*2021

	
	
	FileName = "GlobalItemReport_" & DateToString(CurrentDate,"DD.MM.YYYY") & ".txt";
	runprogram("chmod","-R a+rw /mnt/database/Ecommerce");
	
	BlockLoad(Compb);
	SetCompany(1,false);
	logtext(0,"GlobalItemClassInStock Start");
	if (!fileexists("/mnt/database/Ecommerce/GlobalItemReports/" & FileName))then begin
		AddTextToArea	("Global Code" & chr(09) 	//1
									& "Hansa Code" & chr(09) 	//2
									& "Name ENG" & chr(09) 		//3
									& "Name AZE" & chr(09) 		//5
									& "Name RUS" & chr(09) 		//6
									& "BRAND" & chr(09) 			//7
									& "COLLECTION" & chr(09) 	//8
									& "GROUP" & chr(09) 			//9
									& "SUBGROUP" & chr(09) 		//10
									& "CATEGORY" & chr(09) 		//11
									// & "MATERIAL" & chr(09) //12
									// & "COLOR" & chr(09) 		//13
									// & "SHAPE" & chr(09) 		//14
									// & "SIZE" & chr(09) 		//15
									& "LOCATION" & chr(09) 		//16
									& "INSTOCK" & chr(09) 		//17
									& "COST PRICE" & chr(09)	//18
									& "RETAIL" & chr(09) 			//19
									& "REBATE" & chr(09) 			//20
									&	chr(13),BodyAr); 
		GIr.Code = "";
		TrHs = true;
		
		////////////////  // Edit ************* Ihor Trubachov 25*08*2021
		while (LoopMain(BPIGroupr,1,true)) begin
		vBPIGroupr[BPIGroupr.Code] = BPIGroupr.Name;
		end;
		ResetLoop(BPIGroupr);
		while (LoopMain(BPISubGroupr,1,true)) begin
		vBPISubGroupr[BPISubGroupr.Code] = BPISubGroupr.Name;
		end;
		ResetLoop(BPISubGroupr);
		while (LoopMain(BPICategoryr,1,true)) begin
		vBPICategoryr[BPICategoryr.Code] = BPICategoryr.Name;
		end;
		ResetLoop(BPICategoryr);
		
		////////////////
		
		while (loopmain(GIr,1,TrHs)) begin
			BTRxBrandr.Code = GIr.BPIBrand;
			if (ReadFirstMain(BTRxBrandr,1,true)) then begin  end;
			BtrxCollectionr.Code = GIr.BtrxCollection;
			if (ReadFirstMain(BtrxCollectionr,1,true)) then begin  end;
			// BTRxMaterialr.Code = GIr.BPIMaterial;
			// if (ReadFirstMain(BTRxMaterialr,1,true)) then begin  end;
			// BTRxColorr.Code = GIr.BPIColor;
			// if (ReadFirstMain(BTRxColorr,1,true)) then begin  end;
			// BTRxSizer.Code = GIr.BPISize;
			// if (ReadFirstMain(BTRxSizer,1,true)) then begin  end;
			LocCodes = "";
			LocInstock = 0;
			ClearVector(Instockf);
			Instf = false;
			for (i=0;i<matrowcnt(GIr);i=i+1) begin
				matrowget(GIr,i,GIrw);
				if (GIrw.Instock>0) then begin
					Instockf[GIrw.Location] = true;
					Instf = true;
				end;
			end;	
			
			
			if (Instf) then begin
				for (j=0;j<matrowcnt(GIr);j=j+1) begin
					testf = true;
					price = blankval;
					tprice = blankval;
					ITRebate = blankval;
					FOBPrice = blankval;
					matrowget(GIr,j,GIrw);
					INrf = false;
					if (!Instockf[GIrw.Location]) then begin testf = false; end;
					if (testf) then begin
						LocCodes = GIrw.Location;
						LocInstock = GIrw.Instock;
						if (GIr.ExtProwItRegulations<0)then begin 
							for (i=0;i<matrowcnt(Compb);i=i+1)begin
								matrowget(Compb,i,Comprw);
								if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(i+1) or i+1==3) and i+1!=29)then begin
									SetCompany(i+1,false);
									INr.Code = GIr.HansaCode;
									if (ReadFirstMain(INr,1,true)) then begin
										ISr.Code = INr.Code;
										ISr.Location = GIrw.Location;
										if(ReadFirstMain(ISr,2,true)) then begin 
											if (ISr.Instock>0) then begin
												i = matrowcnt(Compb);
												INrf = true;
												
												// // // // // BPIGroupr.Code = INr.BPIGroup;
												// // // // // if (ReadFirstMain(BPIGroupr,1,true)) then begin  end;
												// // // // // BPISubGroupr.Code = INr.BPISubGroup;
												// // // // // if (ReadFirstMain(BPISubGroupr,1,true)) then begin  end;
												// // // // // BPICategoryr.Code = INr.BPICategory;
												// // // // // if (ReadFirstMain(BPICategoryr,1,true)) then begin  end;
												
												
												
												// BPIShaper.Code = INr.BPIShape;
												// if (ReadFirstMain(BPIShaper,1,true)) then begin  end;
												price = blankval;
												tprice = blankval;
												ITRebate = blankval;
												FOBPrice = blankval;
												if(!(CurrentCompany==29 and blank(INr.Group))) then begin
													if (ReadFirstMain(INr,1,true) and INr.BPIBrand==left(GIr.Code,8)) then begin
														GetPriceItem(INr.Code,price,ITRebate);
														tdp = currentdate;
														if (GetTempItemPrice(TempItemPrice,INr.Code,tpcurrency,tdp,obj)) then begin
															if(tpcurrency!="AZN")then begin
																crn = tpcurrency;
																td = tdp;
																fr = 0;
																to1 = 0;
																to2 = 0;
																br1 = 0;
																br2 = 0;
																GetFullCurncyRate(crn,td,fr,to1,to2,br1,br2);
																tprice = TempItemPrice/fr*to1;
															end else begin
																tprice = TempItemPrice;
															end;
															ITRebate = 0;
															if(tprice!=blankval)then begin
																price = tprice;
															end;
														end;	
													end;
												end;
												PLr.PLCode = "FOB";
												PLr.ArtCode = INr.Code;
												if (ReadFirstMain(PLr,2,true)) then begin
													FOBPrice = PLr.ExVatPrice;
													tdp = currentdate;
													if(PLr.CurncyCode!="AZN")then begin
														crn = PLr.CurncyCode;
														td = tdp;
														fr = 0;
														to1 = 0;
														to2 = 0;
														br1 = 0;
														br2 = 0;
														GetFullCurncyRate(crn,td,fr,to1,to2,br1,br2);
														FOBPrice = FOBPrice/fr*to1;
													end else begin
														FOBPrice = PLr.ExVatPrice;
													end;
												end;
											end;
										end;
									end;
								end;
							end;
						end;
						ResetCompany(1);
						if (INrf) then begin
							AddTextToArea	(GIr.Code & chr(09) 						//1
													& GIr.HansaCode & chr(09) 				//2
													& NormalizeStrToJson(GIr.Name) & chr(09) 							//3
													& NormalizeStrToJson(GIr.NameAZ) & chr(09) 						//5
													& NormalizeStrToJson(GIr.NameRUS) & chr(09) 					//6
													& NormalizeStrToJson(BTRxBrandr.Name) & chr(09) 			//7
													& NormalizeStrToJson(BtrxCollectionr.Name) & chr(09) 	//8
													

													& vBPIGroupr[INr.BPIGroup] & chr(09) 				//9
													& vBPISubGroupr[INr.BPISubGroup] & chr(09) 		//10
													& vBPICategoryr[INr.BPICategory] & chr(09) 		//11
													
													// // // // // & BPIGroupr.Name & chr(09) 				//9
													// // // // // & BPISubGroupr.Name & chr(09) 		//10
													// // // // // & BPICategoryr.Name & chr(09) 		//11
													
													
													
													// & BTRxMaterialr.Name & chr(09) //12
													// & BTRxColorr.Name & chr(09) 		//13
													// & BPIShaper.Name & chr(09) 		//14
													// & BTRxSizer.Name & chr(09) 		//15
													& LocCodes & chr(09) 							//16
													& LocInstock & chr(09) 						//17
													& FOBPrice & chr(09)							//18
													& price & chr(09) 								//19
													& ITRebate & chr(09) 							//20
													&	chr(13),BodyAr);
						end else begin
							FOBPrice = GIr.DealPrice;
							ITRebate = GIr.Rebate;
							price = GIr.Price;
							AddTextToArea	(GIr.Code & chr(09) 						//1
													& GIr.HansaCode & chr(09) 				//2
													& NormalizeStrToJson(GIr.Name) & chr(09) 							//3
													& NormalizeStrToJson(GIr.NameAZ) & chr(09) 						//5
													& NormalizeStrToJson(GIr.NameRUS) & chr(09) 					//6
													& NormalizeStrToJson(BTRxBrandr.Name) & chr(09) 			//7
													& BtrxCollectionr.Name & chr(09) 	//8
													& "" & chr(09) 										//9
													& "" & chr(09) 										//10
													& "" & chr(09) 										//11
													// & BTRxMaterialr.Name & chr(09) //12
													// & BTRxColorr.Name & chr(09) 		//13
													// & "" & chr(09) 								//14
													// & BTRxSizer.Name & chr(09) 		//15
													& LocCodes & chr(09) 							//16
													& LocInstock & chr(09) 						//17
													& FOBPrice & chr(09)							//18
													& price & chr(09) 								//19
													& ITRebate & chr(09) 							//20
													&	chr(13),BodyAr);
						end;
					end;
				end;
			end else begin
				// LocCodes = "";
				// LocInstock = 0;
				// INrf = false;
				// for (i=0;i<matrowcnt(Compb);i=i+1)begin
					// matrowget(Compb,i,Comprw);
					// if(Comprw.ActiveStatus==0 and (!CompanyIsJWLikeCompany(i+1) or i+1==3))then begin
						// SetCompany(i+1,false);
						// INr.Code = GIr.HansaCode;
						// if (ReadFirstMain(INr,1,true)) then begin
							// i = matrowcnt(Compb);
							// INrf = true;
							// BPIGroupr.Code = INr.BPIGroup;
							// if (ReadFirstMain(BPIGroupr,1,true)) then begin  end;
							// BPISubGroupr.Code = INr.BPISubGroup;
							// if (ReadFirstMain(BPISubGroupr,1,true)) then begin  end;
							// BPICategoryr.Code = INr.BPICategory;
							// if (ReadFirstMain(BPICategoryr,1,true)) then begin  end;
							// // BPIShaper.Code = INr.BPIShape;
							// // if (ReadFirstMain(BPIShaper,1,true)) then begin  end;
						// end;
					// end;
				// end;
				// ResetCompany(1);
				// if (INrf) then begin
					// AddTextToArea	(GIr.Code & chr(09) 						//1
											// & GIr.HansaCode & chr(09) 				//2
											// & GIr.Name & chr(09) 							//3
											// & GIr.NameAZ & chr(09) 						//5
											// & GIr.NameRUS & chr(09) 					//6
											// & BTRxBrandr.Name & chr(09) 			//7
											// & BtrxCollectionr.Name & chr(09) 	//8
											// & BPIGroupr.Name & chr(09) 				//9
											// & BPISubGroupr.Name & chr(09) 		//10
											// & BPICategoryr.Name & chr(09) 		//11
											// // & BTRxMaterialr.Name & chr(09) //12
											// // & BTRxColorr.Name & chr(09) 		//13
											// // & BPIShaper.Name & chr(09) 		//14
											// // & BTRxSizer.Name & chr(09) 		//15
											// & LocCodes & chr(09) 							//16
											// & LocInstock & chr(09) 						//17
											// & "COST PRICE" & chr(09)					//18
											// & "RETAIL" & chr(09) 							//19
											// & "REBATE" & chr(09) 							//20
											// &	chr(13),BodyAr);
				// end else begin
					// AddTextToArea	(GIr.Code & chr(09) 						//1
											// & GIr.HansaCode & chr(09) 				//2
											// & GIr.Name & chr(09) 							//3
											// & GIr.NameAZ & chr(09) 						//5
											// & GIr.NameRUS & chr(09) 					//6
											// & BTRxBrandr.Name & chr(09) 			//7
											// & BtrxCollectionr.Name & chr(09) 	//8
											// & "" & chr(09) 										//9
											// & "" & chr(09) 										//10
											// & "" & chr(09) 										//11
											// // & BTRxMaterialr.Name & chr(09) //12
											// // & BTRxColorr.Name & chr(09) 		//13
											// // & "" & chr(09) 								//14
											// // & BTRxSizer.Name & chr(09) 		//15
											// & LocCodes & chr(09) 							//16
											// & LocInstock & chr(09) 						//17
											// & "COST PRICE" & chr(09)					//18
											// & "RETAIL" & chr(09) 							//19
											// & "REBATE" & chr(09) 							//20
											// &	chr(13),BodyAr);
				// end;
			end;
		end;
		
		
		// WriteAreaToFile	(BodyAr,"GlobalItemReports/" & "GlobalItemReport_" & DateToString(CurrentDate,"DD.MM.YYYY") & ".txt",0);
		

		WriteAreaToFile	(BodyAr,"/mnt/database/Ecommerce/GlobalItemReports/" & FileName,0);
	end;
	delete_file("/mnt/database/Ecommerce/GlobalItemReports/GlobalItemClassInStockTMP");
	logtext(0,"GlobalItemClassInStock finish");
	return;
end;	


global procedure GetBTRxBenchmrkngForINRn (record RcVc RepSpec)
begin
	record INVc INr;
	record GlobalItemVc GIr;
	vector string 255 BTRxClassString;
	record BTRxBrandVc BTRxBrandr;
	record BTRxMaterialVc BTRxMaterialr;
	record BTRxColourVc BTRxColorr;
	record BTRxSizeVc BTRxSizer;
	record BTRxSexVc BTRxSexr;
	record BTRxPlatingVc BTRxPlatingr;
	record BTRxStoneVc BTRxStoner;
	record BTRxStrapVc BTRxStrapr;
	record BTRxOdourVc BTRxOdourr;
	record BtrxInternalCatVc BtrxInternalCatr;
	record BtrxFirstLevelCatVc BtrxFirstLevelCatr;
	record BtrxSecondLevelCatVc BtrxSecondLevelCatr;
	record BtrxThirdLevelCatVc BtrxThirdLevelCatr;
	record BtrxFourthLevelCatVc BtrxFourthLevelCatr;
	record BtrxCertificateVc BtrxCertificater;
	record BtrxWatchMechanVc BtrxWatchMechanr;
	record BtrxPowerReserveVc BtrxPowerReserver;
	record BtrxWatchGradeVc BtrxWatchGrader;
	record BtrxPhoneModelVc BtrxPhoneModelr;
	record BtrxFillingVc BtrxFillingr;
	record BtrxTypeVc BtrxTyper;
	record BtrxWaterResistantVc BtrxWatResr;
	record BtrxCollectionVc BtrxCollectionr;
	record BtrxStoveCompatVc BtrxStoveCompatr;
	record BtrxComplicationsVc BtrxComplicationsr;
	record BtrxMicrowaveProtectVc BtrxMicrowaveProtectr;
	record BtrxAllMaterialsVc BtrxAllMaterialsr;
	record BtrxPrecMetalContVc BtrxPrecMetalContr;
	record BtrxCaseDiamVc BtrxCaseDiamr;
	
	
	StartReportNoheaderJob("Отчет по товарам сторонних поставщиков");
	startformat(15);
		OutString(1,0,"Hansa Code",false);
		OutString(2,0,"Name",false);
		OutString(3,0,"Name AZ",false);
		OutString(4,0,"Name RU",false);
		OutString(5,0,"Brand",false);
		OutString(6,0,"Кат. для сайта 1 ур.",false); 
		OutString(7,0,"Кат. для сайта 2 ур.",false); 
		OutString(8,0,"Кат. для сайта 3 ур.",false); 
		OutString(9,0,"Кат. для сайта 4 ур.",false); 
		OutString(10,0,"Материал",false); 
		OutString(11,0,"Покрытие",false); 
		OutString(12,0,"Механизм часов",false); 
		OutString(13,0,"Запас хода",false); 
		OutString(14,0,"Ремешок",false); 
		OutString(15,0,"Цвет ремешка",false); 
		OutString(16,0,"Каратность россыпи",false); 
		OutString(17,0,"Цвет",false); 
		OutString(18,0,"Аромат",false); 
		OutString(19,0,"Модель телефона",false); 
		OutString(20,0,"Тип",false); 
		OutString(21,0,"Материал ремешка",false); 
		OutString(22,0,"Коллекция",false); 
		OutString(23,0,"Материал кухни",false); 
		OutString(24,0,"Размер изделия",false); 
		OutString(25,0,"Уход",false); 
		OutString(26,0,"Наполнение",false); 
		OutString(27,0,"Пол",false); 
		OutString(28,0,"Размер ",false); 
		OutString(29,0,"Длина",false); 
		OutString(30,0,"Ширина",false); 
		OutString(31,0,"Высота",false); 
		OutString(32,0,"Диаметр",false); 
		OutString(33,0,"Объем",false); 
		OutString(34,0,"Вес",false); 
		OutString(35,0,"Материал цепочки",false); 
		OutString(36,0,"Комплектация часов 1",false); 
		OutString(37,0,"Комплектация часов 2",false); 
		OutString(38,0,"Комплектация часов 3",false); 
		OutString(39,0,"Камень",false); 
		OutString(40,0,"Каратность камня",false); 
		OutString(41,0,"Камень 2",false); 
		OutString(42,0,"Каратность камня 2",false); 
		OutString(43,0,"Камень 3",false); 
		OutString(44,0,"Каратность камня 3",false); 
		OutString(45,0,"Материал браслета",false); 
		OutString(46,0,"Особенности продукта",false); 
		OutString(47,0,"BPIStone",false); 
		OutString(48,0,"Карат. гл камня",false); 
		OutString(49,0,"Водонепроницаемость",false); 
		OutString(50,0,"Количество в наборе",false); 
		OutString(51,0,"Обхват пальца",false); 
		OutString(52,0,"Цвет циферблата",false); 
		OutString(53,0,"Усложнения",false); 
		OutString(54,0,"Материал циферблата",false); 
		OutString(55,0,"Защита от микроволн",false); 
		OutString(56,0,"Совместимость с плитой",false); 
		OutString(57,0,"Гарантия",false);
		OutString(58,0,"Все материалы",false);
		OutString(59,0,"Проба",false);
		OutString(60,0,"Диаметр корпуса",false);
		OutString(61,0,"Устойчивость к царапинам",false);
		OutString(62,0,"Лимитированный товар",false);
		OutString(63,0,"Водонепронецаемый товар",false);
	endformat;	
	
	
	INr.Code = "";
	while (loopmain(INr,1,true)) begin
		GIr.Code = INr.GlobalArtCode;
		if (ReadFirstMain(GIr,1,true)) then begin
			ClearVector(BTRxClassString);
			if(GIr.BTRxLimitedGood==1)then begin
				BTRxClassString["BTRxLimitedGood"] = "Yes";
			end;
			if(GIr.BTRxWatterResf==1)then begin
				BTRxClassString["BTRxWatterResf"] = "Yes";
			end;
			if(readfirstmain(BtrxCaseDiamr,1,true) and nonblank(GIr.BtrxCaseDiam))then begin
				BTRxClassString["BtrxCaseDiam"] = BtrxCaseDiamr.Name;
			end;
			BTRxClassString["BtrxScratchRes"] = GIr.BtrxScratchRes;
			BtrxCaseDiamr.Code = GIr.BtrxCaseDiam;
			if(readfirstmain(BtrxCaseDiamr,1,true) and nonblank(GIr.BtrxCaseDiam))then begin
				BTRxClassString["BtrxCaseDiam"] = BtrxCaseDiamr.Name;
			end;
			BtrxPrecMetalContr.Code = GIr.BtrxPrecMetalCont;
			if(readfirstmain(BtrxPrecMetalContr,1,true) and nonblank(GIr.BtrxPrecMetalCont))then begin
				BTRxClassString["BtrxPrecMetalCont"] = BtrxPrecMetalContr.Name;
			end;
			BtrxAllMaterialsr.Code = GIr.BtrxAllMaterials;
			if(readfirstmain(BtrxAllMaterialsr,1,true) and nonblank(GIr.BtrxAllMaterials))then begin
				BTRxClassString["BtrxAllMaterials"] = BtrxAllMaterialsr.Name;
			end;
			BTRxClassString["BtrxWarranty"] = GIr.BtrxWarranty;
			BtrxMicrowaveProtectr.Code = GIr.BtrxStoveCompat;
			if(readfirstmain(BtrxMicrowaveProtectr,1,true) and nonblank(GIr.BtrxStoveCompat))then begin
				BTRxClassString["BtrxStoveCompat"] = BtrxMicrowaveProtectr.Name;
			end;
			BtrxMicrowaveProtectr.Code = GIr.BtrxMicrowaveProtect;
			if(readfirstmain(BtrxMicrowaveProtectr,1,true) and nonblank(GIr.BtrxMicrowaveProtect))then begin
				BTRxClassString["BtrxMicrowaveProtect"] = BtrxMicrowaveProtectr.Name;
			end;
			BTRxMaterialr.Code = GIr.BtrxClockFaceMaterial;
			if(readfirstmain(BTRxMaterialr,1,true) and nonblank(GIr.BtrxClockFaceMaterial))then begin
				BTRxClassString["BtrxClockFaceMaterial"] = BTRxMaterialr.Name;
			end;
			BtrxComplicationsr.Code = GIr.BtrxComplications;
			if(readfirstmain(BtrxComplicationsr,1,true) and nonblank(GIr.BtrxComplications))then begin
				BTRxClassString["BtrxComplications"] = BtrxComplicationsr.Name;
			end;
			BTRxColorr.Code = GIr.BtrxClockFaceColour;
			if(readfirstmain(BTRxColorr,1,true) and nonblank(GIr.BtrxClockFaceColour))then begin
				BTRxClassString["BtrxClockFaceColour"] = BTRxColorr.Name;
			end;
			BTRxClassString["BTRxFingerGirth"] = GIr.BTRxFingerGirth;
			BTRxClassString["StrBTRxSetQty"] = GIr.StrBTRxSetQty;
			BtrxWatResr.Code = GIr.BTRxWatterRes;
			if(readfirstmain(BtrxWatResr,1,true) and nonblank(GIr.BTRxWatterRes))then begin
				BTRxClassString["BTRxWatterRes"] = BtrxWatResr.Name;
			end;
			BTRxClassString["BTRxStoneScattA"] = GIr.BTRxStoneScattA;
			BTRxClassString["BTRxStoneScattB"] = GIr.BTRxStoneScattB;
			BTRxClassString["BTRxStoneScattC"] = GIr.BTRxStoneScattC;
			BtrxWatchGrader.Code = GIr.BTRxWatchGradeB;
			if(readfirstmain(BtrxWatchGrader,1,true) and nonblank(GIr.BTRxWatchGradeB))then begin
				BTRxClassString["BTRxWatchGradeB"] = BtrxWatchGrader.Name;
			end;
			BtrxWatchGrader.Code = GIr.BTRxWatchGradeC;
			if(readfirstmain(BtrxWatchGrader,1,true) and nonblank(GIr.BTRxWatchGradeC))then begin
				BTRxClassString["BTRxWatchGradeC"] = BtrxWatchGrader.Name;
			end;
			BtrxWatchGrader.Code = GIr.BTRxWatchGradeA;
			if(readfirstmain(BtrxWatchGrader,1,true) and nonblank(GIr.BTRxWatchGradeA))then begin
				BTRxClassString["BTRxWatchGradeA"] = BtrxWatchGrader.Name;
			end;
			BTRxMaterialr.Code = GIr.BTRxChainMaterial;
			if(readfirstmain(BTRxMaterialr,1,true) and nonblank(GIr.BTRxChainMaterial))then begin
				BTRxClassString["BTRxChainMaterial"] = BTRxMaterialr.Name;
			end;
			
			BTRxClassString["StrDepth"] = GIr.StrDepth;
			BTRxClassString["StrWidth"] = GIr.StrWidth;
			BTRxClassString["StrHeight"] = GIr.StrHeight;
			BTRxClassString["StrBTRxDiam"] = GIr.StrBTRxDiam;
			BTRxClassString["StrVolume"] = GIr.StrVolume;
			BTRxClassString["StrWeight"] = GIr.StrWeight;
			
			BtrxFillingr.Code = GIr.BTRxFilling;
			if(readfirstmain(BtrxFillingr,1,true) and nonblank(GIr.BTRxFilling))then begin
				BTRxClassString["BTRxFilling"] = BtrxFillingr.Name;
			end;
			BtrxFillingr.Code = GIr.BTRxFilling;
			if(readfirstmain(BtrxFillingr,1,true) and nonblank(GIr.BTRxFilling))then begin
				BTRxClassString["BTRxFilling"] = BtrxFillingr.Name;
			end;
			BtrxSizer.Code = GIr.BtrxItemSize;
			if(readfirstmain(BtrxSizer,1,true) and nonblank(GIr.BtrxItemSize))then begin
				BTRxClassString["BtrxItemSize"] = BtrxSizer.Name;
			end;
			BtrxStoveCompatr.Code = GIr.BtrxMatchesKitchenStove;
			if(readfirstmain(BtrxStoveCompatr,1,true) and nonblank(GIr.BtrxMatchesKitchenStove))then begin
				BTRxClassString["BtrxMatchesKitchenStove"] = BtrxStoveCompatr.Name;
			end;
			BtrxCollectionr.Code = GIr.BtrxCollection;
			if(readfirstmain(BtrxCollectionr,1,true) and nonblank(GIr.BtrxCollection))then begin
				BTRxClassString["BtrxCollection"] = BtrxCollectionr.Name;
			end;
			BTRxMaterialr.Code = GIr.BTRxStrapMat;
			if(readfirstmain(BTRxMaterialr,1,true) and nonblank(GIr.BTRxStrapMat))then begin
				BTRxClassString["BTRxStrapMat"] = BTRxMaterialr.Name;
			end;
			BtrxTyper.Code = GIr.BTRxType;
			if(readfirstmain(BtrxTyper,1,true) and nonblank(GIr.BTRxType))then begin
				BTRxClassString["BTRxType"] = BtrxTyper.Name;
			end;
			BtrxPhoneModelr.Code = GIr.BTRxPhoneModel;
			if(readfirstmain(BtrxPhoneModelr,1,true) and nonblank(GIr.BTRxPhoneModel))then begin
				BTRxClassString["BTRxPhoneModel"] = BtrxPhoneModelr.Name;
			end;
			BTRxClassString["BtrxCare"] = GIr.BtrxCare;
			BTRxClassString["BTRxPlacerScatt"] = GIr.BTRxPlacerScatt;
			BtrxPowerReserver.Code = GIr.BTRxPowerReserve;
			if(readfirstmain(BtrxPowerReserver,1,true) and nonblank(GIr.BTRxPowerReserve))then begin
				BTRxClassString["BTRxPowerReserve"] = BtrxPowerReserver.Name;
			end;
			BtrxWatchMechanr.Code = GIr.BTRxWatchMechanism;
			if(readfirstmain(BtrxWatchMechanr,1,true) and nonblank(GIr.BTRxWatchMechanism))then begin
				BTRxClassString["BTRxWatchMechanism"] = BtrxWatchMechanr.Name;
			end;
			BtrxFourthLevelCatr.Code = GIr.BTRxFourthLevCat;
			if(readfirstmain(BtrxFourthLevelCatr,1,true) and nonblank(GIr.BTRxFourthLevCat))then begin
				BTRxClassString["BTRxFourthLevCat"] = BtrxFourthLevelCatr.Name;
			end;
			BtrxThirdLevelCatr.Code = GIr.BTRxThirdLevCat;
			if(readfirstmain(BtrxThirdLevelCatr,1,true) and nonblank(GIr.BTRxThirdLevCat))then begin
				BTRxClassString["BTRxThirdLevCat"] = BtrxThirdLevelCatr.Name;
			end;
			BtrxSecondLevelCatr.Code = GIr.BTRxSecondLevCat;
			if(readfirstmain(BtrxSecondLevelCatr,1,true) and nonblank(GIr.BTRxSecondLevCat))then begin
				BTRxClassString["BTRxSecondLevCat"] = BtrxSecondLevelCatr.Name;
			end;
			BtrxFirstLevelCatr.Code = GIr.BTRxFirstLevCat;
			if(readfirstmain(BtrxFirstLevelCatr,1,true) and nonblank(GIr.BTRxFirstLevCat))then begin
				BTRxClassString["BTRxFirstLevCat"] = BtrxFirstLevelCatr.Name;
			end;
			BTRxBrandr.Code = GIr.BPIBrand;
			if(readfirstmain(BTRxBrandr,1,true) and nonblank(GIr.BPIBrand))then begin
				BTRxClassString["BPIBrand"] = BTRxBrandr.Name;
			end;
			BTRxMaterialr.Code = GIr.BPIMaterial;
			if(readfirstmain(BTRxMaterialr,1,true) and nonblank(GIr.BPIMaterial))then begin
				BTRxClassString["BPIMaterial"] = BTRxMaterialr.Name;
			end;
			BTRxPlatingr.Code = GIr.BPIPlating;
			if(readfirstmain(BTRxPlatingr,1,true) and nonblank(GIr.BPIPlating))then begin
				BTRxClassString["BPIPlating"] = BTRxPlatingr.Name;
			end;
			BTRxStrapr.Code = GIr.BPIStrap;
			if(readfirstmain(BTRxStrapr,1,true) and nonblank(GIr.BPIStrap))then begin
				BTRxClassString["BPIStrap"] = BTRxStrapr.Name;
			end;
			BTRxColorr.Code = GIr.BPIColor;
			if(readfirstmain(BTRxColorr,1,true) and nonblank(GIr.BPIColor))then begin
				BTRxClassString["BPIColor"] = BTRxColorr.Name;
			end;
			BTRxOdourr.Code = GIr.BPIOdour;
			if(readfirstmain(BTRxOdourr,1,true) and nonblank(GIr.BPIOdour))then begin
				BTRxClassString["BPIOdour"] = BTRxOdourr.Name;
			end;
			BTRxSexr.Code = GIr.BPISex;
			if(readfirstmain(BTRxSexr,1,true) and nonblank(GIr.BPISex))then begin
				BTRxClassString["BPISex"] = BTRxSexr.Name;
			end;
			BTRxSizer.Code = GIr.BPISize;
			if(readfirstmain(BTRxSizer,1,true) and nonblank(GIr.BPIBrand))then begin
				BTRxClassString["BPIBrand"] = BTRxSizer.Name;
			end;
			BTRxMaterialr.Code = GIr.BTRxChainMaterial;
			if(readfirstmain(BTRxMaterialr,1,true) and nonblank(GIr.BTRxChainMaterial))then begin
				BTRxClassString["BTRxChainMaterial"] = BTRxMaterialr.Name;
			end;
			BTRxColorr.Code = GIr.BTRxStrapColour;
			if(readfirstmain(BTRxColorr,1,true) and nonblank(GIr.BTRxStrapColour))then begin
				BTRxClassString["BTRxStrapColour"] = BTRxColorr.Name;
			end;
			BTRxColorr.Code = GIr.BTRxProdColour;
			if(readfirstmain(BTRxColorr,1,true) and nonblank(GIr.BTRxProdColour))then begin
				BTRxClassString["BTRxProdColour"] = BTRxColorr.Name;
			end;
			BTRxMaterialr.Code = GIr.BTRxChainMaterial;
			if(readfirstmain(BTRxMaterialr,1,true) and nonblank(GIr.BTRxChainMaterial))then begin
				BTRxClassString["BTRxChainMaterial"] = BTRxMaterialr.Name;
			end;
			BTRxStoner.Code = GIr.BTRxStoneA;
			if(readfirstmain(BTRxStoner,1,true) and nonblank(GIr.BTRxStoneA))then begin
				BTRxClassString["BTRxStoneA"] = BTRxStoner.Name;
			end;
			BTRxStoner.Code = GIr.BTRxStoneB;
			if(readfirstmain(BTRxStoner,1,true) and nonblank(GIr.BTRxStoneB))then begin
				BTRxClassString["BTRxStoneB"] = BTRxStoner.Name;
			end;
			BTRxStoner.Code = GIr.BTRxStoneC;
			if(readfirstmain(BTRxStoner,1,true) and nonblank(GIr.BTRxStoneC))then begin
				BTRxClassString["BTRxStoneC"] = BTRxStoner.Name;
			end;
		
		
		
			startformat(15);
				OutString(1,0,GIr.HansaCode,false);
				OutString(2,0,GIr.Name,false);
				OutString(3,0,GIr.NameAZ,false);
				OutString(4,0,GIr.NameRUS,false);
				OutString(5,0,BTRxClassString["BPIBrand"],false);
				OutString(6,0,BTRxClassString["BTRxFirstLevCat"],false);
				OutString(7,0,BTRxClassString["BTRxSecondLevCat"],false); 
				OutString(8,0,BTRxClassString["BTRxThirdLevCat"],false); 
				OutString(9,0,BTRxClassString["BTRxFourthLevCat"],false); 
				OutString(10,0,BTRxClassString["BPIMaterial"],false); 
				OutString(11,0,BTRxClassString["BPIPlating"],false); 
				OutString(12,0,BTRxClassString["BTRxWatchMechanism"],false); 
				OutString(13,0,BTRxClassString["BTRxPowerReserve"],false); 
				OutString(14,0,BTRxClassString["BPIStrap"],false); 
				OutString(15,0,BTRxClassString["BTRxStrapColour"],false); 
				OutString(16,0,BTRxClassString["BTRxPlacerScatt"],false); 
				OutString(17,0,BTRxClassString["BPIColor"],false); 
				OutString(18,0,BTRxClassString["BPIOdour"],false); 
				OutString(19,0,BTRxClassString["BTRxPhoneModel"],false); 
				OutString(20,0,BTRxClassString["BTRxType"],false); 
				OutString(21,0,BTRxClassString["BTRxStrapMat"],false); 
				OutString(22,0,BTRxClassString["BtrxCollection"],false); 
				OutString(23,0,BTRxClassString["BtrxMatchesKitchenStove"],false); 
				OutString(24,0,BTRxClassString["BtrxItemSize"],false); 
				OutString(25,0,BTRxClassString["BtrxCare"],false); 
				OutString(26,0,BTRxClassString["BTRxFilling"],false); 
				OutString(27,0,BTRxClassString["BPISex"],false); 
				OutString(28,0,BTRxClassString["BPISize"],false); 
				OutString(29,0,BTRxClassString["StrDepth"],false); 
				OutString(30,0,BTRxClassString["StrWidth"],false); 
				OutString(31,0,BTRxClassString["StrHeight"],false); 
				OutString(32,0,BTRxClassString["StrBTRxDiam"],false); 
				OutString(33,0,BTRxClassString["StrVolume"],false); 
				OutString(34,0,BTRxClassString["StrWeight"],false); 
				OutString(35,0,BTRxClassString["BTRxChainMaterial"],false); 
				OutString(36,0,BTRxClassString["BTRxWatchGradeA"],false); 
				OutString(37,0,BTRxClassString["BTRxWatchGradeB"],false); 
				OutString(38,0,BTRxClassString["BTRxWatchGradeC"],false); 
				OutString(39,0,BTRxClassString["BTRxStoneA"],false); 
				OutString(40,0,BTRxClassString["BTRxStoneScattA"],false); 
				OutString(41,0,BTRxClassString["BTRxStoneB"],false); 
				OutString(42,0,BTRxClassString["BTRxStoneScattB"],false); 
				OutString(43,0,BTRxClassString["BTRxStoneC"],false); 
				OutString(44,0,BTRxClassString["BTRxStoneScattC"],false); 
				OutString(45,0,BTRxClassString["BTRxBracelMat"],false); 
				OutString(46,0,BTRxClassString["BtrxProductFeaches"],false); 
				OutString(47,0,BTRxClassString["BPIStone"],false); 
				OutString(48,0,BTRxClassString["BTRxCentralCarat"],false); 
				OutString(49,0,BTRxClassString["BTRxWatterRes"],false); 
				OutString(50,0,BTRxClassString["StrBTRxSetQty"],false); 
				OutString(51,0,BTRxClassString["BTRxFingerGirth"],false); 
				OutString(52,0,BTRxClassString["BtrxClockFaceColour"],false); 
				OutString(53,0,BTRxClassString["BtrxComplications"],false); 
				OutString(54,0,BTRxClassString["BtrxClockFaceMaterial"],false); 
				OutString(55,0,BTRxClassString["BtrxMicrowaveProtect"],false); 
				OutString(56,0,BTRxClassString["BtrxStoveCompat"],false); 
				OutString(57,0,BTRxClassString["BtrxWarranty"],false); 
				OutString(58,0,BTRxClassString["BtrxAllMaterials"],false); 
				OutString(59,0,BTRxClassString["BtrxPrecMetalCont"],false); 
				OutString(60,0,BTRxClassString["BtrxCaseDiam"],false); 
				OutString(61,0,BTRxClassString["BtrxScratchRes"],false); 
				OutString(62,0,BTRxClassString["BTRxLimitedGood"],false); 
				OutString(63,0,BTRxClassString["BTRxWatterResf"],false); 
			endformat;
		end;
	end;
	endjob;
	return;
end;


global procedure KareBrandReportRn()	//Edit **********************************************Vas-P	01/11/2021
begin
	record INVc INr;
	integer i,curcomp,CompQty;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	string 20 companies;
	vector string 255 vComp;
	boolean TrHs,TrHs2,testf,testf2;
	array string 255 tags;
	
	logtext(0,"KareBrandReportRn start");
	
	BlockLoad(Compb);	
	CompQty = matrowcnt(Compb);
	curcomp = currentcompany;
	
	// companies = "4,7,8,25,18,34";
	
	startreportnoheaderjob("KAREBRAND");
	
	startformat(15);
		OutString(50,0,"ArtCode",false);
		OutString(100,0,"Villeroy&Boch",false);
		OutString(150,0,"Ambiance",false);
		OutString(200,0,"YvesDelorme",false);
		OutString(250,0,"ID Group",false);
		OutString(300,0,"Casa Coin",false);
		OutString(350,0,"ID STOCK SALE",false);
	endformat;
	
	for (i=0;i<CompQty;i=i+1) begin
		matrowget(Compb,i,Comprw);
		if(Comprw.ActiveStatus==0) then begin
			SetCompany(i+1,false);
			
			if(CurrentCompany==4 or CurrentCompany==7 or CurrentCompany==8 or CurrentCompany==18 or CurrentCompany==25 or CurrentCompany==34) then begin
				if(CurrentCompany==18)then begin
					TrHs = true;
					INr.AlternativeCode = "K";
					while(loopkey("AlternativeCode",INr,1,TrHs))begin
						testf = true;
						if(left(INr.AlternativeCode,1)!="K")then begin TrHs = false; end;
						if(left(INr.AlternativeCode,1)!="K" or INr.BPIBrand!="BRND0099")then begin testf = false; end;
						if(testf)then begin
							vComp[INr.AlternativeCode] = vComp[INr.AlternativeCode] & "," & CurrentCompany;
						end;
					end;
					resetloop(INr);
				end else begin
					TrHs2 = true;
					INr.Code = "K";
					while(loopkey("Code",INr,1,TrHs2))begin
						testf2 = true;
						if(left(INr.Code,1)!="K")then begin TrHs2 = false; end;
						if(left(INr.Code,1)!="K" or INr.BPIBrand!="BRND0099")then begin testf2 = false; end;
						if(testf2)then begin
							vComp[INr.Code] = vComp[INr.Code] & "," & CurrentCompany;
						end;
					end;
					resetloop(INr);
				end;
			end;			
		end;
	end;
	
	getvectortags(vComp,tags);
	

	
	for(i=0;i<tags.length;i=i+1)begin
		startformat(15);
			OutString(50,0,tags[i],false);
			if(setinset(4,vComp[tags[i]]))then begin
				OutString(100,0,"+",false);
			end else begin
				OutString(100,0,"",false);
			end;
			if(setinset(7,vComp[tags[i]]))then begin
				OutString(150,0,"+",false);
			end else begin
				OutString(150,0,"",false);
			end;
			if(setinset(8,vComp[tags[i]]))then begin
				OutString(200,0,"+",false);
			end else begin
				OutString(200,0,"",false);
			end;
			if(setinset(18,vComp[tags[i]]))then begin
				OutString(250,0,"+",false);
			end else begin
				OutString(250,0,"",false);
			end;
			if(setinset(25,vComp[tags[i]]))then begin
				OutString(300,0,"+",false);
			end else begin
				OutString(300,0,"",false);
			end;
			if(setinset(34,vComp[tags[i]]))then begin
				OutString(350,0,"+",false);
			end else begin
				OutString(350,0,"",false);
			end;
		endformat;
	end;
	
	endjob;

	logtext(0,"KareBrandReportRn end");
	
return; 
end;	


global procedure FillDuplicateRn()	//Edit **********************************************Vas-P	16/11/2021
begin
	record ItemDuplicatesVc IDr;
	record ItemHistVc IHr;
	record INVc INr;
	integer i,curcomp,CompQty;
	record CompaniesBlock Compb;
	row CompaniesBlock Comprw;
	string 20 companies;
	vector string 255 vComp;
	boolean TrHs,TrHs2,testf,testf2;
	array string 255 tags;
	
	logtext(0,"FillDuplicateRn start");
	
	BlockLoad(Compb);	
	CompQty = matrowcnt(Compb);
	curcomp = currentcompany;
	
	// companies = "4,7,8,25,18,34";
	
	startreportnoheaderjob("Duplicates");
	
	// startformat(15);
		// OutString(50,0,"ArtCode",false);
		// OutString(100,0,"Villeroy&Boch",false);
		// OutString(150,0,"Ambiance",false);
		// OutString(200,0,"YvesDelorme",false);
		// OutString(250,0,"ID Group",false);
		// OutString(300,0,"Casa Coin",false);
		// OutString(350,0,"ID STOCK SALE",false);
	// endformat;
	
	// for (i=0;i<CompQty;i=i+1) begin
		// matrowget(Compb,i,Comprw);
		// if(Comprw.ActiveStatus==0) then begin
			SetCompany(18,false);
			IDr.DupCode = "";
			while (loopkey("DupCode",IDr,1,TrHs)) begin
				logtexttofile(IDr.DupCode & " " & IDr.OrigCode & " " & IDr.DupBrandCode & " " & IDr.OrigBrandCode,"DupCode.txt");
			end;
			// if(CurrentCompany==4 or CurrentCompany==7 or CurrentCompany==8 or CurrentCompany==18 or CurrentCompany==25 or CurrentCompany==34) then begin
				// if(CurrentCompany==18)then begin
					// TrHs = true;
					// INr.AlternativeCode = "K";
					// while(loopkey("AlternativeCode",INr,1,TrHs))begin
						// testf = true;
						// if(left(INr.AlternativeCode,1)!="K")then begin TrHs = false; end;
						// if(left(INr.AlternativeCode,1)!="K" or INr.BPIBrand!="BRND0099")then begin testf = false; end;
						// if(testf)then begin
							// vComp[INr.AlternativeCode] = vComp[INr.AlternativeCode] & "," & CurrentCompany;
						// end;
					// end;
					// resetloop(INr);
				// end else begin
					// TrHs2 = true;
					// INr.Code = "K";
					// while(loopkey("Code",INr,1,TrHs2))begin
						// testf2 = true;
						// if(left(INr.Code,1)!="K")then begin TrHs2 = false; end;
						// if(left(INr.Code,1)!="K" or INr.BPIBrand!="BRND0099")then begin testf2 = false; end;
						// if(testf2)then begin
							// vComp[INr.Code] = vComp[INr.Code] & "," & CurrentCompany;
						// end;
					// end;
					// resetloop(INr);
				// end;
			// end;			
		// end;
	// end;
	
	// getvectortags(vComp,tags);
	

	
	// for(i=0;i<tags.length;i=i+1)begin
		// startformat(15);
			// OutString(50,0,tags[i],false);
			// if(setinset(4,vComp[tags[i]]))then begin
				// OutString(100,0,"+",false);
			// end else begin
				// OutString(100,0,"",false);
			// end;
			// if(setinset(7,vComp[tags[i]]))then begin
				// OutString(150,0,"+",false);
			// end else begin
				// OutString(150,0,"",false);
			// end;
			// if(setinset(8,vComp[tags[i]]))then begin
				// OutString(200,0,"+",false);
			// end else begin
				// OutString(200,0,"",false);
			// end;
			// if(setinset(18,vComp[tags[i]]))then begin
				// OutString(250,0,"+",false);
			// end else begin
				// OutString(250,0,"",false);
			// end;
			// if(setinset(25,vComp[tags[i]]))then begin
				// OutString(300,0,"+",false);
			// end else begin
				// OutString(300,0,"",false);
			// end;
			// if(setinset(34,vComp[tags[i]]))then begin
				// OutString(350,0,"+",false);
			// end else begin
				// OutString(350,0,"",false);
			// end;
		// endformat;
	// end;
	
	endjob;

	logtext(0,"FillDuplicateRn end");
	
return; 
end;	

