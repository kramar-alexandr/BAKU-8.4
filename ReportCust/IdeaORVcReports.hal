//server-only
external function integer IdeaIPbyOR(longint,boolean,array integer,var val,string,boolean,var string,var string);
external procedure LogProcTime(string,longint);

SetLangMode(LangRussian,"RUS",0);

global procedure IDManufacturerRn(record RcVc RepSpec)
begin
	record ORVc ORr;
  row ORVc ORrw;
  integer i,mtrw,Mi;
  vector boolean vMfrInArr;
  vector val vMfrAmount;
  array string 255 aMfrCode,aMfrName;
  array integer aMfrAdj;
  val tot;
  array integer tab;
  
  tab[1] = 0;
  tab[2] = tab[1] + 20;
  tab[3] = tab[2] + 90;
  tab[4] = tab[3] + 120;
  tab[5] = tab[4] + 50;
  
  ORr.SerNr = RepSpec.f1;
  readfirstmain(ORr,1,true);
  mtrw = matrowcnt(ORr);
  for (i=0;i<mtrw;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if !vMfrInArr[ORrw.IDManufacturer] then begin
      aMfrCode[Mi] = ORrw.IDManufacturer;
      aMfrName[Mi] = ORrw.IDManufacturerName;
      aMfrAdj[Mi] = ORrw.MfrTimeAdjRow;
      Mi = Mi + 1;
      vMfrInArr[ORrw.IDManufacturer] = true;
    end;
    vMfrAmount[ORrw.IDManufacturer] = vMfrAmount[ORrw.IDManufacturer] + ORrw.Price*ORrw.Quant;
  end;
  startreportnoheaderjob("Manufacturer Report");
	
    startformat(15);
      outstring(tab[1],0,"Item",false);
      outstring(tab[2],0,"Manufacturer",false);
      outstring(tab[3],0,"Code",false);
      outstring(tab[4],0,"Amount,Euro",false);
      outstring(tab[5],0,"Mfr Time Adjust",false);
    endformat;
    Black_Divider(0,1);
    
    for (i=0;i<aMfrCode.length;i=i+1) begin
      startformat(15);
        outstring(tab[1],0,i+1,false);
        outstring(tab[2],0,aMfrName[i],false);
        outstring(tab[3],0,aMfrCode[i],false);
        outstring(tab[4],0,vMfrAmount[aMfrCode[i]],false);
        outstring(tab[5],0,aMfrAdj[i],false);
        tot = tot + vMfrAmount[aMfrCode[i]];
      endformat;
      if (i!=aMfrCode.length-1) then begin
        Gray_Divider(0,1);
      end;
    end;
    Black_Divider(0,1);
    startformat(15);
      outstring(tab[1],0,"",false);
      outstring(tab[2],0,"Total:",false);
      outstring(tab[3],0,"",false);
      outstring(tab[4],0,tot,false);
      outstring(tab[5],0,"",false);
    endformat;
  endjob;
	
  return;
end;

global procedure IDPaymentsRn(record RcVc RepSpec)
begin
  array integer tab;
  val tot;
  string 1 tstr,tstr2;
  
  tab[1] = 0;
  tab[2] = tab[1] + 20;
  tab[3] = tab[2] + 70;
  tab[4] = tab[3] + 70;
  tab[5] = tab[4] + 70;
  tab[6] = tab[5] + 70;
  tab[7] = tab[6] + 70;
  
  startreportnoheaderjob("Payments Report");
	  startformat(15);
      outstring(tab[1],0,"Item",false);
      outstring(tab[2],0,"Paid Date",false);
      outstring(tab[3],0,"Amount Paid, Euro",false);
      outstring(tab[4],0,"Exch Rate, Euro/AZN",false);
      outstring(tab[5],0,"Exch Rate, Euro/USD",false);
      outstring(tab[6],0,"Amount Paid, AZN",false);
      outstring(tab[7],0,"Amount Paid, USD",false);
    endformat;
    Black_Divider(0,1);
    IdeaIPbyOR(RepSpec.long1,true,tab,tot,"",false,tstr,tstr2);
    Black_Divider(0,1);
    startformat(15);
      outstring(tab[1],0,"",false);
      outstring(tab[2],0,"Total:",false);
      outstring(tab[3],0,tot,false);
      outstring(tab[4],0,"",false);
      outstring(tab[5],0,"",false);
      outstring(tab[6],0,"",false);
      outstring(tab[7],0,"",false);
    endformat;
    endjob;
	
  return;
end;

global procedure IDPrintCheckRn(record RcVc RepSpec)
begin
  array integer tab;
  val tmpval;
  string 1 tstr,tstr2;
  
  tab[1] = 0;
  tab[2] = tab[1] + 20;
  tab[3] = tab[2] + 70;
  tab[4] = tab[3] + 70;
  tab[5] = tab[4] + 70;
  tab[6] = tab[5] + 70;
  
  startreportnoheaderjob("Print Check");
	  startformat(15);
      outstring(tab[1],0,"#",false);
      outstring(tab[2],0,"Paid Date",false);
      switch (RepSpec.f1) begin
        case "AZN":
          outstring(tab[3],0,"Amount Paid, AZN",false);
        case "USD":
          outstring(tab[3],0,"Amount Paid, USD",false);
				case "EUR":
          outstring(tab[3],0,"Amount Paid, EUR",false);
      end;
    endformat;
    Black_Divider(0,1);
    IdeaIPbyOR(RepSpec.long1,false,tab,tmpval,RepSpec.f1,true,tstr,tstr2);
    
    endjob;
	
  return;
end;
