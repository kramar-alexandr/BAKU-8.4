//server-only
//SetLangMode(LangRussian,"ENG",0);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function roundmode DefaultRoundMode();
external procedure ExtractObj(string,var Integer,var string);
external function val AbsoluteVal(val); //Edit***************************Sasha2,9:41 31.03.2015
external procedure LogProcTime(string,longint);

//SetLangMode(LangPolish,"POL",0);

//Edit***************************Sasha2,8:31 31.03.2015 {
procedure HTItemClass(string a,var string res)
begin
  res = "";
  
  if (nonblank(a)) then begin
    res = /*USetStr(31044)*/"Marka";
    res = res & ": " & a;
  end else begin
    res = /*USetStr(31227)*/"Wszystkie marki";
  end;
  return;
end; //Edit***************************Sasha2,8:31 31.03.2015 }

procedure CleanUpVector(var vector longint docslist,integer docslistcnt)
begin
  integer i;
  
    for (i=0;i<docslistcnt;i=i+1) begin
      docslist[i] = -1;
    end;
  return;
end;

procedure HeaderLocations(string a,  var string res)	//Edit----------------------Dima  23.02.2015
begin
  if (blank(a)) then begin
     res = USetStr(8961);
  end else begin
     res = USetStr(2768);
     res = res &": " & a;
  end;
return;
end;

function string 20 GetDocName(string filename,integer type)	//Edit***************************Sasha2,11:56 30.03.2015 {
begin
  string 20 res;
    switch (filename) begin
      case "PUVc": res = "PZ";
      case "RetVc": res = "Returned Goods";
      case "IVVc": res = "Invoice";
      case "RetPUVc": res = "Returned Goods to Supp.";
      case "StockMovVc": 
            if (type<0) then begin
              res = "MMR"; //Stock Movements
            end else begin
              res = "MMP";
            end;
      case "SDVc": res = "Stock Depreciations";
      case "SHVc": res = "Deliveries";
    end;
    GetDocName = res;
  return;
end; //Edit***************************Sasha2,11:56 30.03.2015 }

function string 20 GetDbl(string filename)	//Edit***************************Sasha2,11:56 30.03.2015 {
begin
  string 20 res;
    switch (filename) begin
      case "PUVc": res = "DblPUVc";
      case "RetVc": res = "DblRetVc";
      case "IVVc": res = "DblIVVc";
      case "RetPUVc": res = "DblRetPUVc";
      case "StockMovVc": res = "DblStockMovVc";
      case "SDVc": res = "DblSDVc";
      case "SHVc": res = "DblSHVc";
    end;
    GetDbl = res;
  return;
end; //Edit***************************Sasha2,11:56 30.03.2015 }

function boolean CheckRegister(string filename,LongInt DocNumber,var string offnumber,array string params,string cucode)	//Edit***************************Sasha2,11:56 30.03.2015 {
begin
  record PUVc PUr;
  record StockMovVc SMr;
  record SDVc SDr;
  record SHVc SHr;
  record RetVc Retr;
  record RetPUVc RetPUr;
  record IVVc IVr;
  boolean res;
  
    res = true;
    params[0] = "";
    params[1] = "";
    switch (filename) begin
      case "PUVc":
        PUr.SerNr = DocNumber;
        ReadFirstMain(PUr,1,true);
        if (NonBlank(cucode) and cucode!=PUr.VECode) then begin
          res = false;
          goto LCheckRegister;
        end;
        params[0] = PUr.VEName;
        params[1] = PUr.VECode;
        if (PUr.NotForReport==1) then begin
          res = false;
          goto LCheckRegister;
        end;
        if (NonBlank(PUr.OfficialSerNr)) then begin
          offnumber = PUr.OfficialSerNr;
        end else begin
          offnumber = DocNumber;
        end;
      case "RetVc":
        if (NonBlank(cucode)) then begin //if customer name would be included set this close after Readfirstmain
          res = false;
          goto LCheckRegister;
        end;
                
        Retr.SerNr = DocNumber;
        ReadFirstMain(Retr,1,true);
        if (NonBlank(Retr.OfficialSerNr)) then begin
          offnumber = Retr.OfficialSerNr;
        end else begin
          offnumber = DocNumber;
        end;
      case "IVVc":
        IVr.SerNr = DocNumber;
        ReadFirstMain(IVr,1,true);
        if (IVr.NotForReport==1) then begin
          res = false;
          goto LCheckRegister;
        end;
        if (NonBlank(cucode) and cucode!=IVr.CustCode) then begin
          res = false;
          goto LCheckRegister;
        end;
        params[0] = IVr.Addr0;
        params[1] = IVr.CustCode;
        if (NonBlank(IVr.OfficialSerNr)) then begin
          offnumber = IVr.OfficialSerNr;
        end else begin
          offnumber = DocNumber;
        end;
      case "RetPUVc":
        RetPUr.SerNr = DocNumber;
        ReadFirstMain(RetPUr,1,true);
        if (RetPUr.NotForReport==1) then begin
          res = false;
          goto LCheckRegister;
        end;
        if (NonBlank(cucode) and cucode!=RetPUr.VECode) then begin
          res = false;
          goto LCheckRegister;
        end;
        params[0] = RetPUr.VEName;
        params[1] = RetPUr.VECode;
        if (NonBlank(RetPUr.OfficialSerNr)) then begin
          offnumber = RetPUr.OfficialSerNr;
        end else begin
          offnumber = DocNumber;
        end;
      case "StockMovVc":
        if (NonBlank(cucode)) then begin
          res = false;
          goto LCheckRegister;
        end;
      
        SMr.SerNr = DocNumber;
        ReadFirstMain(SMr,1,true);
        if (SMr.NotForReport==1) then begin
          res = false;
          goto LCheckRegister;
        end;
        if (NonBlank(SMr.OfficialSerNr)) then begin
          offnumber = SMr.OfficialSerNr;
        end else begin
          offnumber = DocNumber;
        end;
      case "SDVc":
        if (NonBlank(cucode)) then begin
          res = false;
          goto LCheckRegister;
        end;
      
        SDr.SerNr = DocNumber;
        ReadFirstMain(SDr,1,true);
        /*if (NonBlank(SDr.OfficialSerNr)) then begin
          offnumber = SDr.OfficialSerNr;
        end else begin*/
          offnumber = DocNumber;
        //end;
      case "SHVc":
        if (NonBlank(cucode)) then begin //if customer name would be included set this close after Readfirstmain
          res = false;
          goto LCheckRegister;
        end;
        
        SHr.SerNr = DocNumber;
        ReadFirstMain(SHr,1,true);
        if (NonBlank(SHr.OfficialSerNr)) then begin
          offnumber = SHr.OfficialSerNr;
        end else begin
          offnumber = DocNumber;
        end;
    end;
    
   LCheckRegister:; 
     
    CheckRegister = res;
  return;
end; //Edit***************************Sasha2,11:56 30.03.2015 }

procedure CollectDocCosts(var record TBBUVc TBBUr,record ItemHistVc IHr,var vector longint docslist,var integer docslistcnt, Boolean smf, var boolean errorf,string baseCur,string location,record INVc INr)
begin
  row TBBUVc TBBUrw;
  LongInt doc;
  val costsum;
  date costdate;
  record ItemHistVc IH2r;
  boolean TrHs;
  record IVVc IVr; //Edit***************************Sasha2,11:41 19.11.2015
  row IVVc IVrw; //Edit***************************Sasha2,11:41 19.11.2015
    
    doc = docslist[IHr.TransNr];
    if (doc>-1) then begin
      MatRowGet(TBBUr,doc,TBBUrw);
    end else begin
      TBBUrw.Invoiced = IHr.TransNr; //doc SerNr
      TBBUrw.InvDate = IHr.TransDate; //TransDate
    end;
    
    if (IHr.Invalid!=0) then begin
      TBBUrw.ItemType = 1; //invalid record
      goto LInvalid;
    end;
    if (NonBlankDate(IHr.InDate)) then begin
      costdate = IHr.InDate;
    end else begin
      costdate = IHr.TransDate;
    end;
    
    if (IHr.FileName=="IVVc") then begin //Edit***************************Sasha2,11:42 19.11.2015 {
      if (INr.ItemType>0 and IHr.StockAffectf!=1) then begin
        IVr.SerNr = IHr.TransNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          MatRowGet(IVr,IHr.Row,IVrw);
          CurValToOtherCur(costdate,baseCur,IVrw.FIFORowVal,"PLN",costsum,DefaultCurRoundOff);
        end;
      end else begin
        if (INr.ItemType==0) then begin
          IVr.SerNr = IHr.TransNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            MatRowGet(IVr,IHr.Row,IVrw);
            CurValToOtherCur(costdate,IVr.CurncyCode,IVrw.Sum,"PLN",costsum,DefaultCurRoundOff);
          end;
        end else begin
          CurValToOtherCur(costdate,baseCur,IHr.TotCostPrice,"PLN",costsum,DefaultCurRoundOff);
        end;
      end;
      
    end else begin
      //if (IHr.CurncyCode!="PLN") then begin
        CurValToOtherCur(costdate,baseCur,IHr.TotCostPrice,"PLN",costsum,DefaultCurRoundOff);
      //end else begin
        //costsum = IHr.TotCostPriceCurncy;
      //end;
    end; //Edit***************************Sasha2,11:42 19.11.2015 }
    
    if (smf and NonBlank(location)) then begin
      IH2r.FileName = IHr.FileName;
      IH2r.TransNr = IHr.TransNr;
      IH2r.Row = IHr.Row;
      
      TrHs = true;
      while (LoopKey("FNTransNr",IH2r,3,TrHs)) begin
        if (IH2r.FileName!=IHr.FileName or IH2r.TransNr!=IHr.TransNr or IH2r.Row!=IHr.Row or IH2r.SerNr!=IHr.SerNr) then begin TrHs = false; end;
      end;
      if (IH2r.FileName!=IHr.FileName or IH2r.TransNr!=IHr.TransNr or IH2r.Row!=IHr.Row) then begin
        errorf = true;
      end;
      
      TBBUrw.Price = TBBUrw.Price - costsum; 
      TBBUrw.GP = TBBUrw.GP + costsum;
      
      if (doc==-1) then begin
        if (IHr.Qty<0) then begin
          TBBUrw.Spec = IHr.Location; //from soure
          TBBUrw.Comment = IH2r.Location; //to soure
        end else begin
          TBBUrw.Spec = IH2r.Location; //from soure
          TBBUrw.Comment = IHr.Location; //to soure
        end;
      end;
    end;
    
    if (IHr.Qty<0) then begin
      if (smf) then begin
        if (Blank(location)) then begin
          TBBUrw.Spec = IHr.Location;
          TBBUrw.Price = TBBUrw.Price - costsum;
        end;
      end else begin
        TBBUrw.Spec = IHr.Location;
        if (INr.ItemType>0) then begin
          TBBUrw.Cost = TBBUrw.Cost - costsum;
        end;
        TBBUrw.Sum = TBBUrw.Sum - costsum;
      end;
    end else begin
      if (smf) then begin
        if (Blank(location)) then begin
          TBBUrw.Comment = IHr.Location;
          TBBUrw.GP = TBBUrw.GP + costsum;
        end;
      end else begin
        TBBUrw.Spec = IHr.Location;
        if (INr.ItemType>0) then begin
          TBBUrw.Cost = TBBUrw.Cost + costsum;
        end;
        TBBUrw.Sum = TBBUrw.Sum + costsum;
      end;
    end;
    
  LInvalid:;
  
    if (doc>-1) then begin
       MatRowPut(TBBUr,doc,TBBUrw);
    end else begin
      MatRowPut(TBBUr,docslistcnt,TBBUrw);
      docslist[IHr.TransNr] = docslistcnt;
      docslistcnt = docslistcnt + 1;
    end;
    
  return;
end;

global
procedure StockDocsJournalRn(record RcVc RepSpec)
begin
record PUVc PUr;
row PUVc PUrw;
record StockMovVc SMr;
row StockMovVc SMrw;
record SDVc SDr;
row SDVc SDrw;
record SHVc SHr;
row SHVc SHrw;
record RetVc Retr;
row RetVc Retrw;
record RetPUVc RetPUr;
record IVVc IVr;
row IVVc IVrw;
record BaseCurBlock BCb;
string 250 tstr;
string 50 docType,location;
string 5 baseCur;
integer rw,rwcnt,i;
boolean TrHs,testf;
val subTotalCost, subTotalCostAbs,TotalCost, TotalCostAbs,cost,cost2,costPLN; //Edit***************************Sasha2,11:28 01.04.2015
integer sign;
record DIVc DIr;
string 20 class;
integer pos;
record INVc INr;
array string 20 filenames; //Edit***************************Sasha2,11:17 30.03.2015
integer fncnt,docslistcnt,j; //Edit***************************Sasha2,11:17 30.03.2015
record ItemHistVc IHr; //Edit***************************Sasha2,11:53 30.03.2015
record TBBUVc TBBUr; //Edit***************************Sasha2,14:11 30.03.2015
row TBBUVc TBBUrw; //Edit***************************Sasha2,14:11 30.03.2015
vector longint docslist; //Edit***************************Sasha2,14:16 30.03.2015
string 30 curitem; //Edit***************************Sasha2,16:02 30.03.2015
Boolean stmovf,errorf; //Edit***************************Sasha2,18:32 30.03.2015
array integer outstrpos; //Edit***************************Sasha2,8:36 31.03.2015
val costv; //Edit***************************Sasha2,11:34 01.04.2015
string 100 offnumber; //Edit***************************Sasha2,12:30 01.04.2015
record CYBlock CYB; //Edit***************************Sasha2,14:01 01.04.2015
array string 100 params; //Edit***************************Sasha2,14:02 01.04.2015
longint curtick;

curtick = getcurtick();
	BlockLoad(BCb);
	baseCur = BCb.BaseCur1;	

	subTotalCost = 0;
	subTotalCostAbs = 0;
	TotalCost = 0;
	TotalCostAbs = 0;
	location = RepSpec.f1;

  StartReportJob("Stock documents journal");
  rw=1;
  Header(rw,USetStr(31102) & RepSpec.sStartDate & "-" & RepSpec.sEndDate,1);
  rw = rw + 1;
  HeaderLocations(RepSpec.f1,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  Header(rw,"Wartosci w PLN",1);
  rw = rw + 1; 
  HTItemClass(RepSpec.f2,tstr);
  if (nonblank(tstr)) then begin //Edit***************************Sasha2,10:17 30.03.2015 {
    Header(rw,tstr,0);
    rw = rw + 1;
  end; //Edit***************************Sasha2,10:17 30.03.2015 } 
	EndHeader;
	
	fncnt = 0; //Edit***************************Sasha2,16:35 30.03.2015 {
	switch (RepSpec.ArtMode) begin
	 case 0:
	    filenames[fncnt] = "PUVc"; fncnt = fncnt + 1;
	    filenames[fncnt] = "RetVc"; fncnt = fncnt + 1;
	 case 1:
	    filenames[fncnt] = "IVVc"; fncnt = fncnt + 1;
	    filenames[fncnt] = "RetPUVc"; fncnt = fncnt + 1;
	    filenames[fncnt] = "SHVc"; fncnt = fncnt + 1;
	    filenames[fncnt] = "SDVc"; fncnt = fncnt + 1;
	 case 2:
	    filenames[fncnt] = "StockMovVc"; fncnt = fncnt + 1; stmovf = true;
	end;
	
	if (RepSpec.Media==mtExcel) then begin
	  BlockLoad(CYB);
	  StartFormat(15);
	   OutString(0,0,CYB.BusinessName,false);
	  EndFormat;
	  StartFormat(15);
	   OutString(0,0,"ul.Prusa 2, 00-493 Warszawa",false);
	  EndFormat;
	  StartFormat(15);
	   OutString(0,0,"NIP: 107-002-17-75",false);
	  EndFormat;
	  StartFormat(15);
	   OutString(0,0,"",false);
	  EndFormat;
	  StartFormat(15);
	   OutString(0,0,"STAN NA DZIEN: " & CurrentDate,false);
	  EndFormat;
	  StartFormat(15);
	   OutString(0,0,"Okres: " & RepSpec.sStartDate & "-" & RepSpec.sEndDate,false);
	  EndFormat;
	  StartFormat(15);
	   OutString(0,0,"",false);
	  EndFormat;
	end;
	
	outstrpos[0] = 0;
	outstrpos[1] = 60;
	outstrpos[2] = 120;
	outstrpos[3] = 190;
	outstrpos[4] = 250;
	outstrpos[5] = 300;
	outstrpos[6] = 360;
	outstrpos[7] = 430;
	
	StartFormat(15);
	  OutString(outstrpos[0],0,"Nazwa magazynu",false);			
		OutString(outstrpos[1],0,"Typ dokumentu",false);
		OutString(outstrpos[2],0,"Numer dokumentu",false);			
		OutString(outstrpos[3],0,"Data wyst.dok.",false);	
		OutString(outstrpos[4],0,"Wartosc dok.",false);
		OutString(outstrpos[5],0,"Zmiana wartosci",false);
		if (RepSpec.ArtMode!=2) then begin
		  OutString(outstrpos[6],0,"Nazwa kontr.",false);
      OutString(outstrpos[7],0,"Kod kontr.",false);
		end;
	EndFormat;

  for (j=0;j<fncnt;j=j+1) begin
    IHr.FileName = filenames[j];
    IHr.TransDate = RepSpec.sStartDate;
    TrHs = true;
    RECORDNEW(TBBUr);
    docslistcnt = 0;
    subTotalCost = 0;
    subTotalCostAbs = 0;
    while (Loopkey("FNTransDate",IHr,2,TrHs)) begin
      testf = true;
      if (IHr.FileName!=filenames[j]) then begin TrHs = false; testf = false; end;
      if (IHr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf = false; end;
      if (IHr.FileName!="IVVc" and IHr.StockAffectf!=1) then begin testf = false; end; //Edit***************************Sasha2,11:33 19.11.2015
      if (nonblank(location) and (location!=IHr.Location)) then begin testf = false; end;
      INr.Code = IHr.ArtCode;
      if (readfirstmain(INr,1,true) and INr.Terminated>0) then begin testf = false; end;
      if(testf and nonblank(RepSpec.f2))then begin
        if (NonBlank(curitem) and curitem==IHr.ArtCode) then begin
          goto Lcuritem;
        end;
        testf = false;
				class = "";
				pos = 0;
				ExtractObj(INr.DispGroups,pos,class);
				while (nonblank(class)) begin
  				if(nonblank(class) and setinset(class,RepSpec.f2))then begin
  					testf = true;
  					pos = 255;
  					curitem = IHr.ArtCode;
  				end;
  				ExtractObj(INr.DispGroups,pos,class);
				end;
  	Lcuritem:;
      end;
      if (testf) then begin
        CollectDocCosts(TBBUr,IHr,docslist,docslistcnt,stmovf,errorf,baseCur,location,INr);
        if (errorf) then begin
          goto LStockDocsJournal;
        end;
      end;
    end;  RESETLOOP(IHr);
    
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (/*TBBUrw.Cost!=0 and */TBBUrw.ItemType!=1 and CheckRegister(filenames[j],TBBUrw.Invoiced,offnumber,params,RepSpec.f3)) then begin
        if (stmovf) then begin
          if ((Blank(location) and NonBlank(TBBUrw.Spec)) or (NonBlank(location) and location==TBBUrw.Spec)) then begin
            costv = AbsoluteVal(TBBUrw.Price);
            StartFormat(15);
              OutString(outstrpos[0],0,TBBUrw.Spec,false);	
      				OutString(outstrpos[1],0,GetDocName(filenames[j],-1),false);
      				OutStringID(outstrpos[2],GetDbl(filenames[j]),offnumber,false,TBBUrw.Invoiced);	
      				OutString(outstrpos[3],0,TBBUrw.InvDate,false);	
      				OutString(outstrpos[4],0,costv,false);
      				OutString(outstrpos[5],0,TBBUrw.Price,false);
            EndFormat;
            subTotalCost = subTotalCost + TBBUrw.Price;
            subTotalCostAbs = subTotalCostAbs + costv;
          end;
          if ((Blank(location) and NonBlank(TBBUrw.Comment)) or (NonBlank(location) and location==TBBUrw.Comment)) then begin
            costv = AbsoluteVal(TBBUrw.GP);
            StartFormat(15);
              OutString(outstrpos[0],0,TBBUrw.Comment,false);			
      				OutString(outstrpos[1],0,GetDocName(filenames[j],1),false);
      				OutStringID(outstrpos[2],GetDbl(filenames[j]),offnumber,false,TBBUrw.Invoiced);					
      				OutString(outstrpos[3],0,TBBUrw.InvDate,false);	
      				OutString(outstrpos[4],0,costv,false);
      				OutString(outstrpos[5],0,TBBUrw.GP,false);
            EndFormat;
            subTotalCost = subTotalCost + TBBUrw.GP;
            subTotalCostAbs = subTotalCostAbs + costv;
          end;
        end else begin
          costv = AbsoluteVal(TBBUrw.Sum);
          StartFormat(15);
            OutString(outstrpos[0],0,TBBUrw.Spec,false);			
    				OutString(outstrpos[1],0,GetDocName(filenames[j],0),false);
    				OutStringID(outstrpos[2],GetDbl(filenames[j]),offnumber,false,TBBUrw.Invoiced);				
    				OutString(outstrpos[3],0,TBBUrw.InvDate,false);	
    				OutString(outstrpos[4],0,costv,false);
    				OutString(outstrpos[5],0,TBBUrw.Cost,false);
    				OutString(outstrpos[6],0,params[0],false);
    				OutString(outstrpos[7],0,params[1],false);
          EndFormat;
        subTotalCost = subTotalCost + TBBUrw.Cost;
        subTotalCostAbs = subTotalCostAbs + costv;
        end;
      end;
    end;

    if (subTotalCost!=0 or subTotalCostAbs!=0) then begin
      Gray_Divider(0,1);
      StartFormat(15);
        OutString(outstrpos[0],0,"",false);
        OutString(outstrpos[1],0,"",false);
        OutString(outstrpos[2],0,"",false);
        OutString(outstrpos[3],0,"SubTotal on " & Location & ": ",false);	
      	OutString(outstrpos[4],0,subTotalCostAbs,false);
      	OutString(outstrpos[5],0,subTotalCost,false);
      	TotalCost = TotalCost + subTotalCost;
      	TotalCostAbs = TotalCostAbs + subTotalCostAbs;
  	  EndFormat;
  	  Gray_Divider(0,1);
    end;
  	CleanUpVector(docslist,docslistcnt);
  end; 
  
  Black_Divider(0,1);
	StartFormat(15);
	  OutString(outstrpos[0],0,"",false);
    OutString(outstrpos[1],0,"",false);
    OutString(outstrpos[2],0,"",false);	
	  OutString(outstrpos[3],0,"Total cost on " & location & ": ",false);	
	  OutString(outstrpos[4],0,TotalCostAbs,false);	
	  OutString(outstrpos[5],0,TotalCost,false);			
	EndFormat;
	
LStockDocsJournal:;

  if (errorf) then begin
    StartFormat(15);	
  	 OutString(outstrpos[0],0,"Some error happened",false);			
  	EndFormat;
  end;		
  
  //Edit***************************Sasha2,16:35 30.03.2015 }

//-------------------------------------------------------PUVc------------------------------------------------	
	/*TrHs = true;
	PUr.TransDate = RepSpec.sStartDate;
	docType = "PZ";

	While(LoopKey("TransDate",PUr,1,TrHs)) begin
		testf = true;
		if (PUr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (PUr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=PUr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			
			costPLN = PUr.SumCostPrice;
			if(nonblank(RepSpec.f2))then begin
				costPLN = 0;
				rwcnt = matrowcnt(PUr);
				For(i=0;i<rwcnt;i=i+1) begin
	  			matrowget(PUr,i,PUrw);
	  			INr.Code = PUrw.ArtCode;
	  			if(readfirstmain(INr,1,true))then begin
	  				class = "";
	  				pos = 0;
	  				ExtractObj(INr.DispGroups,pos,class);
	  				if(nonblank(class) and setinset(class,RepSpec.f2))then begin
	  					costPLN = costPLN + PUrw.Sum;
	  				end;
	  			end;
				end; 
			end;
			
			if (PUr.CurncyCode != "PLN") then begin
				CurValToOtherCur(PUr.TransDate,PUr.CurncyCode,costPLN,"PLN",costPLN,DefaultCurRoundOff); 
			end;	
			
			if(costPLN!=0)then begin
				OutString(0,0,PUr.Location,false);	
				OutString(80,0,PUr.VECode,false);			
				OutString(150,0,docType,false);	
				OutStringID(220,"DblPUVcOpen",PUr.SerNr,false,PUr.SerNr);					
				OutString(300,0,PUr.TransDate,false);	
				OutString(350,0,costPLN,false);	
			end;		
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);
	OutString(350,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;		
	EndFormat;	

//-------------------------------------------------------SDVc------------------------------------------------		
	TrHs = true;
	SDr.TransDate = RepSpec.sStartDate;
	docType = "Stock Depreciations";
	subTotalCost = 0;

	While(LoopKey("TransDate",SDr,1,TrHs)) begin
		testf = true;
		if (SDr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (SDr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=SDr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(SDr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(SDr,i,SDrw);
				
				if(nonblank(RepSpec.f2))then begin
					INr.Code = SDrw.ArtCode;
					if(readfirstmain(INr,1,true))then begin
						class = "";
						pos = 0;
						ExtractObj(INr.DispGroups,pos,class);
						if(nonblank(class) and setinset(class,RepSpec.f2))then begin
							cost = cost + SDrw.FIFORowVal;
						end;
					end;
				end else begin
					cost = cost + SDrw.FIFORowVal;
				end;
				
			end;
			CurValToOtherCur(SDr.TransDate,baseCur,cost,"PLN",costPLN,DefaultCurRoundOff);		
			OutString(0,0,SDr.Location,false);				
			OutString(150,0,docType,false);	
			OutStringID(220,"DblSDVcOpen",SDr.SerNr,false,SDr.SerNr);					
			OutString(300,0,SDr.TransDate,false);	
			OutString(350,0,costPLN,false);
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	if(subTotalCost!=0)then begin
	Gray_Divider(0,1);	
	startformat(15);
	OutString(350,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;
	end;
	EndFormat;
	
	
//-------------------------------------------------------StockMovVc------------------------------------------------		
	TrHs = true;
	SMr.TransDate = RepSpec.sStartDate;
	docType = "Stock Movements";
	subTotalCost = 0;

	While(LoopKey("TransDate",SMr,1,TrHs)) begin
		testf = true;
		if (SMr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (SMr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=SMr.FrLocation and location!=SMr.ToLocation)) then begin testf = false; end;
		
		if (testf) then begin
			
			rwcnt = MatRowCnt(SMr);
			cost = 0;
			cost2= 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(SMr,i,SMrw);
				if(nonblank(RepSpec.f2))then begin
					INr.Code = SMrw.ArtCode;
					if(readfirstmain(INr,1,true))then begin
						class = "";
						pos = 0;
						ExtractObj(INr.DispGroups,pos,class);
						if(nonblank(class) and setinset(class,RepSpec.f2))then begin
							cost = cost - SMrw.OldPrice;
							cost2 = cost2 +	SMrw.NewPrice;
						end;
					end;
				end else begin
					cost = cost - SMrw.OldPrice;
					cost2 = cost2 +	SMrw.NewPrice;
				end;

			end;
			if (location==SMr.FrLocation or blank(location) and cost!=0) then begin
				CurValToOtherCur(SMr.TransDate,SMr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 			
				OutString(0,0,SMr.FrLocation,false);				
				OutString(150,0,docType,false);	
				OutStringID(220,"DblStockMovVcOpen",SMr.SerNr,false,SMr.SerNr);			
				OutString(300,0,SMr.TransDate,false);	
				OutString(350,0,costPLN,false);
				subTotalCost = subTotalCost + costPLN;
				if (blank(location)) then begin EndFormat; end;
			end;
			if (location==SMr.ToLocation or blank(location) and cost2!=0) then begin	
				CurValToOtherCur(SMr.TransDate,SMr.CurncyCode,cost2,"PLN",costPLN,DefaultCurRoundOff); 			
				OutString(0,0,SMr.ToLocation,false);				
				OutString(150,0,docType,false);	
				OutStringID(220,"DblStockMovVcOpen",SMr.SerNr,false,SMr.SerNr);	
				OutString(300,0,SMr.TransDate,false);	
				OutString(350,0,costPLN,false);
				subTotalCost = subTotalCost + costPLN;
			end;			
			
		end;		
	end;
	EndFormat;	
	if(subTotalCost!=0)then begin
		Gray_Divider(0,1);	
		OutString(350,0,subTotalCost,false);
		TotalCost = TotalCost + subTotalCost;
	end;
	EndFormat;
	EndFormat;
	

//-------------------------------------------------------SHVc------------------------------------------------		
	TrHs = true;
	SHr.ShipDate = RepSpec.sStartDate;
	docType = "Deliveries";
	subTotalCost = 0;

	While(LoopKey("ShipDate",SHr,1,TrHs)) begin
		testf = true;
		if (SHr.ShipDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (SHr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=SHr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(SHr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(SHr,i,SHrw);
				if(nonblank(RepSpec.f2))then begin
					INr.Code = SHrw.ArtCode;
					if(readfirstmain(INr,1,true))then begin
						class = "";
						pos = 0;
						ExtractObj(INr.DispGroups,pos,class);
						if(nonblank(class) and setinset(class,RepSpec.f2))then begin
							cost = cost + SHrw.FIFORowVal;
						end;
					end;
				end else begin
					cost = cost - SHrw.FIFORowVal;
				end;
			end;
			costPLN = cost;
			if (SHr.CurncyCode != "PLN") then begin
				CurValToOtherCur(SHr.ShipDate,SHr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 
			end;	
			if(costPLN!=0)then begin					
				OutString(0,0,SHr.Location,false);				
				OutString(150,0,docType,false);	
				//OutString(220,0,SHr.SerNr,false);
				OutStringID(220,"DblSHVcOpen",SHr.SerNr,false,SHr.SerNr);					
				OutString(300,0,SHr.ShipDate,false);	
				OutString(350,0,costPLN,false);
			end;
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);	
	OutString(350,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;
	EndFormat;
	

//-------------------------------------------------------RetVc------------------------------------------------		
	TrHs = true;
	Retr.TransDate = RepSpec.sStartDate;
	docType = "Returned Goods";
	subTotalCost = 0;

	While(LoopKey("TransDate",Retr,1,TrHs)) begin
		testf = true;
		if (Retr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (Retr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=Retr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(Retr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(Retr,i,Retrw);
				if(nonblank(RepSpec.f2))then begin
					INr.Code = SHrw.ArtCode;
					if(readfirstmain(INr,1,true))then begin
						class = "";
						pos = 0;
						ExtractObj(INr.DispGroups,pos,class);
						if(nonblank(class) and setinset(class,RepSpec.f2))then begin
							cost = cost + Retrw.CostPrice*Retrw.Quant;
						end;
					end;
				end else begin
					cost = cost + Retrw.CostPrice*Retrw.Quant;
				end;
			end;
			costPLN = cost;
			if (Retr.CurncyCode != "PLN") then begin
				CurValToOtherCur(Retr.TransDate,Retr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 
			end;		
			if(costPLN!=0)then begin			
				OutString(0,0,Retr.Location,false);				
				OutString(150,0,docType,false);	
				//OutString(220,0,Retr.SerNr,false);
				OutStringID(220,"DblRetVcOpen",Retr.SerNr,false,Retr.SerNr);					
				OutString(300,0,Retr.TransDate,false);	
				OutString(350,0,costPLN,false);
			end;
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);	
	OutString(350,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;
	EndFormat;			
	
	
//-------------------------------------------------------RetPUVc------------------------------------------------	
	TrHs = true;
	RetPUr.TransDate = RepSpec.sStartDate;
	docType = "Returned Goods to Supp.";

	While(LoopKey("TransDate",RetPUr,1,TrHs)) begin
		testf = true;
		if (RetPUr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (RetPUr.OKFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=RetPUr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			costPLN = RetPUr.SumCostPrice;
			if (RetPUr.CurncyCode != "PLN") then begin
				CurValToOtherCur(RetPUr.TransDate,RetPUr.CurncyCode,RetPUr.SumCostPrice,"PLN",costPLN,DefaultCurRoundOff); 
			end;		
			if(costPLN!=0)then begin
				OutString(0,0,RetPUr.Location,false);				
				OutString(150,0,docType,false);	
				//OutString(220,0,RetPUr.SerNr,false);
				OutStringID(220,"DblRetPUVcOpen",RetPUr.SerNr,false,RetPUr.SerNr);					
				OutString(300,0,RetPUr.TransDate,false);	
				OutString(350,0,costPLN,false);			
			end;
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);
	OutString(350,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;		
	EndFormat;
	
	
//-------------------------------------------------------IVVc------------------------------------------------	
	TrHs = true;
	IVr.TransDate = RepSpec.sStartDate;
	docType = "Invoices";

	While(LoopKey("TransDate",IVr,1,TrHs)) begin
		testf = true;
		if (IVr.TransDate > RepSpec.sEndDate) then begin TrHs = false; testf=false; end;
		if (IVr.OKFlag==0  or IVr.UpdStockFlag==0) then begin testf = false; end;
		if (nonblank(location) and (location!=IVr.Location)) then begin testf = false; end;
		
		if (testf) then begin
			rwcnt = MatRowCnt(IVr);
			cost = 0;
			for(i=0;i<rwcnt;i=i+1) begin
				MatRowGet(IVr,i,IVrw);
				cost = cost + IVrw.FIFORowVal;
			end;
			costPLN = cost;
			if (IVr.CurncyCode != "PLN") then begin
				CurValToOtherCur(IVr.TransDate,IVr.CurncyCode,cost,"PLN",costPLN,DefaultCurRoundOff); 
			end;			
			if(costPLN!=0)then begin			
				OutString(0,0,IVr.Location,false);				
				OutString(150,0,docType,false);	
				OutString(180,"DblIVVc",IVr.SerNr,false);
				OutStringID(220,"DblIVVcOpen",IVr.OfficialSerNr,false,IVr.SerNr);					
				OutString(300,0,IVr.TransDate,false);	
				OutString(350,0,costPLN,false);		
			end;	
			subTotalCost = subTotalCost + costPLN;
		end;		
	end;
	EndFormat;	
	Gray_Divider(0,1);
	OutString(350,0,subTotalCost,false);
	TotalCost = TotalCost + subTotalCost;
	EndFormat;		
	EndFormat;
	
	Black_Divider(0,1);
	StartFormat(15);	
	 OutString(300,0,"Total cost: ",false);	
	 OutString(350,0,TotalCost,false);			
	EndFormat;	*/			
	
	EndJob;
LogProcTime("StockDocsJournalRn",getcurtick() - curtick);
return;
end;