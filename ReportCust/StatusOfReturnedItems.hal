//server-only
external procedure HT2Per(Date,Date,var string);
external procedure HTLocations(string, string, var string);
external function string 100 GetBrand(string);
external procedure LogProcTime(string,longint);

SetLangMode(LangRussian,"RUS",0);

/*	//Edit----------------------Dima  01.06.2016
*	отчет выводит список счет-фактур с возвратом товара
* отображаютсЯ только те сч/ф, возвращенный товар которых, еще есть на складе в конце указанного периода!!!
* далее выводитсЯ список вероЯтных сч/ф, с которых могла быть сделана покупка (проверЯетсЯ клиент и код товара)
* если цена продажи==цене возврата, сч/ф помечаетсЯ "галочкой"
*/





//функциЯ длЯ возврата данных в материнскую запись (в индекс с соответсутвующим Location)
//если изменениЯ были после исследуемого в отчете периода
procedure ReturnChangesBackToTheMotherRecord(record ItemHistVc IHr,integer index ,var array val remainQty, var array val remainCost,var array val remainCostCurncy)
begin
		
				remainQty[index] = remainQty[index] - IHr.Qty;
				remainCost[index] = remainCost[index] + IHr.TotCostPrice;
				remainCostCurncy[index] = remainCostCurncy[index] + IHr.TotCostPriceCurncy; 
end;






//ђекурсивнаЯ функциЯ длЯ поиска остатков на складе
//ЏринимаетсЯ запись ItemHistVc о возврате товара из сч/фактуры 
//функциЯ суммирует остатки  всех записей, по соответствующим складам, длЯ которых входЯщаЯ запись была источником
//в Hansa 6.4 нет возможности нормально работать с var vector register, поэтому накопление данных сделано в массивах

procedure GetRemainQty(record ItemHistVc IHr,vector integer allLocations ,date endDate,var array val remainQty, var array val remainCost,var array val remainCostCurncy)		//Edit----------------------Dima  19.05.2016
begin
	record ItemHistVc IHnext,IHtemp,IHmother;
	boolean TrHs,TrHs2;
	integer index;
	
	IHnext.Source = IHr.SerNr;
	TrHs = true;
	
	While(LoopKey("Source",IHnext,1,TrHs)) begin
		if (IHnext.Source!=IHr.SerNr) then begin TrHs=false; end;
	
		if (TrHs) then begin				
		
				//Џеремещение (StockMovVc) отображаетсЯ в ItemHistVc двумЯ записЯми списание/поступление
				//запись поступление не содержит источник, --> необходимо найти 
				//соответствующее поступление длЯ соответствующего списаниЯ, и дальше продолжить
				//рекурсивный поиск
				
				if (IHnext.FileName == "StockMovVc") then begin
					IHtemp.FileName = "StockMovVc";
					IHtemp.TransNr = IHnext.TransNr;
					IHtemp.Row = IHnext.Row;
					TrHs2 = true;
					While(LoopKey("FNTransNr",IHtemp,3,TrHs2)) begin
						if (IHtemp.Row != IHnext.Row or IHtemp.TransNr != IHnext.TransNr) then begin TrHs2=false; end;
						if (IHtemp.TransDate>endDate and IHtemp.Qty < 0 and TrHs2) then begin  //откат изменений, если они были позже endDate
							index = allLocations[IHtemp.Location];
							ReturnChangesBackToTheMotherRecord(IHtemp,index,remainQty,remainCost,remainCostCurncy);
						end;						
						if (IHtemp.Qty > 0 and TrHs2) then begin
							TrHs2 = false;
							IHnext = IHtemp;
						end;					
					end;
				end;
				
				GetRemainQty(IHnext,allLocations,endDate,remainQty,remainCost,remainCostCurncy);

		end;
	end;
	
	
	//чтобы избежать пролистываниЯ цикла по массиву,
	//вектор 	allLocations хранит индекс каждого склада
		index = allLocations[IHr.Location];
		
		remainQty[index] = remainQty[index] + IHr.RemQty;
		remainCost[index] = remainCost[index] + IHr.RemCostPrice;
		remainCostCurncy[index] = remainCostCurncy[index] + IHr.RemCostPriceCurncy;
		
		//откат изменений, не попадающих в период
		if (IHr.TransDate>endDate) then begin
			index = allLocations[IHr.Location];
			ReturnChangesBackToTheMotherRecord(IHr,index,remainQty,remainCost,remainCostCurncy);
		end;		


return;
end;



procedure ClearMyArray(var array val arr)
begin
integer i;

	for(i=0;i<arr.length;i=i+1) begin
		arr[i] = 0;
	end;
end;



procedure GetCostValuesFromIHistory(longint serNr, string artcode, var val cost, var val costCurncy,var val quantity, var string curncyCode)
begin
	record ItemHistVc IHr;
	boolean TrHs,testf;
	cost = 0;
	costCurncy = 0;
	quantity = 0;
	curncyCode = "";
	
	
	IHr.TransNr = serNr;
	IHr.FileName = "IVVc";
	TrHs = true;
	While(LoopKey("FNTransNr",IHr,2,TrHs)) begin
		testf = true;
		if (IHr.ArtCode != artcode) then begin testf = false; end;
		if (IHr.Qty > 0) then begin testf = false; end;
		if (IHr.TransNr != serNr or IHr.FileName != "IVVc") then begin TrHs=false; testf=false; end;
		if (testf) then begin
			cost = cost + IHr.TotCostPrice;
			costCurncy = costCurncy + IHr.TotCostPriceCurncy;
			quantity = quantity - IHr.Qty; //with "-" sign
			curncyCode = IHr.CurncyCode;
		end;
	end;  
end;





//отчет показывает кол-во оставшихсЯ товаров (среди возвращенных товаров)

global procedure StatusOfReturnedItemsRn(record RcVc RepSpec)		//Edit----------------------Dima  01.06.2016
begin
  record IVVc IVr,IV1r;
  row IVVc IVrw,IV1rw;
	record ItemHistVc IHr;
  longint count,totals,tick1,tick2;
  integer i,rw,rwcnt;
  date startDate,endDate;
  boolean TrHs,testf,TrHs2,testf2;
  boolean remainsFounded;
  string 20 location,invCurCode;
  string 255 tstr;
  string 200 prevArtCode, brand;
  string 10 okChar;
  val invCost, invCostCurncy, invQty;
  record LocationVc Locr;
  vector integer allLocations;
  vector string 100 getLocationByIndex;
  array val remainQty;
  array val remainCost;
  array val remainCostCurncy;
	longint curtick;
	
	curtick = getcurtick();
  
  count = 0;
  totals = 0;
  startDate = RepSpec.sStartDate;
  endDate = RepSpec.sEndDate;
  location = RepSpec.f3;
  
  okChar = UChr(10003);

  
  i=0;
  //индексы длЯ складов, чтобы избежать постоЯнного поиска в циклах
  While(LoopMain(Locr,1,true)) begin
		allLocations[Locr.Code] = i;
		getLocationByIndex[i] = Locr.Code;
		i = i + 1;
	end;

	  
  
  StartReportJob("‘татус возвращенных товаров");
    rw = 1;
  	HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  	Header(rw,tstr,1);rw=rw+1;
  	HTLocations(location,location,tstr);
  	Header(rw,tstr,1);
  	Header(rw,okChar & " - означает точное совпадение",0);
  EndHeader;
  
  
	StartFormat(15);
		Outstring(20,0,"‘ч/ф возврата",false);
		Outstring(60,0,"„ата",false);
		Outstring(100,0,"Љод товара",false);
		Outstring(160,0,"Ѓренд",false);
		Outstring(210,0,"‘клад",false);
		Outstring(275,0,"Љол-во",false);
		Outstring(330,0,"‘ебестоимость",false);
		Outstring(380,0,"‘ебестоимость в вал.",false);
		Outstring(440,0,"‚алюта",false);			
	EndFormat;
	Black_Divider(0,1);  
	


  
  IHr.FileName = "IVVc";
  IHr.TransDate = startDate;
  TrHs = true;
  
  While(LoopKey("FNTransDate",IHr,2,TrHs)) begin
	  testf = true;
		if (IHr.FileName!="IVVc") then begin TrHs = false; testf = false; end;
		if (IHr.TransDate > endDate) then begin TrHs = false; testf = false; end;
		if (IHr.StockAffectf == 0) then begin testf = false; end;
		if (IHr.Qty < 0) then begin testf = false; end;
		
		if (testf) then begin
		
			ClearMyArray(remainQty);ClearMyArray(remainCost);			
			ClearMyArray(remainCostCurncy);
			
			 
			GetRemainQty(IHr,allLocations,endDate,remainQty,remainCost,remainCostCurncy);
			brand = "";
			remainsFounded = false;
			
			for(i=0;i<remainQty.length;i=i+1) begin
			
				if (remainQty[i] > 0) then begin				
					if((nonblank(location) and (location==getLocationByIndex[i])) or blank(location)) then begin 
						
						remainsFounded = true;
						if (blank(brand)) then begin 
								brand = GetBrand(IHr.ArtCode); 
						end;
													
						StartFormat(15);
							EndFormat;							
							Outstring(20,"DblIVVc",IHr.TransNr,false);
							Outstring(60,0,IHr.TransDate,false);
							Outstring(100,"DblINVc",IHr.ArtCode,false);
							Outstring(160,0,brand,false);
							Outstring(200,0,getLocationByIndex[i],false); // ‘клад остатка, не сч/ф
							Outstring(275,0,remainQty[i],false);
							Outstring(330,0,remainCost[i],false);
							Outstring(380,0,remainCostCurncy[i],false);
							Outstring(440,0,IHr.CurncyCode,false);			
						EndFormat;
					end;				
				end;

			end;
			
			

			// получаем список возможных сч/фактур
			if (remainsFounded) then begin
						IV1r.SerNr = IHr.TransNr;
						if (ReadFirstMain(IV1r,1,true)) then begin
							for(i=0;i<MatRowCnt(IV1r);i=i+1) begin
								MatRowGet(IV1r,i,IV1rw);						
								if (IV1rw.stp==kInvoiceRowTypeNormal and IV1rw.ArtCode==IHr.ArtCode and IV1rw.Quant<0) then begin
									i = MatRowCnt(IV1r); //row with returned item was found
								end;
							end;	
							EndFormat;
							Outstring(30,0,"‘писок возможных сч/ф покупки:",false);
							Outstring(215,0,"Љлиент",false);
							Outstring(250,0, IV1r.CustCode,false);
							Outstring(300,0, IV1r.Addr0,false);
							EndFormat;						
						
							IVr.CustCode = IV1r.CustCode;
							TrHs2 = true;
							While(LoopKey("CustCode",IVr,1,TrHs2)) begin
								testf2 = true;
								if (IVr.CustCode != IV1r.CustCode) then begin TrHs2=false; testf2=false; end;
								if (IVr.InvDate > IV1r.InvDate) then begin testf2=false; end;
								if (testf2) then begin
									rwcnt = MatRowCnt(IVr);
									for(i=0;i<rwcnt;i=i+1) begin
										MatRowGet(IVr,i,IVrw);										
										if (IVrw.stp==kInvoiceRowTypeNormal and IVrw.ArtCode==IHr.ArtCode and IVrw.Quant>0) then begin
											i = rwcnt;
											GetCostValuesFromIHistory(IVr.SerNr,IVrw.ArtCode,invCost, invCostCurncy, invQty, invCurCode);
											if (IV1rw.Price==IVrw.Price) then begin
												Outstring(120,0,okChar,false);
											end;											
											Outstring(130,"DblIVVc",IVr.SerNr,false);
											Outstring(185,0,IVr.InvDate,false);
											Outstring(275,0,invQty,false);
											Outstring(330,0,invCost,false);
											Outstring(380,0,invCostCurncy,false);
											Outstring(440,0,invCurCode,false);												
										end;
									end;
								end;
							end;
							ResetLoop(IVr);
						end;
						EndFormat;
						Gray_Divider(0,1);			
			end;

			
			
		end; 
	end;  

 
  EndJob;
  
	LogProcTime("StatusOfReturnedItemsRn",getcurtick() - curtick);


  
  
end;  