//server-only
external procedure ExtractObj(string,var Integer,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function roundmode SetRoundModeD(Integer);
external procedure LogProcTime(string,longint);


function string 50 GetItemsBrand(string code, var vector string classifications)		//Edit----------------------Dima  04.06.2015
Begin
	record INVc INr;
	record DIVc DIr;
	integer pos;
	string 50 temp,result;
	
	INr.Code = code;
	
	if (nonblank(classifications[code])) then begin
		result = classifications[code];
	end else begin
		result = "";
									
		if(ReadFirstMain(INr,1,true)) then begin
				pos = 0;
			  ExtractObj(INr.DispGroups,pos,temp);
  			while (nonblank(temp)) begin		
  				DIr.Code = temp;
  				ReadFirstMain(DIr,1,true);
					if(DIr.CType=="BRAND") then begin
						classifications[INr.Code] = DIr.Code;
						result = DIr.Code;
					end;   	
  				ExtractObj(INr.DispGroups,pos,temp);
  			end;
			
		end;	
	end;
		
GetItemsBrand = result;
return;
end;


function string 50 GetItemClassification(string code, var vector string classifications)		//Edit----------------------Dima  08.06.2015
Begin
	record INVc INr;
	record DIVc DIr;
	integer pos;
	string 50 temp,result;
	string 50 nullClassification;
	
	nullClassification = "EmptyClassification";
	INr.Code = code;
	
	if (nonblank(classifications[code])) then begin
		result = classifications[code];
	end else begin
		result = nullClassification;
		classifications[INr.Code] = nullClassification;
									
		if(ReadFirstMain(INr,1,true)) then begin
					pos = 0;
			  	ExtractObj(INr.DispGroups,pos,temp);	
  				DIr.Code = temp;
  				if(ReadFirstMain(DIr,1,true)) then begin
						classifications[INr.Code] = DIr.Code;
						result = DIr.Code;
						//listOfClassifications[length] = result;
						//length = length + 1;
					end;		
					
					pos = 0;
					ExtractObj(INr.DispGroups,pos,temp);
					while(nonblank(temp))begin
						DIr.Code = temp;
						if(ReadFirstMain(DIr,1,true)) then begin
							if(DIr.CType=="BRAND")then begin
								classifications[INr.Code] = DIr.Code;
								result = DIr.Code;
							end;
						end;
						ExtractObj(INr.DispGroups,pos,temp);
					end;
						
		end;	
	end;
	
	
GetItemClassification = result;
return;
end;


function val GetPaymentSum(record IVVc IVr)
begin
	val sum,coef,tempVal;
	row IVVc IVrw;
	integer rwcnt,i;
	string 2 char;

	sum = 0;
	rwcnt = MatRowCnt(IVr);
	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(IVr,i,IVrw);
		char = Left(IVrw.PayMode,1);
		if ((IVrw.stp==kInvoiceRowTypeCashPayment) or (IVrw.stp==kInvoiceRowTypeCreditCardPayment and (char=="T" or char=="B")) or (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment)) then begin
			tempVal = IVrw.Sum;
			if (IVrw.CurncyCode != IVr.CurncyCode) then begin	//for cash currency
					CurValToOtherCur(IVr.TransDate,IVrw.CurncyCode,IVrw.Sum,IVr.CurncyCode,tempVal,DefaultCurRoundOff);
			end;
			sum = sum + tempVal;
		end;
	end;
	
	GetPaymentSum = sum;
return;
end;

function val GetPrePaymentSum(record IVVc IVr,date startDate)
begin
	val coef,sum;
	row IVVc IVrw;
	integer rwcnt,i;
	record ARPayHistVc ARPayHistr;

	sum = 0;
	rwcnt = MatRowCnt(IVr);
	for(i=0;i<rwcnt;i=i+1) begin
		MatRowGet(IVr,i,IVrw);
		if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
				ARPayHistr.CUPNr = IVrw.CUPNr;
				ARPayHistr.FileName = "IPVc";
				if (ReadFirstMain(ARPayHistr,2,true)) then begin
					if (ARPayHistr.TransDate>=startDate) then begin
							sum = sum + IVrw.Sum;							
					end;
				end;
		end;
	end;
	//coef = sum/IVr.Sum4;
	
	GetPrePaymentSum = sum;
return;
end;


global
procedure CashInOutByClassificationRn(record RcVc RepSpec)			//Edit----------------------Dima  04.06.2015
begin

	record DIVc DIr;
	record BaseCurBlock BCBb;
	vector val cashIn,cashOut;
	date sDate,eDate;
	record IVVc IVr;
	row IVVc IVrw;
	record IPVc IPr;
	row IPVc IPrw;
	record ORVc ORr;
	row ORVc ORrw;
	boolean TrHs,testf;
	integer i,j,rwcnt,rwcnt2,length;
	string 50 classification,temp,currency;
	//array string 50 brands;
	vector string 50 items;// items[INr.Code] = itemses' classification
	val paymentCoef,prepaymentCoef,curncyCoef;
	val paymentSum,prepaymentSum,totalIn,totalOut;
	string 50 nullClassification;
	array string 50 listOfClassifications;
	longint curtick;
	
	curtick = getcurtick();

    BlockLoad(BCBb);
    if (NonBlank(RepSpec.f2)) then begin
      currency = RepSpec.f2;
    end else begin
      currency = BCBb.BaseCur1;
    end;
		
    
    StartReportNoHeaderJob(USetStr(35014));
    
    if blankdate(RepSpec.sStartDate) then begin
        StartFormat(15);
        OutString(0,0,USetStr(31088),false);
        EndFormat;
        goto LBreak_CashInOutByClassificationRn;
     end;

		nullClassification = "EmptyClassification";	
		i=0;
		while(LoopMain(DIr,1,true)) begin
			listOfClassifications[i] = DIr.Code;
			i=i+1;
		end;
		length = i;	
			
    sDate = RepSpec.sStartDate;
    eDate = RepSpec.sEndDate; 
    
		TrHs=true;
    IVr.TransDate=sDate;
    While(LoopKey("TransDate",IVr,1,TrHs)) begin
  		testf = true;
  		prepaymentCoef = 0;
  		
  		if (IVr.TransDate>eDate) then begin  TrHs=false; testf=false; end; 
			if (IVr.OKFlag==0 or IVr.Invalid==1) then begin testf=false;end;
			if (nonblank(RepSpec.f1) and (RepSpec.f1 != IVr.Location)) then begin testf=false; end;
  		
  		if (testf) then begin
  			testf = false;
				rwcnt = MatRowCnt(IVr);				
				for(i=rwcnt-1;i>=0;i=i-1) begin
					MatRowGet(IVr,i,IVrw);
					if (IVrw.stp==kInvoiceRowTypeCashPayment or IVrw.stp==kInvoiceRowTypeCreditCardPayment or IVrw.stp==kInvoiceRowTypeGiftVoucherPayment or IVrw.stp==kInvoiceRowTypePrepayment) then begin 
						testf = true;							
						i=-1;
					end;
				 end;
			 end;		
			
			if (testf) then begin
				curncyCoef = 1;
				if (currency != IVr.CurncyCode) then begin
					CurValToOtherCur(IVr.TransDate,IVr.CurncyCode,1,currency,curncyCoef,DefaultCurRoundOff);
				end;	
				
				paymentSum = GetPaymentSum(IVr);
				prepaymentSum = GetPrePaymentSum(IVr,sDate);
				paymentCoef = 0;
				if (paymentSum + prepaymentSum > IVr.Sum4) then begin						
					paymentCoef = (IVr.Sum4 - prepaymentSum)/IVr.Sum4;
				end else begin
					paymentCoef = paymentSum/IVr.Sum4;
				end;
				prepaymentCoef = prepaymentSum/IVr.Sum4;
				
				for(i=0;i<rwcnt;i=i+1) begin	
					MatRowGet(IVr,i,IVrw);
					if (IVrw.stp==kInvoiceRowTypeNormal) then begin
						classification = GetItemClassification(IVrw.ArtCode,items);
						if (IVrw.Quant>0) then begin
							cashIn[classification] = cashIn[classification] + (IVrw.Sum*paymentCoef)*curncyCoef;
						end else begin 
							cashOut[classification] = cashOut[classification] + (IVrw.Sum*paymentCoef)*curncyCoef;
						end;									
					end;						
				end;
			end;
		end;  
		
		TrHs = true;
    IPr.TransDate=sDate;
    While(LoopKey("TransDate",IPr,1,TrHs)) begin  
    	testf = true;
    
    	if (IPr.TransDate>eDate) then begin  TrHs=false; testf=false; end;
    	if (IPr.OKFlag==0) then begin testf=false; end;
    	
    	if (testf) then begin
				rwcnt = MatRowCnt(IPr);
				for(i=0;i<rwcnt;i=i+1) begin
					MatRowGet(IPr,i,IPrw);
					if (nonblank(IPrw.CUPNr)) then begin	//Collect prepayments
						ORr.SerNr = IPrw.OrderNr;							
						if (ReadFirstMain(ORr,1,true)) then begin
							if (blank(RepSpec.f1) or (RepSpec.f1 == ORr.Location)) then begin 
								if (IPrw.RecCurncy==ORr.CurncyCode) then begin
									curncyCoef = 1;
									if (currency != ORr.CurncyCode) then begin
										CurValToOtherCur(ORr.OrdDate,ORr.CurncyCode,1,currency,curncyCoef,DefaultCurRoundOff);
									end;
								
									prepaymentCoef = IPrw.RecVal/ORr.Sum4;
									rwcnt2 = MatRowCnt(ORr);
									for(j=0;j<rwcnt2;j=j+1) begin
											MatRowGet(ORr,j,ORrw);
											classification = GetItemClassification(ORrw.ArtCode,items);
											cashIn[classification] = cashIn[classification] +ORrw.Sum*prepaymentCoef*curncyCoef;
									end;
								end;
							end;	
						end;	
					end;
					if (IPrw.InvoiceNr>-1) then begin	//Collect payments
						IVr.SerNr = IPrw.InvoiceNr;
						if (ReadFirstMain(IVr,1,true)) then begin
							if (blank(RepSpec.f1) or (RepSpec.f1 == IVr.Location)) then begin 				
								if (IPrw.InvCurncy==IVr.CurncyCode and IVr.OKFlag>0 and IVr.Invalid==0) then begin
									curncyCoef = 1;
									if (currency != IVr.CurncyCode) then begin
										CurValToOtherCur(IVr.TransDate,IVr.CurncyCode,1,currency,curncyCoef,DefaultCurRoundOff);
									end;
									if(IPrw.RecCurncy!=IVr.CurncyCode)then begin
										CurValToOtherCur(IVr.TransDate,IPrw.RecCurncy,IPrw.RecVal,IVr.CurncyCode,IPrw.RecVal,DefaultCurRoundOff);
									end;		
									paymentCoef = IPrw.RecVal/IVr.Sum4;
									rwcnt2 = MatRowCnt(IVr);									
									for(j=0;j<rwcnt2;j=j+1) begin	
										MatRowGet(IVr,j,IVrw);
										if (IVrw.stp==kInvoiceRowTypeNormal) then begin
											classification = GetItemClassification(IVrw.ArtCode,items);
											if (IVrw.Quant>0) then begin
												cashIn[classification] = cashIn[classification] +round(IVrw.Sum*paymentCoef*curncyCoef,SetRoundModeD(0));
											end else begin 
												cashOut[classification] = cashOut[classification] +IVrw.Sum*paymentCoef*curncyCoef;
											end;			
										end;						
									end;									
								end;
							end;
						end;	
					end;
				end;
			end;    
    end;

  	StartFormat(15);
      OutString(0,0,USetStr(35014),false);
    EndFormat;
    
      OutString(0,0,USetStr(31102),false);
      OutString(100,0,RepSpec.sStartDate & ":" & RepSpec.sEndDate,false);
    endformat;
      OutString(0,0,USetStr(31103) & ":",false);
      if(nonblank(RepSpec.f1))then begin              
        OutString(100,0,RepSpec.f1,false);
    		endformat;
      end else begin
        OutString(100,0,USetStr(31104),false);
    		endformat;
      end;
      OutString(0,0,USetStr(16018) & ":",false);
      OutString(100,0,currency,false);
    	endformat;
  	endformat;
					
  		totalIn = 0;
  		totalOut = 0;
  		SortStringArray(listOfClassifications);
  		
  		OutString(20,0,"",false);
  		OutString(200,0,USetStr(35013),false); //cash in
  		OutString(300,0,USetStr(35012),false);// cash out
		endformat;		

		for(i=0;i<length;i=i+1) begin
			if (cashIn[listOfClassifications[i]]>0 or cashOut[listOfClassifications[i]]<0) then begin
				StartFormat(15);
				 	DIr.Code = listOfClassifications[i];
				 	ReadFirstMain(DIr,1,true);
				 	OutString(20,0,DIr.Name,false);
					OutString(200,0,cashIn[listOfClassifications[i]],false);
					OutString(300,0,cashOut[listOfClassifications[i]],false);
				EndFormat;
			end;
			totalIn = totalIn + cashIn[listOfClassifications[i]];
			totalOut = totalOut + cashOut[listOfClassifications[i]];	
		end;
		
		if (cashIn[nullClassification]>0 or cashOut[nullClassification]<0) then begin
				 	OutString(20,0,USetStr(35015),false);
					OutString(200,0,cashIn[nullClassification],false);
					OutString(300,0,cashOut[nullClassification],false);
					totalIn = totalIn + cashIn[nullClassification];
					totalOut = totalOut + cashOut[nullClassification];					
		end;
			
		EndFormat;
		Black_Divider(0,1);			
		OutString(20,0,USetStr(31211),false);
		OutString(200,0,totalIn,false);
		OutString(300,0,totalOut,false);		
		EndFormat;
		
		LBreak_CashInOutByClassificationRn:;
		EndJob;
	LogProcTime("CashInOutByClassificationRn",getcurtick() - curtick);	
  
end;  





