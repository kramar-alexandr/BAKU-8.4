external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure HT2Per(Date, Date , var string);
external procedure LogProcTime(string,longint);
remote function boolean CompanyIsJWLikeCompany(Integer);

global
procedure NewGiftCertRn(record RcVc RepSpec)
begin
  boolean testf,TrHs,sold,received;
  string 255 tstr;
  date sdate,edate,solddate,bd;
  integer rw;
  record GCVc GCr;
  record GCSVc GCSr;
  record GCRVc GCRr;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record RestAccVc RestAccr;
  string 20 fc,lc,custcode;
  string 10 floc,lloc,location;
  string 60 custname;
  val totam,am,totnet,net,remn,totremn;
  array longint aser;
  array val aremn;
  array val anet;
  array val aamount;
  array string 20 acucode;
  array string 60 acuname;
  array date asolddate;
  array date arcvdate;
  array date aissdate;
  array integer astatus;
  longint maxp,i,j,sn;
  Integer ivi,rwcnt;
  row IVVc IVrw;
  val vatv,t1;
	////////////////////
	integer comp,curcomp;
	boolean okflag;	
	longint curtick;
	array val totalSum;
	array string 255 aGCRrSerNr, aGCSrSerNr, aTypePayMode, aGCSrBar, aCurrency;
	record GCTypeVc GCTr;
  
  sdate = RepSpec.sStartDate;
  edate = RepSpec.sEndDate;
	
	curcomp = CurrentCompany;
	
	startreportnoheaderjob(UsetStr(12720));

  SetRepCol(2,110);
  SetRepCol(3,160);
  SetRepCol(4,170);
  SetRepCol(5,235);
  SetRepCol(6,360);
  
  StartFormat(15);
		OutString(0,0,USetStr(12731),false);
		OutString(1,0,USetStr(36437),false); ////// 
		OutString(2,0,USetStr(12732),true);
		OutString(3,0,USetStr(12741),true);
		OutString(4,0,USetStr(12724),false);
		OutString(5,0,USetStr(12734),false);
		OutString(6,0,USetStr(36430),false);
		OutString(410,0,USetStr(36431),false);
		OutString(420,0,USetStr(36432),false);
		OutString(430,0,USetStr(36433),false);
		OutString(440,0,USetStr(36434),false);
		OutString(450,0,USetStr(36435),false);
		OutString(460,0,USetStr(36436),false);
		OutString(470,0,USetStr(36438),false); ////// 
  EndFormat;
  Black_Divider(0,1);
  
  GCr.TransDate=sdate;
  TrHs=true;
  maxp=0;
  While (LoopKey("TransDate",GCr,1,TrHs)) begin
    testf=true;
    if (GCr.TransDate>edate) then begin
      TrHs=false;testf = false;
    end;
    if (GCr.OKFlag!=1) then begin
      testf = false;
    end;
    
    if (testf) then begin
      GCSr.SerNr = GCr.SerNr;
      sold = ReadFirstMain(GCSr,1,true);  
      GCRr.GCSSerNr = GCr.SerNr;
      received = ReadFirstKey("GCSSerNr",GCRr,1,true);

			if (sold) then begin
        aGCSrSerNr[i] = GCSr.InvSerNr;
				aGCSrBar[i] = GCSr.BarCode;
			end else begin	
				aGCSrSerNr[i] = "";
				aGCSrBar[i] = "";
      end; 
			
			if (received) then begin
        aGCRrSerNr[i] = GCRr.InvSerNr;
			end else begin	
				aGCRrSerNr[i] = "";
      end; 
			
			aTypePayMode[i] = "";
			if(nonblank(GCr.Type)) then begin
				GCTr.Code = GCr.Type;
				if(ReadFirstMain(GCTr,1,true)) then begin
					aTypePayMode[i] = GCTr.PayMode;
				end;
			end;
			
			aCurrency[i] = "";
			totalSum[i] = 0;
      if (sold) then begin
        switch (GCSr.FileName) begin
          case "IVVc":
            IVr.SerNr = GCSr.InvSerNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              custcode = IVr.CustCode;
              custName = IVr.Addr0;
              location = IVr.Location; 
              solddate = IVr.InvDate;
							totalSum[i] = IVr.Sum4;
							aCurrency[i] = IVr.CurncyCode;
            end else begin
              // custcode = USetStr(12733);
              // custName = USetStr(12733);
              // location = USetStr(12733); 
							// totalSum[i] = IVr.Sum4;
							// aCurrency[i] = IVr.CurncyCode;
							okflag = false;
							for(comp=1;comp<=34;comp=comp+1) begin
								if(CompanyIsJWLikeCompany(comp))then begin
									SetCompany(comp,false);
									IVr.SerNr = GCSr.InvSerNr;
									
									
									if(ReadFirstMain(IVr,1,true))then begin
										for(i=0;i<MatRowCnt(IVr);i=i+1) begin
											MatRowGet(IVr,i,IVrw);
											if(IVrw.stp==kInvoiceRowTypeGiftVoucherSold AND GCSr.SerNr==IVrw.GCNr) then begin
												//outstring(0,0,IVr.Location,false);
												okflag = true;
												goto ENDLOOPFORCOMP_NewGiftCertRn;
											end;	
										end;
									end;
									
								end;
							end;	
							
							ENDLOOPFORCOMP_NewGiftCertRn:;
							SetCompany(curcomp,false);
							
							if(okflag)then begin
								custcode = IVr.CustCode;
								custName = IVr.Addr0;
								location = IVr.Location; 
								solddate = IVr.InvDate;
								totalSum[i] = IVr.Sum4;
								aCurrency[i] = IVr.CurncyCode;
							end else begin
								custcode = USetStr(12733);
								custName = USetStr(12733);
								location = USetStr(12733); 
								totalSum[i] = IVr.Sum4;
								aCurrency[i] = IVr.CurncyCode;
							end;

            end;     
						
						
						
          case "IVCashVc":
            IVCashr.SerNr = GCSr.InvSerNr;
            if (ReadFirstMain(IVCashr,1,true)) then begin
              custcode = IVCashr.CustCode;
              custName = IVCashr.Addr0;
              location = IVCashr.Location; 
              solddate = IVCashr.InvDate;
            end else begin
              custcode = USetStr(12733);
              custName = USetStr(12733);
              location = USetStr(12733); 
            end;     
          case "RestAccVc":
            RestAccr.SerNr = GCSr.InvSerNr;
            if (ReadFirstMain(RestAccr,1,true)) then begin
              custcode = RestAccr.CustCode;
              custName = RestAccr.Comment;
              location = RestAccr.Location; 
              solddate = RestAccr.TransDate;
            end else begin
              custcode = USetStr(12733);
              custName = USetStr(12733);
              location = USetStr(12733); 
            end;     
          otherwise
            IVr.SerNr = GCSr.InvSerNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              custcode = IVr.CustCode;
              custName = IVr.Addr0;
              location = IVr.Location; 
              solddate = IVr.InvDate;
							totalSum[i] = IVr.Sum4;
							aCurrency[i] = IVr.CurncyCode;
            end else begin
              custcode = USetStr(12733);
              custName = USetStr(12733);
              location = USetStr(12733); 
							totalSum[i] = 0;
							aCurrency[i] = IVr.CurncyCode;
            end;     
        end;        
      end else begin
        solddate = bd;
      end;  
    end;
    if (testf) then begin
      aser[maxp] = GCr.SerNr;
      aamount[maxp] = GCr.Amount;
      astatus[maxp] = 0; 
      if (sold) then begin
        astatus[maxp] = 1; 
        acucode[maxp] = custcode; 
        acuname[maxp] = custname;
        asolddate[maxp] = solddate;
        arcvdate[maxp] = GCRr.TransDate;
        aissdate[maxp] = GCr.TransDate;
        aremn[maxp] = GCSr.Balance;
				
        rwcnt = MatRowCnt(IVr);
        for (ivi=0;ivi<rwcnt;ivi=ivi+1) begin
          MatRowGet(IVr,ivi,IVrw);
          if (IVrw.GCNr==GCr.SerNr) then begin
            MulVATIV(IVrw.VATCode,IVrw.Sum,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
            anet[maxp] = GCr.Amount - vatv;
            i = rwcnt;
          end;
        end;
      end else begin
        astatus[maxp]=0; 
        acucode[maxp]=""; 
        acuname[maxp]="";
        arcvdate[maxp] = GCRr.TransDate;
        aissdate[maxp] = GCr.TransDate;
				asolddate[maxp] = solddate;
      end;
      if (received) then begin
        astatus[maxp] = 2; 
      end;  
      maxp = maxp + 1;
    end;
  end;
  
  for (i=0;i<maxp;i=i+1) begin
    StartFormat(15);
    OutLongInt(0,0,aser[i],false);
		OutString(1,0,aGCSrBar[i],false);
    OutVal(2,0,aamount[i],M4Val,true);
    OutVal(3,0,aremn[i],M4Val,true);
    OutString(4,"DblCUVc",acucode[i],false);
    OutString(5,0,Left(acuname[i],15),false);
		OutDate(6,0,aTypePayMode[i],true);
		
    OutDate(410,0,aissdate[i],true);
    OutDate(420,0,asolddate[i],true);
		
		Outstring(430,0,aGCSrSerNr[i],false);
    OutDate(440,0,arcvdate[i],true);
		Outstring(450,0,aGCRrSerNr[i],false);
		Outstring(460,0,totalSum[i],false);
		OutString(470,0,aCurrency[i],false);
		
		
    totam = totam + aamount[i];
    totnet = totnet + anet[i];
    totremn = totremn + aremn[i];
    EndFormat;
		
  end;
  Black_Divider(0,1);
  StartFormat(15);
  OutString(0,0,UsetStr(12737),false);
  OutVal(2,0,totam,M4Val,true);
  OutVal(3,0,totremn,M4Val,true);
  EndFormat;

  EndJob;
  return;
end;