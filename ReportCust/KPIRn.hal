//server-only
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function string 255 MonthName(Date);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure XmlXlsxWorkBegin(string,string);
external procedure CreateSheetsXLSX(integer,array string,string,integer,boolean);
external procedure EndSheet(integer,string,integer);
external procedure SetSheetsCols(integer,array val,array integer,string);
external procedure BeginSheetData(integer,string);
external procedure EndSheetData(integer,string);
external procedure BeginRow(integer,string,integer,integer,val);
external procedure EndRow(integer,string,var integer);
external procedure StringCell(integer,string,var integer,integer,integer,string,var array string,var integer,var integer);
external procedure NumericCell(integer,string,var integer,integer,integer,val);
external procedure EmptyCell(integer,string,var integer,integer,integer,integer);
external procedure MergeCells(integer,string,array string,integer);
external procedure FillSharedStrings(string,array string,integer,integer,array string);
external procedure ConvertToXLSX(string,boolean);
external procedure LogProcTime(string,longint);

SetLangMode(LangRussian,"RUS",0);

procedure printstrings(string daymonth,val turnover,val checkqty,val itemsqty,boolean monthdayf,
						integer sheetnum,string fileToSave,var integer rownum,
						var array string SharedStrings,var integer numOfUniqueSharedStrings,
						var integer numOfSharedStrings)
begin
	integer intMonth;
	date tmpdate;
	string 20 tmpdaymonth;
	integer colnum,style,qtyOfEmpStr;
	
	if nonblank(daymonth) then begin
		tmpdaymonth = daymonth;
		intMonth = StringToInt(tmpdaymonth);
		if (monthdayf) then begin
			// for total
			tmpdate = StringToDate("1/" & intMonth & "/2000");
			tmpdaymonth = MonthName(tmpdate);
			style = 4;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,tmpdaymonth,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 7;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover);
				style = 8;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,checkqty);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,itemsqty);
				style = 7;
				if (checkqty==0) then begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
				end else begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover/checkqty);
				end;
				if (itemsqty==0) then begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
				end else begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover/itemsqty);
				end;
				style = 15;
				if (checkqty==0) then begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
				end else begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,itemsqty/checkqty);
				end;
			EndRow(sheetnum,fileToSave,rownum);
		end else begin
			style = 18;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,intMonth);
				style = 16;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover);
				style = 17;
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,checkqty);
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,itemsqty);
				style = 13;
				if (checkqty==0) then begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
				end else begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover/checkqty);
				end;
				if (itemsqty==0) then begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
				end else begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover/itemsqty);
				end;
				if (checkqty==0) then begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
				end else begin
					NumericCell(sheetnum,fileToSave,colnum,rownum,style,itemsqty/checkqty);
				end;
				style = 6;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
		end;
	end else begin
		style = 4;
		colnum = 2;
		BeginRow(sheetnum,fileToSave,rownum,0,blankval);
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			style = 13;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover);
			style = 14;
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,checkqty);
			NumericCell(sheetnum,fileToSave,colnum,rownum,style,itemsqty);
			style = 13;
			if (checkqty==0) then begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
			end else begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover/checkqty);
			end;
			if (itemsqty==0) then begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
			end else begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,turnover/itemsqty);
			end;
			if (checkqty==0) then begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,0);
			end else begin
				NumericCell(sheetnum,fileToSave,colnum,rownum,style,itemsqty/checkqty);
			end;
			style = 6;
			qtyOfEmpStr = 1;
			EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		EndRow(sheetnum,fileToSave,rownum);
	end;
	return;
end;

global 
procedure KPIRn(record RcVc RepSpec,var area areatofile)
begin
	integer pos;
	date curdate,frdate,todate,tempdate;
	val turnover,checkqty,itemsqty;
	array val totturnover,totcheckqty,totitemsqty;
	integer i,rwcnt,prevday,prevmonth,curday,curmonth,tempday,year,sign;
	record BaseCurBlock bascur;
	record IVVc IVr;
	row IVVc IVrw;
	Boolean TrHs,testf;
	val fr,to1,to2,br1,br2;
	string 20 curncy;
	
	array string 50 sheetNames;
	array val sheetColls;
	array string 21 mergeCell;
	string 255 fileToSave;
	integer qtyOfSheets,sheetnum,rownum,colnum,style,qtyOfEmpStr;
	array string 100 SharedStrings;
	integer numOfUniqueSharedStrings,numOfSharedStrings,qtyMergeCell;
	string 6 reportName;
  array string 255 mas;
  array integer lvlArray;
	longint curtick;
	
	curtick = getcurtick();
	setexportcodepage("UTF8");
	
	reportName = "KPIRn";
	if(windowsmode==1)then begin
		fileToSave = "tmpxlsx.xlsx";
	end else begin
		fileToSave = "/tmpxlsx.xlsx";
	end;
	deletefolder(Left(fileToSave,(len(fileToSave) - 5)));
	sheetNames[qtyOfSheets] = "Отчет за " & RepSpec.f1 & " год";
	qtyOfSheets = qtyOfSheets + 1;
	for (i=1;i<13;i=i+1) begin
		sheetNames[qtyOfSheets] = MonthName(StringToDate("1/" & i & "/2000"));
		qtyOfSheets = qtyOfSheets + 1;
	end;
	sheetColls[0] = 12.43;
	sheetColls[1] = 10.57;
	sheetColls[2] = 22.28;
	sheetColls[3] = 22;
	sheetColls[4] = 22;
	sheetColls[5] = 22;
	sheetColls[6] = 22;
	sheetColls[7] = 22;
	qtyMergeCell = 1;
	mergeCell[0] = "B2:C2";
	
	numOfUniqueSharedStrings = 0;
	numOfSharedStrings = 0;
	XmlXlsxWorkBegin(fileToSave,reportName);
	CreateSheetsXLSX(qtyOfSheets,sheetNames,fileToSave,0,false);
	sheetnum = 1;
	
	BlockLoad(bascur);
	
	year = StringToInt(RepSpec.f1);
	frdate = StringToDate("1/1/" & year);
	todate = StringToDate("31/12/" & year);
	
	turnover = 0;
	checkqty = 0;
	itemsqty = 0;
	
	curdate = frdate;
	while (curdate<=todate) begin
		curday = GetDay(curdate);
		curmonth = GetMonth(curdate);
		if (prevday==0) then begin
			sheetnum = sheetnum + 1;
			SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
			BeginSheetData(sheetnum,fileToSave);
			rownum = 1;
			style = 19;
			colnum = 2;
			rownum = rownum + 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,MonthName(curdate),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 20;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			style = 1;
			colnum = 2;
			rownum = rownum + 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"День",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Оборот",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Чеков",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Изделий",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Цена Чека",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Цена Изделия",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Изделий в Чеке",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 12;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			style = 4;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 5;
				qtyOfEmpStr = 6;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 6;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			prevday = curday;
		end;
		if (prevmonth==0) then begin
			prevmonth = curmonth;
		end;
		if (curmonth!=prevmonth) then begin
			printstrings(prevday,turnover,checkqty,itemsqty,false,sheetnum,fileToSave,rownum,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			printstrings("",totturnover[prevmonth],totcheckqty[prevmonth],totitemsqty[prevmonth],false,sheetnum,fileToSave,rownum,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			turnover = 0;
			checkqty = 0;
			itemsqty = 0;
			style = 9;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 10;
				qtyOfEmpStr = 6;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 11;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			EndSheetData(sheetnum,fileToSave);
			MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
			EndSheet(sheetnum,fileToSave,0);
			sheetnum = sheetnum + 1;
			SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
			BeginSheetData(sheetnum,fileToSave);
			rownum = 1;
			style = 19;
			colnum = 2;
			rownum = rownum + 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,MonthName(curdate),SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 20;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			style = 1;
			colnum = 2;
			rownum = rownum + 1;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"День",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 2;
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Оборот",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Чеков",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Изделий",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Цена Чека",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Цена Изделия",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Изделий в Чеке",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
				style = 12;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
			style = 4;
			colnum = 2;
			BeginRow(sheetnum,fileToSave,rownum,0,blankval);
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 5;
				qtyOfEmpStr = 6;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
				style = 6;
				qtyOfEmpStr = 1;
				EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
			EndRow(sheetnum,fileToSave,rownum);
		end;
		if (curmonth==prevmonth and curday!=prevday) then begin
			printstrings(prevday,turnover,checkqty,itemsqty,false,sheetnum,fileToSave,rownum,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
			turnover = 0;
			checkqty = 0;
			itemsqty = 0;
		end;
		
		IVr.InvDate = curdate;
		TrHs = true;
		while (LoopKey("InvDate",IVr,1,TrHs)) begin
			testf = true;
			if (IVr.OKFlag!=1 or IVr.Invalid!=0) then begin testf = false; end;
			if (IVr.InvDate!=curdate) then begin TrHs = false; testf = false; end;
			if (testf) then begin
				sign = 1;
				if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
					sign = -1;
				end;
				fr = 1;
				to1 = 1;
				if (IVr.CurncyCode!=bascur.BaseCur1) then begin
					if (IVr.FrRate==0 or IVr.ToRateB1==0) then begin
						curncy = IVr.CurncyCode;
						GetFullCurncyRate(curncy,IVr.TransDate,fr,to1,to2,br1,br2);
						if (fr==0 or to1==0) then begin
							fr = 1;
							to1 = 1;
						end;
					end else begin
						fr = IVr.FrRate;
						to1 = IVr.ToRateB1;
					end; 
				end;
				checkqty = checkqty + 1;
				totcheckqty[curmonth] = totcheckqty[curmonth] + 1;
				rwcnt = MatRowCnt(IVr);
				for (i=0;i<rwcnt;i=i+1) begin
					MatRowGet(IVr,i,IVrw);
					if (NonBlank(IVrw.ArtCode)) then begin
						turnover = turnover + (IVrw.Sum/fr*to1)*sign;
						totturnover[curmonth] = totturnover[curmonth] + (IVrw.Sum/fr*to1)*sign;
						itemsqty = itemsqty + IVrw.Quant*sign;
						totitemsqty[curmonth] = totitemsqty[curmonth] + IVrw.Quant*sign;
					end;
				end;
			end;
		end;
		RESETLOOP(IVr);
		
		prevday = curday;
		prevmonth = curmonth;
		curdate = addday(curdate,1);
	end;

	if (turnover!=0) then begin
		printstrings(prevday,turnover,checkqty,itemsqty,false,sheetnum,fileToSave,rownum,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
	end;
	printstrings("",totturnover[prevmonth],totcheckqty[prevmonth],totitemsqty[prevmonth],false,sheetnum,fileToSave,rownum,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
	style = 9;
	colnum = 2;
	BeginRow(sheetnum,fileToSave,rownum,0,blankval);
		qtyOfEmpStr = 1;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		style = 10;
		qtyOfEmpStr = 6;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		style = 11;
		qtyOfEmpStr = 1;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
	EndRow(sheetnum,fileToSave,rownum);
	EndSheetData(sheetnum,fileToSave);
	MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
	EndSheet(sheetnum,fileToSave,0);
	sheetnum = 1;
	SetSheetsCols(sheetnum,sheetColls,lvlArray,fileToSave);
	BeginSheetData(sheetnum,fileToSave);
	rownum = 1;
	style = 19;
	colnum = 2;
	rownum = rownum + 1;
	BeginRow(sheetnum,fileToSave,rownum,0,blankval);
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"КПД за год",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		style = 20;
		qtyOfEmpStr = 1;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
	EndRow(sheetnum,fileToSave,rownum);
	style = 1;
	colnum = 2;
	rownum = rownum + 1;
	BeginRow(sheetnum,fileToSave,rownum,0,blankval);
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"Месяц",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		style = 2;
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"Оборот",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Чеков",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Изделий",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"Цена Чека",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"Цена Изделия",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
		style = 3;
		StringCell(sheetnum,fileToSave,colnum,rownum,style,"Кол. Изделий в Чеке",SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
	EndRow(sheetnum,fileToSave,rownum);
	style = 4;
	colnum = 2;
	BeginRow(sheetnum,fileToSave,rownum,0,blankval);
		qtyOfEmpStr = 1;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		style = 5;
		qtyOfEmpStr = 5;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		style = 6;
		qtyOfEmpStr = 1;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
	EndRow(sheetnum,fileToSave,rownum);
	for (i=1;i<13;i=i+1) begin
		printstrings(i,totturnover[i],totcheckqty[i],totitemsqty[i],true,sheetnum,fileToSave,rownum,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings);
	end;
	style = 9;
	colnum = 2;
	BeginRow(sheetnum,fileToSave,rownum,0,blankval);
		qtyOfEmpStr = 1;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		style = 10;
		qtyOfEmpStr = 5;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
		style = 11;
		qtyOfEmpStr = 1;
		EmptyCell(sheetnum,fileToSave,colnum,rownum,style,qtyOfEmpStr);
	EndRow(sheetnum,fileToSave,rownum);
	EndSheetData(sheetnum,fileToSave);
	MergeCells(sheetnum,fileToSave,mergeCell,qtyMergeCell);
	EndSheet(sheetnum,fileToSave,0);
	FillSharedStrings(fileToSave,SharedStrings,numOfUniqueSharedStrings,numOfSharedStrings,mas);
	ConvertToXLSX(fileToSave,false);
	MilliSleep(2000);
	addfiletoarea(fileToSave,areatofile,false);
	delete_file(fileToSave);
	LogProcTime("KPIRn",getcurtick() - curtick);
return;
end;








procedure printstringstest(string daymonth,val turnover,val checkqty,val itemsqty,boolean monthdayf)
begin
 integer pos;
  
  pos = 0;
	startformat(15);
		OutString(pos,0,daymonth,false);
		if (turnover==0) then begin
		  OutString(pos+=50,0,0,false);
		end else begin
		  OutString(pos+=50,0,turnover,false);
		end;
		if (checkqty==0) then begin
		  OutString(pos+=50,0,0,false);
		end else begin
		  OutString(pos+=50,0,checkqty,false);
		end;
		if (itemsqty==0) then begin
		  OutString(pos+=50,0,0,false);
		end else begin
		  OutString(pos+=50,0,itemsqty,false);
		end;
		if (checkqty==0) then begin
		  OutString(pos+=50,0,0,false);
		end else begin
		  OutString(pos+=50,0,turnover/checkqty,false);
		end;
		if (itemsqty==0) then begin
		  OutString(pos+=50,0,0,false);
		end else begin
		  OutString(pos+=50,0,turnover/itemsqty,false);
		end;
		if (checkqty==0) then begin
		  OutString(pos+=50,0,0,false);
		end else begin
		  OutString(pos+=50,0,itemsqty/checkqty,false);
		end;
	endformat;

  return;
end;


global 
procedure KPITestRn(record RcVc RepSpec)
begin
  integer pos;
  date curdate,frdate,todate,tempdate;
  val turnover,checkqty,itemsqty;
  array val totturnover,totcheckqty,totitemsqty;
  integer i,rwcnt,prevday,prevmonth,curday,curmonth,tempday,year,sign;
  record BaseCurBlock bascur;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs,testf;
  val fr,to1,to2,br1,br2;
  string 20 curncy;

  //RepSpec.Media = mtFile;
	StartReportNoheaderJob("KPI");
	
	BlockLoad(bascur);
	pos = 0;
	startformat(15);
		OutString(pos,0,"Месяц/день",false);
		OutString(pos+=50,0,"Оборот",false);
		OutString(pos+=50,0,"Кол.Чеков",false);
		OutString(pos+=50,0,"Кол.Изделий",false);
		OutString(pos+=50,0,"Цена чека",false);
		OutString(pos+=50,0,"Цена изд.",false);
		OutString(pos+=50,0,"Кол.изд.в чеке",false);
	endformat;
	
	year = StringToInt(RepSpec.f1);
	frdate = StringToDate("1/1/" & year);
	todate = StringToDate("31/12/" & year);
	
	turnover = 0;
  checkqty = 0;
  itemsqty = 0;
	
  curdate = frdate;
  while (curdate<=todate) begin
    curday = GetDay(curdate);
    curmonth = GetMonth(curdate);
    if (prevday==0) then begin
      startformat(15);
        OutString(0,0,"Month " & curmonth,false);
      endformat;
      prevday = curday;
    end;
    if (prevmonth==0) then begin
      prevmonth = curmonth;
    end;
    if (curmonth!=prevmonth) then begin
      printstringstest(prevday,turnover,checkqty,itemsqty,false);
	  printstringstest("",totturnover[prevmonth],totcheckqty[prevmonth],totitemsqty[prevmonth],false);
      turnover = 0;
      checkqty = 0;
      itemsqty = 0;
      startformat(15);
        OutString(0,0,"Month " & curmonth,false);
      endformat;
    end;
    if (curmonth==prevmonth and curday!=prevday) then begin
      printstringstest(prevday,turnover,checkqty,itemsqty,false);
      turnover = 0;
      checkqty = 0;
      itemsqty = 0;
    end;
    
    IVr.InvDate = curdate;
  	TrHs = true;
  	while (LoopKey("InvDate",IVr,1,TrHs)) begin
  	 testf = true;
  	 if (IVr.OKFlag!=1 or IVr.Invalid!=0) then begin testf = false; end;
  	 if (IVr.InvDate!=curdate) then begin TrHs = false; testf = false; end;
  	 if (testf) then begin
  	   sign = 1;
  	   if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
  	     sign = -1;
  	   end;
			 fr = 1; to1 = 1;
			 if(IVr.CurncyCode!=bascur.BaseCur1)then begin
			   if (IVr.FrRate==0 or IVr.ToRateB1==0) then begin
			     curncy = IVr.CurncyCode;
				   GetFullCurncyRate(curncy,IVr.TransDate,fr,to1,to2,br1,br2);
				   if(fr==0 or to1==0)then begin
				     fr = 1;	to1 = 1;
				   end;
			   end else begin
			     fr = IVr.FrRate;	to1 = IVr.ToRateB1;
			   end; 
			 end;
  	   checkqty = checkqty + 1;
  	   totcheckqty[curmonth] = totcheckqty[curmonth] + 1;
  	   rwcnt = MatRowCnt(IVr);
  	   for (i=0;i<rwcnt;i=i+1) begin
  	     MatRowGet(IVr,i,IVrw);
  	     if (NonBlank(IVrw.ArtCode)) then begin
  	       turnover = turnover + (IVrw.Sum/fr*to1)*sign;
  	       totturnover[curmonth] = totturnover[curmonth] + (IVrw.Sum/fr*to1)*sign;
  	       itemsqty = itemsqty + IVrw.Quant*sign;
  	       totitemsqty[curmonth] = totitemsqty[curmonth] + IVrw.Quant*sign;
  	     end;
  	   end;
  	 end;
  	end;RESETLOOP(IVr);
    
    prevday = curday;
    prevmonth = curmonth;
    curdate = addday(curdate,1);
  end;

  if (turnover!=0) then begin
    printstringstest(prevday,turnover,checkqty,itemsqty,false);
  end; 
  startformat(15);
    OutString(0,0,"Year " & year,false);
  endformat; 
  for (i=1;i<13;i=i+1) begin
    printstringstest(i,totturnover[i],totcheckqty[i],totitemsqty[i],true);
  end;
		
	endjob;
return;
end;