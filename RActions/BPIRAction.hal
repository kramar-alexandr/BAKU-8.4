
external function LongInt GetCurUserLastNr(string);
external procedure NextM4Number(string,var string);
remote procedure OSDSumUp(var record OSDVc);
remote procedure NextM4SerialNumber(string,var string);//9:51 02.10.2018
external procedure ExtractObj(string,var Integer,var string);
remote function boolean CompanyIsJWLikeCompany(Integer);
remote updating procedure CreateINConsItem(string, string, integer);
remote updating procedure RecalculatePricesfromConsComp(record INVc); // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger 10:24 02.12.2020
remote updating procedure RecalculatePricesfromConsCompfromDupItem(record INVc);
external procedure TimeStamps(var row GlobalItemVc,val,string); //Edit **********************************************Vas-P	06/07/2021
external procedure GIWasUpdated(record GlobalItemVc,record GlobalItemVc,string);	//Edit **********************************************Vas-P	14/07/2021s
remote procedure FillDuplicateMn2(string);	// Edit ********************** Ihor Trubachov 03*12*2021

SetLangMode(LangRussian,"RUS",0);



global
updating function LongInt BPIBrandVcRecordCheck(var record BPIBrandVc BPIr,record BPIBrandVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
  json jsresponse;
	record WebReportChBlock WRChb;
	record GlobalBrandsVc BGr,oldBGr;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIBrandVc oldBrandr;
	boolean TrHs;
	string 255 OldCode;
	record ConsCompBlock CCB;
	record BtrxBrandVc BtrxBr;
	boolean testName;
	string 255 name;
	BlockLoad(CCB);
	
	logtext(0,"BPIBrandVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldBrandr.Code = "BRND9999";
		TrHs = true;
		while (LoopBackKey("Code",oldBrandr,1,TrHs)) begin
			OldCode = oldBrandr.Code;
			TrHs = false;
		end;
		ResetLoop(oldBrandr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	if(blank(BPIr.LastItemCode) and CCB.OKFlag!=0) then begin
		BPIr.LastItemCode = BPIr.Code & "_" & "00000";
	end;
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "BRAND";
			recordstore(BCr,false);
		end;	
	end;
	
	if(BPIr.Closed!=0 and BPI2r.Closed==0) then begin
		BtrxBr.Code = BPIr.Code;
		if(ReadFirstMain(BtrxBr,1,true)) then begin
			BtrxBr.Closed = BPIr.Closed;
			RecordStore(BtrxBr,true);
		end;
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto LBPIBrandVcRecordCheck;
	end;
	testName = true;
	for(i=0;i<len(BPIr.Name);i=i+1) begin
		switch (mid(BPIr.Name,i,1)) begin
			case "\\": testName = false;
			case "/": testName = false;
			case ":": testName = false;
			case "*": testName = false;
			case "?": testName = false;
			case "|": testName = false;
			case "<": testName = false;
			case ">": testName = false;
		end;
		if(!testName)then begin
			MessageBox(0,"Недопустимый символ в названии  \"\\ / : * ? | < >\"");
			res = -1;
			goto LBPIBrandVcRecordCheck;
		end;
	end;
	res = 0;
	if(stat==Rs_insert)then begin
		oldBrandr.Name = BPIr.Name;
		if(ReadFirstKey("Name",oldBrandr,1,true))then begin
			MessageBox(0,"Классификация с таким именем уже существует");
			res = -1;
			goto LBPIBrandVcRecordCheck;
		end;
	end;
	
	
	
	if(stat==Rs_update)then begin
		BGr.Code = BPIr.Code;
		if(readfirstmain(BGr,1,true))then begin
			recordcopy(oldBGr,BGr);
			BGr.Name = BPIr.Name;
			recordupdate(oldBGr,BGr,true);
		end else begin
			BGr.Code = BPIr.Code;
			BGr.Name = BPIr.Name;
			recordStore(BGr,true);
		end;
	end;
	if(stat==Rs_insert)then begin
		recordnew(BGr);
		BGr.Code = BPIr.Code;
		BGr.Name = BPIr.Name;
		recordStore(BGr,true);
	end;
	if(BPIr.PlanShipDays!=BPIr.PlanShipDaysMin)then begin
		BPIr.PlanShipDays = BPIr.PlanShipDaysMin;
	end;
	switch(BPIr.DeliveryWay)begin
		case 0:BPIr.CalculatedLeadTime = 4 + (BPIr.PlanShipDays * BPIr.DeliveryFrom) + 5 + 3;
		case 1:BPIr.CalculatedLeadTime = 4 + (BPIr.PlanShipDays * BPIr.DeliveryFrom) + 19 + 5;
		case 2:BPIr.CalculatedLeadTime = 4 + (BPIr.PlanShipDays * BPIr.DeliveryFrom) + 90;
	end;
	name = "BRND_";
	for(i=0;i<len(BPIr.Name);i=i+1) begin
		if((ASC(mid(BPIr.Name,i,1)) >= 65 and ASC(mid(BPIr.Name,i,1)) <= 90  ) or ( ASC(mid(BPIr.Name,i,1)) >= 97 and  ASC(mid(BPIr.Name,i,1)) <= 122 ) or (ASC(mid(BPIr.Name,i,1))==95)) then begin
			name = name & mid(BPIr.Name,i,1);
		end else begin
			name = name & "_";
		end;
	end;
	logtext(0,"BPIBrandVcRecordCheck create folder " & "webcust//" & name);
	if(!DirExists("webcust//" & name )) then begin
		CreateFolder("webcust//" & name );
	end;
	if(stat==Rs_update and BPI2r.Name!=BPIr.Name) then begin
		MessageBox(0,"Создана новая папка для картинок webcust/" & name & " перенесите картинки из старой папки в новую");
	end;
	//blockload(WRChb);		?????????????????????????????
	
	LBPIBrandVcRecordCheck:;
  BPIBrandVcRecordCheck = res;
return;
end;


global
updating function LongInt BPICollectionVcRecordCheck(var record BPICollectionVc BPIr,record BPICollectionVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
  json jsresponse;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	LongInt errcode;
	record BPICollectionVc oldCollectr;
	boolean TrHs;
	string 255 OldCode;
	
	logtext(0,"BPICollectionVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldCollectr.Code = "COLL99999";
		TrHs = true;
		while (LoopBackKey("Code",oldCollectr,1,TrHs)) begin
			OldCode = oldCollectr.Code;
			TrHs = false;
		end;
		ResetLoop(oldCollectr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "COLLECT";
			recordstore(BCr,true);
		end;	
	end;
	res = 0;
	
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto LBPICollectionVcRecordCheck;
	end;
	oldCollectr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldCollectr,1,true))then begin
		MessageBox(0,"Классификация с таким именем уже существует");
		res = -1;
		goto LBPICollectionVcRecordCheck;
	end;
	
	
	
	blockload(WRChb);	
	if(WRChb.WEBCheck==1)then begin
		if(stat==Rs_update)then begin
		
			host = "192.168.3.11";
			page = "/api/ProductCategory/Update";
			port = 8087;			
			
			addtexttoarea("{" & chr(13) & chr(10),req);
			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"type\":\"" & "COLLECT" & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"id\":" & "\"" & BPIr.CRMid & "\"," & chr(13) & chr(10),req);
			addtexttoarea("}" & chr(13) & chr(10),req);
		
			writeareatofile(req,"CRMRequest.txt",1);
			SendWebRequest(host,port,-1,false,"PATCH",page,"application/json","",false,req,reply,10);
			if(getarealength(reply)>0)then begin
				jsresponse = ParseJSONArea(reply);
				if(nonblank(JSONGet(jsresponse,"result")))then begin
					logtext(0,"SendUpdateBrandToCRM " & JSONGet(jsresponse,"result"));
				end;
			end;

			addtexttoarea(" BPICollectionVcRecordCheck " & BPIr.Code & " " & currentcompany & " ",reply);
			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);
			writeareatofile(reply,"CRMResponse.txt",1);
		
		end;
		if(stat==Rs_insert)then begin
			
			host = "192.168.3.11";
			page = "/api/ProductCategory/Create";
			port = 8087;
		
			addtexttoarea("{" & chr(13) & chr(10),req);
			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"type\":\"" & "COLLECT" & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);
			addtexttoarea("}" & chr(13) & chr(10),req);
		
			writeareatofile(req,"CRMRequest.txt",1);
			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);
			if(getarealength(reply)>0)then begin
				jsresponse = ParseJSONArea(reply);
				if(nonblank(JSONGet(jsresponse,"result")))then begin
					BPIr.CRMid = JSONGet(jsresponse,"result");
					logtext(0,"BPIBrandVcRecordCheck " & BPIr.CRMid);
				end;
			end;
			addtexttoarea(" BPICollectionVcRecordCheck " & BPIr.Code & " " & currentcompany & " ",reply);
			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);
			writeareatofile(reply,"CRMResponse.txt",1);
		
		end;
	end;
  LBPICollectionVcRecordCheck:;
  BPICollectionVcRecordCheck = res;
return;
end;


global updating function LongInt CheckDuplicesInAllCompanies (string OrigCode, string DupCode, var longint errorComp)
begin
	longint i, res;
	integer OrigCompany;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
	record INVc INr;
	record ConsItemVc CIr;
	string 255 thisDupCode, thisOrigCode;
	
	res = 0;
	OrigCompany = CurrentCompany;
	
	blockload(Compb);
	
	errorComp = 0;
	
	if (OrigCompany==18) then begin
		CIr.Code = DupCode;
		if (ReadFirstMain(Cir,1,true)) then begin
			thisDupCode = CIr.LocCode;
		end;
		CIr.Code = OrigCode;
		if (ReadFirstMain(Cir,1,true)) then begin
			thisOrigCode = CIr.LocCode;
		end;
	end else begin
		thisOrigCode = OrigCode;
		thisDupCode = DupCode;
	end;
	
	for(i=1;i<=matrowcnt(Compb);i=i+1)begin
		setcompany(i,false);
		matrowget(Compb,i-1,Comprw);
		if((CompanyIsJWLikeCompany(i)==false or i==3) and Comprw.ActiveStatus==0 and i!=CurrentCompany and i!=18 and i!=29) then begin
			INr.Code = thisOrigCode;
			if (ReadFirstMain(INr,1,true)) then begin
				if (blank(INr.BPIBrand)) then begin
					res = 36365;
					errorComp = i;
				end;
			end;
			INr.Code = thisDupCode;
			if (ReadFirstMain(INr,1,true)) then begin
				if (blank(INr.BPIBrand)) then begin
					res = 36366;
					errorComp = i;
				end;
			end;
		end;
	end;
	
	ResetCompany(OrigCompany);
	CheckDuplicesInAllCompanies = res;
return;
end;







global updating procedure CheckLastPurchPriceForOrigItems (record ItemDuplicatesVc IDr)
begin
	integer CurComp;
	record ItemDuplicatesVc newIDr, thisIDr;
	record ConsItemVc CIr;
	record INVc INr, oldINr;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
	string 255 OrigBrand, DubBrand, ConsOrigCode, ConsDupCode, OtherCompOrigBrand, OtherCompDubBrand, thisOrigCode, thisDupCode, ECOrigCode, ECDupCode, OldINCode, NewINCode;
	boolean TrHs;
	record GlobalItemVc DupGIr, OrigGIr, OldDupGIr, OldOrigGIr;
	row GlobalItemVc DupGIrw, OrigGIrw;
	string 255 OrigCode, DupCode;
	boolean INSorcesf, LocAddDupInstf;
	vector boolean AddLocf;
	date blnkDate;
	record ItemDuplicatesVc ID2r, tempIDr;
	record INVc IN2r;
	vector date LastPriceDate;

	CurComp = CurrentCompany;

	logtext(0,"CheckLastPurchPriceForOrigItems start");

	if (CurComp!=18) then begin
		SetCompany(18,false);
		RecordCopy(tempIDr,IDr);
		CIr.LocCode = tempIDr.OrigCode;
		CIr.BrandCode = tempIDr.OrigBrandCode;
		if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
			IDr.OrigCode = CIr.Code;
			CIr.LocCode = tempIDr.DupCode;
			CIr.BrandCode = tempIDr.DupBrandCode;
			if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
				IDr.DupCode = CIr.Code;
			end;
		end else begin
			resetCompany(CurComp);
		end;
	end;


	if (currentcompany==18) then begin 
		INr.Code = IDr.OrigCode;
		if (ReadFirstMain(INr,1,true)) then begin
			if (INr.LastPurchPrice==blankval or INr.LastPurchPrice==0) then begin
				IN2r.Code = IDr.DupCode;
				if (ReadFirstMain(IN2r,1,true)) then begin
					if (IN2r.LastPurchPrice!=blankval and IN2r.LastPurchPrice!=0) then begin
						recordCopy(OldINr,INr);
						INr.LastPurchPrice = IN2r.LastPurchPrice;
						INr.LastPurchPrice2 = IN2r.LastPurchPrice2;
						INr.LastPurchCurncyCode = IN2r.LastPurchCurncyCode;
						INr.WeighedAvPriceB2 = IN2r.WeighedAvPriceB2;
						INr.ExtraCost = IN2r.ExtraCost;
						INr.InPrice = IN2r.InPrice;
						INr.LastPriceChange = blnkDate;
						INr.InPriceB2 = IN2r.InPriceB2;
						INr.WeighedAvPrice = INr.WeighedAvPrice;
						if(recordUpdate(OldINr,INr,true)==0) then begin
							logtext (0,INr.Code & " Updated");
							RecalculatePricesfromConsCompfromDupItem(INr);
							INr.LastPriceChange = blnkDate;
							RecordStore(INr,true);
						end;
					end;
				end;
			end else begin
				if (INr.LastPriceChange==blnkDate) then begin
					ID2r.OrigCode = IDr.OrigCode;
					TrHs = true;
					while(loopMain(ID2r,1,TrHs))begin
						if (ID2r.OrigCode!=IDr.OrigCode) then begin TrHs = false; end;
						if (TrHs) then begin
							IN2r.Code = ID2r.DupCode;
							if (ReadFirstMain(IN2r,1,true)) then begin
								if (IN2r.LastPurchPrice!=blankval and IN2r.LastPurchPrice!=0) then begin
									if (blankDate(LastPriceDate[IN2r.Code]) or IN2r.LastPriceChange>LastPriceDate[IN2r.Code]) then begin
										recordCopy(OldINr,INr);
										LastPriceDate[IN2r.Code] = IN2r.LastPriceChange;
										INr.LastPurchPrice = IN2r.LastPurchPrice;
										INr.LastPurchPrice2 = IN2r.LastPurchPrice2;
										INr.LastPurchCurncyCode = IN2r.LastPurchCurncyCode;
										INr.WeighedAvPriceB2 = IN2r.WeighedAvPriceB2;
										INr.ExtraCost = IN2r.ExtraCost;
										INr.InPrice = IN2r.InPrice;
										INr.LastPriceChange = blnkDate;
										INr.InPriceB2 = IN2r.InPriceB2;
										INr.WeighedAvPrice = INr.WeighedAvPrice;
										if(recordUpdate(OldINr,INr,true)==0) then begin
											logtext (0,INr.Code & " Updated");
											RecalculatePricesfromConsCompfromDupItem(INr);
											INr.LastPriceChange = blnkDate;
											RecordStore(INr,true);
										end;
									end;
								end;
							end;
						end;
					end;
				end else begin
					logtext (0,INr.Code & " All Right");
				end;
			end;
		end;
	end;
	
	resetCompany(CurComp);
	logtext(0,"CheckLastPurchPriceForOrigItems end");

	return;
end;







global updating procedure CreateDuplicesInAllCompanies (record ItemDuplicatesVc IDr)
begin
	integer OrigCompany, SourceComp, i, j;
	record ItemDuplicatesVc newIDr, thisIDr;
	record ConsItemVc CIr;
	record INVc INr, oldINr;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
	string 255 OrigBrand, DubBrand, ConsOrigCode, ConsDupCode, OtherCompOrigBrand, OtherCompDubBrand, thisOrigCode, thisDupCode, ECOrigCode, ECDupCode, OldINCode, NewINCode;
	boolean TrHs;
	record GlobalItemVc DupGIr, OrigGIr, OldDupGIr, OldOrigGIr,LogGIr;
	row GlobalItemVc DupGIrw, OrigGIrw;
	string 255 OrigCode, DupCode;
	boolean INSorcesf, LocAddDupInstf;
	vector boolean AddLocf;
	
	blockload(Compb);
	OrigCompany = CurrentCompany;
	OrigCode = IDr.OrigCode;
	DupCode = IDr.DupCode;
	OrigBrand = IDr.OrigBrandCode;
	DubBrand = IDr.DupBrandCode;
	SourceComp = OrigCompany;
	
	
	for(i=1;i<=matrowcnt(Compb);i=i+1)begin
		setcompany(i,false);
		matrowget(Compb,i-1,Comprw);
		if((CompanyIsJWLikeCompany(i)==false or i==3) and Comprw.ActiveStatus==0 and i!=18 and i!=29) then begin
			INr.Code = OrigCode;
			INSorcesf = true;
			if (!ReadFirstMain(INr,1,true)) then begin
				INSorcesf = false;
			end;
			if (blank(INr.BPIBrand) or INr.BPIBrand!=OrigBrand) then begin
				INSorcesf = false;
			end;
			INr.Code = DupCode;
			if (!ReadFirstMain(INr,1,true)) then begin
				INSorcesf = false;
			end;
			if (blank(INr.BPIBrand)or INr.BPIBrand!=DubBrand) then begin
				INSorcesf = false;
			end;
			if (INSorcesf) then begin
				SourceComp = CurrentCompany;
			end;
		end;
	end;
	
	resetCompany(OrigCompany);
	
	
	if (nonblank(OrigCode) and nonblank(DupCode)) then begin
		thisIDr.OrigCode = OrigCode;
		thisIDr.DupCode = DupCode;
		thisIDr.OrigBrandCode = OrigBrand;
		thisIDr.DupBrandCode = DubBrand;
		
		if (!ReadFirstMain(thisIDr,4,true)) then begin
			recordnew(thisIDr);
			thisIDr.OrigCode = OrigCode;
			thisIDr.DupCode = DupCode;
			thisIDr.OrigBrandCode = OrigBrand;
			thisIDr.DupBrandCode = DubBrand;
			recordStore(thisIDr,true);
		end;
		
		if (OrigCompany!=18) then begin
			DupGIr.Code = DubBrand & "_" & DupCode;
			if (ReadFirstMain(DupGIr,1,true)) then begin
				if (nonblank(DupGIr.HansaName)) then begin
					OrigGIr.Code = OrigBrand & "_" & OrigCode;
					if (ReadFirstMain(OrigGIr,1,true)) then begin
						recordcopy(LogGIr,OrigGIr);
						for (i=0;i<matrowcnt(DupGIr);i=i+1) begin
							matrowget(DupGIr,i,DupGIrw);
							if (DupGIrw.Instock>0) then begin
								LocAddDupInstf = false;
								for (j=0;j<matrowcnt(OrigGIr);j=j+1) begin
									matrowget(OrigGIr,j,OrigGIrw);
									if (!AddLocf[DupGIrw.Location]) then begin
										if (OrigGIrw.Location==DupGIrw.Location) then begin
										  TimeStamps(OrigGIrw,OrigGIrw.Instock + DupGIrw.Instock," TimeStamplog 37");
											OrigGIrw.Instock = OrigGIrw.Instock + DupGIrw.Instock;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,j,OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 126");
											recordStore(OrigGIr,true);
											LocAddDupInstf = true;
										end;
										if (!LocAddDupInstf) then begin
											AddLocf[DupGIrw.Location] = true;
											OrigGIrw.Location = DupGIrw.Location;
											TimeStamps(OrigGIrw,DupGIrw.Instock," TimeStamplog 38");
											OrigGIrw.Instock = DupGIrw.Instock;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,matrowcnt(OrigGIr),OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 127");
											recordStore(OrigGIr,true);
										end;
									end;
								end;
							end;
						end;
					end;
					RecordCopy(OldDupGIr,DupGIr);
					DupGIr.HansaName = "";
					GIWasUpdated(DupGIr,OldDupGIr," GIWasUpdatedlog 128");
					RecordUpdate(OldDupGIr,DupGIr,true);
					logtext(0,DupGIr.Code & " Key fields cleared");
					RecordCopy(OldOrigGIr,OrigGIr);
					GIWasUpdated(OrigGIr,OldOrigGIr," GIWasUpdatedlog 129");
					RecordUpdate(OldOrigGIr,OrigGIr,true);
				end;
			end;
			
			
			
			SetCompany(18,false);
			CIr.LocCode = OrigCode;
			CIr.BrandCode = OrigBrand;
			if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
				ConsOrigCode = CIr.Code;
			end;
			
			CIr.LocCode = DupCode;
			CIr.BrandCode = DubBrand;
			if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
				ConsDupCode = CIr.Code;
			end;
			
			if (nonblank(OrigCode) and nonblank(DupCode)) then begin
				if (blank(ConsOrigCode)) then begin
					CreateINConsItem(OrigCode, OrigBrand, SourceComp);
					CIr.LocCode = OrigCode;
					CIr.BrandCode = OrigBrand;
					if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
						ConsOrigCode = CIr.Code;
					end;
				end;
				
				if (blank(ConsDupCode)) then begin
					CreateINConsItem(DupCode, DubBrand, SourceComp);
					CIr.LocCode = DupCode;
					CIr.BrandCode = DubBrand;
					if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
						ConsDupCode = CIr.Code;
					end;
				end;
			end;
			
			
			if (nonblank(ConsDupCode) and nonblank(ConsOrigCode)) then begin
				newIDr.DupCode = ConsDupCode;
				newIDr.OrigCode = ConsOrigCode;
				newIDr.OrigBrandCode = OrigBrand;
				newIDr.DupBrandCode = DubBrand;
				if (!ReadFirstMain(newIDr,4,true)) then begin
					recordNew(newIDr);
					newIDr.DupCode = ConsDupCode;
					newIDr.OrigCode = ConsOrigCode;
					newIDr.OrigBrandCode = OrigBrand;
					newIDr.DupBrandCode = DubBrand;
					if (CurrentCompany==18) then begin
						RecordStore(newIDr,true);
					end;
				end;
			end;
		end else begin
			CIr.Code = OrigCode;
			if (ReadFirstMain(CIr,1,true)) then begin
				OrigCode = CIr.LocCode;
			end;
			
			CIr.Code = DupCode;
			if (ReadFirstMain(CIr,1,true)) then begin
				DupCode = CIr.LocCode;
			end;
			SetCompany(1,false);
			
			DupGIr.Code = DubBrand & "_" & DupCode;
			if (ReadFirstMain(DupGIr,1,true)) then begin
				if (nonblank(DupGIr.HansaName)) then begin
					OrigGIr.Code = OrigBrand & "_" & OrigCode;
					if (ReadFirstMain(OrigGIr,1,true)) then begin
						recordcopy(LogGIr,OrigGIr);
						for (i=0;i<matrowcnt(DupGIr);i=i+1) begin
							matrowget(DupGIr,i,DupGIrw);
							if (DupGIrw.Instock>0) then begin
								LocAddDupInstf = false;
								for (j=0;j<matrowcnt(OrigGIr);j=j+1) begin
									matrowget(OrigGIr,j,OrigGIrw);
									if (!AddLocf[DupGIrw.Location]) then begin
										if (OrigGIrw.Location==DupGIrw.Location) then begin
										  TimeStamps(OrigGIrw,OrigGIrw.Instock + DupGIrw.Instock," TimeStamplog 39");
											OrigGIrw.Instock = OrigGIrw.Instock + DupGIrw.Instock;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,j,OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 130");
											recordStore(OrigGIr,true);
											LocAddDupInstf = true;
										end;
										if (!LocAddDupInstf) then begin
											AddLocf[DupGIrw.Location] = true;
											OrigGIrw.Location = DupGIrw.Location;
											TimeStamps(OrigGIrw,DupGIrw.Instock," TimeStamplog 40");
											OrigGIrw.Instock = DupGIrw.Instock;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,matrowcnt(OrigGIr),OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 131");
											recordStore(OrigGIr,true);
										end;
									end;
								end;
							end;
						end;
					end;
					RecordCopy(OldDupGIr,DupGIr);
					DupGIr.HansaName = "";
					GIWasUpdated(DupGIr,OldDupGIr," GIWasUpdatedlog 132");
					RecordUpdate(OldDupGIr,DupGIr,true);
					logtext(0,DupGIr.Code & " Key fields cleared");
					RecordCopy(OldOrigGIr,OrigGIr);
					GIWasUpdated(OrigGIr,OldOrigGIr," GIWasUpdatedlog 133");
					RecordUpdate(OldOrigGIr,OrigGIr,true);
				end;
			end;
			
			thisIDr.OrigCode = OrigCode;
			thisIDr.DupCode = DupCode;
			thisIDr.OrigBrandCode = OrigBrand;
			thisIDr.DupBrandCode = DubBrand;
			if (!ReadFirstMain(thisIDr,4,true)) then begin
				recordnew(thisIDr);
				thisIDr.OrigCode = OrigCode;
				thisIDr.DupCode = DupCode;
				thisIDr.OrigBrandCode = OrigBrand;
				thisIDr.DupBrandCode = DubBrand;
				if (CurrentCompany!=18) then begin
					recordStore(thisIDr,true);
				end;
			end;
			
		end;
		
		ResetCompany(OrigCompany);
		
	end;
	
return
end;













global updating procedure DellDuplicesInAllCompanies (record ItemDuplicatesVc IDr)
begin
	integer OrigCompany, SourceComp, i, j;
	record ItemDuplicatesVc newIDr, thisIDr;
	record ConsItemVc CIr;
	record INVc INr, oldINr;
	record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
	string 255 OrigBrand, DubBrand, ConsOrigCode, ConsDupCode, OtherCompOrigBrand, OtherCompDubBrand, thisOrigCode, thisDupCode, ECOrigCode, ECDupCode, OldINCode, NewINCode;
	boolean TrHs;
	record GlobalItemVc DupGIr, OrigGIr, OldDupGIr, OldOrigGIr,LogGIr;
	row GlobalItemVc DupGIrw, OrigGIrw;
	string 255 OrigCode, DupCode;
	boolean INSorcesf, LocAddDupInstf;
	vector boolean AddLocf;
	
	blockload(Compb);
	OrigCompany = CurrentCompany;
	OrigCode = IDr.OrigCode;
	DupCode = IDr.DupCode;
	OrigBrand = IDr.OrigBrandCode;
	DubBrand = IDr.DupBrandCode;
	SourceComp = OrigCompany;
	
	
	for(i=1;i<=matrowcnt(Compb);i=i+1)begin
		setcompany(i,false);
		matrowget(Compb,i-1,Comprw);
		if((CompanyIsJWLikeCompany(i)==false or i==3) and Comprw.ActiveStatus==0 and i!=18 and i!=29) then begin
			INr.Code = OrigCode;
			INSorcesf = true;
			if (!ReadFirstMain(INr,1,true)) then begin
				INSorcesf = false;
			end;
			if (blank(INr.BPIBrand) or INr.BPIBrand!=OrigBrand) then begin
				INSorcesf = false;
			end;
			INr.Code = DupCode;
			if (!ReadFirstMain(INr,1,true)) then begin
				INSorcesf = false;
			end;
			if (blank(INr.BPIBrand)or INr.BPIBrand!=DubBrand) then begin
				INSorcesf = false;
			end;
			if (INSorcesf) then begin
				SourceComp = CurrentCompany;
			end;
		end;
	end;
	
	resetCompany(OrigCompany);
	
	
	if (nonblank(OrigCode) and nonblank(DupCode)) then begin
		thisIDr.OrigCode = OrigCode;
		thisIDr.DupCode = DupCode;
		thisIDr.OrigBrandCode = OrigBrand;
		thisIDr.DupBrandCode = DubBrand;
		
		if (ReadFirstMain(thisIDr,4,true)) then begin
			// recorddelete(thisIDr);
		end;
		
		if (OrigCompany!=18) then begin
			DupGIr.Code = DubBrand & "_" & DupCode;
			if (ReadFirstMain(DupGIr,1,true)) then begin
				if (nonblank(DupGIr.HansaName)) then begin
					OrigGIr.Code = OrigBrand & "_" & OrigCode;
					if (ReadFirstMain(OrigGIr,1,true)) then begin
						recordcopy(LogGIr,OrigGIr);
						for (i=0;i<matrowcnt(DupGIr);i=i+1) begin
							matrowget(DupGIr,i,DupGIrw);
							if (DupGIrw.Instock>0) then begin
								LocAddDupInstf = false;
								for (j=0;j<matrowcnt(OrigGIr);j=j+1) begin
									matrowget(OrigGIr,j,OrigGIrw);
									if (!AddLocf[DupGIrw.Location]) then begin
										if (OrigGIrw.Location==DupGIrw.Location) then begin
										  TimeStamps(OrigGIrw,OrigGIrw.Instock - DupGIrw.Instock," TimeStamplog 37");
											OrigGIrw.Instock = OrigGIrw.Instock - DupGIrw.Instock;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,j,OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 126");
											recordStore(OrigGIr,true);
											LocAddDupInstf = true;
										end;
										if (!LocAddDupInstf) then begin
											AddLocf[DupGIrw.Location] = true;
											OrigGIrw.Location = DupGIrw.Location;
											TimeStamps(OrigGIrw,DupGIrw.Instock," TimeStamplog 38");
											OrigGIrw.Instock = 0;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,matrowcnt(OrigGIr),OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 127");
											recordStore(OrigGIr,true);
										end;
									end;
								end;
							end;
						end;
					end;
					RecordCopy(OldDupGIr,DupGIr);
					DupGIr.HansaName = DupGIr.Name;
					GIWasUpdated(DupGIr,OldDupGIr," GIWasUpdatedlog 128");
					RecordUpdate(OldDupGIr,DupGIr,true);
					RecordCopy(OldOrigGIr,OrigGIr);
					GIWasUpdated(OrigGIr,OldOrigGIr," GIWasUpdatedlog 129");
					RecordUpdate(OldOrigGIr,OrigGIr,true);
				end;
			end;
			
			
			
			SetCompany(18,false);
			CIr.LocCode = OrigCode;
			CIr.BrandCode = OrigBrand;
			if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
				ConsOrigCode = CIr.Code;
			end;
			
			CIr.LocCode = DupCode;
			CIr.BrandCode = DubBrand;
			if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
				ConsDupCode = CIr.Code;
			end;
			
			if (nonblank(OrigCode) and nonblank(DupCode)) then begin
				if (blank(ConsOrigCode)) then begin
					CreateINConsItem(OrigCode, OrigBrand, SourceComp);
					CIr.LocCode = OrigCode;
					CIr.BrandCode = OrigBrand;
					if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
						ConsOrigCode = CIr.Code;
					end;
				end;
				
				if (blank(ConsDupCode)) then begin
					CreateINConsItem(DupCode, DubBrand, SourceComp);
					CIr.LocCode = DupCode;
					CIr.BrandCode = DubBrand;
					if (ReadFirstKey("LocCodeBrand",CIr,2,true)) then begin
						ConsDupCode = CIr.Code;
					end;
				end;
			end;
			
			
			if (nonblank(ConsDupCode) and nonblank(ConsOrigCode)) then begin
				newIDr.DupCode = ConsDupCode;
				newIDr.OrigCode = ConsOrigCode;
				newIDr.OrigBrandCode = OrigBrand;
				newIDr.DupBrandCode = DubBrand;
				if (ReadFirstMain(newIDr,4,true)) then begin
					if (CurrentCompany==18) then begin
						recorddelete(newIDr);
					end;
				end;
			end;
		end else begin
			CIr.Code = OrigCode;
			if (ReadFirstMain(CIr,1,true)) then begin
				OrigCode = CIr.LocCode;
			end;
			
			CIr.Code = DupCode;
			if (ReadFirstMain(CIr,1,true)) then begin
				DupCode = CIr.LocCode;
			end;
			SetCompany(1,false);
			
			DupGIr.Code = DubBrand & "_" & DupCode;
			if (ReadFirstMain(DupGIr,1,true)) then begin
				if (nonblank(DupGIr.HansaName)) then begin
					OrigGIr.Code = OrigBrand & "_" & OrigCode;
					if (ReadFirstMain(OrigGIr,1,true)) then begin
						recordcopy(LogGIr,OrigGIr);
						for (i=0;i<matrowcnt(DupGIr);i=i+1) begin
							matrowget(DupGIr,i,DupGIrw);
							if (DupGIrw.Instock>0) then begin
								LocAddDupInstf = false;
								for (j=0;j<matrowcnt(OrigGIr);j=j+1) begin
									matrowget(OrigGIr,j,OrigGIrw);
									if (!AddLocf[DupGIrw.Location]) then begin
										if (OrigGIrw.Location==DupGIrw.Location) then begin
										  TimeStamps(OrigGIrw,OrigGIrw.Instock - DupGIrw.Instock," TimeStamplog 39");
											OrigGIrw.Instock = OrigGIrw.Instock - DupGIrw.Instock;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,j,OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 130");
											recordStore(OrigGIr,true);
											LocAddDupInstf = true;
										end;
										if (!LocAddDupInstf) then begin
											AddLocf[DupGIrw.Location] = true;
											OrigGIrw.Location = DupGIrw.Location;
											TimeStamps(OrigGIrw,DupGIrw.Instock," TimeStamplog 40");
											OrigGIrw.Instock = 0;
											OrigGIrw.Code = OrigGIr.Code;
											matrowput (OrigGIr,matrowcnt(OrigGIr),OrigGIrw);
											GIWasUpdated(OrigGIr,LogGIr," GIWasUpdatedlog 131");
											recordStore(OrigGIr,true);
										end;
									end;
								end;
							end;
						end;
					end;
					RecordCopy(OldDupGIr,DupGIr);
					DupGIr.HansaName = DupGIr.Name;
					GIWasUpdated(DupGIr,OldDupGIr," GIWasUpdatedlog 132");
					RecordUpdate(OldDupGIr,DupGIr,true);
					RecordCopy(OldOrigGIr,OrigGIr);
					GIWasUpdated(OrigGIr,OldOrigGIr," GIWasUpdatedlog 133");
					RecordUpdate(OldOrigGIr,OrigGIr,true);
				end;
			end;
			
			thisIDr.OrigCode = OrigCode;
			thisIDr.DupCode = DupCode;
			thisIDr.OrigBrandCode = OrigBrand;
			thisIDr.DupBrandCode = DubBrand;
			if (ReadFirstMain(thisIDr,4,true)) then begin
				if (CurrentCompany!=18) then begin
					recorddelete(thisIDr);
				end;
			end;
			
		end;
		
		ResetCompany(OrigCompany);
		
	end;
	
return
end;















global
updating function LongInt BPIBrandVcRecordUpdateAfter(var record BPIBrandVc BBr,record BPIBrandVc BB2r,LongInt stat,LongInt long4)
BEGIN
  longint res;
record BtrxBrandVc BtrxBr;
record DIVc DIr;
record CompaniesBlock Compb;
row CompaniesBlock Comprw;
integer i,curcomp,CompQty;
	
	blockload(Compb);
	CompQty = matrowcnt(Compb);
	
	curcomp = currentcompany;
	for (i=0;i<CompQty;i=i+1)begin
		matrowget(Compb,i,Comprw);
		if(Comprw.ActiveStatus==0) and (!CompanyIsJWLikeCompany(i+1) or i+1==3)then begin
			SetCompany(i+1,false);
			DIr.Code = BBr.Code;
			if(ReadFirstMain(DIr,1,true)) then begin
				DIr.Name = BBr.Name;
				RecordStore(DIr,true);
			end;
		end;	
	end;
SetCompany(curcomp,false);	
	BtrxBr.Code = BBr.Code;
	if(ReadFirstMain(BtrxBr,1,true)) then begin
		BtrxBr.Name = BBr.Name;
		RecordStore(BtrxBr,true);
	end;		
return;
end; 

global
updating function LongInt BPIBrandVcRecordSaveAfter(var record BPIBrandVc BBr,record BPIBrandVc BB2r,LongInt stat,LongInt long4) //edited by BPI
begin
longint res;
record BtrxBrandVc BtrxBr;
record DIVc DIr;
record CompaniesBlock Compb;
row CompaniesBlock Comprw;
integer i,curcomp,CompQty;
	
	blockload(Compb);
	CompQty = matrowcnt(Compb);
curcomp = currentcompany;

for (i=0;i<CompQty;i=i+1)begin
	matrowget(Compb,i,Comprw);
	if(Comprw.ActiveStatus==0) and (!CompanyIsJWLikeCompany(i+1) or i+1==3)then begin
		SetCompany(i+1,false);
		DIr.Code = BBr.Code;
		if(ReadFirstMain(DIr,1,true)) then begin
			DIr.Name = BBr.Name;
			RecordStore(DIr,true);
		end;
	end;	
end;
SetCompany(curcomp,false);	
RecordNew(BtrxBr);
BtrxBr.Code = BBr.Code;
BtrxBr.Name = BBr.Name;
BtrxBr.NameAZ = BBr.NameAZ;
BtrxBr.NameRUS = BBr.NameRUS;
BtrxBr.Closed = BBr.Closed;
RecordStore(BtrxBr,true);
BPIBrandVcRecordSaveAfter = res;
return;
end; 

global
updating function LongInt BtrxRebVcRecordCheck(var record BtrxRebVc BRr,record BtrxRebVc BR2r,LongInt stat,LongInt long4)
BEGIN
	LongInt res;

	res = 0;
	
	if(blank(BRr.Code))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"Code");
		goto LBPIBtrxRebVcRecordCheck;
	end;
	
	if(blank(BRr.Name))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"Name");
		goto LBPIBtrxRebVcRecordCheck;
	end;
	
	LBPIBtrxRebVcRecordCheck:;
  BtrxRebVcRecordCheck = res;
return;
end;

global
updating function LongInt BPIGroupVcRecordCheck(var record BPIGroupVc BPIr,record BPIGroupVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
	boolean TrHs;
  json jsresponse;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIGroupVc oldGroupr;
	string 255 OldCode;
	
	logtext(0,"BPIGroupVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldGroupr.Code = "GROUP99999";
		TrHs = true;
		while (LoopBackKey("Code",oldGroupr,1,TrHs)) begin
			OldCode = oldGroupr.Code;
			TrHs = false;
		end;
		ResetLoop(oldGroupr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "GROUP";
			recordstore(BCr,true);
		end;	
	end;
	res = 0;
	blockload(WRChb);		
	
	res = 0;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto GroupRecordCheckEnd;
	end;
	oldGroupr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldGroupr,1,true))then begin
		MessageBox(0,"группа с таким именем уже существует");
		res = -1;
		goto GroupRecordCheckEnd;
	end;
	
	
	
	if(WRChb.WEBCheck==1)then begin
		if(stat==Rs_update)then begin
		
			host = "192.168.3.11";
			page = "/api/ProductCategory/Update";
			port = 8087;			
			
			addtexttoarea("{" & chr(13) & chr(10),req);
			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"type\":\"" & "GROUP" & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"id\":" & "\"" & BPIr.CRMid & "\"," & chr(13) & chr(10),req);
			addtexttoarea("}" & chr(13) & chr(10),req);
		
			writeareatofile(req,"CRMRequest.txt",1);
			SendWebRequest(host,port,-1,false,"PATCH",page,"application/json","",false,req,reply,10);
			if(getarealength(reply)>0)then begin
				jsresponse = ParseJSONArea(reply);
				if(nonblank(JSONGet(jsresponse,"result")))then begin
					logtext(0,"BPIGroupVcRecordCheck " & JSONGet(jsresponse,"result"));
				end;
			end;
			
			addtexttoarea(" BPIGroupVcRecordCheck " & BPIr.Code & " " & currentcompany & " ",reply);
			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);
			writeareatofile(reply,"CRMResponse.txt",1);
		
		end;
		if(stat==Rs_insert)then begin
			
			host = "192.168.3.11";
			page = "/api/ProductCategory/Create";
			port = 8087;
		
			addtexttoarea("{" & chr(13) & chr(10),req);
			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"type\":\"" & "GROUP" & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);
			addtexttoarea("}" & chr(13) & chr(10),req);
		
			writeareatofile(req,"CRMRequest.txt",1);
			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);
			if(getarealength(reply)>0)then begin
				jsresponse = ParseJSONArea(reply);
				if(nonblank(JSONGet(jsresponse,"result")))then begin
					BPIr.CRMid = JSONGet(jsresponse,"result");
					logtext(0,"BPIGroupVcRecordCheck " & BPIr.CRMid);
				end;
			end;
			addtexttoarea(" BPIGroupVcRecordCheck " & BPIr.Code & " " & currentcompany & " ",reply);
			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);
			writeareatofile(reply,"CRMResponse.txt",1);
		
		end;
	end;
  GroupRecordCheckEnd:;
  BPIGroupVcRecordCheck = res;
return;
end;

global
updating function LongInt BPISubGroupVcRecordCheck(var record BPISubGroupVc BPIr,record BPISubGroupVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
	boolean TrHs;
  json jsresponse;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPISubGroupVc oldSubGroupr;
	string 255 OldCode;
	
	logtext(0,"BPISubGroupVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldSubGroupr.Code = "TYPE99999";
		TrHs = true;
		while (LoopBackKey("Code",oldSubGroupr,1,TrHs)) begin
			OldCode = oldSubGroupr.Code;
			TrHs = false;
		end;
		ResetLoop(oldSubGroupr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "SUBGROUP";
			recordstore(BCr,true);
		end;	
	end;
	res = 0;
	blockload(WRChb);		
	
	res = 0;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto SubGroupRecordCheckEnd;
	end;
	oldSubGroupr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldSubGroupr,1,true))then begin
		MessageBox(0,"группа с таким именем уже существует");
		res = -1;
		goto SubGroupRecordCheckEnd;
	end;
	
	
	
	if(WRChb.WEBCheck==1)then begin
		if(stat==Rs_update)then begin
		
			host = "192.168.3.11";
			page = "/api/ProductCategory/Update";
			port = 8087;			
			
			addtexttoarea("{" & chr(13) & chr(10),req);
			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"type\":\"" & "SUBGROUP" & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"id\":" & "\"" & BPIr.CRMid & "\"," & chr(13) & chr(10),req);
			addtexttoarea("}" & chr(13) & chr(10),req);
		
			writeareatofile(req,"CRMRequest.txt",1);
			SendWebRequest(host,port,-1,false,"PATCH",page,"application/json","",false,req,reply,10);
			if(getarealength(reply)>0)then begin
				jsresponse = ParseJSONArea(reply);
				if(nonblank(JSONGet(jsresponse,"result")))then begin
					logtext(0,"BPIGroupVcRecordCheck " & JSONGet(jsresponse,"result"));
				end;
			end;
			addtexttoarea(" BPISubGroupVcRecordCheck " & BPIr.Code & " " & currentcompany & " ",reply);
			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);
			writeareatofile(reply,"CRMResponse.txt",1);
		
		end;
		if(stat==Rs_insert)then begin
			
			host = "192.168.3.11";
			page = "/api/ProductCategory/Create";
			port = 8087;
		
			addtexttoarea("{" & chr(13) & chr(10),req);
			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"type\":\"" & "SUBGROUP" & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);
			addtexttoarea("}" & chr(13) & chr(10),req);
		
			writeareatofile(req,"CRMRequest.txt",1);
			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);
			if(getarealength(reply)>0)then begin
				jsresponse = ParseJSONArea(reply);
				if(nonblank(JSONGet(jsresponse,"result")))then begin
					BPIr.CRMid = JSONGet(jsresponse,"result");
					logtext(0,"BPIGroupVcRecordCheck " & BPIr.CRMid);
				end;
			end;
			addtexttoarea(" BPISubGroupVcRecordCheck " & BPIr.Code & " " & currentcompany & " ",reply);
			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);
			writeareatofile(reply,"CRMResponse.txt",1);
		
		end;
	end;
  SubGroupRecordCheckEnd:;
  BPISubGroupVcRecordCheck = res;
return;
end;



global
updating function LongInt BPICategoryVcRecordCheck(var record BPICategoryVc BPIr,record BPICategoryVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPICategoryVc oldCatr;
	string 255 OldCode;
	boolean TrHs;
	
	logtext(0,"BPICategoryVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldCatr.Code = "CAT99999";
		TrHs = true;
		while (LoopBackKey("Code",oldCatr,1,TrHs)) begin
			OldCode = oldCatr.Code;
			TrHs = false;
		end;
		ResetLoop(oldCatr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "CATEGORY";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto CategoryRecordCheckEnd;
	end;
	oldCatr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldCatr,1,true))then begin
		MessageBox(0,"категория с таким именем уже существует");
		res = -1;
		goto CategoryRecordCheckEnd;
	end;
	
	
	res = 0;
	CategoryRecordCheckEnd:;
	BPICategoryVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIMaterialVcRecordCheck(var record BPIMaterialVc BPIr,record BPIMaterialVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIMaterialVc oldMatr;
	string 255 oldCode;
	
	logtext(0,"BPIMaterialVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldMatr.Code = "MATR99999";
		TrHs = true;
		while (LoopBackKey("Code",oldMatr,1,TrHs)) begin
			OldCode = oldMatr.Code;
			TrHs = false;
		end;
		ResetLoop(oldMatr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "MATERIAL";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto MaterialRecordCheckEnd;
	end;
		oldMatr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldMatr,1,true))then begin
		MessageBox(0,"материал с таким именем уже существует");
		res =-1;
		goto MaterialRecordCheckEnd;
	end;
	
	
	res = 0;
	MaterialRecordCheckEnd:;
	BPIMaterialVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIColorVcRecordCheck(var record BPIColorVc BPIr,record BPIColorVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIColorVc oldColr;
	string 255 oldCode;
	
	logtext(0,"BPIColorVcRecordCheck");
	
	
	if(blank(BPIr.Code))then begin
		oldColr.Code = "CL99999";
		TrHs = true;
		while (LoopBackKey("Code",oldColr,1,TrHs)) begin
			OldCode = oldColr.Code;
			TrHs = false;
		end;
		ResetLoop(oldColr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "COLOR";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto ColorRecordCheckEnd;
	end;
	oldColr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldColr,1,true))then begin
		MessageBox(0,"цвет с таким именем уже существует");
		res =-1;
		goto ColorRecordCheckEnd;
	end;
	
	
	res = 0;
	ColorRecordCheckEnd:;
	BPIColorVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIShapeVcRecordCheck(var record BPIShapeVc BPIr,record BPIShapeVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIShapeVc oldShpr;
	string 255 OldCode;
	
	logtext(0,"BPIShapeVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldShpr.Code = "SHAPE99999";
		TrHs = true;
		while (LoopBackKey("Code",oldShpr,1,TrHs)) begin
			OldCode = oldShpr.Code;
			TrHs = false;
		end;
		ResetLoop(oldShpr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "SHAPE";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto ShapeRecordCheckEnd;
	end;
	oldShpr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldShpr,1,true))then begin
		MessageBox(0,"shape с таким именем уже существует");
		res =-1;
		goto ShapeRecordCheckEnd;
	end;
	
	
	res = 0;
	ShapeRecordCheckEnd:;
	BPIShapeVcRecordCheck = res;
	
return;
end;


global
updating function LongInt BPISizeVcRecordCheck(var record BPISizeVc BPIr,record BPISizeVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPISizeVc oldSizer;
	string 255 OldCode;
	
	
	logtext(0,"BPISizeVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldSizer.Code = "SIZE99999";
		TrHs = true;
		while (LoopBackKey("Code",oldSizer,1,TrHs)) begin
			OldCode = oldSizer.Code;
			TrHs = false;
		end;
		ResetLoop(oldSizer);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	

	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "SIZE";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto SizeRecordCheckEnd;
	end;
	oldSizer.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldSizer,1,true))then begin
		MessageBox(0,"size с таким именем уже существует");
		res =-1;
		goto SizeRecordCheckEnd;
	end;
	
	
	res = 0;
	SizeRecordCheckEnd:;
	BPISizeVcRecordCheck = res;
	
return;
end;


global
updating function LongInt BPIUseVcRecordCheck(var record BPIUseVc BPIr,record BPIUseVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIUseVc oldUser;
	string 255 OldCode;
	
	logtext(0,"BPIUseVcRecordCheck");
	
	
	if(blank(BPIr.Code))then begin
		oldUser.Code = "SIZE99999";
		TrHs = true;
		while (LoopBackKey("Code",oldUser,1,TrHs)) begin
			OldCode = oldUser.Code;
			TrHs = false;
		end;
		ResetLoop(oldUser);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "USE";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto UseRecordCheckEnd;
	end;
	oldUser.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldUser,1,true))then begin
		MessageBox(0,"Use с таким именем уже существует");
		res =-1;
		goto UseRecordCheckEnd;
	end;
	
	
	res = 0;
	UseRecordCheckEnd:;
	BPIUseVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPISexVcRecordCheck(var record BPISexVc BPIr,record BPISexVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPISexVc oldSexr;
	string 255 OldCode;
	
	logtext(0,"BPISexVcRecordCheck");
	
	
	if(blank(BPIr.Code))then begin
		oldSexr.Code = "SEX99999";
		TrHs = true;
		while (LoopBackKey("Code",oldSexr,1,TrHs)) begin
			OldCode = oldSexr.Code;
			TrHs = false;
		end;
		ResetLoop(oldSexr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "SEX";
			recordstore(BCr,true);
		end;	
	end;
		
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto SexRecordCheckEnd;
	end;
	oldSexr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldSexr,1,true))then begin
		MessageBox(0,"Пол с таким именем уже существует");// I think it isn't necessary;
		res =-1;
		goto SexRecordCheckEnd;
	end;
	
	
	res = 0;
	SexRecordCheckEnd:;
	BPISexVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIPlatingVcRecordCheck(var record BPIPlatingVc BPIr,record BPIPlatingVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIPlatingVc oldPlr;
	string 255 OldCode;
	
	logtext(0,"BPIPlatingVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldPlr.Code = "PLAT99999";
		TrHs = true;
		while (LoopBackKey("Code",oldPlr,1,TrHs)) begin
			OldCode = oldPlr.Code;
			TrHs = false;
		end;
		ResetLoop(oldPlr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "PLATING";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto PlatingRecordCheckEnd;
	end;
		oldPlr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldPlr,1,true))then begin
		MessageBox(0,"Plating с таким именем уже существует");
		res =-1;
		goto PlatingRecordCheckEnd;
	end;
	
	
	res = 0;
	PlatingRecordCheckEnd:;
	BPIPlatingVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIClarityVcRecordCheck(var record BPIClarityVc BPIr,record BPIClarityVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIClarityVc oldClarr;
	string 255 OldCode;
	
	logtext(0,"BPIClarityVcRecordCheck");
	
	
	if(blank(BPIr.Code))then begin
		oldClarr.Code = "CLAR99999";
		TrHs = true;
		while (LoopBackKey("Code",oldClarr,1,TrHs)) begin
			OldCode = oldClarr.Code;
			TrHs = false;
		end;
		ResetLoop(oldClarr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "CLARITY";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto ClaringRecordCheckEnd;
	end;
	oldClarr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldClarr,1,true))then begin
		MessageBox(0,"Claring с таким именем уже существует");
		res =-1;
		goto ClaringRecordCheckEnd;
	end;
	

	res = 0;
	ClaringRecordCheckEnd:;
	BPIClarityVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIWeightVcRecordCheck(var record BPIWeightVc BPIr,record BPIWeightVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIWeightVc oldWghtr;
	string 255 OldCode;
	
	logtext(0,"BPIWeightVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldWghtr.Code = "WGHT99999";
		TrHs = true;
		while (LoopBackKey("Code",oldWghtr,1,TrHs)) begin
			OldCode = oldWghtr.Code;
			TrHs = false;
		end;
		ResetLoop(oldWghtr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "WEIGHT";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto WeightRecordCheckEnd;
	end;
	oldWghtr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldWghtr,1,true))then begin
		MessageBox(0,"Weight с таким именем уже существует");
		res =-1;
		goto WeightRecordCheckEnd;
	end;
	

	
	res = 0;
	WeightRecordCheckEnd:;
	BPIWeightVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPICutVcRecordCheck(var record BPICutVc BPIr,record BPICutVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPICutVc oldCutr;
	string 255 OldCode;
	
	logtext(0,"BPICutVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldCutr.Code = "CUT99999";
		TrHs = true;
		while (LoopBackKey("Code",oldCutr,1,TrHs)) begin
			OldCode = oldCutr.Code;
			TrHs = false;
		end;
		ResetLoop(oldCutr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "CUT";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto CutRecordCheckEnd;
	end;
	oldCutr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldCutr,1,true))then begin
		MessageBox(0,"Cut с таким именем уже существует");
		res =-1;
		goto CutRecordCheckEnd;
	end;
	

	
	res = 0;
	CutRecordCheckEnd:;
	BPICutVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIStoneVcRecordCheck(var record BPIStoneVc BPIr,record BPIStoneVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIStoneVc oldStoner;
	string 255 OldCode;
	
	logtext(0,"BPIStoneVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldStoner.Code = "STN99999";
		TrHs = true;
		while (LoopBackKey("Code",oldStoner,1,TrHs)) begin
			OldCode = oldStoner.Code;
			TrHs = false;
		end;
		ResetLoop(oldStoner);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "STONE";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto StoneRecordCheckEnd;
	end;
	oldStoner.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldStoner,1,true))then begin
		MessageBox(0,"Stone с таким именем уже существует");
		res =-1;
		goto StoneRecordCheckEnd;
	end;
	
	
	res = 0;
	StoneRecordCheckEnd:;
	BPIStoneVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIStrapVcRecordCheck(var record BPIStrapVc BPIr,record BPIStrapVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIStrapVc oldStrapr;
	string 255 OldCode;
	
	logtext(0,"BPIStrapVcRecordCheck");
	
	
	if(blank(BPIr.Code))then begin
		oldStrapr.Code = "STRP99999";
		TrHs = true;
		while (LoopBackKey("Code",oldStrapr,1,TrHs)) begin
			OldCode = oldStrapr.Code;
			TrHs = false;
		end;
		ResetLoop(oldStrapr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "STRAP";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
		res=-1;
		goto StrapRecordCheckEnd;
	end;
	oldStrapr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldStrapr,1,true))then begin
		MessageBox(0,"Strap с таким именем уже существует");
		res =-1;
		goto StrapRecordCheckEnd;
	end;
	
	
	res = 0;
	StrapRecordCheckEnd:;
	BPIStrapVcRecordCheck = res;
	
return;
end;

global
updating function LongInt BPIOdourVcRecordCheck(var record BPIOdourVc BPIr,record BPIOdourVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  boolean TrHs;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record BPIOdourVc oldOdourr;
	string 255 OldCode;
	
	logtext(0,"BPIOdourVcRecordCheck");
	
	if(blank(BPIr.Code))then begin
		oldOdourr.Code = "ODR99999";
		TrHs = true;
		while (LoopBackKey("Code",oldOdourr,1,TrHs)) begin
			OldCode = oldOdourr.Code;
			TrHs = false;
		end;
		ResetLoop(oldOdourr);
		NextM4SerialNumber(OldCode,BPIr.Code);
	end;
	
	
	
	if(nonblank(BPIr.Code))then begin
		BCr.Code = BPIr.Code;
		if(readfirstmain(BCr,1,true))then begin
			recordcopy(oldBCr,BCr);
			BCr.Name = BPIr.Name;
			recordupdate(oldBCr,BCr,true);
		end else begin
			BCr.Name = BPIr.Name;
			BCr.Code = BPIr.Code;
			BCr.Type = "ODOUR";
			recordstore(BCr,true);
		end;	
	end;
	
	if(blank(BPIr.Name)) then begin
	res=-1;
	goto OdourRecordCheckEnd;
	end;
	oldOdourr.Name = BPIr.Name;
	if(ReadFirstKey("Name",oldOdourr,1,true))then begin
		MessageBox(0,"Odour с таким именем уже существует");
		res =-1;
		goto OdourRecordCheckEnd;
	end;
	
	
	res = 0;
	OdourRecordCheckEnd:;
	BPIOdourVcRecordCheck = res;
	
return;
end;


global
updating function LongInt GlobalClassificationsVcRecordCheck(var record GlobalClassificationsVc BPIr,record GlobalClassificationsVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
  json jsresponse;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	
	logtext(0,"GlobalClassificationsVcRecordCheck");
	
	res = 0;
	
	blockload(WRChb);	
	if(WRChb.WEBCheck==1)then begin
		if(stat==Rs_insert)then begin
			host = "192.168.3.11";
			page = "/api/ProductCategory/Create";
			port = 8087;
		
			addtexttoarea("{" & chr(13) & chr(10),req);
			addtexttoarea("\"title\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"description\":\"" & BPIr.Name & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"type\":\"" & BPIr.Type & "\"," & chr(13) & chr(10),req);
			addtexttoarea("\"hansaId\":" & "\"" & BPIr.Code & "\"" & chr(13) & chr(10),req);
			addtexttoarea("}" & chr(13) & chr(10),req);
		
			writeareatofile(req,"CRMRequest.txt",1);
			SendWebRequest(host,port,-1,false,"POST",page,"application/json","",false,req,reply,10);
			if(getarealength(reply)>0)then begin
				jsresponse = ParseJSONArea(reply);
				if(nonblank(JSONGet(jsresponse,"result")))then begin
					logtext(0,"GlobalClassificationsVcRecordCheck " & JSONGet(jsresponse,"result"));
				end;
			end;
			addtexttoarea(" GlobalClassificationsVcRecordCheck " & BPIr.Code & " " & currentcompany & " ",reply);
			addtexttoarea(currentdate & ":" & currenttime & " " & chr(13) & chr(10) ,reply);
			writeareatofile(reply,"CRMResponse.txt",1);
		end;
	end;
	
	GlobalClassificationsVcRecordCheck = res;
	
return;
end;




global
updating function LongInt GlobalClassificationsVcRecordSaveAfter(var record GlobalClassificationsVc BPIr,record GlobalClassificationsVc BPI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  integer err,noErr;
  string 255 host,tstr,nonce,opaque,page;
  LongInt port,pos,mtrw;
  Area req,reply;
  string 255 ha1,ha2;
  row MarcCampVc MCrw;
  integer i;
  json jsresponse;
	record WebReportChBlock WRChb;
	record GlobalClassificationsVc BCr,oldBCr;
	record DIVc DIr;
	
	res = 0;
	
	if(Blank(BPI2r.Code) and nonblank(BPIr.Code))then begin
		DIr.Code = BPIr.Code;
		DIr.Name = BPIr.Name;
		DIr.CType = BPIr.Type;
		if(RecordStore(DIr,false))then begin  end;
	end;
	
	GlobalClassificationsVcRecordSaveAfter = res;
	
return;
end;




global
updating function LongInt OSDVcRecordCheck(var record OSDVc OSDr,record OSDVc OSD2r,LongInt stat,LongInt long4)  // _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- Anton Preisinger12:38 28.09.2018
BEGIN
	longint res,newnr;
	record OSDVc OSDOldr;
	string 255 OldSNr,NewSNr;
	boolean TrHs;
	row OSDVc OSDrw;
	longint i, rwcnt, j;
	record OSDSerialBock OSDSb;
	row OSDSerialBock OSDSrw;
	array string 255 aSeria;
	
	logtext(0,"OSDVcRecordCheck");
	
	res = 0;
	if(false)then begin 
		if(stat==Rs_update and OSD2r.OKFlag==1)then begin
			res = -1;
			MessageBox(0,"Документ утвержден!");
			goto LOSDVcRecordCheck;
		end;
	end;
	
	if(blank(OSDr.Code))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"Code");
		goto LOSDVcRecordCheck;
		/*OSDOldr.Code = "ZZZZZZZZZZZZZZZZZZZZZZZZ";
		TrHs = true;
		while (LoopBackKey("Code",OSDOldr,1,TrHs))begin 
			OldSNr = OSDOldr.Code;
			NextM4Number(OldSNr,NewSNr);
			OSDr.Code = NewSNr;
			TrHs = false;
		end;*/
	end;
	
	if(BlankDate(OSDr.TransDate))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"TransDate");
		goto LOSDVcRecordCheck;
	end;
	
	if(blank(OSDr.PONr))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"PONr");
		goto LOSDVcRecordCheck;
	end;
	
	if(BlankDate(OSDr.PODate))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"PODate");
		goto LOSDVcRecordCheck;
	end;
	
	if(blank(OSDr.RefPRNr))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"RefPRNr");
		goto LOSDVcRecordCheck;
	end;
	
	if(blank(OSDr.VendorCode))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"VendorCode");
		goto LOSDVcRecordCheck;
	end;
	
	if(blank(OSDr.Phone))then begin
		res = -1;
		recordcheckerror(31006,"Не может быть пустым!",-1,"Phone");
		goto LOSDVcRecordCheck;
	end;
	
	rwcnt = matrowcnt(OSDr);
	for (i=0;i<rwcnt;i=i+1)begin
		matrowget(OSDr,i,OSDrw);
		if(nonblank(OSDrw.ArtCode))then begin
			if(blank(OSDrw.Quant))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"Quant");
				goto LOSDVcRecordCheck;
			end;
			/*if(blank(OSDrw.Price))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"Price");
				goto LOSDVcRecordCheck;
			end;
			if(blank(OSDrw.CostPrice))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"CostPrice");
				goto LOSDVcRecordCheck;
			end;
			if(blank(OSDrw.Sum))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"Sum");
				goto LOSDVcRecordCheck;
			end;
			if(blank(OSDrw.Classification))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"Classification");
				goto LOSDVcRecordCheck;
			end;*/
			if(blank(OSDrw.UnitCode))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"UnitCode");
				goto LOSDVcRecordCheck;
			end;
			if(blank(OSDrw.Article))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"Article");
				goto LOSDVcRecordCheck;
			end;
			if(blank(OSDrw.Spec))then begin
				res = -1;
				recordcheckerror(31006,"Не может быть пустым!",i,"Spec");
				goto LOSDVcRecordCheck;
			end;
		end;
		
		
	end;
	if(stat==Rs_update)then begin
		//if(OSDr.OKFlag==1 and OSD2r.OKFlag==0)then begin
			if(nonblank(OSDr.Code))then begin
				blockload(OSDSb);	
				rwcnt = matrowcnt(OSDSb);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(OSDSb,i,OSDSrw);
					OldSNr = OSDSrw.CurNr;
					NextM4SerialNumber(OldSNr,NewSNr);
					if(setinset(NewSNr,OSDr.Code))then begin
						OSDSrw.CurNr = OSDr.Code;
						matrowput(OSDSb,i,OSDSrw);
					end;
				end;
				BlockStore(OSDSb);
			end;
		//end;
	end;
	if(stat==Rs_insert)then begin
		//if(OSDr.OKFlag==1)then begin
			if(nonblank(OSDr.Code))then begin
				blockload(OSDSb);	
				rwcnt = matrowcnt(OSDSb);
				for (i=0;i<rwcnt;i=i+1) begin
					matrowget(OSDSb,i,OSDSrw);
					OldSNr = OSDSrw.CurNr;
					NextM4SerialNumber(OldSNr,NewSNr);
					if(setinset(NewSNr,OSDr.Code))then begin
						OSDSrw.CurNr = OSDr.Code;
						matrowput(OSDSb,i,OSDSrw);
					end;
				end;
				BlockStore(OSDSb);
			end;
		//end;
	end;
	
	OSDSumUp(OSDr);
	LOSDVcRecordCheck:;
	OSDVcRecordCheck = res;
return;
end;

global function string 100 BPICodeToName(string Code)
begin
record BPICollectionVc Collr;
record BPIGroupVc Grr;
record BPISubGroupVc SubGrr;
record BPICategoryVc Catr;
record BPIMaterialVc Matr;
record BPIColorVc Colr;
record BPIShapeVc Shr;
record BPISizeVc Sizer;
record BPIUseVc Userr;
record BPISexVc Sexr;
record BPIPlatingVc Plr;
record BPIClarityVc Clr;
record BPIWeightVc Wgr;
record BPICutVc Cutr;
record BPIStoneVc Str;
record BPIStrapVc Strapr;
record BPIOdourVc Odr;
record BPIBrandVc Brandr;
string 100 name;

Brandr.Code = Code;
if(ReadFirstMain(Brandr,1,true)) then begin
	name = Brandr.Name;
end;

Collr.Code=Code;
if(ReadFirstMain(Collr,1,true)) then begin
	name=Collr.Name;
end;

Grr.Code=Code;
if(ReadFirstMain(Grr,1,true)) then begin
	name=Grr.Name;
end;

SubGrr.Code=Code;
if(ReadFirstMain(SubGrr,1,true)) then begin
	name=SubGrr.Name;
end;

Catr.Code=Code;
if(ReadFirstMain(Catr,1,true)) then begin
	name=Catr.Name;
end;

Matr.Code=Code;
if(ReadFirstMain(Matr,1,true)) then begin
	name=Matr.Name;
end;

Colr.Code=Code;
if(ReadFirstMain(Colr,1,true)) then begin
	name=Colr.Name;
end;

Shr.Code=Code;
if(ReadFirstMain(Shr,1,true)) then begin
	name=Shr.Name;
end;

Sizer.Code=Code;
if(ReadFirstMain(Sizer,1,true)) then begin
	name=Sizer.Name;
end;

Userr.Code=Code;
if(ReadFirstMain(Userr,1,true)) then begin
	name=Userr.Name;
end;

Sexr.Code=Code;
if(ReadFirstMain(Sexr,1,true)) then begin
	name=Sexr.Name;
end;

Plr.Code=Code;
if(ReadFirstMain(Plr,1,true)) then begin
	name=Plr.Name;
end;

Clr.Code=Code;
if(ReadFirstMain(Clr,1,true)) then begin
	name=Clr.Name;
end;

Wgr.Code=Code;
if(ReadFirstMain(Wgr,1,true)) then begin
	name=Wgr.Name;
end;

Cutr.Code=Code;
if(ReadFirstMain(Cutr,1,true)) then begin
	name=Cutr.Name;
end;

Str.Code=Code;
if(ReadFirstMain(Str,1,true)) then begin
	name=Str.Name;
end;

Strapr.Code=Code;
if(ReadFirstMain(Strapr,1,true)) then begin
	name=Strapr.Name;
end;

Odr.Code=Code;
if(ReadFirstMain(Odr,1,true)) then begin
	name=Odr.Name;
end;

BPICodeToName = name;
return;
end;

global procedure CollectNameByCode(var vector string nameByCode)
begin
record BPICollectionVc Collr;
record BPIGroupVc Grr;
record BPISubGroupVc SubGrr;
record BPICategoryVc Catr;
record BPIMaterialVc Matr;
record BPIColorVc Colr;
record BPIShapeVc Shr;
record BPISizeVc Sizer;
record BPIUseVc Userr;
record BPISexVc Sexr;
record BPIPlatingVc Plr;
record BPIClarityVc Clr;
record BPIWeightVc Wgr;
record BPICutVc Cutr;
record BPIStoneVc Str;
record BPIStrapVc Strapr;
record BPIOdourVc Odr;
record BPIBrandVc Brandr;

Brandr.Code = "";
while(LoopMain(Brandr,1,true))  begin
	nameByCode[Brandr.Code] = Brandr.Name;
end;

Collr.Code="";
while(loopMain(Collr,1,true))  begin
	nameByCode[Collr.Code] = Collr.Name;
end;

Grr.Code="";
while(LoopMain(Grr,1,true))  begin
	nameByCode[Grr.Code] = Grr.Name;
end;

SubGrr.Code="";
while(LoopMain(SubGrr,1,true))  begin
	nameByCode[SubGrr.Code] = SubGrr.Name;
end;

Catr.Code="";
while(loopMain(Catr,1,true))  begin
	nameByCode[Catr.Code] = Catr.Name;
end;

Matr.Code="";
while(loopMain(Matr,1,true))  begin
	nameByCode[Matr.Code] = Matr.Name;
end;

Colr.Code="";
while(LoopMain(Colr,1,true))  begin
	nameByCode[Colr.Code] = Colr.Name;
end;

Shr.Code="";
while(LoopMain(Shr,1,true))  begin
	nameByCode[Shr.Code] = Shr.Name;
end;

Sizer.Code="";
while(LoopMain(Sizer,1,true))  begin
	nameByCode[Sizer.Code] = Sizer.Name;
end;

Userr.Code="";
while(LoopMain(Userr,1,true))  begin
	nameByCode[Userr.Code] = Userr.Name;
end;

Sexr.Code="";
while(LoopMain(Sexr,1,true))  begin
	nameByCode[Sexr.Code] = Sexr.Name;
end;

Plr.Code="";
while(LoopMain(Plr,1,true))  begin
	nameByCode[Plr.Code] = Plr.Name;
end;

Clr.Code="";
while(LoopMain(Clr,1,true))  begin
	nameByCode[Clr.Code] = Clr.Name;
end;

Wgr.Code="";
while(LoopMain(Wgr,1,true))  begin
	nameByCode[Wgr.Code] = Wgr.Name;
end;

Cutr.Code="";
while(loopMain(Cutr,1,true))  begin
	nameByCode[Cutr.Code] = Cutr.Name;
end;

Str.Code="";
while(LoopMain(Str,1,true))  begin
	nameByCode[Str.Code] = Str.Name;
end;

Strapr.Code="";
while(LoopMain(Strapr,1,true))  begin
	nameByCode[Strapr.Code] = Strapr.Name;
end;

Odr.Code="";
while(loopMain(Odr,1,true))  begin
	nameByCode[Odr.Code] = Odr.Name;
end;

return;
end;




function LongInt IVVcRecordDuplicate(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = inner.IVVcRecordDuplicate(IVr,IV2r,long3,long4);
  IVr.CRMid = "";
  IVr.RebateVaucher = "";
  
  IVVcRecordDuplicate = res;
  RETURN;
END;

function LongInt LocationVcRecordDuplicate(var record LocationVc Locr,record LocationVc Loc2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = inner.LocationVcRecordDuplicate(Locr,Loc2r,long3,long4);
  Locr.CRMid = "";
  
  LocationVcRecordDuplicate = res;
  RETURN;
END;

function LongInt GlobalStoresVcRecordDuplicate(var record GlobalStoresVc Locr,record GlobalStoresVc Loc2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  Locr.CRMid = "";
  
  GlobalStoresVcRecordDuplicate = res;
  RETURN;
END;

function LongInt MarcCampVcRecordDuplicate(var record MarcCampVc MCr,record MarcCampVc MC2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  MCr.CRMID = "";
  
  MarcCampVcRecordDuplicate = res;
  RETURN;
END;

function LongInt LCMemberLevelVcRecordDuplicate(var record LCMemberLevelVc Rebr,record LCMemberLevelVc Reb2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = inner.LCMemberLevelVcRecordDuplicate(Rebr,Reb2r,long3,long4);
  Rebr.CRMid = "";
  
  LCMemberLevelVcRecordDuplicate = res;
  RETURN;
END;

function LongInt RebVcRecordDuplicate(var record RebVc Rebr,record RebVc Reb2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = inner.RebVcRecordDuplicate(Rebr,Reb2r,long3,long4);
  Rebr.CRMid = "";
  
  RebVcRecordDuplicate = res;
  RETURN;
END;

global
updating function LongInt BtrxInternalCatVcRecordCheck(var record BtrxInternalCatVc BICr,record BtrxInternalCatVc BIC2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxInternalCatVc oldBICr;
if(blank(BICr.Code))then begin
	oldBICr.Code = "INCAT9999";
	TrHs = true;
	while (LoopBackKey("Code",oldBICr,1,TrHs)) begin
			OldCode = oldBICr.Code;
			TrHs = false;
	end;
	ResetLoop(oldBICr);
	if(blank(OldCode)) then begin oldCode = "INCAT0000"; end;
	NextM4SerialNumber(OldCode,BICr.Code);
end;
return;
end;

global
updating function LongInt BtrxFirstLevelCatVcRecordCheck(var record BtrxFirstLevelCatVc FLCr,record BtrxFirstLevelCatVc FLC2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxFirstLevelCatVc oldFLCr;
if(blank(FLCr.Code))then begin
	oldFLCr.Code = "FILVL9999";
	TrHs = true;
	while (LoopBackKey("Code",oldFLCr,1,TrHs)) begin
			OldCode = oldFLCr.Code;
			TrHs = false;
	end;
	ResetLoop(oldFLCr);
	if(blank(OldCode)) then begin oldCode = "FILVL0000"; end;
	NextM4SerialNumber(OldCode,FLCr.Code);
end;
return;
end;

global
updating function LongInt BtrxSecondLevelCatVcRecordCheck(var record BtrxSecondLevelCatVc SLCr,record BtrxSecondLevelCatVc SLC2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxSecondLevelCatVc oldSLCr;
if(blank(SLCr.Code))then begin
	oldSLCr.Code = "SCLVL9999";
	TrHs = true;
	while (LoopBackKey("Code",oldSLCr,1,TrHs)) begin
			OldCode = oldSLCr.Code;
			TrHs = false;
	end;
	ResetLoop(oldSLCr);
	if(blank(OldCode)) then begin oldCode = "SCLV0000"; end;
	NextM4SerialNumber(OldCode,SLCr.Code);
end;
return;
end;

global
updating function LongInt BtrxThirdLevelCatVcRecordCheck(var record BtrxThirdLevelCatVc TLCr,record BtrxThirdLevelCatVc TLC2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode, tstr;
	boolean TrHs;
	record BtrxThirdLevelCatVc oldTLCr, THrdLVLr;
	integer pos,res;

	res = 0;

	if(blank(TLCr.Code))then begin
		oldTLCr.Code = "THLVL9999";
		TrHs = true;
		while (LoopBackKey("Code",oldTLCr,1,TrHs)) begin
				OldCode = oldTLCr.Code;
				TrHs = false;
		end;
		ResetLoop(oldTLCr);
		if(blank(OldCode)) then begin oldCode = "THLVL0000"; end;
		NextM4SerialNumber(OldCode,TLCr.Code);
	end;
	if(nonblank(TLCr.RelatedTo))then begin
		pos = 0;
		tstr = "";
		ExtractObj(TLCr.RelatedTo,pos,tstr);
		while (NonBlank(tstr)) begin
			THrdLVLr.Code = tstr;
			if(!ReadFirstMain(THrdLVLr,1,true))then begin
				res = -1;
				recordcheckerror(36259,tstr,-1,"RelatedTo");
				goto LBtrxThirdLevelCatVcRecordCheck;
			end;
			ExtractObj(TLCr.RelatedTo,pos,tstr);
		end;
	end;
	LBtrxThirdLevelCatVcRecordCheck:;
	BtrxThirdLevelCatVcRecordCheck = res;
	return;
end;





global
updating function LongInt BtrxFourthLevelCatVcRecordCheck(var record BtrxFourthLevelCatVc FLCr,record BtrxFourthLevelCatVc FLC2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode, tstr;
	boolean TrHs;
	record BtrxFourthLevelCatVc oldFLCr, FrthLVLr;
	integer pos,res;

	res = 0;

	if(blank(FLCr.Code))then begin
		oldFLCr.Code = "FRLVL9999";
		TrHs = true;
		while (LoopBackKey("Code",oldFLCr,1,TrHs)) begin
				OldCode = oldFLCr.Code;
				TrHs = false;
		end;
		ResetLoop(oldFLCr);
		if(blank(OldCode)) then begin oldCode = "FRLVL0000"; end;
		NextM4SerialNumber(OldCode,FLCr.Code);
	end;
	if(nonblank(FLCr.RelatedTo))then begin
		pos = 0;
		tstr = "";
		ExtractObj(FLCr.RelatedTo,pos,tstr);
		while (NonBlank(tstr)) begin
			FrthLVLr.Code = tstr;
			if(!ReadFirstMain(FrthLVLr,1,true))then begin
				res = -1;
				recordcheckerror(36259,tstr,-1,"RelatedTo");
				goto LBtrxThirdLevelCatVcRecordCheck;
			end;
			ExtractObj(FLCr.RelatedTo,pos,tstr);
		end;
	end;
	LBtrxThirdLevelCatVcRecordCheck:;
	BtrxFourthLevelCatVcRecordCheck = res;
	return;
end;





global
updating function LongInt BtrxCertificateVcRecordCheck(var record BtrxCertificateVc BCr,record BtrxCertificateVc BC2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxCertificateVc oldBCr;
if(blank(BCr.Code))then begin
	oldBCr.Code = "CERTF9999";
	TrHs = true;
	while (LoopBackKey("Code",oldBCr,1,TrHs)) begin
			OldCode = oldBCr.Code;
			TrHs = false;
	end;
	ResetLoop(oldBCr);
	if(blank(OldCode)) then begin oldCode = "CERTF0000"; end;
	NextM4SerialNumber(OldCode,BCr.Code);
end;
return;
end;

global
updating function LongInt BtrxWatchMechanVcRecordCheck(var record BtrxWatchMechanVc WMr,record BtrxWatchMechanVc WM2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxWatchMechanVc oldWMr;
if(blank(WMr.Code))then begin
	oldWMr.Code = "WTMEC9999";
	TrHs = true;
	while (LoopBackKey("Code",oldWMr,1,TrHs)) begin
			OldCode = oldWMr.Code;
			TrHs = false;
	end;
	ResetLoop(oldWMr);
	if(blank(OldCode)) then begin oldCode = "WTMEC0000"; end;
	NextM4SerialNumber(OldCode,WMr.Code);
end;
return;
end;

global
updating function LongInt BtrxPowerReserveVcRecordCheck(var record BtrxPowerReserveVc PRr,record BtrxPowerReserveVc PR2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxPowerReserveVc oldPRr;
if(blank(PRr.Code))then begin
	oldPRr.Code = "PWRES9999";
	TrHs = true;
	while (LoopBackKey("Code",oldPRr,1,TrHs)) begin
			OldCode = oldPRr.Code;
			TrHs = false;
	end;
	ResetLoop(oldPRr);
	if(blank(OldCode)) then begin oldCode = "PWRES0000"; end;
	NextM4SerialNumber(OldCode,PRr.Code);
end;
return;
end;

global
updating function LongInt BtrxWatchGradeVcRecordCheck(var record BtrxWatchGradeVc WGr,record BtrxWatchGradeVc WG2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxWatchGradeVc oldWGr;
if(blank(WGr.Code))then begin
	oldWGr.Code = "WTGRD9999";
	TrHs = true;
	while (LoopBackKey("Code",oldWGr,1,TrHs)) begin
			OldCode = oldWGr.Code;
			TrHs = false;
	end;
	ResetLoop(oldWGr);
	if(blank(OldCode)) then begin oldCode = "WTGRD0000"; end;
	NextM4SerialNumber(OldCode,WGr.Code);
end;
return;
end;

global
updating function LongInt BtrxPhoneModelVcRecordCheck(var record BtrxPhoneModelVc PMr,record BtrxPhoneModelVc PM2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxPhoneModelVc oldPMr;
if(blank(PMr.Code))then begin
	oldPMr.Code = "PHMOD9999";
	TrHs = true;
	while (LoopBackKey("Code",oldPMr,1,TrHs)) begin
			OldCode = oldPMr.Code;
			TrHs = false;
	end;
	ResetLoop(oldPMr);
	if(blank(OldCode)) then begin oldCode = "PHMOD0000"; end;
	NextM4SerialNumber(OldCode,PMr.Code);
end;
return;
end;

global
updating function LongInt BtrxFillingVcRecordCheck(var record BtrxFillingVc FLr,record BtrxFillingVc FL2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxFillingVc oldFLr;
if(blank(FLr.Code))then begin
	oldFLr.Code = "FILLN9999";
	TrHs = true;
	while (LoopBackKey("Code",oldFLr,1,TrHs)) begin
			OldCode = oldFLr.Code;
			TrHs = false;
	end;
	ResetLoop(oldFLr);
	if(blank(OldCode)) then begin oldCode = "FILLN0000"; end;
	NextM4SerialNumber(OldCode,FLr.Code);
end;
return;
end;

global
updating function LongInt BtrxTypeVcRecordCheck(var record BtrxTypeVc BTr,record BtrxTypeVc BT2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxTypeVc oldBTr;
if(blank(BTr.Code))then begin
	oldBTr.Code = "BTYPE9999";
	TrHs = true;
	while (LoopBackKey("Code",oldBTr,1,TrHs)) begin
			OldCode = oldBTr.Code;
			TrHs = false;
	end;
	ResetLoop(oldBTr);
	if(blank(OldCode)) then begin oldCode = "BTYPE0000"; end;
	NextM4SerialNumber(OldCode,BTr.Code);
end;
return;
end;






global
updating function LongInt BtrxWaterResistantVcRecordCheck(var record BtrxWaterResistantVc BWRr,record BtrxWaterResistantVc BWR2r,LongInt stat,LongInt long4)
begin
string 255 OldCode;
boolean TrHs;
record BtrxWaterResistantVc OldBWRr;
if(blank(BWRr.Code))then begin
	OldBWRr.Code = "WTRS9999";
	TrHs = true;
	while (LoopBackKey("Code",OldBWRr,1,TrHs)) begin
		OldCode = OldBWRr.Code;
		TrHs = false;
	end;
	ResetLoop(OldBWRr);
	if(blank(OldCode)) then begin oldCode = "WTRS0000"; end;
	NextM4SerialNumber(OldCode,BWRr.Code);
end;
return;
end;



global
updating function LongInt BtrxBrandVcRecordCheck(var record BtrxBrandVc BTRxr,record BtrxBrandVc BTRx2r,LongInt stat,LongInt long4)
begin
	longint res;
	res = 0;
	if (left(CurrentUser,2)!="SA" and CurrentUser!="WS_FAIGAM") then begin
		// MessageBox(0,"Даная класификация создаеться атоматически после создания BPIBrandVc");
		res = -1;
		goto LBtrxBrandVcRecordCheck;
	end;
	if (BTRxr.Code!=BTRx2r.Code) then begin
		// MessageBox(0,"Даная класификация создаеться атоматически после создания BPIBrandVc");
		res = -1;
		goto LBtrxBrandVcRecordCheck;
	end;
	LBtrxBrandVcRecordCheck:;
	BtrxBrandVcRecordCheck = res;
	return;
end;


global
updating function LongInt BtrxMaterialVcRecordCheck(var record BtrxMaterialVc BTRxr,record BtrxMaterialVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxMaterialVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "MTR99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "MTR00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;


global
updating function LongInt BtrxColourVcRecordCheck(var record BtrxColourVc BTRxr,record BtrxColourVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxColourVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "CLR99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "CLR00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;

global
updating function LongInt BtrxOdourVcRecordCheck(var record BtrxOdourVc BTRxr,record BtrxOdourVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxOdourVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "ODR99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "ODR00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;







global
updating function LongInt ConsItemVcRecordCheck(var record ConsItemVc CIr,record ConsItemVc CI2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record ConsItemVc OldCIr;
	LongInt res;
	
	res = 0;
	
	
	if(blank(CIr.Code))then begin
		OldCIr.Code = "IN_9999999";
		TrHs = true;
		while (LoopBackKey("Code",OldCIr,1,TrHs)) begin
			OldCode = OldCIr.Code;
			TrHs = false;
		end;
		ResetLoop(OldCIr);
		if(blank(OldCode)) then begin oldCode = "IN_0000000"; end;
		NextM4SerialNumber(OldCode,CIr.Code);
	end;
	OldCIr.LocCode = CIr.LocCode;
	OldCIr.BrandCode = CIr.BrandCode;
	if(ReadFirstKey("LocCodeBrand",OldCIr,2,true) and left(CurrentUser,2)!="SA")then begin
		RecordCheckError(36258,CIr.LocCode,-1,"LocCode");      
		res = -1; 
		goto LConsItemVcRecordCheck;
	end;
	LConsItemVcRecordCheck:;
	ConsItemVcRecordCheck = res;
	return;
end;









global
updating function LongInt BtrxSexVcRecordCheck(var record BtrxOdourVc BTRxr,record BtrxOdourVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxOdourVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "SX99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "SX00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;


global
updating function LongInt BtrxSizeVcRecordCheck(var record BtrxSizeVc BTRxr,record BtrxSizeVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxSizeVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "SZ99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "SZ00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;



global
updating function LongInt BtrxStoneVcRecordCheck(var record BtrxStoneVc BTRxr,record BtrxStoneVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxStoneVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "STN99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "STN00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;



global
updating function LongInt BtrxStrapVcRecordCheck(var record BtrxStrapVc BTRxr,record BtrxStrapVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxStrapVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "STR99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "STR00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;



global
updating function LongInt BtrxPlatingVcRecordCheck(var record BtrxPlatingVc BTRxr,record BtrxPlatingVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxPlatingVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "PLT99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "PLT00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;


global
updating function LongInt BtrxStrapMatVcRecordCheck(var record BtrxStrapMatVc BTRxr,record BtrxStrapMatVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxStrapMatVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "STRM99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "STRM00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;



global
updating function LongInt BtrxBracelMatVcRecordCheck(var record BtrxBracelMatVc BTRxr,record BtrxBracelMatVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxBracelMatVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "BMT99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "BMT00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;



global
updating function LongInt BtrxComplicationsVcRecordCheck(var record BtrxComplicationsVc BTRxr,record BtrxComplicationsVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxComplicationsVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "CMP99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "CMP00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;



global
updating function LongInt BtrxMicrowaveProtectVcRecordCheck(var record BtrxMicrowaveProtectVc BTRxr,record BtrxMicrowaveProtectVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxMicrowaveProtectVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "MPR99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "MPR00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;


global
updating function LongInt BtrxStoveCompatVcRecordCheck(var record BtrxStoveCompatVc BTRxr,record BtrxStoveCompatVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxStoveCompatVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "STC99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "STC00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;



global
updating function LongInt ExpProvItemRegVcRecordCheck(var record ExpProvItemRegVc BTRxr,record ExpProvItemRegVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record ExpProvItemRegVc OldBTRxr;
	record CUVc CUr;
	Integer res;
	
	res = 0;
	if(BTRxr.SerNr==-1)then begin
		BTRxr.SerNr = NextSerNr("ExpProvItemRegVc",currentdate,-1,false,""); 
	end;
	if(blank(BTRxr.Comment))then begin				// Edit ************************** Ihor Trubachov  11*05*2021
		RecordCheckError(36396,"",-1,"Comment");  
		res = -1;
		goto LExpProvItemRegVcRecordCheck;
	end else begin
		CUr.VEType = 1;
		CUr.Code = BTRxr.Comment;
		if(!ReadFirstKey("VEActCode",CUr,2,true))then begin
			RecordCheckError(36397,"",-1,"Comment");
			res = -1;			
			goto LExpProvItemRegVcRecordCheck;
		end;
	end;
	
	TrHs = true; // Edit ************************** Ihor Trubachov  14*05*2021
	while(LoopMain(OldBTRxr,1,TrHs)) begin
		if(OldBTRxr.Comment == BTRxr.Comment and OldBTRxr.SerNr!=BTRxr.SerNr) then begin 
			RecordCheckError(36401,BTRxr.Comment,-1,"Comment");
			res = -1;			
			TrHs = false;
			goto LExpProvItemRegVcRecordCheck;
		end;
		
		if(nonblank(BTRxr.PrefCode)) then begin
			if(OldBTRxr.PrefCode == BTRxr.PrefCode and OldBTRxr.SerNr != BTRxr.SerNr) then begin 
				RecordCheckError(36400,BTRxr.PrefCode,-1,"PrefCode");
				res = -1;			
				TrHs = false;
				goto LExpProvItemRegVcRecordCheck;
			end;
		end;
		
	end;
	
	LExpProvItemRegVcRecordCheck:;
	ExpProvItemRegVcRecordCheck = res;
	return;
end;


global
updating function LongInt BtrxAllMaterialsVcRecordCheck(var record BtrxAllMaterialsVc BTRxr,record BtrxAllMaterialsVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxAllMaterialsVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "AM999999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "AM000000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;





global
updating function LongInt BtrxGroupsVcRecordCheck(var record BtrxGroupsVc BTRxr,record BtrxGroupsVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxGroupsVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "BTGR999999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "BTGR000000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;






global
updating function LongInt BtrxProductNameVcRecordCheck(var record BtrxProductNameVc BTRxr,record BtrxProductNameVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxProductNameVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "PN99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "PN00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;

global
updating function LongInt BtrxCountInSetVcRecordCheck(var record BtrxCountInSetVc BTRxr,record BtrxCountInSetVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxCountInSetVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "CNT99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "CNT00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;

global
updating function LongInt BtrxCentralCaratVcRecordCheck(var record BtrxCentralCaratVc BTRxr,record BtrxCentralCaratVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxCentralCaratVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "CC99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "CC00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;

global
updating function LongInt BtrxPrecMetalContVcRecordCheck(var record BtrxPrecMetalContVc BTRxr,record BtrxPrecMetalContVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxPrecMetalContVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "PMC99999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "PMC00000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;

global
updating function LongInt BtrxCaseDiamVcRecordCheck(var record BtrxCaseDiamVc BTRxr,record BtrxCaseDiamVc BTRx2r,LongInt stat,LongInt long4)
begin
	string 255 OldCode;
	boolean TrHs;
	record BtrxCaseDiamVc OldBTRxr;
	if(blank(BTRxr.Code))then begin
		OldBTRxr.Code = "CD999999";
		TrHs = true;
		while (LoopBackKey("Code",OldBTRxr,1,TrHs)) begin
			OldCode = OldBTRxr.Code;
			TrHs = false;
		end;
		ResetLoop(OldBTRxr);
		if(blank(OldCode)) then begin oldCode = "CD000000"; end;
		NextM4SerialNumber(OldCode,BTRxr.Code);
	end;
	return;
end;


global
updating function LongInt JSONClassNamesVcRecordCheck(var record JSONClassNamesVc BTRxr,record JSONClassNamesVc BTRx2r,LongInt stat,LongInt long4)
begin
	longint res;
	
	res = 0;
	if(blank(BTRxr.Code))then begin
		RecordCheckError(36358,"",-1,"Code");      
		res = -1;
		goto LJSONClassNamesVcRecordCheck;
	end;
	if(blank(BTRxr.Name))then begin
		RecordCheckError(36359,"",-1,"Name");      
		res = -1;
		goto LJSONClassNamesVcRecordCheck;
	end;
	LJSONClassNamesVcRecordCheck:; 
	JSONClassNamesVcRecordCheck = res;
	return;
end;



global
updating function LongInt ItemDuplicatesVcRecordCheck(var record ItemDuplicatesVc IDr,record ItemDuplicatesVc ID2r,LongInt stat,LongInt long4)
begin
	longint res, ErrComp;
	record INVc INr;
	res = 0;
	
	
	if (stat==Rs_update) then begin
		if (IDr.OrigCode!=ID2r.OrigCode) then begin
			RecordCheckError(36420,"",-1,"OrigCode");      
			res = -1;
			goto LItemDuplicatesVcRecordCheck;
		end;
		if (IDr.DupCode!=ID2r.DupCode) then begin
			RecordCheckError(36420,"",-1,"OrigCode");      
			res = -1;
			goto LItemDuplicatesVcRecordCheck;		
		end;
		if (IDr.OrigBrandCode!=ID2r.OrigBrandCode) then begin
			RecordCheckError(36420,"",-1,"OrigCode");      
			res = -1;
			goto LItemDuplicatesVcRecordCheck;		
		end;
		if (IDr.DupBrandCode!=ID2r.DupBrandCode) then begin
			RecordCheckError(36420,"",-1,"OrigCode");      
			res = -1;
			goto LItemDuplicatesVcRecordCheck;		
		end;
	end;
	
	
	if(blank(IDr.OrigCode))then begin
		RecordCheckError(36361,"",-1,"OrigCode");      
		res = -1;
		goto LItemDuplicatesVcRecordCheck;
	end;
	if(blank(IDr.DupCode))then begin
		RecordCheckError(36362,"",-1,"DupCode");      
		res = -1;
		goto LItemDuplicatesVcRecordCheck;
	end;
	
	INr.Code = IDr.OrigCode;
	if (ReadFirstMain(INr,1,true)) then begin
		if (blank(INr.BPIBrand)) then begin
			RecordCheckError(36363,"",-1,"OrigCode");      
			res = -1;
			goto LItemDuplicatesVcRecordCheck;
		end else begin
			IDr.OrigBrandCode = INr.BPIBrand;
		end;
	end;
	INr.Code = IDr.DupCode;
	if (ReadFirstMain(INr,1,true)) then begin
		if (blank(INr.BPIBrand)) then begin
			RecordCheckError(36364,"",-1,"DupCode");      
			res = -1;
			goto LItemDuplicatesVcRecordCheck;
		end else begin
			IDr.DupBrandCode = INr.BPIBrand;
		end;
	end;
	
	
	if(blank(IDr.OrigBrandCode))then begin
		RecordCheckError(36367,"",-1,"OrigBrandCode");      
		res = -1;
		goto LItemDuplicatesVcRecordCheck;
	end;
	if(blank(IDr.DupBrandCode))then begin
		RecordCheckError(36368,"",-1,"DupBrandCode");      
		res = -1;
		goto LItemDuplicatesVcRecordCheck;
	end;
	
	
	res = CheckDuplicesInAllCompanies(IDr.OrigCode,IDr.DupCode,ErrComp);
	if (res!=0) then begin
		RecordCheckError(res,ErrComp,-1,"");      
		res = -1;
		goto LItemDuplicatesVcRecordCheck;
	end;
	LItemDuplicatesVcRecordCheck:; 
	ItemDuplicatesVcRecordCheck = res;
	return;
end;


global
updating function LongInt ItemDuplicatesVcRecordSaveAfter(var record ItemDuplicatesVc IDr,record ItemDuplicatesVc ID2r,LongInt stat,LongInt long4)
begin
	longint res;
	res = 0;

	CreateDuplicesInAllCompanies (IDr);
	CheckLastPurchPriceForOrigItems (IDr);
		
    FillDuplicateMn2(IDr.OrigCode);// Edit ********************** Ihor Trubachov 03*12*2021

	ItemDuplicatesVcRecordSaveAfter = res; 

return;
end; 


global
updating function LongInt ItemDuplicatesVcRecordUpdateAfter(var record ItemDuplicatesVc IDr,record ItemDuplicatesVc ID2r,LongInt stat,LongInt long4)
begin
	longint res;
	res = 0;

	CreateDuplicesInAllCompanies (IDr);
	CheckLastPurchPriceForOrigItems (IDr);
		
	FillDuplicateMn2(IDr.OrigCode);// Edit ********************** Ihor Trubachov 03*12*2021
		
	ItemDuplicatesVcRecordUpdateAfter = res; 
return;
end; 




global
updating function LongInt ItemDuplicatesVcRecordRemove(var record ItemDuplicatesVc IDr,record ItemDuplicatesVc ID2r,LongInt stat,LongInt long4)
begin
  LongInt res;
	logtext(0,"ItemDuplicatesVcRecordRemove");
  DellDuplicesInAllCompanies (IDr);
  ItemDuplicatesVcRecordRemove = res;
  RETURN;
END;




global
function LongInt BPIBrandVcRecordRemoveTest(var record BPIBrandVc BBr,record BPIBrandVc BB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 1;

  if (left(currentuser,2)!="SA") then begin
    res = 0;
    MessageBox(36239,"");
    goto LBPIBrandVcRecordRemoveTest;
  end;
LBPIBrandVcRecordRemoveTest:;
  BPIBrandVcRecordRemoveTest = res;
  RETURN;
END;


global
updating function LongInt Akcia50ForSecondBrandVcRecordCheck(var record Akcia50ForSecondBrandVc Akcr,record Akcia50ForSecondBrandVc Akc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
	
	logtext(0,"Akcia50ForSecondBrandVcRecordCheck");
	
	if(Akcr.SerNr<0)then begin
		Akcr.SerNr = NextSerNr("Akcia50ForSecondBrandVc",currentdate,-1,false,"");;
	end;
	
	res = 0;
	
	LAkcia50ForSecondBrandVcRecordCheck:;
  Akcia50ForSecondBrandVcRecordCheck = res;
return;
end;